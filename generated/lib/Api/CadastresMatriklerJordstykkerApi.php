<?php
/**
 * CadastresMatriklerJordstykkerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CadastresMatriklerJordstykkerApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CadastresMatriklerJordstykkerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getCadastreById' => [
            'application/json',
        ],
        'getCadastres' => [
            'application/json',
        ],
        'getCadastresAdvanced' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCadastreById
     *
     * Get Cadastre By Id
     *
     * @param  mixed $id Jordstykke ID (required)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCadastreById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CadastreMapGeoJSON|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCadastreById($id, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCadastreById'][0])
    {
        list($response) = $this->getCadastreByIdWithHttpInfo($id, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getCadastreByIdWithHttpInfo
     *
     * Get Cadastre By Id
     *
     * @param  mixed $id Jordstykke ID (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCadastreById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CadastreMapGeoJSON|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCadastreByIdWithHttpInfo($id, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCadastreById'][0])
    {
        $request = $this->getCadastreByIdRequest($id, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CadastreMapGeoJSON' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CadastreMapGeoJSON' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CadastreMapGeoJSON', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\CadastreMapGeoJSON';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CadastreMapGeoJSON',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCadastreByIdAsync
     *
     * Get Cadastre By Id
     *
     * @param  mixed $id Jordstykke ID (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCadastreById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCadastreByIdAsync($id, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCadastreById'][0])
    {
        return $this->getCadastreByIdAsyncWithHttpInfo($id, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCadastreByIdAsyncWithHttpInfo
     *
     * Get Cadastre By Id
     *
     * @param  mixed $id Jordstykke ID (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCadastreById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCadastreByIdAsyncWithHttpInfo($id, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCadastreById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CadastreMapGeoJSON';
        $request = $this->getCadastreByIdRequest($id, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCadastreById'
     *
     * @param  mixed $id Jordstykke ID (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCadastreById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCadastreByIdRequest($id, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCadastreById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCadastreById'
            );
        }




        $resourcePath = '/api/v2/cadastres/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCadastres
     *
     * Get Cadastres
     *
     * @param  mixed $id id (optional)
     * @param  mixed $sfe_number sfe_number (optional)
     * @param  mixed $land_lot_code land_lot_code (optional)
     * @param  mixed $cadastre_number cadastre_number (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size size (optional)
     * @param  mixed $offset offset (optional)
     * @param  mixed $sort sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order order (optional)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCadastres'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCadastres($id = null, $sfe_number = null, $land_lot_code = null, $cadastre_number = null, $x = null, $y = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCadastres'][0])
    {
        list($response) = $this->getCadastresWithHttpInfo($id, $sfe_number, $land_lot_code, $cadastre_number, $x, $y, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getCadastresWithHttpInfo
     *
     * Get Cadastres
     *
     * @param  mixed $id (optional)
     * @param  mixed $sfe_number (optional)
     * @param  mixed $land_lot_code (optional)
     * @param  mixed $cadastre_number (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCadastres'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCadastresWithHttpInfo($id = null, $sfe_number = null, $land_lot_code = null, $cadastre_number = null, $x = null, $y = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCadastres'][0])
    {
        $request = $this->getCadastresRequest($id, $sfe_number, $land_lot_code, $cadastre_number, $x, $y, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCadastresAsync
     *
     * Get Cadastres
     *
     * @param  mixed $id (optional)
     * @param  mixed $sfe_number (optional)
     * @param  mixed $land_lot_code (optional)
     * @param  mixed $cadastre_number (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCadastres'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCadastresAsync($id = null, $sfe_number = null, $land_lot_code = null, $cadastre_number = null, $x = null, $y = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCadastres'][0])
    {
        return $this->getCadastresAsyncWithHttpInfo($id, $sfe_number, $land_lot_code, $cadastre_number, $x, $y, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCadastresAsyncWithHttpInfo
     *
     * Get Cadastres
     *
     * @param  mixed $id (optional)
     * @param  mixed $sfe_number (optional)
     * @param  mixed $land_lot_code (optional)
     * @param  mixed $cadastre_number (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCadastres'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCadastresAsyncWithHttpInfo($id = null, $sfe_number = null, $land_lot_code = null, $cadastre_number = null, $x = null, $y = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCadastres'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON';
        $request = $this->getCadastresRequest($id, $sfe_number, $land_lot_code, $cadastre_number, $x, $y, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCadastres'
     *
     * @param  mixed $id (optional)
     * @param  mixed $sfe_number (optional)
     * @param  mixed $land_lot_code (optional)
     * @param  mixed $cadastre_number (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCadastres'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCadastresRequest($id = null, $sfe_number = null, $land_lot_code = null, $cadastre_number = null, $x = null, $y = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCadastres'][0])
    {








        if ($size !== null && $size > 1000.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CadastresMatriklerJordstykkerApi.getCadastres, must be smaller than or equal to 1000.0.');
        }
        if ($size !== null && $size < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CadastresMatriklerJordstykkerApi.getCadastres, must be bigger than or equal to 0.0.');
        }
        
        if ($offset !== null && $offset > 3000.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CadastresMatriklerJordstykkerApi.getCadastres, must be smaller than or equal to 3000.0.');
        }
        if ($offset !== null && $offset < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CadastresMatriklerJordstykkerApi.getCadastres, must be bigger than or equal to 0.0.');
        }
        





        $resourcePath = '/api/v2/cadastres';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sfe_number,
            'sfe_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $land_lot_code,
            'land_lot_code', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cadastre_number,
            'cadastre_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $x,
            'x', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $y,
            'y', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'ResightsApiModelsResponseSortOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCadastresAdvanced
     *
     * Get Cadastres Advanced
     *
     * @param  mixed $size size (optional)
     * @param  mixed $offset offset (optional)
     * @param  array<string,mixed> $request_body request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCadastresAdvanced'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCadastresAdvanced($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCadastresAdvanced'][0])
    {
        list($response) = $this->getCadastresAdvancedWithHttpInfo($size, $offset, $request_body, $contentType);
        return $response;
    }

    /**
     * Operation getCadastresAdvancedWithHttpInfo
     *
     * Get Cadastres Advanced
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCadastresAdvanced'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCadastresAdvancedWithHttpInfo($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCadastresAdvanced'][0])
    {
        $request = $this->getCadastresAdvancedRequest($size, $offset, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCadastresAdvancedAsync
     *
     * Get Cadastres Advanced
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCadastresAdvanced'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCadastresAdvancedAsync($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCadastresAdvanced'][0])
    {
        return $this->getCadastresAdvancedAsyncWithHttpInfo($size, $offset, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCadastresAdvancedAsyncWithHttpInfo
     *
     * Get Cadastres Advanced
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCadastresAdvanced'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCadastresAdvancedAsyncWithHttpInfo($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCadastresAdvanced'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GeoJSONFeatureCollectionCadastreMapGeoJSON';
        $request = $this->getCadastresAdvancedRequest($size, $offset, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCadastresAdvanced'
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCadastresAdvanced'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCadastresAdvancedRequest($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCadastresAdvanced'][0])
    {

        if ($size !== null && $size > 3000.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CadastresMatriklerJordstykkerApi.getCadastresAdvanced, must be smaller than or equal to 3000.0.');
        }
        if ($size !== null && $size < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CadastresMatriklerJordstykkerApi.getCadastresAdvanced, must be bigger than or equal to 0.0.');
        }
        
        if ($offset !== null && $offset > 3000.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CadastresMatriklerJordstykkerApi.getCadastresAdvanced, must be smaller than or equal to 3000.0.');
        }
        if ($offset !== null && $offset < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CadastresMatriklerJordstykkerApi.getCadastresAdvanced, must be bigger than or equal to 0.0.');
        }
        


        $resourcePath = '/api/v2/cadastres';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
