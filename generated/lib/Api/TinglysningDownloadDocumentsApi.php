<?php
/**
 * TinglysningDownloadDocumentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TinglysningDownloadDocumentsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TinglysningDownloadDocumentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'convertPdfIdToAktUuid' => [
            'application/json',
        ],
        'downloadAktByUuid' => [
            'application/json',
        ],
        'downloadAnnexByUuid' => [
            'application/json',
        ],
        'downloadAtdByUuid' => [
            'application/json',
        ],
        'downloadDokumentanmeldelseByUuid' => [
            'application/json',
        ],
        'downloadTingbogsattestByUuid' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation convertPdfIdToAktUuid
     *
     * Convert Pdf Id To Akt Uuid
     *
     * @param  mixed $pdf_id pdf_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['convertPdfIdToAktUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SoegPdfIdModel|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function convertPdfIdToAktUuid($pdf_id, string $contentType = self::contentTypes['convertPdfIdToAktUuid'][0])
    {
        list($response) = $this->convertPdfIdToAktUuidWithHttpInfo($pdf_id, $contentType);
        return $response;
    }

    /**
     * Operation convertPdfIdToAktUuidWithHttpInfo
     *
     * Convert Pdf Id To Akt Uuid
     *
     * @param  mixed $pdf_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['convertPdfIdToAktUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SoegPdfIdModel|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertPdfIdToAktUuidWithHttpInfo($pdf_id, string $contentType = self::contentTypes['convertPdfIdToAktUuid'][0])
    {
        $request = $this->convertPdfIdToAktUuidRequest($pdf_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SoegPdfIdModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SoegPdfIdModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SoegPdfIdModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\SoegPdfIdModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SoegPdfIdModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation convertPdfIdToAktUuidAsync
     *
     * Convert Pdf Id To Akt Uuid
     *
     * @param  mixed $pdf_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['convertPdfIdToAktUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertPdfIdToAktUuidAsync($pdf_id, string $contentType = self::contentTypes['convertPdfIdToAktUuid'][0])
    {
        return $this->convertPdfIdToAktUuidAsyncWithHttpInfo($pdf_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertPdfIdToAktUuidAsyncWithHttpInfo
     *
     * Convert Pdf Id To Akt Uuid
     *
     * @param  mixed $pdf_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['convertPdfIdToAktUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertPdfIdToAktUuidAsyncWithHttpInfo($pdf_id, string $contentType = self::contentTypes['convertPdfIdToAktUuid'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SoegPdfIdModel';
        $request = $this->convertPdfIdToAktUuidRequest($pdf_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertPdfIdToAktUuid'
     *
     * @param  mixed $pdf_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['convertPdfIdToAktUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function convertPdfIdToAktUuidRequest($pdf_id, string $contentType = self::contentTypes['convertPdfIdToAktUuid'][0])
    {

        // verify the required parameter 'pdf_id' is set
        if ($pdf_id === null || (is_array($pdf_id) && count($pdf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pdf_id when calling convertPdfIdToAktUuid'
            );
        }


        $resourcePath = '/api/v2/tinglysning/convert/{pdf_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pdf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pdf_id' . '}',
                ObjectSerializer::toPathValue($pdf_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadAktByUuid
     *
     * Download Akt By Uuid
     *
     * @param  mixed $uuid uuid (required)
     * @param  mixed $filename filename (required)
     * @param  mixed $entity entity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadAktByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function downloadAktByUuid($uuid, $filename, $entity = null, string $contentType = self::contentTypes['downloadAktByUuid'][0])
    {
        $this->downloadAktByUuidWithHttpInfo($uuid, $filename, $entity, $contentType);
    }

    /**
     * Operation downloadAktByUuidWithHttpInfo
     *
     * Download Akt By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  mixed $filename (required)
     * @param  mixed $entity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadAktByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadAktByUuidWithHttpInfo($uuid, $filename, $entity = null, string $contentType = self::contentTypes['downloadAktByUuid'][0])
    {
        $request = $this->downloadAktByUuidRequest($uuid, $filename, $entity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation downloadAktByUuidAsync
     *
     * Download Akt By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  mixed $filename (required)
     * @param  mixed $entity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadAktByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadAktByUuidAsync($uuid, $filename, $entity = null, string $contentType = self::contentTypes['downloadAktByUuid'][0])
    {
        return $this->downloadAktByUuidAsyncWithHttpInfo($uuid, $filename, $entity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadAktByUuidAsyncWithHttpInfo
     *
     * Download Akt By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  mixed $filename (required)
     * @param  mixed $entity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadAktByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadAktByUuidAsyncWithHttpInfo($uuid, $filename, $entity = null, string $contentType = self::contentTypes['downloadAktByUuid'][0])
    {
        $returnType = '';
        $request = $this->downloadAktByUuidRequest($uuid, $filename, $entity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadAktByUuid'
     *
     * @param  mixed $uuid (required)
     * @param  mixed $filename (required)
     * @param  mixed $entity (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadAktByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadAktByUuidRequest($uuid, $filename, $entity = null, string $contentType = self::contentTypes['downloadAktByUuid'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling downloadAktByUuid'
            );
        }

        // verify the required parameter 'filename' is set
        if ($filename === null || (is_array($filename) && count($filename) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filename when calling downloadAktByUuid'
            );
        }



        $resourcePath = '/api/v2/tinglysning/download/akt/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filename,
            'filename', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entity,
            'entity', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadAnnexByUuid
     *
     * Download Annex By Uuid
     *
     * @param  mixed $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadAnnexByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function downloadAnnexByUuid($uuid, string $contentType = self::contentTypes['downloadAnnexByUuid'][0])
    {
        $this->downloadAnnexByUuidWithHttpInfo($uuid, $contentType);
    }

    /**
     * Operation downloadAnnexByUuidWithHttpInfo
     *
     * Download Annex By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadAnnexByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadAnnexByUuidWithHttpInfo($uuid, string $contentType = self::contentTypes['downloadAnnexByUuid'][0])
    {
        $request = $this->downloadAnnexByUuidRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation downloadAnnexByUuidAsync
     *
     * Download Annex By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadAnnexByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadAnnexByUuidAsync($uuid, string $contentType = self::contentTypes['downloadAnnexByUuid'][0])
    {
        return $this->downloadAnnexByUuidAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadAnnexByUuidAsyncWithHttpInfo
     *
     * Download Annex By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadAnnexByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadAnnexByUuidAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['downloadAnnexByUuid'][0])
    {
        $returnType = '';
        $request = $this->downloadAnnexByUuidRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadAnnexByUuid'
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadAnnexByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadAnnexByUuidRequest($uuid, string $contentType = self::contentTypes['downloadAnnexByUuid'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling downloadAnnexByUuid'
            );
        }


        $resourcePath = '/api/v2/tinglysning/download/annex/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadAtdByUuid
     *
     * Download Atd By Uuid
     *
     * @param  mixed $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadAtdByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function downloadAtdByUuid($uuid, string $contentType = self::contentTypes['downloadAtdByUuid'][0])
    {
        $this->downloadAtdByUuidWithHttpInfo($uuid, $contentType);
    }

    /**
     * Operation downloadAtdByUuidWithHttpInfo
     *
     * Download Atd By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadAtdByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadAtdByUuidWithHttpInfo($uuid, string $contentType = self::contentTypes['downloadAtdByUuid'][0])
    {
        $request = $this->downloadAtdByUuidRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation downloadAtdByUuidAsync
     *
     * Download Atd By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadAtdByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadAtdByUuidAsync($uuid, string $contentType = self::contentTypes['downloadAtdByUuid'][0])
    {
        return $this->downloadAtdByUuidAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadAtdByUuidAsyncWithHttpInfo
     *
     * Download Atd By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadAtdByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadAtdByUuidAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['downloadAtdByUuid'][0])
    {
        $returnType = '';
        $request = $this->downloadAtdByUuidRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadAtdByUuid'
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadAtdByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadAtdByUuidRequest($uuid, string $contentType = self::contentTypes['downloadAtdByUuid'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling downloadAtdByUuid'
            );
        }


        $resourcePath = '/api/v2/tinglysning/download/atd/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadDokumentanmeldelseByUuid
     *
     * Download Dokumentanmeldelse By Uuid
     *
     * @param  mixed $document_uuid document_uuid (required)
     * @param  mixed $report_uuid report_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDokumentanmeldelseByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function downloadDokumentanmeldelseByUuid($document_uuid, $report_uuid, string $contentType = self::contentTypes['downloadDokumentanmeldelseByUuid'][0])
    {
        $this->downloadDokumentanmeldelseByUuidWithHttpInfo($document_uuid, $report_uuid, $contentType);
    }

    /**
     * Operation downloadDokumentanmeldelseByUuidWithHttpInfo
     *
     * Download Dokumentanmeldelse By Uuid
     *
     * @param  mixed $document_uuid (required)
     * @param  mixed $report_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDokumentanmeldelseByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadDokumentanmeldelseByUuidWithHttpInfo($document_uuid, $report_uuid, string $contentType = self::contentTypes['downloadDokumentanmeldelseByUuid'][0])
    {
        $request = $this->downloadDokumentanmeldelseByUuidRequest($document_uuid, $report_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation downloadDokumentanmeldelseByUuidAsync
     *
     * Download Dokumentanmeldelse By Uuid
     *
     * @param  mixed $document_uuid (required)
     * @param  mixed $report_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDokumentanmeldelseByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadDokumentanmeldelseByUuidAsync($document_uuid, $report_uuid, string $contentType = self::contentTypes['downloadDokumentanmeldelseByUuid'][0])
    {
        return $this->downloadDokumentanmeldelseByUuidAsyncWithHttpInfo($document_uuid, $report_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadDokumentanmeldelseByUuidAsyncWithHttpInfo
     *
     * Download Dokumentanmeldelse By Uuid
     *
     * @param  mixed $document_uuid (required)
     * @param  mixed $report_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDokumentanmeldelseByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadDokumentanmeldelseByUuidAsyncWithHttpInfo($document_uuid, $report_uuid, string $contentType = self::contentTypes['downloadDokumentanmeldelseByUuid'][0])
    {
        $returnType = '';
        $request = $this->downloadDokumentanmeldelseByUuidRequest($document_uuid, $report_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadDokumentanmeldelseByUuid'
     *
     * @param  mixed $document_uuid (required)
     * @param  mixed $report_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDokumentanmeldelseByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadDokumentanmeldelseByUuidRequest($document_uuid, $report_uuid, string $contentType = self::contentTypes['downloadDokumentanmeldelseByUuid'][0])
    {

        // verify the required parameter 'document_uuid' is set
        if ($document_uuid === null || (is_array($document_uuid) && count($document_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_uuid when calling downloadDokumentanmeldelseByUuid'
            );
        }

        // verify the required parameter 'report_uuid' is set
        if ($report_uuid === null || (is_array($report_uuid) && count($report_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_uuid when calling downloadDokumentanmeldelseByUuid'
            );
        }


        $resourcePath = '/api/v2/tinglysning/download/dokumentanmeldelse/{document_uuid}/{report_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'document_uuid' . '}',
                ObjectSerializer::toPathValue($document_uuid),
                $resourcePath
            );
        }
        // path params
        if ($report_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'report_uuid' . '}',
                ObjectSerializer::toPathValue($report_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadTingbogsattestByUuid
     *
     * Download Tingbogsattest By Uuid
     *
     * @param  mixed $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadTingbogsattestByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function downloadTingbogsattestByUuid($uuid, string $contentType = self::contentTypes['downloadTingbogsattestByUuid'][0])
    {
        $this->downloadTingbogsattestByUuidWithHttpInfo($uuid, $contentType);
    }

    /**
     * Operation downloadTingbogsattestByUuidWithHttpInfo
     *
     * Download Tingbogsattest By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadTingbogsattestByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadTingbogsattestByUuidWithHttpInfo($uuid, string $contentType = self::contentTypes['downloadTingbogsattestByUuid'][0])
    {
        $request = $this->downloadTingbogsattestByUuidRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation downloadTingbogsattestByUuidAsync
     *
     * Download Tingbogsattest By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadTingbogsattestByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadTingbogsattestByUuidAsync($uuid, string $contentType = self::contentTypes['downloadTingbogsattestByUuid'][0])
    {
        return $this->downloadTingbogsattestByUuidAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadTingbogsattestByUuidAsyncWithHttpInfo
     *
     * Download Tingbogsattest By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadTingbogsattestByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadTingbogsattestByUuidAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['downloadTingbogsattestByUuid'][0])
    {
        $returnType = '';
        $request = $this->downloadTingbogsattestByUuidRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadTingbogsattestByUuid'
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadTingbogsattestByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadTingbogsattestByUuidRequest($uuid, string $contentType = self::contentTypes['downloadTingbogsattestByUuid'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling downloadTingbogsattestByUuid'
            );
        }


        $resourcePath = '/api/v2/tinglysning/download/tingbogsattest/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
