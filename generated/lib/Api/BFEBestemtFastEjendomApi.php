<?php
/**
 * BFEBestemtFastEjendomApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * BFEBestemtFastEjendomApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BFEBestemtFastEjendomApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getProperties' => [
            'application/json',
        ],
        'getPropertiesAdvanced' => [
            'application/json',
        ],
        'getPropertyByBfeNumber' => [
            'application/json',
        ],
        'getPropertyDetailsBbr' => [
            'application/json',
        ],
        'getPropertyDetailsEbr' => [
            'application/json',
        ],
        'getPropertyDetailsOverview' => [
            'application/json',
        ],
        'getPropertyDetailsOwners' => [
            'application/json',
        ],
        'getPropertyDetailsTax' => [
            'application/json',
        ],
        'getPropertyIndicators' => [
            'application/json',
        ],
        'getPropertyTrades' => [
            'application/json',
        ],
        'getPropertyTradesLatest' => [
            'application/json',
        ],
        'getPropertyValuationLatest' => [
            'application/json',
        ],
        'getPropertyValuationNew' => [
            'application/json',
        ],
        'getPropertyValuations' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getProperties
     *
     * Get Properties
     *
     * @param  mixed $bfe_number bfe_number (optional)
     * @param  mixed $sfe_number sfe_number (optional)
     * @param  mixed $esr_number esr_number (optional)
     * @param  mixed $municipality_code municipality_code (optional)
     * @param  mixed $property_number property_number (optional)
     * @param  mixed $land_lot_code land_lot_code (optional)
     * @param  mixed $cadastre_number cadastre_number (optional)
     * @param  mixed $address address (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size size (optional)
     * @param  mixed $offset offset (optional)
     * @param  mixed $sort sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order order (optional)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProperties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getProperties($bfe_number = null, $sfe_number = null, $esr_number = null, $municipality_code = null, $property_number = null, $land_lot_code = null, $cadastre_number = null, $address = null, $x = null, $y = null, $distance = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getProperties'][0])
    {
        list($response) = $this->getPropertiesWithHttpInfo($bfe_number, $sfe_number, $esr_number, $municipality_code, $property_number, $land_lot_code, $cadastre_number, $address, $x, $y, $distance, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getPropertiesWithHttpInfo
     *
     * Get Properties
     *
     * @param  mixed $bfe_number (optional)
     * @param  mixed $sfe_number (optional)
     * @param  mixed $esr_number (optional)
     * @param  mixed $municipality_code (optional)
     * @param  mixed $property_number (optional)
     * @param  mixed $land_lot_code (optional)
     * @param  mixed $cadastre_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProperties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertiesWithHttpInfo($bfe_number = null, $sfe_number = null, $esr_number = null, $municipality_code = null, $property_number = null, $land_lot_code = null, $cadastre_number = null, $address = null, $x = null, $y = null, $distance = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getProperties'][0])
    {
        $request = $this->getPropertiesRequest($bfe_number, $sfe_number, $esr_number, $municipality_code, $property_number, $land_lot_code, $cadastre_number, $address, $x, $y, $distance, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertiesAsync
     *
     * Get Properties
     *
     * @param  mixed $bfe_number (optional)
     * @param  mixed $sfe_number (optional)
     * @param  mixed $esr_number (optional)
     * @param  mixed $municipality_code (optional)
     * @param  mixed $property_number (optional)
     * @param  mixed $land_lot_code (optional)
     * @param  mixed $cadastre_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertiesAsync($bfe_number = null, $sfe_number = null, $esr_number = null, $municipality_code = null, $property_number = null, $land_lot_code = null, $cadastre_number = null, $address = null, $x = null, $y = null, $distance = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getProperties'][0])
    {
        return $this->getPropertiesAsyncWithHttpInfo($bfe_number, $sfe_number, $esr_number, $municipality_code, $property_number, $land_lot_code, $cadastre_number, $address, $x, $y, $distance, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertiesAsyncWithHttpInfo
     *
     * Get Properties
     *
     * @param  mixed $bfe_number (optional)
     * @param  mixed $sfe_number (optional)
     * @param  mixed $esr_number (optional)
     * @param  mixed $municipality_code (optional)
     * @param  mixed $property_number (optional)
     * @param  mixed $land_lot_code (optional)
     * @param  mixed $cadastre_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertiesAsyncWithHttpInfo($bfe_number = null, $sfe_number = null, $esr_number = null, $municipality_code = null, $property_number = null, $land_lot_code = null, $cadastre_number = null, $address = null, $x = null, $y = null, $distance = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getProperties'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse';
        $request = $this->getPropertiesRequest($bfe_number, $sfe_number, $esr_number, $municipality_code, $property_number, $land_lot_code, $cadastre_number, $address, $x, $y, $distance, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProperties'
     *
     * @param  mixed $bfe_number (optional)
     * @param  mixed $sfe_number (optional)
     * @param  mixed $esr_number (optional)
     * @param  mixed $municipality_code (optional)
     * @param  mixed $property_number (optional)
     * @param  mixed $land_lot_code (optional)
     * @param  mixed $cadastre_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertiesRequest($bfe_number = null, $sfe_number = null, $esr_number = null, $municipality_code = null, $property_number = null, $land_lot_code = null, $cadastre_number = null, $address = null, $x = null, $y = null, $distance = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getProperties'][0])
    {













        if ($size !== null && $size > 1000.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling BFEBestemtFastEjendomApi.getProperties, must be smaller than or equal to 1000.0.');
        }
        if ($size !== null && $size < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling BFEBestemtFastEjendomApi.getProperties, must be bigger than or equal to 0.0.');
        }
        
        if ($offset !== null && $offset > 3000.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BFEBestemtFastEjendomApi.getProperties, must be smaller than or equal to 3000.0.');
        }
        if ($offset !== null && $offset < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BFEBestemtFastEjendomApi.getProperties, must be bigger than or equal to 0.0.');
        }
        





        $resourcePath = '/api/v2/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bfe_number,
            'bfe_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sfe_number,
            'sfe_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $esr_number,
            'esr_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $municipality_code,
            'municipality_code', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $property_number,
            'property_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $land_lot_code,
            'land_lot_code', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cadastre_number,
            'cadastre_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $x,
            'x', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $y,
            'y', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $distance,
            'distance', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'ResightsApiModelsResponseSortOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertiesAdvanced
     *
     * Get Properties Advanced
     *
     * @param  mixed $size size (optional)
     * @param  mixed $offset offset (optional)
     * @param  array<string,mixed> $request_body request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertiesAdvanced'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getPropertiesAdvanced($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getPropertiesAdvanced'][0])
    {
        list($response) = $this->getPropertiesAdvancedWithHttpInfo($size, $offset, $request_body, $contentType);
        return $response;
    }

    /**
     * Operation getPropertiesAdvancedWithHttpInfo
     *
     * Get Properties Advanced
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertiesAdvanced'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertiesAdvancedWithHttpInfo($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getPropertiesAdvanced'][0])
    {
        $request = $this->getPropertiesAdvancedRequest($size, $offset, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertiesAdvancedAsync
     *
     * Get Properties Advanced
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertiesAdvanced'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertiesAdvancedAsync($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getPropertiesAdvanced'][0])
    {
        return $this->getPropertiesAdvancedAsyncWithHttpInfo($size, $offset, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertiesAdvancedAsyncWithHttpInfo
     *
     * Get Properties Advanced
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertiesAdvanced'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertiesAdvancedAsyncWithHttpInfo($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getPropertiesAdvanced'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ESResponseModelBFENumberPropertyResponse';
        $request = $this->getPropertiesAdvancedRequest($size, $offset, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertiesAdvanced'
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertiesAdvanced'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertiesAdvancedRequest($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getPropertiesAdvanced'][0])
    {

        if ($size !== null && $size > 1000.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling BFEBestemtFastEjendomApi.getPropertiesAdvanced, must be smaller than or equal to 1000.0.');
        }
        if ($size !== null && $size < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling BFEBestemtFastEjendomApi.getPropertiesAdvanced, must be bigger than or equal to 0.0.');
        }
        
        if ($offset !== null && $offset > 3000.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BFEBestemtFastEjendomApi.getPropertiesAdvanced, must be smaller than or equal to 3000.0.');
        }
        if ($offset !== null && $offset < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BFEBestemtFastEjendomApi.getPropertiesAdvanced, must be bigger than or equal to 0.0.');
        }
        


        $resourcePath = '/api/v2/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertyByBfeNumber
     *
     * Get Property By Bfe Number
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyByBfeNumber'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BFENumberPropertyResponse|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getPropertyByBfeNumber($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyByBfeNumber'][0])
    {
        list($response) = $this->getPropertyByBfeNumberWithHttpInfo($bfe_number, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getPropertyByBfeNumberWithHttpInfo
     *
     * Get Property By Bfe Number
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyByBfeNumber'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BFENumberPropertyResponse|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertyByBfeNumberWithHttpInfo($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyByBfeNumber'][0])
    {
        $request = $this->getPropertyByBfeNumberRequest($bfe_number, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BFENumberPropertyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BFENumberPropertyResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BFENumberPropertyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\BFENumberPropertyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BFENumberPropertyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertyByBfeNumberAsync
     *
     * Get Property By Bfe Number
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyByBfeNumber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyByBfeNumberAsync($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyByBfeNumber'][0])
    {
        return $this->getPropertyByBfeNumberAsyncWithHttpInfo($bfe_number, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertyByBfeNumberAsyncWithHttpInfo
     *
     * Get Property By Bfe Number
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyByBfeNumber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyByBfeNumberAsyncWithHttpInfo($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyByBfeNumber'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BFENumberPropertyResponse';
        $request = $this->getPropertyByBfeNumberRequest($bfe_number, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertyByBfeNumber'
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyByBfeNumber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertyByBfeNumberRequest($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyByBfeNumber'][0])
    {

        // verify the required parameter 'bfe_number' is set
        if ($bfe_number === null || (is_array($bfe_number) && count($bfe_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bfe_number when calling getPropertyByBfeNumber'
            );
        }




        $resourcePath = '/api/v2/properties/{bfe_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($bfe_number !== null) {
            $resourcePath = str_replace(
                '{' . 'bfe_number' . '}',
                ObjectSerializer::toPathValue($bfe_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertyDetailsBbr
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsBbr'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BBRResponse|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getPropertyDetailsBbr($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsBbr'][0])
    {
        list($response) = $this->getPropertyDetailsBbrWithHttpInfo($bfe_number, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getPropertyDetailsBbrWithHttpInfo
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsBbr'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BBRResponse|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertyDetailsBbrWithHttpInfo($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsBbr'][0])
    {
        $request = $this->getPropertyDetailsBbrRequest($bfe_number, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BBRResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BBRResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BBRResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\BBRResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BBRResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertyDetailsBbrAsync
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsBbr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyDetailsBbrAsync($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsBbr'][0])
    {
        return $this->getPropertyDetailsBbrAsyncWithHttpInfo($bfe_number, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertyDetailsBbrAsyncWithHttpInfo
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsBbr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyDetailsBbrAsyncWithHttpInfo($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsBbr'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BBRResponse';
        $request = $this->getPropertyDetailsBbrRequest($bfe_number, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertyDetailsBbr'
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsBbr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertyDetailsBbrRequest($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsBbr'][0])
    {

        // verify the required parameter 'bfe_number' is set
        if ($bfe_number === null || (is_array($bfe_number) && count($bfe_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bfe_number when calling getPropertyDetailsBbr'
            );
        }




        $resourcePath = '/api/v2/properties/{bfe_number}/bbr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($bfe_number !== null) {
            $resourcePath = str_replace(
                '{' . 'bfe_number' . '}',
                ObjectSerializer::toPathValue($bfe_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertyDetailsEbr
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsEbr'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EBRPropertyLocationResponse|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getPropertyDetailsEbr($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsEbr'][0])
    {
        list($response) = $this->getPropertyDetailsEbrWithHttpInfo($bfe_number, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getPropertyDetailsEbrWithHttpInfo
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsEbr'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EBRPropertyLocationResponse|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertyDetailsEbrWithHttpInfo($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsEbr'][0])
    {
        $request = $this->getPropertyDetailsEbrRequest($bfe_number, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EBRPropertyLocationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EBRPropertyLocationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EBRPropertyLocationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\EBRPropertyLocationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EBRPropertyLocationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertyDetailsEbrAsync
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsEbr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyDetailsEbrAsync($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsEbr'][0])
    {
        return $this->getPropertyDetailsEbrAsyncWithHttpInfo($bfe_number, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertyDetailsEbrAsyncWithHttpInfo
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsEbr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyDetailsEbrAsyncWithHttpInfo($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsEbr'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EBRPropertyLocationResponse';
        $request = $this->getPropertyDetailsEbrRequest($bfe_number, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertyDetailsEbr'
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsEbr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertyDetailsEbrRequest($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsEbr'][0])
    {

        // verify the required parameter 'bfe_number' is set
        if ($bfe_number === null || (is_array($bfe_number) && count($bfe_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bfe_number when calling getPropertyDetailsEbr'
            );
        }




        $resourcePath = '/api/v2/properties/{bfe_number}/ebr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($bfe_number !== null) {
            $resourcePath = str_replace(
                '{' . 'bfe_number' . '}',
                ObjectSerializer::toPathValue($bfe_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertyDetailsOverview
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsOverview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BFENumberOverview|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getPropertyDetailsOverview($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsOverview'][0])
    {
        list($response) = $this->getPropertyDetailsOverviewWithHttpInfo($bfe_number, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getPropertyDetailsOverviewWithHttpInfo
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsOverview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BFENumberOverview|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertyDetailsOverviewWithHttpInfo($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsOverview'][0])
    {
        $request = $this->getPropertyDetailsOverviewRequest($bfe_number, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BFENumberOverview' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BFENumberOverview' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BFENumberOverview', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\BFENumberOverview';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BFENumberOverview',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertyDetailsOverviewAsync
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyDetailsOverviewAsync($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsOverview'][0])
    {
        return $this->getPropertyDetailsOverviewAsyncWithHttpInfo($bfe_number, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertyDetailsOverviewAsyncWithHttpInfo
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyDetailsOverviewAsyncWithHttpInfo($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsOverview'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BFENumberOverview';
        $request = $this->getPropertyDetailsOverviewRequest($bfe_number, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertyDetailsOverview'
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertyDetailsOverviewRequest($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsOverview'][0])
    {

        // verify the required parameter 'bfe_number' is set
        if ($bfe_number === null || (is_array($bfe_number) && count($bfe_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bfe_number when calling getPropertyDetailsOverview'
            );
        }




        $resourcePath = '/api/v2/properties/{bfe_number}/overview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($bfe_number !== null) {
            $resourcePath = str_replace(
                '{' . 'bfe_number' . '}',
                ObjectSerializer::toPathValue($bfe_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertyDetailsOwners
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsOwners'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getPropertyDetailsOwners($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsOwners'][0])
    {
        list($response) = $this->getPropertyDetailsOwnersWithHttpInfo($bfe_number, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getPropertyDetailsOwnersWithHttpInfo
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsOwners'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertyDetailsOwnersWithHttpInfo($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsOwners'][0])
    {
        $request = $this->getPropertyDetailsOwnersRequest($bfe_number, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertyDetailsOwnersAsync
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsOwners'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyDetailsOwnersAsync($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsOwners'][0])
    {
        return $this->getPropertyDetailsOwnersAsyncWithHttpInfo($bfe_number, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertyDetailsOwnersAsyncWithHttpInfo
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsOwners'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyDetailsOwnersAsyncWithHttpInfo($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsOwners'][0])
    {
        $returnType = 'mixed';
        $request = $this->getPropertyDetailsOwnersRequest($bfe_number, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertyDetailsOwners'
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsOwners'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertyDetailsOwnersRequest($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsOwners'][0])
    {

        // verify the required parameter 'bfe_number' is set
        if ($bfe_number === null || (is_array($bfe_number) && count($bfe_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bfe_number when calling getPropertyDetailsOwners'
            );
        }




        $resourcePath = '/api/v2/properties/{bfe_number}/owners';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($bfe_number !== null) {
            $resourcePath = str_replace(
                '{' . 'bfe_number' . '}',
                ObjectSerializer::toPathValue($bfe_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertyDetailsTax
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsTax'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SKATTaxResponse|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getPropertyDetailsTax($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsTax'][0])
    {
        list($response) = $this->getPropertyDetailsTaxWithHttpInfo($bfe_number, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getPropertyDetailsTaxWithHttpInfo
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsTax'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SKATTaxResponse|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertyDetailsTaxWithHttpInfo($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsTax'][0])
    {
        $request = $this->getPropertyDetailsTaxRequest($bfe_number, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SKATTaxResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SKATTaxResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SKATTaxResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\SKATTaxResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SKATTaxResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertyDetailsTaxAsync
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsTax'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyDetailsTaxAsync($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsTax'][0])
    {
        return $this->getPropertyDetailsTaxAsyncWithHttpInfo($bfe_number, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertyDetailsTaxAsyncWithHttpInfo
     *
     * Get Property Details
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsTax'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyDetailsTaxAsyncWithHttpInfo($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsTax'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SKATTaxResponse';
        $request = $this->getPropertyDetailsTaxRequest($bfe_number, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertyDetailsTax'
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyDetailsTax'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertyDetailsTaxRequest($bfe_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getPropertyDetailsTax'][0])
    {

        // verify the required parameter 'bfe_number' is set
        if ($bfe_number === null || (is_array($bfe_number) && count($bfe_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bfe_number when calling getPropertyDetailsTax'
            );
        }




        $resourcePath = '/api/v2/properties/{bfe_number}/tax';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($bfe_number !== null) {
            $resourcePath = str_replace(
                '{' . 'bfe_number' . '}',
                ObjectSerializer::toPathValue($bfe_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertyIndicators
     *
     * Get Property Indicators
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyIndicators'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getPropertyIndicators($bfe_number, string $contentType = self::contentTypes['getPropertyIndicators'][0])
    {
        list($response) = $this->getPropertyIndicatorsWithHttpInfo($bfe_number, $contentType);
        return $response;
    }

    /**
     * Operation getPropertyIndicatorsWithHttpInfo
     *
     * Get Property Indicators
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyIndicators'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertyIndicatorsWithHttpInfo($bfe_number, string $contentType = self::contentTypes['getPropertyIndicators'][0])
    {
        $request = $this->getPropertyIndicatorsRequest($bfe_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertyIndicatorsAsync
     *
     * Get Property Indicators
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyIndicators'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyIndicatorsAsync($bfe_number, string $contentType = self::contentTypes['getPropertyIndicators'][0])
    {
        return $this->getPropertyIndicatorsAsyncWithHttpInfo($bfe_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertyIndicatorsAsyncWithHttpInfo
     *
     * Get Property Indicators
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyIndicators'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyIndicatorsAsyncWithHttpInfo($bfe_number, string $contentType = self::contentTypes['getPropertyIndicators'][0])
    {
        $returnType = 'mixed';
        $request = $this->getPropertyIndicatorsRequest($bfe_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertyIndicators'
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyIndicators'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertyIndicatorsRequest($bfe_number, string $contentType = self::contentTypes['getPropertyIndicators'][0])
    {

        // verify the required parameter 'bfe_number' is set
        if ($bfe_number === null || (is_array($bfe_number) && count($bfe_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bfe_number when calling getPropertyIndicators'
            );
        }


        $resourcePath = '/api/v2/properties/{bfe_number}/indicators';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($bfe_number !== null) {
            $resourcePath = str_replace(
                '{' . 'bfe_number' . '}',
                ObjectSerializer::toPathValue($bfe_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertyTrades
     *
     * Get Property Trades
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyTrades'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getPropertyTrades($bfe_number, string $contentType = self::contentTypes['getPropertyTrades'][0])
    {
        list($response) = $this->getPropertyTradesWithHttpInfo($bfe_number, $contentType);
        return $response;
    }

    /**
     * Operation getPropertyTradesWithHttpInfo
     *
     * Get Property Trades
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyTrades'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertyTradesWithHttpInfo($bfe_number, string $contentType = self::contentTypes['getPropertyTrades'][0])
    {
        $request = $this->getPropertyTradesRequest($bfe_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertyTradesAsync
     *
     * Get Property Trades
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyTrades'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyTradesAsync($bfe_number, string $contentType = self::contentTypes['getPropertyTrades'][0])
    {
        return $this->getPropertyTradesAsyncWithHttpInfo($bfe_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertyTradesAsyncWithHttpInfo
     *
     * Get Property Trades
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyTrades'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyTradesAsyncWithHttpInfo($bfe_number, string $contentType = self::contentTypes['getPropertyTrades'][0])
    {
        $returnType = 'mixed';
        $request = $this->getPropertyTradesRequest($bfe_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertyTrades'
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyTrades'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertyTradesRequest($bfe_number, string $contentType = self::contentTypes['getPropertyTrades'][0])
    {

        // verify the required parameter 'bfe_number' is set
        if ($bfe_number === null || (is_array($bfe_number) && count($bfe_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bfe_number when calling getPropertyTrades'
            );
        }


        $resourcePath = '/api/v2/properties/{bfe_number}/trades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($bfe_number !== null) {
            $resourcePath = str_replace(
                '{' . 'bfe_number' . '}',
                ObjectSerializer::toPathValue($bfe_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertyTradesLatest
     *
     * Get Property Trades
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyTradesLatest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EJFTradeResponse|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getPropertyTradesLatest($bfe_number, string $contentType = self::contentTypes['getPropertyTradesLatest'][0])
    {
        list($response) = $this->getPropertyTradesLatestWithHttpInfo($bfe_number, $contentType);
        return $response;
    }

    /**
     * Operation getPropertyTradesLatestWithHttpInfo
     *
     * Get Property Trades
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyTradesLatest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EJFTradeResponse|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertyTradesLatestWithHttpInfo($bfe_number, string $contentType = self::contentTypes['getPropertyTradesLatest'][0])
    {
        $request = $this->getPropertyTradesLatestRequest($bfe_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EJFTradeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EJFTradeResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EJFTradeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\EJFTradeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EJFTradeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertyTradesLatestAsync
     *
     * Get Property Trades
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyTradesLatest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyTradesLatestAsync($bfe_number, string $contentType = self::contentTypes['getPropertyTradesLatest'][0])
    {
        return $this->getPropertyTradesLatestAsyncWithHttpInfo($bfe_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertyTradesLatestAsyncWithHttpInfo
     *
     * Get Property Trades
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyTradesLatest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyTradesLatestAsyncWithHttpInfo($bfe_number, string $contentType = self::contentTypes['getPropertyTradesLatest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EJFTradeResponse';
        $request = $this->getPropertyTradesLatestRequest($bfe_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertyTradesLatest'
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyTradesLatest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertyTradesLatestRequest($bfe_number, string $contentType = self::contentTypes['getPropertyTradesLatest'][0])
    {

        // verify the required parameter 'bfe_number' is set
        if ($bfe_number === null || (is_array($bfe_number) && count($bfe_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bfe_number when calling getPropertyTradesLatest'
            );
        }


        $resourcePath = '/api/v2/properties/{bfe_number}/trades/latest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($bfe_number !== null) {
            $resourcePath = str_replace(
                '{' . 'bfe_number' . '}',
                ObjectSerializer::toPathValue($bfe_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertyValuationLatest
     *
     * Get Property Valuation Latest
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyValuationLatest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VURValuationResponse|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getPropertyValuationLatest($bfe_number, string $contentType = self::contentTypes['getPropertyValuationLatest'][0])
    {
        list($response) = $this->getPropertyValuationLatestWithHttpInfo($bfe_number, $contentType);
        return $response;
    }

    /**
     * Operation getPropertyValuationLatestWithHttpInfo
     *
     * Get Property Valuation Latest
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyValuationLatest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VURValuationResponse|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertyValuationLatestWithHttpInfo($bfe_number, string $contentType = self::contentTypes['getPropertyValuationLatest'][0])
    {
        $request = $this->getPropertyValuationLatestRequest($bfe_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\VURValuationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\VURValuationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\VURValuationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\VURValuationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VURValuationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertyValuationLatestAsync
     *
     * Get Property Valuation Latest
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyValuationLatest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyValuationLatestAsync($bfe_number, string $contentType = self::contentTypes['getPropertyValuationLatest'][0])
    {
        return $this->getPropertyValuationLatestAsyncWithHttpInfo($bfe_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertyValuationLatestAsyncWithHttpInfo
     *
     * Get Property Valuation Latest
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyValuationLatest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyValuationLatestAsyncWithHttpInfo($bfe_number, string $contentType = self::contentTypes['getPropertyValuationLatest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\VURValuationResponse';
        $request = $this->getPropertyValuationLatestRequest($bfe_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertyValuationLatest'
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyValuationLatest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertyValuationLatestRequest($bfe_number, string $contentType = self::contentTypes['getPropertyValuationLatest'][0])
    {

        // verify the required parameter 'bfe_number' is set
        if ($bfe_number === null || (is_array($bfe_number) && count($bfe_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bfe_number when calling getPropertyValuationLatest'
            );
        }


        $resourcePath = '/api/v2/properties/{bfe_number}/valuations/latest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($bfe_number !== null) {
            $resourcePath = str_replace(
                '{' . 'bfe_number' . '}',
                ObjectSerializer::toPathValue($bfe_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertyValuationNew
     *
     * Get Property Valuation New
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyValuationNew'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getPropertyValuationNew($bfe_number, string $contentType = self::contentTypes['getPropertyValuationNew'][0])
    {
        list($response) = $this->getPropertyValuationNewWithHttpInfo($bfe_number, $contentType);
        return $response;
    }

    /**
     * Operation getPropertyValuationNewWithHttpInfo
     *
     * Get Property Valuation New
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyValuationNew'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertyValuationNewWithHttpInfo($bfe_number, string $contentType = self::contentTypes['getPropertyValuationNew'][0])
    {
        $request = $this->getPropertyValuationNewRequest($bfe_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertyValuationNewAsync
     *
     * Get Property Valuation New
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyValuationNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyValuationNewAsync($bfe_number, string $contentType = self::contentTypes['getPropertyValuationNew'][0])
    {
        return $this->getPropertyValuationNewAsyncWithHttpInfo($bfe_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertyValuationNewAsyncWithHttpInfo
     *
     * Get Property Valuation New
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyValuationNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyValuationNewAsyncWithHttpInfo($bfe_number, string $contentType = self::contentTypes['getPropertyValuationNew'][0])
    {
        $returnType = 'mixed';
        $request = $this->getPropertyValuationNewRequest($bfe_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertyValuationNew'
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyValuationNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertyValuationNewRequest($bfe_number, string $contentType = self::contentTypes['getPropertyValuationNew'][0])
    {

        // verify the required parameter 'bfe_number' is set
        if ($bfe_number === null || (is_array($bfe_number) && count($bfe_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bfe_number when calling getPropertyValuationNew'
            );
        }


        $resourcePath = '/api/v2/properties/{bfe_number}/valuations/new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($bfe_number !== null) {
            $resourcePath = str_replace(
                '{' . 'bfe_number' . '}',
                ObjectSerializer::toPathValue($bfe_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertyValuations
     *
     * Get Property Valuations
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyValuations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getPropertyValuations($bfe_number, string $contentType = self::contentTypes['getPropertyValuations'][0])
    {
        list($response) = $this->getPropertyValuationsWithHttpInfo($bfe_number, $contentType);
        return $response;
    }

    /**
     * Operation getPropertyValuationsWithHttpInfo
     *
     * Get Property Valuations
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyValuations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertyValuationsWithHttpInfo($bfe_number, string $contentType = self::contentTypes['getPropertyValuations'][0])
    {
        $request = $this->getPropertyValuationsRequest($bfe_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertyValuationsAsync
     *
     * Get Property Valuations
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyValuations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyValuationsAsync($bfe_number, string $contentType = self::contentTypes['getPropertyValuations'][0])
    {
        return $this->getPropertyValuationsAsyncWithHttpInfo($bfe_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertyValuationsAsyncWithHttpInfo
     *
     * Get Property Valuations
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyValuations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertyValuationsAsyncWithHttpInfo($bfe_number, string $contentType = self::contentTypes['getPropertyValuations'][0])
    {
        $returnType = 'mixed';
        $request = $this->getPropertyValuationsRequest($bfe_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertyValuations'
     *
     * @param  mixed $bfe_number BFE-number of a property (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertyValuations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertyValuationsRequest($bfe_number, string $contentType = self::contentTypes['getPropertyValuations'][0])
    {

        // verify the required parameter 'bfe_number' is set
        if ($bfe_number === null || (is_array($bfe_number) && count($bfe_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bfe_number when calling getPropertyValuations'
            );
        }


        $resourcePath = '/api/v2/properties/{bfe_number}/valuations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($bfe_number !== null) {
            $resourcePath = str_replace(
                '{' . 'bfe_number' . '}',
                ObjectSerializer::toPathValue($bfe_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
