<?php
/**
 * TinglysningEjendomApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TinglysningEjendomApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TinglysningEjendomApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getHistoricClaimsByUuid' => [
            'application/json',
        ],
        'getOgsaaLystPaa' => [
            'application/json',
        ],
        'getTingbogsattestByUuid' => [
            'application/json',
        ],
        'searchTinglysningByAddress' => [
            'application/json',
        ],
        'searchTinglysningByAddressLimited' => [
            'application/json',
        ],
        'searchTinglysningByBfeNumber' => [
            'application/json',
        ],
        'searchTinglysningByCadastre' => [
            'application/json',
        ],
        'searchTinglysningByMunicipality' => [
            'application/json',
        ],
        'searchTinglysningByUmatrikuleretAreal' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getHistoricClaimsByUuid
     *
     * Get Historic Claims By Uuid
     *
     * @param  mixed $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHistoricClaimsByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getHistoricClaimsByUuid($uuid, string $contentType = self::contentTypes['getHistoricClaimsByUuid'][0])
    {
        list($response) = $this->getHistoricClaimsByUuidWithHttpInfo($uuid, $contentType);
        return $response;
    }

    /**
     * Operation getHistoricClaimsByUuidWithHttpInfo
     *
     * Get Historic Claims By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHistoricClaimsByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricClaimsByUuidWithHttpInfo($uuid, string $contentType = self::contentTypes['getHistoricClaimsByUuid'][0])
    {
        $request = $this->getHistoricClaimsByUuidRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricClaimsByUuidAsync
     *
     * Get Historic Claims By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHistoricClaimsByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricClaimsByUuidAsync($uuid, string $contentType = self::contentTypes['getHistoricClaimsByUuid'][0])
    {
        return $this->getHistoricClaimsByUuidAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricClaimsByUuidAsyncWithHttpInfo
     *
     * Get Historic Claims By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHistoricClaimsByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricClaimsByUuidAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['getHistoricClaimsByUuid'][0])
    {
        $returnType = 'mixed';
        $request = $this->getHistoricClaimsByUuidRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricClaimsByUuid'
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHistoricClaimsByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricClaimsByUuidRequest($uuid, string $contentType = self::contentTypes['getHistoricClaimsByUuid'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getHistoricClaimsByUuid'
            );
        }


        $resourcePath = '/api/v2/tinglysning/tingbogsattest/historic/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOgsaaLystPaa
     *
     * Get Ogsaa Lyst Paa
     *
     * @param  mixed $document_uuid document_uuid (required)
     * @param  mixed $tinglysning_uuid tinglysning_uuid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOgsaaLystPaa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OgsaaLystPaa|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getOgsaaLystPaa($document_uuid, $tinglysning_uuid = null, string $contentType = self::contentTypes['getOgsaaLystPaa'][0])
    {
        list($response) = $this->getOgsaaLystPaaWithHttpInfo($document_uuid, $tinglysning_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getOgsaaLystPaaWithHttpInfo
     *
     * Get Ogsaa Lyst Paa
     *
     * @param  mixed $document_uuid (required)
     * @param  mixed $tinglysning_uuid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOgsaaLystPaa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OgsaaLystPaa|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOgsaaLystPaaWithHttpInfo($document_uuid, $tinglysning_uuid = null, string $contentType = self::contentTypes['getOgsaaLystPaa'][0])
    {
        $request = $this->getOgsaaLystPaaRequest($document_uuid, $tinglysning_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OgsaaLystPaa' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OgsaaLystPaa' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OgsaaLystPaa', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\OgsaaLystPaa';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OgsaaLystPaa',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getOgsaaLystPaaAsync
     *
     * Get Ogsaa Lyst Paa
     *
     * @param  mixed $document_uuid (required)
     * @param  mixed $tinglysning_uuid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOgsaaLystPaa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOgsaaLystPaaAsync($document_uuid, $tinglysning_uuid = null, string $contentType = self::contentTypes['getOgsaaLystPaa'][0])
    {
        return $this->getOgsaaLystPaaAsyncWithHttpInfo($document_uuid, $tinglysning_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOgsaaLystPaaAsyncWithHttpInfo
     *
     * Get Ogsaa Lyst Paa
     *
     * @param  mixed $document_uuid (required)
     * @param  mixed $tinglysning_uuid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOgsaaLystPaa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOgsaaLystPaaAsyncWithHttpInfo($document_uuid, $tinglysning_uuid = null, string $contentType = self::contentTypes['getOgsaaLystPaa'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OgsaaLystPaa';
        $request = $this->getOgsaaLystPaaRequest($document_uuid, $tinglysning_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOgsaaLystPaa'
     *
     * @param  mixed $document_uuid (required)
     * @param  mixed $tinglysning_uuid (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOgsaaLystPaa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOgsaaLystPaaRequest($document_uuid, $tinglysning_uuid = null, string $contentType = self::contentTypes['getOgsaaLystPaa'][0])
    {

        // verify the required parameter 'document_uuid' is set
        if ($document_uuid === null || (is_array($document_uuid) && count($document_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_uuid when calling getOgsaaLystPaa'
            );
        }



        $resourcePath = '/api/v2/tinglysning/ogsaalystpaa';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $document_uuid,
            'document_uuid', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tinglysning_uuid,
            'tinglysning_uuid', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTingbogsattestByUuid
     *
     * Get Tingbogsattest By Uuid
     *
     * @param  mixed $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTingbogsattestByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TingbogsattestModel|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getTingbogsattestByUuid($uuid, string $contentType = self::contentTypes['getTingbogsattestByUuid'][0])
    {
        list($response) = $this->getTingbogsattestByUuidWithHttpInfo($uuid, $contentType);
        return $response;
    }

    /**
     * Operation getTingbogsattestByUuidWithHttpInfo
     *
     * Get Tingbogsattest By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTingbogsattestByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TingbogsattestModel|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTingbogsattestByUuidWithHttpInfo($uuid, string $contentType = self::contentTypes['getTingbogsattestByUuid'][0])
    {
        $request = $this->getTingbogsattestByUuidRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TingbogsattestModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TingbogsattestModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TingbogsattestModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\TingbogsattestModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TingbogsattestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getTingbogsattestByUuidAsync
     *
     * Get Tingbogsattest By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTingbogsattestByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTingbogsattestByUuidAsync($uuid, string $contentType = self::contentTypes['getTingbogsattestByUuid'][0])
    {
        return $this->getTingbogsattestByUuidAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTingbogsattestByUuidAsyncWithHttpInfo
     *
     * Get Tingbogsattest By Uuid
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTingbogsattestByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTingbogsattestByUuidAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['getTingbogsattestByUuid'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TingbogsattestModel';
        $request = $this->getTingbogsattestByUuidRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTingbogsattestByUuid'
     *
     * @param  mixed $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTingbogsattestByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTingbogsattestByUuidRequest($uuid, string $contentType = self::contentTypes['getTingbogsattestByUuid'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getTingbogsattestByUuid'
            );
        }


        $resourcePath = '/api/v2/tinglysning/tingbogsattest/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTinglysningByAddress
     *
     * Search Tinglysning By Address
     *
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $zip_code Postnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door DÃ¸r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByAddress'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function searchTinglysningByAddress($street_name, $house_number, $zip_code, $floor = null, $door = null, string $contentType = self::contentTypes['searchTinglysningByAddress'][0])
    {
        list($response) = $this->searchTinglysningByAddressWithHttpInfo($street_name, $house_number, $zip_code, $floor, $door, $contentType);
        return $response;
    }

    /**
     * Operation searchTinglysningByAddressWithHttpInfo
     *
     * Search Tinglysning By Address
     *
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $zip_code Postnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door DÃ¸r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByAddress'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTinglysningByAddressWithHttpInfo($street_name, $house_number, $zip_code, $floor = null, $door = null, string $contentType = self::contentTypes['searchTinglysningByAddress'][0])
    {
        $request = $this->searchTinglysningByAddressRequest($street_name, $house_number, $zip_code, $floor, $door, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation searchTinglysningByAddressAsync
     *
     * Search Tinglysning By Address
     *
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $zip_code Postnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door DÃ¸r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTinglysningByAddressAsync($street_name, $house_number, $zip_code, $floor = null, $door = null, string $contentType = self::contentTypes['searchTinglysningByAddress'][0])
    {
        return $this->searchTinglysningByAddressAsyncWithHttpInfo($street_name, $house_number, $zip_code, $floor, $door, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTinglysningByAddressAsyncWithHttpInfo
     *
     * Search Tinglysning By Address
     *
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $zip_code Postnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door DÃ¸r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTinglysningByAddressAsyncWithHttpInfo($street_name, $house_number, $zip_code, $floor = null, $door = null, string $contentType = self::contentTypes['searchTinglysningByAddress'][0])
    {
        $returnType = 'mixed';
        $request = $this->searchTinglysningByAddressRequest($street_name, $house_number, $zip_code, $floor, $door, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTinglysningByAddress'
     *
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $zip_code Postnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door DÃ¸r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchTinglysningByAddressRequest($street_name, $house_number, $zip_code, $floor = null, $door = null, string $contentType = self::contentTypes['searchTinglysningByAddress'][0])
    {

        // verify the required parameter 'street_name' is set
        if ($street_name === null || (is_array($street_name) && count($street_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $street_name when calling searchTinglysningByAddress'
            );
        }

        // verify the required parameter 'house_number' is set
        if ($house_number === null || (is_array($house_number) && count($house_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $house_number when calling searchTinglysningByAddress'
            );
        }

        // verify the required parameter 'zip_code' is set
        if ($zip_code === null || (is_array($zip_code) && count($zip_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zip_code when calling searchTinglysningByAddress'
            );
        }




        $resourcePath = '/api/v2/tinglysning/property/search/address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $street_name,
            'street_name', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $house_number,
            'house_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zip_code,
            'zip_code', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $floor,
            'floor', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $door,
            'door', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTinglysningByAddressLimited
     *
     * Search Tinglysning By Address Limited
     *
     * @param  mixed $zip_code Postnummer (required)
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (optional)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door DÃ¸r (optional)
     * @param  mixed $max_results Maks antal resultater (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByAddressLimited'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function searchTinglysningByAddressLimited($zip_code, $street_name, $house_number = null, $floor = null, $door = null, $max_results = null, string $contentType = self::contentTypes['searchTinglysningByAddressLimited'][0])
    {
        list($response) = $this->searchTinglysningByAddressLimitedWithHttpInfo($zip_code, $street_name, $house_number, $floor, $door, $max_results, $contentType);
        return $response;
    }

    /**
     * Operation searchTinglysningByAddressLimitedWithHttpInfo
     *
     * Search Tinglysning By Address Limited
     *
     * @param  mixed $zip_code Postnummer (required)
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (optional)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door DÃ¸r (optional)
     * @param  mixed $max_results Maks antal resultater (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByAddressLimited'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTinglysningByAddressLimitedWithHttpInfo($zip_code, $street_name, $house_number = null, $floor = null, $door = null, $max_results = null, string $contentType = self::contentTypes['searchTinglysningByAddressLimited'][0])
    {
        $request = $this->searchTinglysningByAddressLimitedRequest($zip_code, $street_name, $house_number, $floor, $door, $max_results, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation searchTinglysningByAddressLimitedAsync
     *
     * Search Tinglysning By Address Limited
     *
     * @param  mixed $zip_code Postnummer (required)
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (optional)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door DÃ¸r (optional)
     * @param  mixed $max_results Maks antal resultater (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByAddressLimited'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTinglysningByAddressLimitedAsync($zip_code, $street_name, $house_number = null, $floor = null, $door = null, $max_results = null, string $contentType = self::contentTypes['searchTinglysningByAddressLimited'][0])
    {
        return $this->searchTinglysningByAddressLimitedAsyncWithHttpInfo($zip_code, $street_name, $house_number, $floor, $door, $max_results, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTinglysningByAddressLimitedAsyncWithHttpInfo
     *
     * Search Tinglysning By Address Limited
     *
     * @param  mixed $zip_code Postnummer (required)
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (optional)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door DÃ¸r (optional)
     * @param  mixed $max_results Maks antal resultater (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByAddressLimited'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTinglysningByAddressLimitedAsyncWithHttpInfo($zip_code, $street_name, $house_number = null, $floor = null, $door = null, $max_results = null, string $contentType = self::contentTypes['searchTinglysningByAddressLimited'][0])
    {
        $returnType = 'mixed';
        $request = $this->searchTinglysningByAddressLimitedRequest($zip_code, $street_name, $house_number, $floor, $door, $max_results, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTinglysningByAddressLimited'
     *
     * @param  mixed $zip_code Postnummer (required)
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (optional)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door DÃ¸r (optional)
     * @param  mixed $max_results Maks antal resultater (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByAddressLimited'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchTinglysningByAddressLimitedRequest($zip_code, $street_name, $house_number = null, $floor = null, $door = null, $max_results = null, string $contentType = self::contentTypes['searchTinglysningByAddressLimited'][0])
    {

        // verify the required parameter 'zip_code' is set
        if ($zip_code === null || (is_array($zip_code) && count($zip_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zip_code when calling searchTinglysningByAddressLimited'
            );
        }

        // verify the required parameter 'street_name' is set
        if ($street_name === null || (is_array($street_name) && count($street_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $street_name when calling searchTinglysningByAddressLimited'
            );
        }




        if ($max_results !== null && $max_results > 2000.0) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling TinglysningEjendomApi.searchTinglysningByAddressLimited, must be smaller than or equal to 2000.0.');
        }
        if ($max_results !== null && $max_results < 1.0) {
            throw new \InvalidArgumentException('invalid value for "$max_results" when calling TinglysningEjendomApi.searchTinglysningByAddressLimited, must be bigger than or equal to 1.0.');
        }
        

        $resourcePath = '/api/v2/tinglysning/property/search/address-limited';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zip_code,
            'zip_code', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $street_name,
            'street_name', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $house_number,
            'house_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $floor,
            'floor', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $door,
            'door', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_results,
            'max_results', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTinglysningByBfeNumber
     *
     * Search Tinglysning By Bfe Number
     *
     * @param  mixed $bfe_number Hovednoteringsnummer (BFE-nummer) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByBfeNumber'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function searchTinglysningByBfeNumber($bfe_number, string $contentType = self::contentTypes['searchTinglysningByBfeNumber'][0])
    {
        list($response) = $this->searchTinglysningByBfeNumberWithHttpInfo($bfe_number, $contentType);
        return $response;
    }

    /**
     * Operation searchTinglysningByBfeNumberWithHttpInfo
     *
     * Search Tinglysning By Bfe Number
     *
     * @param  mixed $bfe_number Hovednoteringsnummer (BFE-nummer) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByBfeNumber'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTinglysningByBfeNumberWithHttpInfo($bfe_number, string $contentType = self::contentTypes['searchTinglysningByBfeNumber'][0])
    {
        $request = $this->searchTinglysningByBfeNumberRequest($bfe_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation searchTinglysningByBfeNumberAsync
     *
     * Search Tinglysning By Bfe Number
     *
     * @param  mixed $bfe_number Hovednoteringsnummer (BFE-nummer) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByBfeNumber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTinglysningByBfeNumberAsync($bfe_number, string $contentType = self::contentTypes['searchTinglysningByBfeNumber'][0])
    {
        return $this->searchTinglysningByBfeNumberAsyncWithHttpInfo($bfe_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTinglysningByBfeNumberAsyncWithHttpInfo
     *
     * Search Tinglysning By Bfe Number
     *
     * @param  mixed $bfe_number Hovednoteringsnummer (BFE-nummer) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByBfeNumber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTinglysningByBfeNumberAsyncWithHttpInfo($bfe_number, string $contentType = self::contentTypes['searchTinglysningByBfeNumber'][0])
    {
        $returnType = 'mixed';
        $request = $this->searchTinglysningByBfeNumberRequest($bfe_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTinglysningByBfeNumber'
     *
     * @param  mixed $bfe_number Hovednoteringsnummer (BFE-nummer) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByBfeNumber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchTinglysningByBfeNumberRequest($bfe_number, string $contentType = self::contentTypes['searchTinglysningByBfeNumber'][0])
    {

        // verify the required parameter 'bfe_number' is set
        if ($bfe_number === null || (is_array($bfe_number) && count($bfe_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bfe_number when calling searchTinglysningByBfeNumber'
            );
        }


        $resourcePath = '/api/v2/tinglysning/property/search/bfe-number/{bfe_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($bfe_number !== null) {
            $resourcePath = str_replace(
                '{' . 'bfe_number' . '}',
                ObjectSerializer::toPathValue($bfe_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTinglysningByCadastre
     *
     * Search Tinglysning By Cadastre
     *
     * @param  mixed $land_lot Ejerlav (required)
     * @param  mixed $cadastre_number cadastre_number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByCadastre'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function searchTinglysningByCadastre($land_lot, $cadastre_number, string $contentType = self::contentTypes['searchTinglysningByCadastre'][0])
    {
        list($response) = $this->searchTinglysningByCadastreWithHttpInfo($land_lot, $cadastre_number, $contentType);
        return $response;
    }

    /**
     * Operation searchTinglysningByCadastreWithHttpInfo
     *
     * Search Tinglysning By Cadastre
     *
     * @param  mixed $land_lot Ejerlav (required)
     * @param  mixed $cadastre_number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByCadastre'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTinglysningByCadastreWithHttpInfo($land_lot, $cadastre_number, string $contentType = self::contentTypes['searchTinglysningByCadastre'][0])
    {
        $request = $this->searchTinglysningByCadastreRequest($land_lot, $cadastre_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation searchTinglysningByCadastreAsync
     *
     * Search Tinglysning By Cadastre
     *
     * @param  mixed $land_lot Ejerlav (required)
     * @param  mixed $cadastre_number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByCadastre'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTinglysningByCadastreAsync($land_lot, $cadastre_number, string $contentType = self::contentTypes['searchTinglysningByCadastre'][0])
    {
        return $this->searchTinglysningByCadastreAsyncWithHttpInfo($land_lot, $cadastre_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTinglysningByCadastreAsyncWithHttpInfo
     *
     * Search Tinglysning By Cadastre
     *
     * @param  mixed $land_lot Ejerlav (required)
     * @param  mixed $cadastre_number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByCadastre'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTinglysningByCadastreAsyncWithHttpInfo($land_lot, $cadastre_number, string $contentType = self::contentTypes['searchTinglysningByCadastre'][0])
    {
        $returnType = 'mixed';
        $request = $this->searchTinglysningByCadastreRequest($land_lot, $cadastre_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTinglysningByCadastre'
     *
     * @param  mixed $land_lot Ejerlav (required)
     * @param  mixed $cadastre_number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByCadastre'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchTinglysningByCadastreRequest($land_lot, $cadastre_number, string $contentType = self::contentTypes['searchTinglysningByCadastre'][0])
    {

        // verify the required parameter 'land_lot' is set
        if ($land_lot === null || (is_array($land_lot) && count($land_lot) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $land_lot when calling searchTinglysningByCadastre'
            );
        }

        // verify the required parameter 'cadastre_number' is set
        if ($cadastre_number === null || (is_array($cadastre_number) && count($cadastre_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cadastre_number when calling searchTinglysningByCadastre'
            );
        }


        $resourcePath = '/api/v2/tinglysning/property/search/cadastre/{land_lot}/{cadastre_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($land_lot !== null) {
            $resourcePath = str_replace(
                '{' . 'land_lot' . '}',
                ObjectSerializer::toPathValue($land_lot),
                $resourcePath
            );
        }
        // path params
        if ($cadastre_number !== null) {
            $resourcePath = str_replace(
                '{' . 'cadastre_number' . '}',
                ObjectSerializer::toPathValue($cadastre_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTinglysningByMunicipality
     *
     * Search Tinglysning By Municipality
     *
     * @param  mixed $municipality_code Kommunekode (required)
     * @param  mixed $property_number Ejendomsnummer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByMunicipality'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function searchTinglysningByMunicipality($municipality_code, $property_number, string $contentType = self::contentTypes['searchTinglysningByMunicipality'][0])
    {
        list($response) = $this->searchTinglysningByMunicipalityWithHttpInfo($municipality_code, $property_number, $contentType);
        return $response;
    }

    /**
     * Operation searchTinglysningByMunicipalityWithHttpInfo
     *
     * Search Tinglysning By Municipality
     *
     * @param  mixed $municipality_code Kommunekode (required)
     * @param  mixed $property_number Ejendomsnummer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByMunicipality'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTinglysningByMunicipalityWithHttpInfo($municipality_code, $property_number, string $contentType = self::contentTypes['searchTinglysningByMunicipality'][0])
    {
        $request = $this->searchTinglysningByMunicipalityRequest($municipality_code, $property_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation searchTinglysningByMunicipalityAsync
     *
     * Search Tinglysning By Municipality
     *
     * @param  mixed $municipality_code Kommunekode (required)
     * @param  mixed $property_number Ejendomsnummer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByMunicipality'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTinglysningByMunicipalityAsync($municipality_code, $property_number, string $contentType = self::contentTypes['searchTinglysningByMunicipality'][0])
    {
        return $this->searchTinglysningByMunicipalityAsyncWithHttpInfo($municipality_code, $property_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTinglysningByMunicipalityAsyncWithHttpInfo
     *
     * Search Tinglysning By Municipality
     *
     * @param  mixed $municipality_code Kommunekode (required)
     * @param  mixed $property_number Ejendomsnummer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByMunicipality'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTinglysningByMunicipalityAsyncWithHttpInfo($municipality_code, $property_number, string $contentType = self::contentTypes['searchTinglysningByMunicipality'][0])
    {
        $returnType = 'mixed';
        $request = $this->searchTinglysningByMunicipalityRequest($municipality_code, $property_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTinglysningByMunicipality'
     *
     * @param  mixed $municipality_code Kommunekode (required)
     * @param  mixed $property_number Ejendomsnummer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByMunicipality'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchTinglysningByMunicipalityRequest($municipality_code, $property_number, string $contentType = self::contentTypes['searchTinglysningByMunicipality'][0])
    {

        // verify the required parameter 'municipality_code' is set
        if ($municipality_code === null || (is_array($municipality_code) && count($municipality_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $municipality_code when calling searchTinglysningByMunicipality'
            );
        }

        // verify the required parameter 'property_number' is set
        if ($property_number === null || (is_array($property_number) && count($property_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_number when calling searchTinglysningByMunicipality'
            );
        }


        $resourcePath = '/api/v2/tinglysning/property/search/esr-number/{municipality_code}/{property_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($municipality_code !== null) {
            $resourcePath = str_replace(
                '{' . 'municipality_code' . '}',
                ObjectSerializer::toPathValue($municipality_code),
                $resourcePath
            );
        }
        // path params
        if ($property_number !== null) {
            $resourcePath = str_replace(
                '{' . 'property_number' . '}',
                ObjectSerializer::toPathValue($property_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTinglysningByUmatrikuleretAreal
     *
     * Search Tinglysning By Umatrikuleret Areal
     *
     * @param  mixed $uma Umatrikuleret areal (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByUmatrikuleretAreal'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function searchTinglysningByUmatrikuleretAreal($uma, string $contentType = self::contentTypes['searchTinglysningByUmatrikuleretAreal'][0])
    {
        list($response) = $this->searchTinglysningByUmatrikuleretArealWithHttpInfo($uma, $contentType);
        return $response;
    }

    /**
     * Operation searchTinglysningByUmatrikuleretArealWithHttpInfo
     *
     * Search Tinglysning By Umatrikuleret Areal
     *
     * @param  mixed $uma Umatrikuleret areal (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByUmatrikuleretAreal'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTinglysningByUmatrikuleretArealWithHttpInfo($uma, string $contentType = self::contentTypes['searchTinglysningByUmatrikuleretAreal'][0])
    {
        $request = $this->searchTinglysningByUmatrikuleretArealRequest($uma, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation searchTinglysningByUmatrikuleretArealAsync
     *
     * Search Tinglysning By Umatrikuleret Areal
     *
     * @param  mixed $uma Umatrikuleret areal (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByUmatrikuleretAreal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTinglysningByUmatrikuleretArealAsync($uma, string $contentType = self::contentTypes['searchTinglysningByUmatrikuleretAreal'][0])
    {
        return $this->searchTinglysningByUmatrikuleretArealAsyncWithHttpInfo($uma, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTinglysningByUmatrikuleretArealAsyncWithHttpInfo
     *
     * Search Tinglysning By Umatrikuleret Areal
     *
     * @param  mixed $uma Umatrikuleret areal (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByUmatrikuleretAreal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTinglysningByUmatrikuleretArealAsyncWithHttpInfo($uma, string $contentType = self::contentTypes['searchTinglysningByUmatrikuleretAreal'][0])
    {
        $returnType = 'mixed';
        $request = $this->searchTinglysningByUmatrikuleretArealRequest($uma, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTinglysningByUmatrikuleretAreal'
     *
     * @param  mixed $uma Umatrikuleret areal (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTinglysningByUmatrikuleretAreal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchTinglysningByUmatrikuleretArealRequest($uma, string $contentType = self::contentTypes['searchTinglysningByUmatrikuleretAreal'][0])
    {

        // verify the required parameter 'uma' is set
        if ($uma === null || (is_array($uma) && count($uma) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uma when calling searchTinglysningByUmatrikuleretAreal'
            );
        }


        $resourcePath = '/api/v2/tinglysning/property/search/uma/{uma}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uma !== null) {
            $resourcePath = str_replace(
                '{' . 'uma' . '}',
                ObjectSerializer::toPathValue($uma),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
