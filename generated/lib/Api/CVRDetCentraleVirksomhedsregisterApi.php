<?php
/**
 * CVRDetCentraleVirksomhedsregisterApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CVRDetCentraleVirksomhedsregisterApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CVRDetCentraleVirksomhedsregisterApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'expandNetwork' => [
            'application/json',
        ],
        'getCompanyFinancials' => [
            'application/json',
        ],
        'getCompanyFinancialsLatest' => [
            'application/json',
        ],
        'getCompanyTimeline' => [
            'application/json',
        ],
        'getConnectionsBetweenPair' => [
            'application/json',
        ],
        'getCvrCompanies' => [
            'application/json',
        ],
        'getCvrCompaniesAdvanced' => [
            'application/json',
        ],
        'getCvrCompany' => [
            'application/json',
        ],
        'getCvrMember' => [
            'application/json',
        ],
        'getCvrMembers' => [
            'application/json',
        ],
        'getCvrMembersAdvanced' => [
            'application/json',
        ],
        'getCvrNetwork' => [
            'application/json',
        ],
        'getCvrPUnit' => [
            'application/json',
        ],
        'getCvrPUnits' => [
            'application/json',
        ],
        'getCvrPUnitsAdvanced' => [
            'application/json',
        ],
        'getMemberTimeline' => [
            'application/json',
        ],
        'getPartnersInCrime' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation expandNetwork
     *
     * Expand Network
     *
     * @param  mixed $id ID of the node to expand (required)
     * @param  \OpenAPI\Client\Model\GraphNodeEnum $node_label Label of the node to expand (required)
     * @param  mixed $relationship_types Relationship types to traverse (required)
     * @param  mixed $target_date target_date (optional)
     * @param  mixed $depth_up depth_up (optional)
     * @param  mixed $depth_down depth_down (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expandNetwork'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CVRNetworkResponse|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function expandNetwork($id, $node_label, $relationship_types, $target_date = null, $depth_up = null, $depth_down = null, string $contentType = self::contentTypes['expandNetwork'][0])
    {
        list($response) = $this->expandNetworkWithHttpInfo($id, $node_label, $relationship_types, $target_date, $depth_up, $depth_down, $contentType);
        return $response;
    }

    /**
     * Operation expandNetworkWithHttpInfo
     *
     * Expand Network
     *
     * @param  mixed $id ID of the node to expand (required)
     * @param  \OpenAPI\Client\Model\GraphNodeEnum $node_label Label of the node to expand (required)
     * @param  mixed $relationship_types Relationship types to traverse (required)
     * @param  mixed $target_date (optional)
     * @param  mixed $depth_up (optional)
     * @param  mixed $depth_down (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expandNetwork'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CVRNetworkResponse|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function expandNetworkWithHttpInfo($id, $node_label, $relationship_types, $target_date = null, $depth_up = null, $depth_down = null, string $contentType = self::contentTypes['expandNetwork'][0])
    {
        $request = $this->expandNetworkRequest($id, $node_label, $relationship_types, $target_date, $depth_up, $depth_down, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CVRNetworkResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CVRNetworkResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CVRNetworkResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\CVRNetworkResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CVRNetworkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation expandNetworkAsync
     *
     * Expand Network
     *
     * @param  mixed $id ID of the node to expand (required)
     * @param  \OpenAPI\Client\Model\GraphNodeEnum $node_label Label of the node to expand (required)
     * @param  mixed $relationship_types Relationship types to traverse (required)
     * @param  mixed $target_date (optional)
     * @param  mixed $depth_up (optional)
     * @param  mixed $depth_down (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expandNetwork'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function expandNetworkAsync($id, $node_label, $relationship_types, $target_date = null, $depth_up = null, $depth_down = null, string $contentType = self::contentTypes['expandNetwork'][0])
    {
        return $this->expandNetworkAsyncWithHttpInfo($id, $node_label, $relationship_types, $target_date, $depth_up, $depth_down, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation expandNetworkAsyncWithHttpInfo
     *
     * Expand Network
     *
     * @param  mixed $id ID of the node to expand (required)
     * @param  \OpenAPI\Client\Model\GraphNodeEnum $node_label Label of the node to expand (required)
     * @param  mixed $relationship_types Relationship types to traverse (required)
     * @param  mixed $target_date (optional)
     * @param  mixed $depth_up (optional)
     * @param  mixed $depth_down (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expandNetwork'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function expandNetworkAsyncWithHttpInfo($id, $node_label, $relationship_types, $target_date = null, $depth_up = null, $depth_down = null, string $contentType = self::contentTypes['expandNetwork'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CVRNetworkResponse';
        $request = $this->expandNetworkRequest($id, $node_label, $relationship_types, $target_date, $depth_up, $depth_down, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'expandNetwork'
     *
     * @param  mixed $id ID of the node to expand (required)
     * @param  \OpenAPI\Client\Model\GraphNodeEnum $node_label Label of the node to expand (required)
     * @param  mixed $relationship_types Relationship types to traverse (required)
     * @param  mixed $target_date (optional)
     * @param  mixed $depth_up (optional)
     * @param  mixed $depth_down (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expandNetwork'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function expandNetworkRequest($id, $node_label, $relationship_types, $target_date = null, $depth_up = null, $depth_down = null, string $contentType = self::contentTypes['expandNetwork'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling expandNetwork'
            );
        }

        // verify the required parameter 'node_label' is set
        if ($node_label === null || (is_array($node_label) && count($node_label) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $node_label when calling expandNetwork'
            );
        }

        // verify the required parameter 'relationship_types' is set
        if ($relationship_types === null || (is_array($relationship_types) && count($relationship_types) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $relationship_types when calling expandNetwork'
            );
        }





        $resourcePath = '/api/v2/cvr/{id}/expand-network';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $node_label,
            'node_label', // param base name
            'GraphNodeEnum', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $relationship_types,
            'relationship_types', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $target_date,
            'target_date', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $depth_up,
            'depth_up', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $depth_down,
            'depth_down', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyFinancials
     *
     * Get Company Financials
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  mixed $size size (optional)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyFinancials'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCompanyFinancials($cvr_number, $size = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCompanyFinancials'][0])
    {
        list($response) = $this->getCompanyFinancialsWithHttpInfo($cvr_number, $size, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getCompanyFinancialsWithHttpInfo
     *
     * Get Company Financials
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  mixed $size (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyFinancials'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyFinancialsWithHttpInfo($cvr_number, $size = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCompanyFinancials'][0])
    {
        $request = $this->getCompanyFinancialsRequest($cvr_number, $size, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyFinancialsAsync
     *
     * Get Company Financials
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  mixed $size (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyFinancials'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyFinancialsAsync($cvr_number, $size = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCompanyFinancials'][0])
    {
        return $this->getCompanyFinancialsAsyncWithHttpInfo($cvr_number, $size, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyFinancialsAsyncWithHttpInfo
     *
     * Get Company Financials
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  mixed $size (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyFinancials'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyFinancialsAsyncWithHttpInfo($cvr_number, $size = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCompanyFinancials'][0])
    {
        $returnType = 'mixed';
        $request = $this->getCompanyFinancialsRequest($cvr_number, $size, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyFinancials'
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  mixed $size (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyFinancials'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyFinancialsRequest($cvr_number, $size = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCompanyFinancials'][0])
    {

        // verify the required parameter 'cvr_number' is set
        if ($cvr_number === null || (is_array($cvr_number) && count($cvr_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cvr_number when calling getCompanyFinancials'
            );
        }

        if ($size !== null && $size > 1000.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CVRDetCentraleVirksomhedsregisterApi.getCompanyFinancials, must be smaller than or equal to 1000.0.');
        }
        if ($size !== null && $size < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CVRDetCentraleVirksomhedsregisterApi.getCompanyFinancials, must be bigger than or equal to 0.0.');
        }
        



        $resourcePath = '/api/v2/cvr/companies/{cvr_number}/financials';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cvr_number !== null) {
            $resourcePath = str_replace(
                '{' . 'cvr_number' . '}',
                ObjectSerializer::toPathValue($cvr_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyFinancialsLatest
     *
     * Get Company Financials Latest
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyFinancialsLatest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AnnualReportSimple|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCompanyFinancialsLatest($cvr_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCompanyFinancialsLatest'][0])
    {
        list($response) = $this->getCompanyFinancialsLatestWithHttpInfo($cvr_number, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getCompanyFinancialsLatestWithHttpInfo
     *
     * Get Company Financials Latest
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyFinancialsLatest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AnnualReportSimple|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyFinancialsLatestWithHttpInfo($cvr_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCompanyFinancialsLatest'][0])
    {
        $request = $this->getCompanyFinancialsLatestRequest($cvr_number, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AnnualReportSimple' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AnnualReportSimple' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AnnualReportSimple', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\AnnualReportSimple';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AnnualReportSimple',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyFinancialsLatestAsync
     *
     * Get Company Financials Latest
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyFinancialsLatest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyFinancialsLatestAsync($cvr_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCompanyFinancialsLatest'][0])
    {
        return $this->getCompanyFinancialsLatestAsyncWithHttpInfo($cvr_number, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyFinancialsLatestAsyncWithHttpInfo
     *
     * Get Company Financials Latest
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyFinancialsLatest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyFinancialsLatestAsyncWithHttpInfo($cvr_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCompanyFinancialsLatest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AnnualReportSimple';
        $request = $this->getCompanyFinancialsLatestRequest($cvr_number, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyFinancialsLatest'
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyFinancialsLatest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyFinancialsLatestRequest($cvr_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCompanyFinancialsLatest'][0])
    {

        // verify the required parameter 'cvr_number' is set
        if ($cvr_number === null || (is_array($cvr_number) && count($cvr_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cvr_number when calling getCompanyFinancialsLatest'
            );
        }




        $resourcePath = '/api/v2/cvr/companies/{cvr_number}/financials/latest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cvr_number !== null) {
            $resourcePath = str_replace(
                '{' . 'cvr_number' . '}',
                ObjectSerializer::toPathValue($cvr_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyTimeline
     *
     * Get Company Timeline
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTimeline'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCompanyTimeline($cvr_number, string $contentType = self::contentTypes['getCompanyTimeline'][0])
    {
        list($response) = $this->getCompanyTimelineWithHttpInfo($cvr_number, $contentType);
        return $response;
    }

    /**
     * Operation getCompanyTimelineWithHttpInfo
     *
     * Get Company Timeline
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTimeline'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyTimelineWithHttpInfo($cvr_number, string $contentType = self::contentTypes['getCompanyTimeline'][0])
    {
        $request = $this->getCompanyTimelineRequest($cvr_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyTimelineAsync
     *
     * Get Company Timeline
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTimeline'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyTimelineAsync($cvr_number, string $contentType = self::contentTypes['getCompanyTimeline'][0])
    {
        return $this->getCompanyTimelineAsyncWithHttpInfo($cvr_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyTimelineAsyncWithHttpInfo
     *
     * Get Company Timeline
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTimeline'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyTimelineAsyncWithHttpInfo($cvr_number, string $contentType = self::contentTypes['getCompanyTimeline'][0])
    {
        $returnType = 'mixed';
        $request = $this->getCompanyTimelineRequest($cvr_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyTimeline'
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTimeline'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyTimelineRequest($cvr_number, string $contentType = self::contentTypes['getCompanyTimeline'][0])
    {

        // verify the required parameter 'cvr_number' is set
        if ($cvr_number === null || (is_array($cvr_number) && count($cvr_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cvr_number when calling getCompanyTimeline'
            );
        }


        $resourcePath = '/api/v2/cvr/companies/{cvr_number}/timeline';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cvr_number !== null) {
            $resourcePath = str_replace(
                '{' . 'cvr_number' . '}',
                ObjectSerializer::toPathValue($cvr_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConnectionsBetweenPair
     *
     * Get Connections Between Pair
     *
     * @param  mixed $id_from Id of first node (required)
     * @param  \OpenAPI\Client\Model\GraphNodeEnum $type_from Type of first node (required)
     * @param  mixed $id_to Id of second node (required)
     * @param  \OpenAPI\Client\Model\GraphNodeEnum $type_to Type of second node (required)
     * @param  mixed $relationship_types Relationship types to traverse (required)
     * @param  mixed $find_all_paths Whether to find all paths (including historical connections) or just the shortest currently active paths (optional)
     * @param  mixed $max_depth Maximum depth to traverse (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnectionsBetweenPair'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CVRNetworkResponse|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getConnectionsBetweenPair($id_from, $type_from, $id_to, $type_to, $relationship_types, $find_all_paths = null, $max_depth = null, string $contentType = self::contentTypes['getConnectionsBetweenPair'][0])
    {
        list($response) = $this->getConnectionsBetweenPairWithHttpInfo($id_from, $type_from, $id_to, $type_to, $relationship_types, $find_all_paths, $max_depth, $contentType);
        return $response;
    }

    /**
     * Operation getConnectionsBetweenPairWithHttpInfo
     *
     * Get Connections Between Pair
     *
     * @param  mixed $id_from Id of first node (required)
     * @param  \OpenAPI\Client\Model\GraphNodeEnum $type_from Type of first node (required)
     * @param  mixed $id_to Id of second node (required)
     * @param  \OpenAPI\Client\Model\GraphNodeEnum $type_to Type of second node (required)
     * @param  mixed $relationship_types Relationship types to traverse (required)
     * @param  mixed $find_all_paths Whether to find all paths (including historical connections) or just the shortest currently active paths (optional)
     * @param  mixed $max_depth Maximum depth to traverse (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnectionsBetweenPair'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CVRNetworkResponse|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConnectionsBetweenPairWithHttpInfo($id_from, $type_from, $id_to, $type_to, $relationship_types, $find_all_paths = null, $max_depth = null, string $contentType = self::contentTypes['getConnectionsBetweenPair'][0])
    {
        $request = $this->getConnectionsBetweenPairRequest($id_from, $type_from, $id_to, $type_to, $relationship_types, $find_all_paths, $max_depth, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CVRNetworkResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CVRNetworkResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CVRNetworkResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\CVRNetworkResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CVRNetworkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getConnectionsBetweenPairAsync
     *
     * Get Connections Between Pair
     *
     * @param  mixed $id_from Id of first node (required)
     * @param  \OpenAPI\Client\Model\GraphNodeEnum $type_from Type of first node (required)
     * @param  mixed $id_to Id of second node (required)
     * @param  \OpenAPI\Client\Model\GraphNodeEnum $type_to Type of second node (required)
     * @param  mixed $relationship_types Relationship types to traverse (required)
     * @param  mixed $find_all_paths Whether to find all paths (including historical connections) or just the shortest currently active paths (optional)
     * @param  mixed $max_depth Maximum depth to traverse (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnectionsBetweenPair'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectionsBetweenPairAsync($id_from, $type_from, $id_to, $type_to, $relationship_types, $find_all_paths = null, $max_depth = null, string $contentType = self::contentTypes['getConnectionsBetweenPair'][0])
    {
        return $this->getConnectionsBetweenPairAsyncWithHttpInfo($id_from, $type_from, $id_to, $type_to, $relationship_types, $find_all_paths, $max_depth, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConnectionsBetweenPairAsyncWithHttpInfo
     *
     * Get Connections Between Pair
     *
     * @param  mixed $id_from Id of first node (required)
     * @param  \OpenAPI\Client\Model\GraphNodeEnum $type_from Type of first node (required)
     * @param  mixed $id_to Id of second node (required)
     * @param  \OpenAPI\Client\Model\GraphNodeEnum $type_to Type of second node (required)
     * @param  mixed $relationship_types Relationship types to traverse (required)
     * @param  mixed $find_all_paths Whether to find all paths (including historical connections) or just the shortest currently active paths (optional)
     * @param  mixed $max_depth Maximum depth to traverse (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnectionsBetweenPair'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectionsBetweenPairAsyncWithHttpInfo($id_from, $type_from, $id_to, $type_to, $relationship_types, $find_all_paths = null, $max_depth = null, string $contentType = self::contentTypes['getConnectionsBetweenPair'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CVRNetworkResponse';
        $request = $this->getConnectionsBetweenPairRequest($id_from, $type_from, $id_to, $type_to, $relationship_types, $find_all_paths, $max_depth, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConnectionsBetweenPair'
     *
     * @param  mixed $id_from Id of first node (required)
     * @param  \OpenAPI\Client\Model\GraphNodeEnum $type_from Type of first node (required)
     * @param  mixed $id_to Id of second node (required)
     * @param  \OpenAPI\Client\Model\GraphNodeEnum $type_to Type of second node (required)
     * @param  mixed $relationship_types Relationship types to traverse (required)
     * @param  mixed $find_all_paths Whether to find all paths (including historical connections) or just the shortest currently active paths (optional)
     * @param  mixed $max_depth Maximum depth to traverse (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnectionsBetweenPair'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConnectionsBetweenPairRequest($id_from, $type_from, $id_to, $type_to, $relationship_types, $find_all_paths = null, $max_depth = null, string $contentType = self::contentTypes['getConnectionsBetweenPair'][0])
    {

        // verify the required parameter 'id_from' is set
        if ($id_from === null || (is_array($id_from) && count($id_from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_from when calling getConnectionsBetweenPair'
            );
        }

        // verify the required parameter 'type_from' is set
        if ($type_from === null || (is_array($type_from) && count($type_from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type_from when calling getConnectionsBetweenPair'
            );
        }

        // verify the required parameter 'id_to' is set
        if ($id_to === null || (is_array($id_to) && count($id_to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_to when calling getConnectionsBetweenPair'
            );
        }

        // verify the required parameter 'type_to' is set
        if ($type_to === null || (is_array($type_to) && count($type_to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type_to when calling getConnectionsBetweenPair'
            );
        }

        // verify the required parameter 'relationship_types' is set
        if ($relationship_types === null || (is_array($relationship_types) && count($relationship_types) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $relationship_types when calling getConnectionsBetweenPair'
            );
        }


        if ($max_depth !== null && $max_depth > 8.0) {
            throw new \InvalidArgumentException('invalid value for "$max_depth" when calling CVRDetCentraleVirksomhedsregisterApi.getConnectionsBetweenPair, must be smaller than or equal to 8.0.');
        }
        if ($max_depth !== null && $max_depth < 1.0) {
            throw new \InvalidArgumentException('invalid value for "$max_depth" when calling CVRDetCentraleVirksomhedsregisterApi.getConnectionsBetweenPair, must be bigger than or equal to 1.0.');
        }
        

        $resourcePath = '/api/v2/cvr/network/pair';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_from,
            'id_from', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type_from,
            'type_from', // param base name
            'GraphNodeEnum', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_to,
            'id_to', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type_to,
            'type_to', // param base name
            'GraphNodeEnum', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $relationship_types,
            'relationship_types', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $find_all_paths,
            'find_all_paths', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_depth,
            'max_depth', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCvrCompanies
     *
     * Get Cvr Companies
     *
     * @param  mixed $name name (optional)
     * @param  mixed $cvr_number cvr_number (optional)
     * @param  mixed $address address (optional)
     * @param  mixed $status status (optional)
     * @param  mixed $member member (optional)
     * @param  mixed $industry industry (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size size (optional)
     * @param  mixed $offset offset (optional)
     * @param  mixed $sort sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order order (optional)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrCompanies'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ESResponseModelCVRCompany|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCvrCompanies($name = null, $cvr_number = null, $address = null, $status = null, $member = null, $industry = null, $x = null, $y = null, $distance = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrCompanies'][0])
    {
        list($response) = $this->getCvrCompaniesWithHttpInfo($name, $cvr_number, $address, $status, $member, $industry, $x, $y, $distance, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getCvrCompaniesWithHttpInfo
     *
     * Get Cvr Companies
     *
     * @param  mixed $name (optional)
     * @param  mixed $cvr_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $status (optional)
     * @param  mixed $member (optional)
     * @param  mixed $industry (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrCompanies'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ESResponseModelCVRCompany|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCvrCompaniesWithHttpInfo($name = null, $cvr_number = null, $address = null, $status = null, $member = null, $industry = null, $x = null, $y = null, $distance = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrCompanies'][0])
    {
        $request = $this->getCvrCompaniesRequest($name, $cvr_number, $address, $status, $member, $industry, $x, $y, $distance, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ESResponseModelCVRCompany' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ESResponseModelCVRCompany' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ESResponseModelCVRCompany', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\ESResponseModelCVRCompany';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ESResponseModelCVRCompany',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCvrCompaniesAsync
     *
     * Get Cvr Companies
     *
     * @param  mixed $name (optional)
     * @param  mixed $cvr_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $status (optional)
     * @param  mixed $member (optional)
     * @param  mixed $industry (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrCompaniesAsync($name = null, $cvr_number = null, $address = null, $status = null, $member = null, $industry = null, $x = null, $y = null, $distance = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrCompanies'][0])
    {
        return $this->getCvrCompaniesAsyncWithHttpInfo($name, $cvr_number, $address, $status, $member, $industry, $x, $y, $distance, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCvrCompaniesAsyncWithHttpInfo
     *
     * Get Cvr Companies
     *
     * @param  mixed $name (optional)
     * @param  mixed $cvr_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $status (optional)
     * @param  mixed $member (optional)
     * @param  mixed $industry (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrCompaniesAsyncWithHttpInfo($name = null, $cvr_number = null, $address = null, $status = null, $member = null, $industry = null, $x = null, $y = null, $distance = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrCompanies'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ESResponseModelCVRCompany';
        $request = $this->getCvrCompaniesRequest($name, $cvr_number, $address, $status, $member, $industry, $x, $y, $distance, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCvrCompanies'
     *
     * @param  mixed $name (optional)
     * @param  mixed $cvr_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $status (optional)
     * @param  mixed $member (optional)
     * @param  mixed $industry (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCvrCompaniesRequest($name = null, $cvr_number = null, $address = null, $status = null, $member = null, $industry = null, $x = null, $y = null, $distance = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrCompanies'][0])
    {











        if ($size !== null && $size > 1000.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrCompanies, must be smaller than or equal to 1000.0.');
        }
        if ($size !== null && $size < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrCompanies, must be bigger than or equal to 0.0.');
        }
        
        if ($offset !== null && $offset > 3000.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrCompanies, must be smaller than or equal to 3000.0.');
        }
        if ($offset !== null && $offset < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrCompanies, must be bigger than or equal to 0.0.');
        }
        





        $resourcePath = '/api/v2/cvr/companies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cvr_number,
            'cvr_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $member,
            'member', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $industry,
            'industry', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $x,
            'x', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $y,
            'y', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $distance,
            'distance', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'ResightsApiModelsResponseSortOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCvrCompaniesAdvanced
     *
     * Get Cvr Companies Advanced
     *
     * @param  mixed $size size (optional)
     * @param  mixed $offset offset (optional)
     * @param  array<string,mixed> $request_body request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrCompaniesAdvanced'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ESResponseModelCVRCompany|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCvrCompaniesAdvanced($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCvrCompaniesAdvanced'][0])
    {
        list($response) = $this->getCvrCompaniesAdvancedWithHttpInfo($size, $offset, $request_body, $contentType);
        return $response;
    }

    /**
     * Operation getCvrCompaniesAdvancedWithHttpInfo
     *
     * Get Cvr Companies Advanced
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrCompaniesAdvanced'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ESResponseModelCVRCompany|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCvrCompaniesAdvancedWithHttpInfo($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCvrCompaniesAdvanced'][0])
    {
        $request = $this->getCvrCompaniesAdvancedRequest($size, $offset, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ESResponseModelCVRCompany' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ESResponseModelCVRCompany' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ESResponseModelCVRCompany', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\ESResponseModelCVRCompany';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ESResponseModelCVRCompany',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCvrCompaniesAdvancedAsync
     *
     * Get Cvr Companies Advanced
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrCompaniesAdvanced'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrCompaniesAdvancedAsync($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCvrCompaniesAdvanced'][0])
    {
        return $this->getCvrCompaniesAdvancedAsyncWithHttpInfo($size, $offset, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCvrCompaniesAdvancedAsyncWithHttpInfo
     *
     * Get Cvr Companies Advanced
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrCompaniesAdvanced'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrCompaniesAdvancedAsyncWithHttpInfo($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCvrCompaniesAdvanced'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ESResponseModelCVRCompany';
        $request = $this->getCvrCompaniesAdvancedRequest($size, $offset, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCvrCompaniesAdvanced'
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrCompaniesAdvanced'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCvrCompaniesAdvancedRequest($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCvrCompaniesAdvanced'][0])
    {

        if ($size !== null && $size > 1000.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrCompaniesAdvanced, must be smaller than or equal to 1000.0.');
        }
        if ($size !== null && $size < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrCompaniesAdvanced, must be bigger than or equal to 0.0.');
        }
        
        if ($offset !== null && $offset > 3000.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrCompaniesAdvanced, must be smaller than or equal to 3000.0.');
        }
        if ($offset !== null && $offset < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrCompaniesAdvanced, must be bigger than or equal to 0.0.');
        }
        


        $resourcePath = '/api/v2/cvr/companies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCvrCompany
     *
     * Get Cvr Company
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrCompany'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CVRCompany|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCvrCompany($cvr_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrCompany'][0])
    {
        list($response) = $this->getCvrCompanyWithHttpInfo($cvr_number, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getCvrCompanyWithHttpInfo
     *
     * Get Cvr Company
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrCompany'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CVRCompany|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCvrCompanyWithHttpInfo($cvr_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrCompany'][0])
    {
        $request = $this->getCvrCompanyRequest($cvr_number, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CVRCompany' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CVRCompany' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CVRCompany', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\CVRCompany';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CVRCompany',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCvrCompanyAsync
     *
     * Get Cvr Company
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrCompany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrCompanyAsync($cvr_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrCompany'][0])
    {
        return $this->getCvrCompanyAsyncWithHttpInfo($cvr_number, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCvrCompanyAsyncWithHttpInfo
     *
     * Get Cvr Company
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrCompany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrCompanyAsyncWithHttpInfo($cvr_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrCompany'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CVRCompany';
        $request = $this->getCvrCompanyRequest($cvr_number, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCvrCompany'
     *
     * @param  mixed $cvr_number CVR-number of a company (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrCompany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCvrCompanyRequest($cvr_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrCompany'][0])
    {

        // verify the required parameter 'cvr_number' is set
        if ($cvr_number === null || (is_array($cvr_number) && count($cvr_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cvr_number when calling getCvrCompany'
            );
        }




        $resourcePath = '/api/v2/cvr/companies/{cvr_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cvr_number !== null) {
            $resourcePath = str_replace(
                '{' . 'cvr_number' . '}',
                ObjectSerializer::toPathValue($cvr_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCvrMember
     *
     * Get Cvr Member
     *
     * @param  mixed $unit_number Unit-number of a member (required)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrMember'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ResightsModelsTablesCvrMemberMemberCVRMember|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCvrMember($unit_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrMember'][0])
    {
        list($response) = $this->getCvrMemberWithHttpInfo($unit_number, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getCvrMemberWithHttpInfo
     *
     * Get Cvr Member
     *
     * @param  mixed $unit_number Unit-number of a member (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrMember'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ResightsModelsTablesCvrMemberMemberCVRMember|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCvrMemberWithHttpInfo($unit_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrMember'][0])
    {
        $request = $this->getCvrMemberRequest($unit_number, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ResightsModelsTablesCvrMemberMemberCVRMember' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ResightsModelsTablesCvrMemberMemberCVRMember' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ResightsModelsTablesCvrMemberMemberCVRMember', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\ResightsModelsTablesCvrMemberMemberCVRMember';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResightsModelsTablesCvrMemberMemberCVRMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCvrMemberAsync
     *
     * Get Cvr Member
     *
     * @param  mixed $unit_number Unit-number of a member (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrMember'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrMemberAsync($unit_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrMember'][0])
    {
        return $this->getCvrMemberAsyncWithHttpInfo($unit_number, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCvrMemberAsyncWithHttpInfo
     *
     * Get Cvr Member
     *
     * @param  mixed $unit_number Unit-number of a member (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrMember'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrMemberAsyncWithHttpInfo($unit_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrMember'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ResightsModelsTablesCvrMemberMemberCVRMember';
        $request = $this->getCvrMemberRequest($unit_number, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCvrMember'
     *
     * @param  mixed $unit_number Unit-number of a member (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrMember'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCvrMemberRequest($unit_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrMember'][0])
    {

        // verify the required parameter 'unit_number' is set
        if ($unit_number === null || (is_array($unit_number) && count($unit_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit_number when calling getCvrMember'
            );
        }




        $resourcePath = '/api/v2/cvr/members/{unit_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($unit_number !== null) {
            $resourcePath = str_replace(
                '{' . 'unit_number' . '}',
                ObjectSerializer::toPathValue($unit_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCvrMembers
     *
     * Get Cvr Members
     *
     * @param  mixed $name name (optional)
     * @param  mixed $unit_number unit_number (optional)
     * @param  mixed $address address (optional)
     * @param  mixed $type type (optional)
     * @param  mixed $company company (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $size size (optional)
     * @param  mixed $offset offset (optional)
     * @param  mixed $sort sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order order (optional)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrMembers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ESResponseModelCVRMember|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCvrMembers($name = null, $unit_number = null, $address = null, $type = null, $company = null, $x = null, $y = null, $distance = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, $page = null, string $contentType = self::contentTypes['getCvrMembers'][0])
    {
        list($response) = $this->getCvrMembersWithHttpInfo($name, $unit_number, $address, $type, $company, $x, $y, $distance, $size, $offset, $sort, $order, $includes, $excludes, $page, $contentType);
        return $response;
    }

    /**
     * Operation getCvrMembersWithHttpInfo
     *
     * Get Cvr Members
     *
     * @param  mixed $name (optional)
     * @param  mixed $unit_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $type (optional)
     * @param  mixed $company (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrMembers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ESResponseModelCVRMember|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCvrMembersWithHttpInfo($name = null, $unit_number = null, $address = null, $type = null, $company = null, $x = null, $y = null, $distance = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, $page = null, string $contentType = self::contentTypes['getCvrMembers'][0])
    {
        $request = $this->getCvrMembersRequest($name, $unit_number, $address, $type, $company, $x, $y, $distance, $size, $offset, $sort, $order, $includes, $excludes, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ESResponseModelCVRMember' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ESResponseModelCVRMember' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ESResponseModelCVRMember', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\ESResponseModelCVRMember';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ESResponseModelCVRMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCvrMembersAsync
     *
     * Get Cvr Members
     *
     * @param  mixed $name (optional)
     * @param  mixed $unit_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $type (optional)
     * @param  mixed $company (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrMembersAsync($name = null, $unit_number = null, $address = null, $type = null, $company = null, $x = null, $y = null, $distance = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, $page = null, string $contentType = self::contentTypes['getCvrMembers'][0])
    {
        return $this->getCvrMembersAsyncWithHttpInfo($name, $unit_number, $address, $type, $company, $x, $y, $distance, $size, $offset, $sort, $order, $includes, $excludes, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCvrMembersAsyncWithHttpInfo
     *
     * Get Cvr Members
     *
     * @param  mixed $name (optional)
     * @param  mixed $unit_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $type (optional)
     * @param  mixed $company (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrMembersAsyncWithHttpInfo($name = null, $unit_number = null, $address = null, $type = null, $company = null, $x = null, $y = null, $distance = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, $page = null, string $contentType = self::contentTypes['getCvrMembers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ESResponseModelCVRMember';
        $request = $this->getCvrMembersRequest($name, $unit_number, $address, $type, $company, $x, $y, $distance, $size, $offset, $sort, $order, $includes, $excludes, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCvrMembers'
     *
     * @param  mixed $name (optional)
     * @param  mixed $unit_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $type (optional)
     * @param  mixed $company (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCvrMembersRequest($name = null, $unit_number = null, $address = null, $type = null, $company = null, $x = null, $y = null, $distance = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, $page = null, string $contentType = self::contentTypes['getCvrMembers'][0])
    {









        if ($size !== null && $size > 1000.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrMembers, must be smaller than or equal to 1000.0.');
        }
        if ($size !== null && $size < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrMembers, must be bigger than or equal to 0.0.');
        }
        
        if ($offset !== null && $offset > 3000.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrMembers, must be smaller than or equal to 3000.0.');
        }
        if ($offset !== null && $offset < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrMembers, must be bigger than or equal to 0.0.');
        }
        






        $resourcePath = '/api/v2/cvr/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unit_number,
            'unit_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $company,
            'company', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $x,
            'x', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $y,
            'y', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $distance,
            'distance', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'ResightsApiModelsResponseSortOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCvrMembersAdvanced
     *
     * Get Cvr Members Advanced
     *
     * @param  mixed $size size (optional)
     * @param  mixed $offset offset (optional)
     * @param  array<string,mixed> $request_body request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrMembersAdvanced'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ESResponseModelCVRMember|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCvrMembersAdvanced($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCvrMembersAdvanced'][0])
    {
        list($response) = $this->getCvrMembersAdvancedWithHttpInfo($size, $offset, $request_body, $contentType);
        return $response;
    }

    /**
     * Operation getCvrMembersAdvancedWithHttpInfo
     *
     * Get Cvr Members Advanced
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrMembersAdvanced'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ESResponseModelCVRMember|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCvrMembersAdvancedWithHttpInfo($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCvrMembersAdvanced'][0])
    {
        $request = $this->getCvrMembersAdvancedRequest($size, $offset, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ESResponseModelCVRMember' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ESResponseModelCVRMember' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ESResponseModelCVRMember', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\ESResponseModelCVRMember';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ESResponseModelCVRMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCvrMembersAdvancedAsync
     *
     * Get Cvr Members Advanced
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrMembersAdvanced'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrMembersAdvancedAsync($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCvrMembersAdvanced'][0])
    {
        return $this->getCvrMembersAdvancedAsyncWithHttpInfo($size, $offset, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCvrMembersAdvancedAsyncWithHttpInfo
     *
     * Get Cvr Members Advanced
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrMembersAdvanced'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrMembersAdvancedAsyncWithHttpInfo($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCvrMembersAdvanced'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ESResponseModelCVRMember';
        $request = $this->getCvrMembersAdvancedRequest($size, $offset, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCvrMembersAdvanced'
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrMembersAdvanced'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCvrMembersAdvancedRequest($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCvrMembersAdvanced'][0])
    {

        if ($size !== null && $size > 1000.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrMembersAdvanced, must be smaller than or equal to 1000.0.');
        }
        if ($size !== null && $size < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrMembersAdvanced, must be bigger than or equal to 0.0.');
        }
        
        if ($offset !== null && $offset > 3000.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrMembersAdvanced, must be smaller than or equal to 3000.0.');
        }
        if ($offset !== null && $offset < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrMembersAdvanced, must be bigger than or equal to 0.0.');
        }
        


        $resourcePath = '/api/v2/cvr/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCvrNetwork
     *
     * Get Cvr Network
     *
     * @param  mixed $id Either CVR-number of a company, unit number of a person/other member or an EJF id (required)
     * @param  mixed $depth_up depth_up (optional)
     * @param  mixed $depth_down depth_down (optional)
     * @param  mixed $include_properties include_properties (optional)
     * @param  mixed $include_ownership_degrees include_ownership_degrees (optional)
     * @param  mixed $include_inactive include_inactive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrNetwork'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CVROwnershipNetworkResponse|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCvrNetwork($id, $depth_up = null, $depth_down = null, $include_properties = null, $include_ownership_degrees = null, $include_inactive = null, string $contentType = self::contentTypes['getCvrNetwork'][0])
    {
        list($response) = $this->getCvrNetworkWithHttpInfo($id, $depth_up, $depth_down, $include_properties, $include_ownership_degrees, $include_inactive, $contentType);
        return $response;
    }

    /**
     * Operation getCvrNetworkWithHttpInfo
     *
     * Get Cvr Network
     *
     * @param  mixed $id Either CVR-number of a company, unit number of a person/other member or an EJF id (required)
     * @param  mixed $depth_up (optional)
     * @param  mixed $depth_down (optional)
     * @param  mixed $include_properties (optional)
     * @param  mixed $include_ownership_degrees (optional)
     * @param  mixed $include_inactive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrNetwork'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CVROwnershipNetworkResponse|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCvrNetworkWithHttpInfo($id, $depth_up = null, $depth_down = null, $include_properties = null, $include_ownership_degrees = null, $include_inactive = null, string $contentType = self::contentTypes['getCvrNetwork'][0])
    {
        $request = $this->getCvrNetworkRequest($id, $depth_up, $depth_down, $include_properties, $include_ownership_degrees, $include_inactive, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CVROwnershipNetworkResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CVROwnershipNetworkResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CVROwnershipNetworkResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\CVROwnershipNetworkResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CVROwnershipNetworkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCvrNetworkAsync
     *
     * Get Cvr Network
     *
     * @param  mixed $id Either CVR-number of a company, unit number of a person/other member or an EJF id (required)
     * @param  mixed $depth_up (optional)
     * @param  mixed $depth_down (optional)
     * @param  mixed $include_properties (optional)
     * @param  mixed $include_ownership_degrees (optional)
     * @param  mixed $include_inactive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrNetwork'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrNetworkAsync($id, $depth_up = null, $depth_down = null, $include_properties = null, $include_ownership_degrees = null, $include_inactive = null, string $contentType = self::contentTypes['getCvrNetwork'][0])
    {
        return $this->getCvrNetworkAsyncWithHttpInfo($id, $depth_up, $depth_down, $include_properties, $include_ownership_degrees, $include_inactive, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCvrNetworkAsyncWithHttpInfo
     *
     * Get Cvr Network
     *
     * @param  mixed $id Either CVR-number of a company, unit number of a person/other member or an EJF id (required)
     * @param  mixed $depth_up (optional)
     * @param  mixed $depth_down (optional)
     * @param  mixed $include_properties (optional)
     * @param  mixed $include_ownership_degrees (optional)
     * @param  mixed $include_inactive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrNetwork'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrNetworkAsyncWithHttpInfo($id, $depth_up = null, $depth_down = null, $include_properties = null, $include_ownership_degrees = null, $include_inactive = null, string $contentType = self::contentTypes['getCvrNetwork'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CVROwnershipNetworkResponse';
        $request = $this->getCvrNetworkRequest($id, $depth_up, $depth_down, $include_properties, $include_ownership_degrees, $include_inactive, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCvrNetwork'
     *
     * @param  mixed $id Either CVR-number of a company, unit number of a person/other member or an EJF id (required)
     * @param  mixed $depth_up (optional)
     * @param  mixed $depth_down (optional)
     * @param  mixed $include_properties (optional)
     * @param  mixed $include_ownership_degrees (optional)
     * @param  mixed $include_inactive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrNetwork'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCvrNetworkRequest($id, $depth_up = null, $depth_down = null, $include_properties = null, $include_ownership_degrees = null, $include_inactive = null, string $contentType = self::contentTypes['getCvrNetwork'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCvrNetwork'
            );
        }







        $resourcePath = '/api/v2/cvr/{id}/network';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $depth_up,
            'depth_up', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $depth_down,
            'depth_down', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_properties,
            'include_properties', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_ownership_degrees,
            'include_ownership_degrees', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_inactive,
            'include_inactive', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCvrPUnit
     *
     * Get Cvr P Unit
     *
     * @param  mixed $p_number P-number of a p-unit (required)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrPUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CVRPUnit|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCvrPUnit($p_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrPUnit'][0])
    {
        list($response) = $this->getCvrPUnitWithHttpInfo($p_number, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getCvrPUnitWithHttpInfo
     *
     * Get Cvr P Unit
     *
     * @param  mixed $p_number P-number of a p-unit (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrPUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CVRPUnit|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCvrPUnitWithHttpInfo($p_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrPUnit'][0])
    {
        $request = $this->getCvrPUnitRequest($p_number, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CVRPUnit' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CVRPUnit' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CVRPUnit', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\CVRPUnit';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CVRPUnit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCvrPUnitAsync
     *
     * Get Cvr P Unit
     *
     * @param  mixed $p_number P-number of a p-unit (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrPUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrPUnitAsync($p_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrPUnit'][0])
    {
        return $this->getCvrPUnitAsyncWithHttpInfo($p_number, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCvrPUnitAsyncWithHttpInfo
     *
     * Get Cvr P Unit
     *
     * @param  mixed $p_number P-number of a p-unit (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrPUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrPUnitAsyncWithHttpInfo($p_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrPUnit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CVRPUnit';
        $request = $this->getCvrPUnitRequest($p_number, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCvrPUnit'
     *
     * @param  mixed $p_number P-number of a p-unit (required)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrPUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCvrPUnitRequest($p_number, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrPUnit'][0])
    {

        // verify the required parameter 'p_number' is set
        if ($p_number === null || (is_array($p_number) && count($p_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $p_number when calling getCvrPUnit'
            );
        }




        $resourcePath = '/api/v2/cvr/p-units/{p_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($p_number !== null) {
            $resourcePath = str_replace(
                '{' . 'p_number' . '}',
                ObjectSerializer::toPathValue($p_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCvrPUnits
     *
     * Get Cvr P Units
     *
     * @param  mixed $name name (optional)
     * @param  mixed $p_number p_number (optional)
     * @param  mixed $cvr_number cvr_number (optional)
     * @param  mixed $address address (optional)
     * @param  mixed $status status (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size size (optional)
     * @param  mixed $offset offset (optional)
     * @param  mixed $sort sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order order (optional)
     * @param  mixed $includes includes (optional)
     * @param  mixed $excludes excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrPUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ESResponseModelCVRPUnit|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCvrPUnits($name = null, $p_number = null, $cvr_number = null, $address = null, $status = null, $x = null, $y = null, $distance = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrPUnits'][0])
    {
        list($response) = $this->getCvrPUnitsWithHttpInfo($name, $p_number, $cvr_number, $address, $status, $x, $y, $distance, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType);
        return $response;
    }

    /**
     * Operation getCvrPUnitsWithHttpInfo
     *
     * Get Cvr P Units
     *
     * @param  mixed $name (optional)
     * @param  mixed $p_number (optional)
     * @param  mixed $cvr_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $status (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrPUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ESResponseModelCVRPUnit|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCvrPUnitsWithHttpInfo($name = null, $p_number = null, $cvr_number = null, $address = null, $status = null, $x = null, $y = null, $distance = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrPUnits'][0])
    {
        $request = $this->getCvrPUnitsRequest($name, $p_number, $cvr_number, $address, $status, $x, $y, $distance, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ESResponseModelCVRPUnit' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ESResponseModelCVRPUnit' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ESResponseModelCVRPUnit', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\ESResponseModelCVRPUnit';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ESResponseModelCVRPUnit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCvrPUnitsAsync
     *
     * Get Cvr P Units
     *
     * @param  mixed $name (optional)
     * @param  mixed $p_number (optional)
     * @param  mixed $cvr_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $status (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrPUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrPUnitsAsync($name = null, $p_number = null, $cvr_number = null, $address = null, $status = null, $x = null, $y = null, $distance = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrPUnits'][0])
    {
        return $this->getCvrPUnitsAsyncWithHttpInfo($name, $p_number, $cvr_number, $address, $status, $x, $y, $distance, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCvrPUnitsAsyncWithHttpInfo
     *
     * Get Cvr P Units
     *
     * @param  mixed $name (optional)
     * @param  mixed $p_number (optional)
     * @param  mixed $cvr_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $status (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrPUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrPUnitsAsyncWithHttpInfo($name = null, $p_number = null, $cvr_number = null, $address = null, $status = null, $x = null, $y = null, $distance = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrPUnits'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ESResponseModelCVRPUnit';
        $request = $this->getCvrPUnitsRequest($name, $p_number, $cvr_number, $address, $status, $x, $y, $distance, $page, $size, $offset, $sort, $order, $includes, $excludes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCvrPUnits'
     *
     * @param  mixed $name (optional)
     * @param  mixed $p_number (optional)
     * @param  mixed $cvr_number (optional)
     * @param  mixed $address (optional)
     * @param  mixed $status (optional)
     * @param  mixed $x Longitude. Example: 12.5494 (optional)
     * @param  mixed $y Latitute. Example: 55.6722 (optional)
     * @param  mixed $distance Distance from x, y (optional)
     * @param  mixed $page Page id for pagination (optional)
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  mixed $sort (optional)
     * @param  \OpenAPI\Client\Model\ResightsApiModelsResponseSortOrder $order (optional)
     * @param  mixed $includes (optional)
     * @param  mixed $excludes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrPUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCvrPUnitsRequest($name = null, $p_number = null, $cvr_number = null, $address = null, $status = null, $x = null, $y = null, $distance = null, $page = null, $size = null, $offset = null, $sort = null, $order = null, $includes = null, $excludes = null, string $contentType = self::contentTypes['getCvrPUnits'][0])
    {










        if ($size !== null && $size > 1000.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrPUnits, must be smaller than or equal to 1000.0.');
        }
        if ($size !== null && $size < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrPUnits, must be bigger than or equal to 0.0.');
        }
        
        if ($offset !== null && $offset > 3000.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrPUnits, must be smaller than or equal to 3000.0.');
        }
        if ($offset !== null && $offset < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrPUnits, must be bigger than or equal to 0.0.');
        }
        





        $resourcePath = '/api/v2/cvr/p-units';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $p_number,
            'p_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cvr_number,
            'cvr_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $x,
            'x', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $y,
            'y', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $distance,
            'distance', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'ResightsApiModelsResponseSortOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includes,
            'includes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excludes,
            'excludes', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCvrPUnitsAdvanced
     *
     * Get Cvr P Units Advanced
     *
     * @param  mixed $size size (optional)
     * @param  mixed $offset offset (optional)
     * @param  array<string,mixed> $request_body request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrPUnitsAdvanced'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ESResponseModelCVRPUnit|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getCvrPUnitsAdvanced($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCvrPUnitsAdvanced'][0])
    {
        list($response) = $this->getCvrPUnitsAdvancedWithHttpInfo($size, $offset, $request_body, $contentType);
        return $response;
    }

    /**
     * Operation getCvrPUnitsAdvancedWithHttpInfo
     *
     * Get Cvr P Units Advanced
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrPUnitsAdvanced'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ESResponseModelCVRPUnit|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCvrPUnitsAdvancedWithHttpInfo($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCvrPUnitsAdvanced'][0])
    {
        $request = $this->getCvrPUnitsAdvancedRequest($size, $offset, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ESResponseModelCVRPUnit' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ESResponseModelCVRPUnit' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ESResponseModelCVRPUnit', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\ESResponseModelCVRPUnit';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ESResponseModelCVRPUnit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getCvrPUnitsAdvancedAsync
     *
     * Get Cvr P Units Advanced
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrPUnitsAdvanced'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrPUnitsAdvancedAsync($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCvrPUnitsAdvanced'][0])
    {
        return $this->getCvrPUnitsAdvancedAsyncWithHttpInfo($size, $offset, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCvrPUnitsAdvancedAsyncWithHttpInfo
     *
     * Get Cvr P Units Advanced
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrPUnitsAdvanced'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCvrPUnitsAdvancedAsyncWithHttpInfo($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCvrPUnitsAdvanced'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ESResponseModelCVRPUnit';
        $request = $this->getCvrPUnitsAdvancedRequest($size, $offset, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCvrPUnitsAdvanced'
     *
     * @param  mixed $size (optional)
     * @param  mixed $offset (optional)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCvrPUnitsAdvanced'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCvrPUnitsAdvancedRequest($size = null, $offset = null, $request_body = null, string $contentType = self::contentTypes['getCvrPUnitsAdvanced'][0])
    {

        if ($size !== null && $size > 1000.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrPUnitsAdvanced, must be smaller than or equal to 1000.0.');
        }
        if ($size !== null && $size < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrPUnitsAdvanced, must be bigger than or equal to 0.0.');
        }
        
        if ($offset !== null && $offset > 3000.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrPUnitsAdvanced, must be smaller than or equal to 3000.0.');
        }
        if ($offset !== null && $offset < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CVRDetCentraleVirksomhedsregisterApi.getCvrPUnitsAdvanced, must be bigger than or equal to 0.0.');
        }
        


        $resourcePath = '/api/v2/cvr/p-units';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMemberTimeline
     *
     * Get Member Timeline
     *
     * @param  mixed $cvr_number Unit-number of a member (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberTimeline'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getMemberTimeline($cvr_number, string $contentType = self::contentTypes['getMemberTimeline'][0])
    {
        list($response) = $this->getMemberTimelineWithHttpInfo($cvr_number, $contentType);
        return $response;
    }

    /**
     * Operation getMemberTimelineWithHttpInfo
     *
     * Get Member Timeline
     *
     * @param  mixed $cvr_number Unit-number of a member (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberTimeline'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMemberTimelineWithHttpInfo($cvr_number, string $contentType = self::contentTypes['getMemberTimeline'][0])
    {
        $request = $this->getMemberTimelineRequest($cvr_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getMemberTimelineAsync
     *
     * Get Member Timeline
     *
     * @param  mixed $cvr_number Unit-number of a member (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberTimeline'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMemberTimelineAsync($cvr_number, string $contentType = self::contentTypes['getMemberTimeline'][0])
    {
        return $this->getMemberTimelineAsyncWithHttpInfo($cvr_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMemberTimelineAsyncWithHttpInfo
     *
     * Get Member Timeline
     *
     * @param  mixed $cvr_number Unit-number of a member (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberTimeline'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMemberTimelineAsyncWithHttpInfo($cvr_number, string $contentType = self::contentTypes['getMemberTimeline'][0])
    {
        $returnType = 'mixed';
        $request = $this->getMemberTimelineRequest($cvr_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMemberTimeline'
     *
     * @param  mixed $cvr_number Unit-number of a member (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberTimeline'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMemberTimelineRequest($cvr_number, string $contentType = self::contentTypes['getMemberTimeline'][0])
    {

        // verify the required parameter 'cvr_number' is set
        if ($cvr_number === null || (is_array($cvr_number) && count($cvr_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cvr_number when calling getMemberTimeline'
            );
        }


        $resourcePath = '/api/v2/cvr/members/{cvr_number}/timeline';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cvr_number !== null) {
            $resourcePath = str_replace(
                '{' . 'cvr_number' . '}',
                ObjectSerializer::toPathValue($cvr_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPartnersInCrime
     *
     * Get Partners In Crime
     *
     * @param  mixed $id Unit number of a person/other member in CVR (required)
     * @param  mixed $relationship_types Relationship types to traverse (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPartnersInCrime'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CVRNetworkResponse|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getPartnersInCrime($id, $relationship_types, string $contentType = self::contentTypes['getPartnersInCrime'][0])
    {
        list($response) = $this->getPartnersInCrimeWithHttpInfo($id, $relationship_types, $contentType);
        return $response;
    }

    /**
     * Operation getPartnersInCrimeWithHttpInfo
     *
     * Get Partners In Crime
     *
     * @param  mixed $id Unit number of a person/other member in CVR (required)
     * @param  mixed $relationship_types Relationship types to traverse (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPartnersInCrime'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CVRNetworkResponse|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPartnersInCrimeWithHttpInfo($id, $relationship_types, string $contentType = self::contentTypes['getPartnersInCrime'][0])
    {
        $request = $this->getPartnersInCrimeRequest($id, $relationship_types, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CVRNetworkResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CVRNetworkResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CVRNetworkResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\CVRNetworkResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CVRNetworkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPartnersInCrimeAsync
     *
     * Get Partners In Crime
     *
     * @param  mixed $id Unit number of a person/other member in CVR (required)
     * @param  mixed $relationship_types Relationship types to traverse (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPartnersInCrime'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPartnersInCrimeAsync($id, $relationship_types, string $contentType = self::contentTypes['getPartnersInCrime'][0])
    {
        return $this->getPartnersInCrimeAsyncWithHttpInfo($id, $relationship_types, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPartnersInCrimeAsyncWithHttpInfo
     *
     * Get Partners In Crime
     *
     * @param  mixed $id Unit number of a person/other member in CVR (required)
     * @param  mixed $relationship_types Relationship types to traverse (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPartnersInCrime'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPartnersInCrimeAsyncWithHttpInfo($id, $relationship_types, string $contentType = self::contentTypes['getPartnersInCrime'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CVRNetworkResponse';
        $request = $this->getPartnersInCrimeRequest($id, $relationship_types, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPartnersInCrime'
     *
     * @param  mixed $id Unit number of a person/other member in CVR (required)
     * @param  mixed $relationship_types Relationship types to traverse (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPartnersInCrime'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPartnersInCrimeRequest($id, $relationship_types, string $contentType = self::contentTypes['getPartnersInCrime'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPartnersInCrime'
            );
        }

        // verify the required parameter 'relationship_types' is set
        if ($relationship_types === null || (is_array($relationship_types) && count($relationship_types) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $relationship_types when calling getPartnersInCrime'
            );
        }


        $resourcePath = '/api/v2/cvr/{id}/partners-in-crime';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $relationship_types,
            'relationship_types', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
