<?php
/**
 * TinglysningAndelsboligApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API 游녦</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TinglysningAndelsboligApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TinglysningAndelsboligApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAndelsboligattestByUuid' => [
            'application/json',
        ],
        'searchAndelsboligByAddress' => [
            'application/json',
        ],
        'searchAndelsboligByCvrNumber' => [
            'application/json',
        ],
        'searchAndelsboligByMunicipality' => [
            'application/json',
        ],
        'searchAndelsboligByPerson' => [
            'application/json',
        ],
        'searchAndelsboligByZipCode' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAndelsboligattestByUuid
     *
     * Get Andelsboligattest By Uuid
     *
     * @param  mixed $uuid UUID p친 attest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAndelsboligattestByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AndelsboligattestModel|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getAndelsboligattestByUuid($uuid, string $contentType = self::contentTypes['getAndelsboligattestByUuid'][0])
    {
        list($response) = $this->getAndelsboligattestByUuidWithHttpInfo($uuid, $contentType);
        return $response;
    }

    /**
     * Operation getAndelsboligattestByUuidWithHttpInfo
     *
     * Get Andelsboligattest By Uuid
     *
     * @param  mixed $uuid UUID p친 attest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAndelsboligattestByUuid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AndelsboligattestModel|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAndelsboligattestByUuidWithHttpInfo($uuid, string $contentType = self::contentTypes['getAndelsboligattestByUuid'][0])
    {
        $request = $this->getAndelsboligattestByUuidRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AndelsboligattestModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AndelsboligattestModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AndelsboligattestModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\AndelsboligattestModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AndelsboligattestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getAndelsboligattestByUuidAsync
     *
     * Get Andelsboligattest By Uuid
     *
     * @param  mixed $uuid UUID p친 attest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAndelsboligattestByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAndelsboligattestByUuidAsync($uuid, string $contentType = self::contentTypes['getAndelsboligattestByUuid'][0])
    {
        return $this->getAndelsboligattestByUuidAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAndelsboligattestByUuidAsyncWithHttpInfo
     *
     * Get Andelsboligattest By Uuid
     *
     * @param  mixed $uuid UUID p친 attest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAndelsboligattestByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAndelsboligattestByUuidAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['getAndelsboligattestByUuid'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AndelsboligattestModel';
        $request = $this->getAndelsboligattestByUuidRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAndelsboligattestByUuid'
     *
     * @param  mixed $uuid UUID p친 attest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAndelsboligattestByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAndelsboligattestByUuidRequest($uuid, string $contentType = self::contentTypes['getAndelsboligattestByUuid'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getAndelsboligattestByUuid'
            );
        }


        $resourcePath = '/api/v2/tinglysning/andelsbolig/attest/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchAndelsboligByAddress
     *
     * Search Andelsbolig By Address
     *
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $zip_code Postnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door D칮r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByAddress'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function searchAndelsboligByAddress($street_name, $house_number, $zip_code, $floor = null, $door = null, string $contentType = self::contentTypes['searchAndelsboligByAddress'][0])
    {
        list($response) = $this->searchAndelsboligByAddressWithHttpInfo($street_name, $house_number, $zip_code, $floor, $door, $contentType);
        return $response;
    }

    /**
     * Operation searchAndelsboligByAddressWithHttpInfo
     *
     * Search Andelsbolig By Address
     *
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $zip_code Postnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door D칮r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByAddress'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchAndelsboligByAddressWithHttpInfo($street_name, $house_number, $zip_code, $floor = null, $door = null, string $contentType = self::contentTypes['searchAndelsboligByAddress'][0])
    {
        $request = $this->searchAndelsboligByAddressRequest($street_name, $house_number, $zip_code, $floor, $door, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation searchAndelsboligByAddressAsync
     *
     * Search Andelsbolig By Address
     *
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $zip_code Postnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door D칮r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAndelsboligByAddressAsync($street_name, $house_number, $zip_code, $floor = null, $door = null, string $contentType = self::contentTypes['searchAndelsboligByAddress'][0])
    {
        return $this->searchAndelsboligByAddressAsyncWithHttpInfo($street_name, $house_number, $zip_code, $floor, $door, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAndelsboligByAddressAsyncWithHttpInfo
     *
     * Search Andelsbolig By Address
     *
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $zip_code Postnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door D칮r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAndelsboligByAddressAsyncWithHttpInfo($street_name, $house_number, $zip_code, $floor = null, $door = null, string $contentType = self::contentTypes['searchAndelsboligByAddress'][0])
    {
        $returnType = 'mixed';
        $request = $this->searchAndelsboligByAddressRequest($street_name, $house_number, $zip_code, $floor, $door, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchAndelsboligByAddress'
     *
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $zip_code Postnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door D칮r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchAndelsboligByAddressRequest($street_name, $house_number, $zip_code, $floor = null, $door = null, string $contentType = self::contentTypes['searchAndelsboligByAddress'][0])
    {

        // verify the required parameter 'street_name' is set
        if ($street_name === null || (is_array($street_name) && count($street_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $street_name when calling searchAndelsboligByAddress'
            );
        }

        // verify the required parameter 'house_number' is set
        if ($house_number === null || (is_array($house_number) && count($house_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $house_number when calling searchAndelsboligByAddress'
            );
        }

        // verify the required parameter 'zip_code' is set
        if ($zip_code === null || (is_array($zip_code) && count($zip_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zip_code when calling searchAndelsboligByAddress'
            );
        }




        $resourcePath = '/api/v2/tinglysning/andelsbolig/search/address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $street_name,
            'street_name', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $house_number,
            'house_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zip_code,
            'zip_code', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $floor,
            'floor', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $door,
            'door', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchAndelsboligByCvrNumber
     *
     * Search Andelsbolig By Cvr Number
     *
     * @param  mixed $cvr_number CVR-nummer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByCvrNumber'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function searchAndelsboligByCvrNumber($cvr_number, string $contentType = self::contentTypes['searchAndelsboligByCvrNumber'][0])
    {
        list($response) = $this->searchAndelsboligByCvrNumberWithHttpInfo($cvr_number, $contentType);
        return $response;
    }

    /**
     * Operation searchAndelsboligByCvrNumberWithHttpInfo
     *
     * Search Andelsbolig By Cvr Number
     *
     * @param  mixed $cvr_number CVR-nummer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByCvrNumber'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchAndelsboligByCvrNumberWithHttpInfo($cvr_number, string $contentType = self::contentTypes['searchAndelsboligByCvrNumber'][0])
    {
        $request = $this->searchAndelsboligByCvrNumberRequest($cvr_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation searchAndelsboligByCvrNumberAsync
     *
     * Search Andelsbolig By Cvr Number
     *
     * @param  mixed $cvr_number CVR-nummer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByCvrNumber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAndelsboligByCvrNumberAsync($cvr_number, string $contentType = self::contentTypes['searchAndelsboligByCvrNumber'][0])
    {
        return $this->searchAndelsboligByCvrNumberAsyncWithHttpInfo($cvr_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAndelsboligByCvrNumberAsyncWithHttpInfo
     *
     * Search Andelsbolig By Cvr Number
     *
     * @param  mixed $cvr_number CVR-nummer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByCvrNumber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAndelsboligByCvrNumberAsyncWithHttpInfo($cvr_number, string $contentType = self::contentTypes['searchAndelsboligByCvrNumber'][0])
    {
        $returnType = 'mixed';
        $request = $this->searchAndelsboligByCvrNumberRequest($cvr_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchAndelsboligByCvrNumber'
     *
     * @param  mixed $cvr_number CVR-nummer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByCvrNumber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchAndelsboligByCvrNumberRequest($cvr_number, string $contentType = self::contentTypes['searchAndelsboligByCvrNumber'][0])
    {

        // verify the required parameter 'cvr_number' is set
        if ($cvr_number === null || (is_array($cvr_number) && count($cvr_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cvr_number when calling searchAndelsboligByCvrNumber'
            );
        }


        $resourcePath = '/api/v2/tinglysning/andelsbolig/search/cvr-number/{cvr_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cvr_number !== null) {
            $resourcePath = str_replace(
                '{' . 'cvr_number' . '}',
                ObjectSerializer::toPathValue($cvr_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchAndelsboligByMunicipality
     *
     * Search Andelsbolig By Municipality
     *
     * @param  mixed $municipality_code Kommunekode (required)
     * @param  mixed $street_code Vejkode (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door D칮r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByMunicipality'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function searchAndelsboligByMunicipality($municipality_code, $street_code, $house_number, $floor = null, $door = null, string $contentType = self::contentTypes['searchAndelsboligByMunicipality'][0])
    {
        list($response) = $this->searchAndelsboligByMunicipalityWithHttpInfo($municipality_code, $street_code, $house_number, $floor, $door, $contentType);
        return $response;
    }

    /**
     * Operation searchAndelsboligByMunicipalityWithHttpInfo
     *
     * Search Andelsbolig By Municipality
     *
     * @param  mixed $municipality_code Kommunekode (required)
     * @param  mixed $street_code Vejkode (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door D칮r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByMunicipality'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchAndelsboligByMunicipalityWithHttpInfo($municipality_code, $street_code, $house_number, $floor = null, $door = null, string $contentType = self::contentTypes['searchAndelsboligByMunicipality'][0])
    {
        $request = $this->searchAndelsboligByMunicipalityRequest($municipality_code, $street_code, $house_number, $floor, $door, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation searchAndelsboligByMunicipalityAsync
     *
     * Search Andelsbolig By Municipality
     *
     * @param  mixed $municipality_code Kommunekode (required)
     * @param  mixed $street_code Vejkode (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door D칮r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByMunicipality'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAndelsboligByMunicipalityAsync($municipality_code, $street_code, $house_number, $floor = null, $door = null, string $contentType = self::contentTypes['searchAndelsboligByMunicipality'][0])
    {
        return $this->searchAndelsboligByMunicipalityAsyncWithHttpInfo($municipality_code, $street_code, $house_number, $floor, $door, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAndelsboligByMunicipalityAsyncWithHttpInfo
     *
     * Search Andelsbolig By Municipality
     *
     * @param  mixed $municipality_code Kommunekode (required)
     * @param  mixed $street_code Vejkode (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door D칮r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByMunicipality'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAndelsboligByMunicipalityAsyncWithHttpInfo($municipality_code, $street_code, $house_number, $floor = null, $door = null, string $contentType = self::contentTypes['searchAndelsboligByMunicipality'][0])
    {
        $returnType = 'mixed';
        $request = $this->searchAndelsboligByMunicipalityRequest($municipality_code, $street_code, $house_number, $floor, $door, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchAndelsboligByMunicipality'
     *
     * @param  mixed $municipality_code Kommunekode (required)
     * @param  mixed $street_code Vejkode (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door D칮r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByMunicipality'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchAndelsboligByMunicipalityRequest($municipality_code, $street_code, $house_number, $floor = null, $door = null, string $contentType = self::contentTypes['searchAndelsboligByMunicipality'][0])
    {

        // verify the required parameter 'municipality_code' is set
        if ($municipality_code === null || (is_array($municipality_code) && count($municipality_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $municipality_code when calling searchAndelsboligByMunicipality'
            );
        }

        // verify the required parameter 'street_code' is set
        if ($street_code === null || (is_array($street_code) && count($street_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $street_code when calling searchAndelsboligByMunicipality'
            );
        }

        // verify the required parameter 'house_number' is set
        if ($house_number === null || (is_array($house_number) && count($house_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $house_number when calling searchAndelsboligByMunicipality'
            );
        }




        $resourcePath = '/api/v2/tinglysning/andelsbolig/search/municipality';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $municipality_code,
            'municipality_code', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $street_code,
            'street_code', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $house_number,
            'house_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $floor,
            'floor', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $door,
            'door', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchAndelsboligByPerson
     *
     * Search Andelsbolig By Person
     *
     * @param  mixed $birth_date F칮dselsdato (required)
     * @param  mixed $name Navn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByPerson'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function searchAndelsboligByPerson($birth_date, $name, string $contentType = self::contentTypes['searchAndelsboligByPerson'][0])
    {
        list($response) = $this->searchAndelsboligByPersonWithHttpInfo($birth_date, $name, $contentType);
        return $response;
    }

    /**
     * Operation searchAndelsboligByPersonWithHttpInfo
     *
     * Search Andelsbolig By Person
     *
     * @param  mixed $birth_date F칮dselsdato (required)
     * @param  mixed $name Navn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByPerson'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchAndelsboligByPersonWithHttpInfo($birth_date, $name, string $contentType = self::contentTypes['searchAndelsboligByPerson'][0])
    {
        $request = $this->searchAndelsboligByPersonRequest($birth_date, $name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation searchAndelsboligByPersonAsync
     *
     * Search Andelsbolig By Person
     *
     * @param  mixed $birth_date F칮dselsdato (required)
     * @param  mixed $name Navn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByPerson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAndelsboligByPersonAsync($birth_date, $name, string $contentType = self::contentTypes['searchAndelsboligByPerson'][0])
    {
        return $this->searchAndelsboligByPersonAsyncWithHttpInfo($birth_date, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAndelsboligByPersonAsyncWithHttpInfo
     *
     * Search Andelsbolig By Person
     *
     * @param  mixed $birth_date F칮dselsdato (required)
     * @param  mixed $name Navn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByPerson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAndelsboligByPersonAsyncWithHttpInfo($birth_date, $name, string $contentType = self::contentTypes['searchAndelsboligByPerson'][0])
    {
        $returnType = 'mixed';
        $request = $this->searchAndelsboligByPersonRequest($birth_date, $name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchAndelsboligByPerson'
     *
     * @param  mixed $birth_date F칮dselsdato (required)
     * @param  mixed $name Navn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByPerson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchAndelsboligByPersonRequest($birth_date, $name, string $contentType = self::contentTypes['searchAndelsboligByPerson'][0])
    {

        // verify the required parameter 'birth_date' is set
        if ($birth_date === null || (is_array($birth_date) && count($birth_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $birth_date when calling searchAndelsboligByPerson'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling searchAndelsboligByPerson'
            );
        }


        $resourcePath = '/api/v2/tinglysning/andelsbolig/search/person';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $birth_date,
            'birth_date', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchAndelsboligByZipCode
     *
     * Search Andelsbolig By Zip Code
     *
     * @param  mixed $zip_code Kommunekode (required)
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door D칮r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByZipCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function searchAndelsboligByZipCode($zip_code, $street_name, $house_number, $floor = null, $door = null, string $contentType = self::contentTypes['searchAndelsboligByZipCode'][0])
    {
        list($response) = $this->searchAndelsboligByZipCodeWithHttpInfo($zip_code, $street_name, $house_number, $floor, $door, $contentType);
        return $response;
    }

    /**
     * Operation searchAndelsboligByZipCodeWithHttpInfo
     *
     * Search Andelsbolig By Zip Code
     *
     * @param  mixed $zip_code Kommunekode (required)
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door D칮r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByZipCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchAndelsboligByZipCodeWithHttpInfo($zip_code, $street_name, $house_number, $floor = null, $door = null, string $contentType = self::contentTypes['searchAndelsboligByZipCode'][0])
    {
        $request = $this->searchAndelsboligByZipCodeRequest($zip_code, $street_name, $house_number, $floor, $door, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation searchAndelsboligByZipCodeAsync
     *
     * Search Andelsbolig By Zip Code
     *
     * @param  mixed $zip_code Kommunekode (required)
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door D칮r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByZipCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAndelsboligByZipCodeAsync($zip_code, $street_name, $house_number, $floor = null, $door = null, string $contentType = self::contentTypes['searchAndelsboligByZipCode'][0])
    {
        return $this->searchAndelsboligByZipCodeAsyncWithHttpInfo($zip_code, $street_name, $house_number, $floor, $door, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAndelsboligByZipCodeAsyncWithHttpInfo
     *
     * Search Andelsbolig By Zip Code
     *
     * @param  mixed $zip_code Kommunekode (required)
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door D칮r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByZipCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAndelsboligByZipCodeAsyncWithHttpInfo($zip_code, $street_name, $house_number, $floor = null, $door = null, string $contentType = self::contentTypes['searchAndelsboligByZipCode'][0])
    {
        $returnType = 'mixed';
        $request = $this->searchAndelsboligByZipCodeRequest($zip_code, $street_name, $house_number, $floor, $door, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchAndelsboligByZipCode'
     *
     * @param  mixed $zip_code Kommunekode (required)
     * @param  mixed $street_name Vejnavn (required)
     * @param  mixed $house_number Husnummer (required)
     * @param  mixed $floor Etage (optional)
     * @param  mixed $door D칮r (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchAndelsboligByZipCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchAndelsboligByZipCodeRequest($zip_code, $street_name, $house_number, $floor = null, $door = null, string $contentType = self::contentTypes['searchAndelsboligByZipCode'][0])
    {

        // verify the required parameter 'zip_code' is set
        if ($zip_code === null || (is_array($zip_code) && count($zip_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zip_code when calling searchAndelsboligByZipCode'
            );
        }

        // verify the required parameter 'street_name' is set
        if ($street_name === null || (is_array($street_name) && count($street_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $street_name when calling searchAndelsboligByZipCode'
            );
        }

        // verify the required parameter 'house_number' is set
        if ($house_number === null || (is_array($house_number) && count($house_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $house_number when calling searchAndelsboligByZipCode'
            );
        }




        $resourcePath = '/api/v2/tinglysning/andelsbolig/search/zip_code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zip_code,
            'zip_code', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $street_name,
            'street_name', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $house_number,
            'house_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $floor,
            'floor', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $door,
            'door', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
