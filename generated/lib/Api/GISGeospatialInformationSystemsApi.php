<?php
/**
 * GISGeospatialInformationSystemsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * GISGeospatialInformationSystemsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GISGeospatialInformationSystemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'convertGisFileToGeojson' => [
            'multipart/form-data',
        ],
        'exportLayers' => [
            'application/json',
        ],
        'geoserviceProxy' => [
            'application/json',
        ],
        'getGeodanmarkBuildings' => [
            'application/json',
        ],
        'getGeojsonLayer' => [
            'application/json',
        ],
        'getVectorLayer' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation convertGisFileToGeojson
     *
     * Convert Gis File To Geojson
     *
     * @param  mixed $file file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['convertGisFileToGeojson'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function convertGisFileToGeojson($file, string $contentType = self::contentTypes['convertGisFileToGeojson'][0])
    {
        $this->convertGisFileToGeojsonWithHttpInfo($file, $contentType);
    }

    /**
     * Operation convertGisFileToGeojsonWithHttpInfo
     *
     * Convert Gis File To Geojson
     *
     * @param  mixed $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['convertGisFileToGeojson'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertGisFileToGeojsonWithHttpInfo($file, string $contentType = self::contentTypes['convertGisFileToGeojson'][0])
    {
        $request = $this->convertGisFileToGeojsonRequest($file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation convertGisFileToGeojsonAsync
     *
     * Convert Gis File To Geojson
     *
     * @param  mixed $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['convertGisFileToGeojson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertGisFileToGeojsonAsync($file, string $contentType = self::contentTypes['convertGisFileToGeojson'][0])
    {
        return $this->convertGisFileToGeojsonAsyncWithHttpInfo($file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertGisFileToGeojsonAsyncWithHttpInfo
     *
     * Convert Gis File To Geojson
     *
     * @param  mixed $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['convertGisFileToGeojson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertGisFileToGeojsonAsyncWithHttpInfo($file, string $contentType = self::contentTypes['convertGisFileToGeojson'][0])
    {
        $returnType = '';
        $request = $this->convertGisFileToGeojsonRequest($file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertGisFileToGeojson'
     *
     * @param  mixed $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['convertGisFileToGeojson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function convertGisFileToGeojsonRequest($file, string $contentType = self::contentTypes['convertGisFileToGeojson'][0])
    {

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling convertGisFileToGeojson'
            );
        }


        $resourcePath = '/api/v2/gis/convert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($file !== null) {
            $formParams['file'] = ObjectSerializer::toFormValue($file);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportLayers
     *
     * Export Layers
     *
     * @param  mixed $xmin xmin (required)
     * @param  mixed $ymin ymin (required)
     * @param  mixed $xmax xmax (required)
     * @param  mixed $ymax ymax (required)
     * @param  mixed $body body (required)
     * @param  \OpenAPI\Client\Model\GisFormat $extension extension (optional)
     * @param  mixed $polylines polylines (optional)
     * @param  \OpenAPI\Client\Model\CoordinateReferenceSystem $crs crs (optional)
     * @param  mixed $dimensions dimensions (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportLayers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function exportLayers($xmin, $ymin, $xmax, $ymax, $body, $extension = null, $polylines = null, $crs = null, $dimensions = null, string $contentType = self::contentTypes['exportLayers'][0])
    {
        $this->exportLayersWithHttpInfo($xmin, $ymin, $xmax, $ymax, $body, $extension, $polylines, $crs, $dimensions, $contentType);
    }

    /**
     * Operation exportLayersWithHttpInfo
     *
     * Export Layers
     *
     * @param  mixed $xmin (required)
     * @param  mixed $ymin (required)
     * @param  mixed $xmax (required)
     * @param  mixed $ymax (required)
     * @param  mixed $body (required)
     * @param  \OpenAPI\Client\Model\GisFormat $extension (optional)
     * @param  mixed $polylines (optional)
     * @param  \OpenAPI\Client\Model\CoordinateReferenceSystem $crs (optional)
     * @param  mixed $dimensions (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportLayers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportLayersWithHttpInfo($xmin, $ymin, $xmax, $ymax, $body, $extension = null, $polylines = null, $crs = null, $dimensions = null, string $contentType = self::contentTypes['exportLayers'][0])
    {
        $request = $this->exportLayersRequest($xmin, $ymin, $xmax, $ymax, $body, $extension, $polylines, $crs, $dimensions, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation exportLayersAsync
     *
     * Export Layers
     *
     * @param  mixed $xmin (required)
     * @param  mixed $ymin (required)
     * @param  mixed $xmax (required)
     * @param  mixed $ymax (required)
     * @param  mixed $body (required)
     * @param  \OpenAPI\Client\Model\GisFormat $extension (optional)
     * @param  mixed $polylines (optional)
     * @param  \OpenAPI\Client\Model\CoordinateReferenceSystem $crs (optional)
     * @param  mixed $dimensions (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportLayers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportLayersAsync($xmin, $ymin, $xmax, $ymax, $body, $extension = null, $polylines = null, $crs = null, $dimensions = null, string $contentType = self::contentTypes['exportLayers'][0])
    {
        return $this->exportLayersAsyncWithHttpInfo($xmin, $ymin, $xmax, $ymax, $body, $extension, $polylines, $crs, $dimensions, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportLayersAsyncWithHttpInfo
     *
     * Export Layers
     *
     * @param  mixed $xmin (required)
     * @param  mixed $ymin (required)
     * @param  mixed $xmax (required)
     * @param  mixed $ymax (required)
     * @param  mixed $body (required)
     * @param  \OpenAPI\Client\Model\GisFormat $extension (optional)
     * @param  mixed $polylines (optional)
     * @param  \OpenAPI\Client\Model\CoordinateReferenceSystem $crs (optional)
     * @param  mixed $dimensions (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportLayers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportLayersAsyncWithHttpInfo($xmin, $ymin, $xmax, $ymax, $body, $extension = null, $polylines = null, $crs = null, $dimensions = null, string $contentType = self::contentTypes['exportLayers'][0])
    {
        $returnType = '';
        $request = $this->exportLayersRequest($xmin, $ymin, $xmax, $ymax, $body, $extension, $polylines, $crs, $dimensions, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportLayers'
     *
     * @param  mixed $xmin (required)
     * @param  mixed $ymin (required)
     * @param  mixed $xmax (required)
     * @param  mixed $ymax (required)
     * @param  mixed $body (required)
     * @param  \OpenAPI\Client\Model\GisFormat $extension (optional)
     * @param  mixed $polylines (optional)
     * @param  \OpenAPI\Client\Model\CoordinateReferenceSystem $crs (optional)
     * @param  mixed $dimensions (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportLayers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportLayersRequest($xmin, $ymin, $xmax, $ymax, $body, $extension = null, $polylines = null, $crs = null, $dimensions = null, string $contentType = self::contentTypes['exportLayers'][0])
    {

        // verify the required parameter 'xmin' is set
        if ($xmin === null || (is_array($xmin) && count($xmin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xmin when calling exportLayers'
            );
        }

        // verify the required parameter 'ymin' is set
        if ($ymin === null || (is_array($ymin) && count($ymin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ymin when calling exportLayers'
            );
        }

        // verify the required parameter 'xmax' is set
        if ($xmax === null || (is_array($xmax) && count($xmax) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xmax when calling exportLayers'
            );
        }

        // verify the required parameter 'ymax' is set
        if ($ymax === null || (is_array($ymax) && count($ymax) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ymax when calling exportLayers'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling exportLayers'
            );
        }






        $resourcePath = '/api/v2/gis/export/{xmin}/{ymin}/{xmax}/{ymax}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $extension,
            'extension', // param base name
            'GisFormat', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $polylines,
            'polylines', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $crs,
            'crs', // param base name
            'CoordinateReferenceSystem', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dimensions,
            'dimensions', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($xmin !== null) {
            $resourcePath = str_replace(
                '{' . 'xmin' . '}',
                ObjectSerializer::toPathValue($xmin),
                $resourcePath
            );
        }
        // path params
        if ($ymin !== null) {
            $resourcePath = str_replace(
                '{' . 'ymin' . '}',
                ObjectSerializer::toPathValue($ymin),
                $resourcePath
            );
        }
        // path params
        if ($xmax !== null) {
            $resourcePath = str_replace(
                '{' . 'xmax' . '}',
                ObjectSerializer::toPathValue($xmax),
                $resourcePath
            );
        }
        // path params
        if ($ymax !== null) {
            $resourcePath = str_replace(
                '{' . 'ymax' . '}',
                ObjectSerializer::toPathValue($ymax),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geoserviceProxy
     *
     * Geoservice Proxy
     *
     * @param  mixed $path path (required)
     * @param  \OpenAPI\Client\Model\ProxyPathEnum $source source (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geoserviceProxy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function geoserviceProxy($path, $source = null, string $contentType = self::contentTypes['geoserviceProxy'][0])
    {
        $this->geoserviceProxyWithHttpInfo($path, $source, $contentType);
    }

    /**
     * Operation geoserviceProxyWithHttpInfo
     *
     * Geoservice Proxy
     *
     * @param  mixed $path (required)
     * @param  \OpenAPI\Client\Model\ProxyPathEnum $source (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geoserviceProxy'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function geoserviceProxyWithHttpInfo($path, $source = null, string $contentType = self::contentTypes['geoserviceProxy'][0])
    {
        $request = $this->geoserviceProxyRequest($path, $source, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation geoserviceProxyAsync
     *
     * Geoservice Proxy
     *
     * @param  mixed $path (required)
     * @param  \OpenAPI\Client\Model\ProxyPathEnum $source (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geoserviceProxy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geoserviceProxyAsync($path, $source = null, string $contentType = self::contentTypes['geoserviceProxy'][0])
    {
        return $this->geoserviceProxyAsyncWithHttpInfo($path, $source, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geoserviceProxyAsyncWithHttpInfo
     *
     * Geoservice Proxy
     *
     * @param  mixed $path (required)
     * @param  \OpenAPI\Client\Model\ProxyPathEnum $source (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geoserviceProxy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geoserviceProxyAsyncWithHttpInfo($path, $source = null, string $contentType = self::contentTypes['geoserviceProxy'][0])
    {
        $returnType = '';
        $request = $this->geoserviceProxyRequest($path, $source, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geoserviceProxy'
     *
     * @param  mixed $path (required)
     * @param  \OpenAPI\Client\Model\ProxyPathEnum $source (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geoserviceProxy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geoserviceProxyRequest($path, $source = null, string $contentType = self::contentTypes['geoserviceProxy'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling geoserviceProxy'
            );
        }



        $resourcePath = '/api/v2/gis/proxy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $path,
            'path', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source,
            'source', // param base name
            'ProxyPathEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGeodanmarkBuildings
     *
     * Get Geodanmark Buildings
     *
     * @param  mixed $id id (optional)
     * @param  mixed $bbr_id bbr_id (optional)
     * @param  mixed $bfe_number bfe_number (optional)
     * @param  mixed $size size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeodanmarkBuildings'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GeoJSONFeatureCollectionBuildingMapGeoJSON|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getGeodanmarkBuildings($id = null, $bbr_id = null, $bfe_number = null, $size = null, string $contentType = self::contentTypes['getGeodanmarkBuildings'][0])
    {
        list($response) = $this->getGeodanmarkBuildingsWithHttpInfo($id, $bbr_id, $bfe_number, $size, $contentType);
        return $response;
    }

    /**
     * Operation getGeodanmarkBuildingsWithHttpInfo
     *
     * Get Geodanmark Buildings
     *
     * @param  mixed $id (optional)
     * @param  mixed $bbr_id (optional)
     * @param  mixed $bfe_number (optional)
     * @param  mixed $size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeodanmarkBuildings'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GeoJSONFeatureCollectionBuildingMapGeoJSON|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGeodanmarkBuildingsWithHttpInfo($id = null, $bbr_id = null, $bfe_number = null, $size = null, string $contentType = self::contentTypes['getGeodanmarkBuildings'][0])
    {
        $request = $this->getGeodanmarkBuildingsRequest($id, $bbr_id, $bfe_number, $size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GeoJSONFeatureCollectionBuildingMapGeoJSON' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GeoJSONFeatureCollectionBuildingMapGeoJSON' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GeoJSONFeatureCollectionBuildingMapGeoJSON', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\GeoJSONFeatureCollectionBuildingMapGeoJSON';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GeoJSONFeatureCollectionBuildingMapGeoJSON',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getGeodanmarkBuildingsAsync
     *
     * Get Geodanmark Buildings
     *
     * @param  mixed $id (optional)
     * @param  mixed $bbr_id (optional)
     * @param  mixed $bfe_number (optional)
     * @param  mixed $size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeodanmarkBuildings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGeodanmarkBuildingsAsync($id = null, $bbr_id = null, $bfe_number = null, $size = null, string $contentType = self::contentTypes['getGeodanmarkBuildings'][0])
    {
        return $this->getGeodanmarkBuildingsAsyncWithHttpInfo($id, $bbr_id, $bfe_number, $size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGeodanmarkBuildingsAsyncWithHttpInfo
     *
     * Get Geodanmark Buildings
     *
     * @param  mixed $id (optional)
     * @param  mixed $bbr_id (optional)
     * @param  mixed $bfe_number (optional)
     * @param  mixed $size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeodanmarkBuildings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGeodanmarkBuildingsAsyncWithHttpInfo($id = null, $bbr_id = null, $bfe_number = null, $size = null, string $contentType = self::contentTypes['getGeodanmarkBuildings'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GeoJSONFeatureCollectionBuildingMapGeoJSON';
        $request = $this->getGeodanmarkBuildingsRequest($id, $bbr_id, $bfe_number, $size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGeodanmarkBuildings'
     *
     * @param  mixed $id (optional)
     * @param  mixed $bbr_id (optional)
     * @param  mixed $bfe_number (optional)
     * @param  mixed $size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeodanmarkBuildings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGeodanmarkBuildingsRequest($id = null, $bbr_id = null, $bfe_number = null, $size = null, string $contentType = self::contentTypes['getGeodanmarkBuildings'][0])
    {




        if ($size !== null && $size > 1000.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling GISGeospatialInformationSystemsApi.getGeodanmarkBuildings, must be smaller than or equal to 1000.0.');
        }
        if ($size !== null && $size < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling GISGeospatialInformationSystemsApi.getGeodanmarkBuildings, must be bigger than or equal to 0.0.');
        }
        

        $resourcePath = '/api/v2/gis/geodanmark/buildings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bbr_id,
            'bbr_id', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bfe_number,
            'bfe_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGeojsonLayer
     *
     * Get Geojson Layer
     *
     * @param  GisLayers $layer layer (required)
     * @param  mixed $wkt wkt (optional)
     * @param  mixed $polygon polygon (optional)
     * @param  mixed $point point (optional)
     * @param  mixed $x x (optional)
     * @param  mixed $y y (optional)
     * @param  mixed $limit limit (optional)
     * @param  mixed $offset offset (optional)
     * @param  \OpenAPI\Client\Model\CoordinateReferenceSystem $crs crs (optional)
     * @param  mixed $address_id address_id (optional)
     * @param  mixed $access_address_id access_address_id (optional)
     * @param  mixed $land_id land_id (optional)
     * @param  mixed $bfe_number bfe_number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeojsonLayer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GeoJSONLayerResponse|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function getGeojsonLayer($layer, $wkt = null, $polygon = null, $point = null, $x = null, $y = null, $limit = null, $offset = null, $crs = null, $address_id = null, $access_address_id = null, $land_id = null, $bfe_number = null, string $contentType = self::contentTypes['getGeojsonLayer'][0])
    {
        list($response) = $this->getGeojsonLayerWithHttpInfo($layer, $wkt, $polygon, $point, $x, $y, $limit, $offset, $crs, $address_id, $access_address_id, $land_id, $bfe_number, $contentType);
        return $response;
    }

    /**
     * Operation getGeojsonLayerWithHttpInfo
     *
     * Get Geojson Layer
     *
     * @param  GisLayers $layer (required)
     * @param  mixed $wkt (optional)
     * @param  mixed $polygon (optional)
     * @param  mixed $point (optional)
     * @param  mixed $x (optional)
     * @param  mixed $y (optional)
     * @param  mixed $limit (optional)
     * @param  mixed $offset (optional)
     * @param  \OpenAPI\Client\Model\CoordinateReferenceSystem $crs (optional)
     * @param  mixed $address_id (optional)
     * @param  mixed $access_address_id (optional)
     * @param  mixed $land_id (optional)
     * @param  mixed $bfe_number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeojsonLayer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GeoJSONLayerResponse|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGeojsonLayerWithHttpInfo($layer, $wkt = null, $polygon = null, $point = null, $x = null, $y = null, $limit = null, $offset = null, $crs = null, $address_id = null, $access_address_id = null, $land_id = null, $bfe_number = null, string $contentType = self::contentTypes['getGeojsonLayer'][0])
    {
        $request = $this->getGeojsonLayerRequest($layer, $wkt, $polygon, $point, $x, $y, $limit, $offset, $crs, $address_id, $access_address_id, $land_id, $bfe_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GeoJSONLayerResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GeoJSONLayerResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GeoJSONLayerResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\GeoJSONLayerResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GeoJSONLayerResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getGeojsonLayerAsync
     *
     * Get Geojson Layer
     *
     * @param  GisLayers $layer (required)
     * @param  mixed $wkt (optional)
     * @param  mixed $polygon (optional)
     * @param  mixed $point (optional)
     * @param  mixed $x (optional)
     * @param  mixed $y (optional)
     * @param  mixed $limit (optional)
     * @param  mixed $offset (optional)
     * @param  \OpenAPI\Client\Model\CoordinateReferenceSystem $crs (optional)
     * @param  mixed $address_id (optional)
     * @param  mixed $access_address_id (optional)
     * @param  mixed $land_id (optional)
     * @param  mixed $bfe_number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeojsonLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGeojsonLayerAsync($layer, $wkt = null, $polygon = null, $point = null, $x = null, $y = null, $limit = null, $offset = null, $crs = null, $address_id = null, $access_address_id = null, $land_id = null, $bfe_number = null, string $contentType = self::contentTypes['getGeojsonLayer'][0])
    {
        return $this->getGeojsonLayerAsyncWithHttpInfo($layer, $wkt, $polygon, $point, $x, $y, $limit, $offset, $crs, $address_id, $access_address_id, $land_id, $bfe_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGeojsonLayerAsyncWithHttpInfo
     *
     * Get Geojson Layer
     *
     * @param  GisLayers $layer (required)
     * @param  mixed $wkt (optional)
     * @param  mixed $polygon (optional)
     * @param  mixed $point (optional)
     * @param  mixed $x (optional)
     * @param  mixed $y (optional)
     * @param  mixed $limit (optional)
     * @param  mixed $offset (optional)
     * @param  \OpenAPI\Client\Model\CoordinateReferenceSystem $crs (optional)
     * @param  mixed $address_id (optional)
     * @param  mixed $access_address_id (optional)
     * @param  mixed $land_id (optional)
     * @param  mixed $bfe_number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeojsonLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGeojsonLayerAsyncWithHttpInfo($layer, $wkt = null, $polygon = null, $point = null, $x = null, $y = null, $limit = null, $offset = null, $crs = null, $address_id = null, $access_address_id = null, $land_id = null, $bfe_number = null, string $contentType = self::contentTypes['getGeojsonLayer'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GeoJSONLayerResponse';
        $request = $this->getGeojsonLayerRequest($layer, $wkt, $polygon, $point, $x, $y, $limit, $offset, $crs, $address_id, $access_address_id, $land_id, $bfe_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGeojsonLayer'
     *
     * @param  GisLayers $layer (required)
     * @param  mixed $wkt (optional)
     * @param  mixed $polygon (optional)
     * @param  mixed $point (optional)
     * @param  mixed $x (optional)
     * @param  mixed $y (optional)
     * @param  mixed $limit (optional)
     * @param  mixed $offset (optional)
     * @param  \OpenAPI\Client\Model\CoordinateReferenceSystem $crs (optional)
     * @param  mixed $address_id (optional)
     * @param  mixed $access_address_id (optional)
     * @param  mixed $land_id (optional)
     * @param  mixed $bfe_number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeojsonLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGeojsonLayerRequest($layer, $wkt = null, $polygon = null, $point = null, $x = null, $y = null, $limit = null, $offset = null, $crs = null, $address_id = null, $access_address_id = null, $land_id = null, $bfe_number = null, string $contentType = self::contentTypes['getGeojsonLayer'][0])
    {

        // verify the required parameter 'layer' is set
        if ($layer === null || (is_array($layer) && count($layer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $layer when calling getGeojsonLayer'
            );
        }






        if ($limit !== null && $limit > 1000.0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling GISGeospatialInformationSystemsApi.getGeojsonLayer, must be smaller than or equal to 1000.0.');
        }
        if ($limit !== null && $limit < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling GISGeospatialInformationSystemsApi.getGeojsonLayer, must be bigger than or equal to 0.0.');
        }
        
        if ($offset !== null && $offset > 1000.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling GISGeospatialInformationSystemsApi.getGeojsonLayer, must be smaller than or equal to 1000.0.');
        }
        if ($offset !== null && $offset < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling GISGeospatialInformationSystemsApi.getGeojsonLayer, must be bigger than or equal to 0.0.');
        }
        






        $resourcePath = '/api/v2/gis/geojson';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $layer,
            'layer', // param base name
            'GisLayers', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wkt,
            'wkt', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $polygon,
            'polygon', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $point,
            'point', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $x,
            'x', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $y,
            'y', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $crs,
            'crs', // param base name
            'CoordinateReferenceSystem', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address_id,
            'address_id', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_address_id,
            'access_address_id', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $land_id,
            'land_id', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bfe_number,
            'bfe_number', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVectorLayer
     *
     * Get Vector Layer
     *
     * @param  GisLayers $layer layer (required)
     * @param  mixed $z z (required)
     * @param  mixed $x x (required)
     * @param  mixed $y y (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVectorLayer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getVectorLayer($layer, $z, $x, $y, string $contentType = self::contentTypes['getVectorLayer'][0])
    {
        $this->getVectorLayerWithHttpInfo($layer, $z, $x, $y, $contentType);
    }

    /**
     * Operation getVectorLayerWithHttpInfo
     *
     * Get Vector Layer
     *
     * @param  GisLayers $layer (required)
     * @param  mixed $z (required)
     * @param  mixed $x (required)
     * @param  mixed $y (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVectorLayer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVectorLayerWithHttpInfo($layer, $z, $x, $y, string $contentType = self::contentTypes['getVectorLayer'][0])
    {
        $request = $this->getVectorLayerRequest($layer, $z, $x, $y, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation getVectorLayerAsync
     *
     * Get Vector Layer
     *
     * @param  GisLayers $layer (required)
     * @param  mixed $z (required)
     * @param  mixed $x (required)
     * @param  mixed $y (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVectorLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVectorLayerAsync($layer, $z, $x, $y, string $contentType = self::contentTypes['getVectorLayer'][0])
    {
        return $this->getVectorLayerAsyncWithHttpInfo($layer, $z, $x, $y, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVectorLayerAsyncWithHttpInfo
     *
     * Get Vector Layer
     *
     * @param  GisLayers $layer (required)
     * @param  mixed $z (required)
     * @param  mixed $x (required)
     * @param  mixed $y (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVectorLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVectorLayerAsyncWithHttpInfo($layer, $z, $x, $y, string $contentType = self::contentTypes['getVectorLayer'][0])
    {
        $returnType = '';
        $request = $this->getVectorLayerRequest($layer, $z, $x, $y, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVectorLayer'
     *
     * @param  GisLayers $layer (required)
     * @param  mixed $z (required)
     * @param  mixed $x (required)
     * @param  mixed $y (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVectorLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVectorLayerRequest($layer, $z, $x, $y, string $contentType = self::contentTypes['getVectorLayer'][0])
    {

        // verify the required parameter 'layer' is set
        if ($layer === null || (is_array($layer) && count($layer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $layer when calling getVectorLayer'
            );
        }

        // verify the required parameter 'z' is set
        if ($z === null || (is_array($z) && count($z) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $z when calling getVectorLayer'
            );
        }

        // verify the required parameter 'x' is set
        if ($x === null || (is_array($x) && count($x) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x when calling getVectorLayer'
            );
        }

        // verify the required parameter 'y' is set
        if ($y === null || (is_array($y) && count($y) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $y when calling getVectorLayer'
            );
        }


        $resourcePath = '/api/v2/gis/mvt/{layer}/{z}/{x}/{y}.pbf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($layer !== null) {
            $resourcePath = str_replace(
                '{' . 'layer' . '}',
                ObjectSerializer::toPathValue($layer),
                $resourcePath
            );
        }
        // path params
        if ($z !== null) {
            $resourcePath = str_replace(
                '{' . 'z' . '}',
                ObjectSerializer::toPathValue($z),
                $resourcePath
            );
        }
        // path params
        if ($x !== null) {
            $resourcePath = str_replace(
                '{' . 'x' . '}',
                ObjectSerializer::toPathValue($x),
                $resourcePath
            );
        }
        // path params
        if ($y !== null) {
            $resourcePath = str_replace(
                '{' . 'y' . '}',
                ObjectSerializer::toPathValue($y),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
