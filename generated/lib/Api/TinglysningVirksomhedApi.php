<?php
/**
 * TinglysningVirksomhedApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TinglysningVirksomhedApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TinglysningVirksomhedApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'searchCompanyDocuments' => [
            'application/json',
        ],
        'searchCompanyRegistrations' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation searchCompanyDocuments
     *
     * Search Company Documents
     *
     * @param  mixed $cvr_number CVR-nummer (required)
     * @param  \OpenAPI\Client\Model\BookEnum $book book (optional)
     * @param  DokTypeEnum $document_type document_type (optional)
     * @param  VirksomhedRolleEnum $role role (optional)
     * @param  mixed $date_from date_from (optional)
     * @param  mixed $date_to date_to (optional)
     * @param  mixed $page Side (optional)
     * @param  mixed $per_page per_page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCompanyDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function searchCompanyDocuments($cvr_number, $book = null, $document_type = null, $role = null, $date_from = null, $date_to = null, $page = null, $per_page = null, string $contentType = self::contentTypes['searchCompanyDocuments'][0])
    {
        list($response) = $this->searchCompanyDocumentsWithHttpInfo($cvr_number, $book, $document_type, $role, $date_from, $date_to, $page, $per_page, $contentType);
        return $response;
    }

    /**
     * Operation searchCompanyDocumentsWithHttpInfo
     *
     * Search Company Documents
     *
     * @param  mixed $cvr_number CVR-nummer (required)
     * @param  \OpenAPI\Client\Model\BookEnum $book (optional)
     * @param  DokTypeEnum $document_type (optional)
     * @param  VirksomhedRolleEnum $role (optional)
     * @param  mixed $date_from (optional)
     * @param  mixed $date_to (optional)
     * @param  mixed $page Side (optional)
     * @param  mixed $per_page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCompanyDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchCompanyDocumentsWithHttpInfo($cvr_number, $book = null, $document_type = null, $role = null, $date_from = null, $date_to = null, $page = null, $per_page = null, string $contentType = self::contentTypes['searchCompanyDocuments'][0])
    {
        $request = $this->searchCompanyDocumentsRequest($cvr_number, $book, $document_type, $role, $date_from, $date_to, $page, $per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation searchCompanyDocumentsAsync
     *
     * Search Company Documents
     *
     * @param  mixed $cvr_number CVR-nummer (required)
     * @param  \OpenAPI\Client\Model\BookEnum $book (optional)
     * @param  DokTypeEnum $document_type (optional)
     * @param  VirksomhedRolleEnum $role (optional)
     * @param  mixed $date_from (optional)
     * @param  mixed $date_to (optional)
     * @param  mixed $page Side (optional)
     * @param  mixed $per_page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCompanyDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCompanyDocumentsAsync($cvr_number, $book = null, $document_type = null, $role = null, $date_from = null, $date_to = null, $page = null, $per_page = null, string $contentType = self::contentTypes['searchCompanyDocuments'][0])
    {
        return $this->searchCompanyDocumentsAsyncWithHttpInfo($cvr_number, $book, $document_type, $role, $date_from, $date_to, $page, $per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchCompanyDocumentsAsyncWithHttpInfo
     *
     * Search Company Documents
     *
     * @param  mixed $cvr_number CVR-nummer (required)
     * @param  \OpenAPI\Client\Model\BookEnum $book (optional)
     * @param  DokTypeEnum $document_type (optional)
     * @param  VirksomhedRolleEnum $role (optional)
     * @param  mixed $date_from (optional)
     * @param  mixed $date_to (optional)
     * @param  mixed $page Side (optional)
     * @param  mixed $per_page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCompanyDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCompanyDocumentsAsyncWithHttpInfo($cvr_number, $book = null, $document_type = null, $role = null, $date_from = null, $date_to = null, $page = null, $per_page = null, string $contentType = self::contentTypes['searchCompanyDocuments'][0])
    {
        $returnType = 'mixed';
        $request = $this->searchCompanyDocumentsRequest($cvr_number, $book, $document_type, $role, $date_from, $date_to, $page, $per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchCompanyDocuments'
     *
     * @param  mixed $cvr_number CVR-nummer (required)
     * @param  \OpenAPI\Client\Model\BookEnum $book (optional)
     * @param  DokTypeEnum $document_type (optional)
     * @param  VirksomhedRolleEnum $role (optional)
     * @param  mixed $date_from (optional)
     * @param  mixed $date_to (optional)
     * @param  mixed $page Side (optional)
     * @param  mixed $per_page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCompanyDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchCompanyDocumentsRequest($cvr_number, $book = null, $document_type = null, $role = null, $date_from = null, $date_to = null, $page = null, $per_page = null, string $contentType = self::contentTypes['searchCompanyDocuments'][0])
    {

        // verify the required parameter 'cvr_number' is set
        if ($cvr_number === null || (is_array($cvr_number) && count($cvr_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cvr_number when calling searchCompanyDocuments'
            );
        }






        if ($page !== null && $page < 1.0) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling TinglysningVirksomhedApi.searchCompanyDocuments, must be bigger than or equal to 1.0.');
        }
        


        $resourcePath = '/api/v2/tinglysning/companies/documents/{cvr_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $book,
            'book', // param base name
            'BookEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $document_type,
            'document_type', // param base name
            'DokTypeEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $role,
            'role', // param base name
            'VirksomhedRolleEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_from,
            'date_from', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_to,
            'date_to', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'mixed', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cvr_number !== null) {
            $resourcePath = str_replace(
                '{' . 'cvr_number' . '}',
                ObjectSerializer::toPathValue($cvr_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchCompanyRegistrations
     *
     * Search Company Registrations
     *
     * @param  mixed $cvr_number CVR-nummer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCompanyRegistrations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VirksomhedSoegningRegistreringerModel|\OpenAPI\Client\Model\ResightsResponseModel
     */
    public function searchCompanyRegistrations($cvr_number, string $contentType = self::contentTypes['searchCompanyRegistrations'][0])
    {
        list($response) = $this->searchCompanyRegistrationsWithHttpInfo($cvr_number, $contentType);
        return $response;
    }

    /**
     * Operation searchCompanyRegistrationsWithHttpInfo
     *
     * Search Company Registrations
     *
     * @param  mixed $cvr_number CVR-nummer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCompanyRegistrations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VirksomhedSoegningRegistreringerModel|\OpenAPI\Client\Model\ResightsResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchCompanyRegistrationsWithHttpInfo($cvr_number, string $contentType = self::contentTypes['searchCompanyRegistrations'][0])
    {
        $request = $this->searchCompanyRegistrationsRequest($cvr_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\VirksomhedSoegningRegistreringerModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\VirksomhedSoegningRegistreringerModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\VirksomhedSoegningRegistreringerModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\OpenAPI\Client\Model\VirksomhedSoegningRegistreringerModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirksomhedSoegningRegistreringerModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation searchCompanyRegistrationsAsync
     *
     * Search Company Registrations
     *
     * @param  mixed $cvr_number CVR-nummer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCompanyRegistrations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCompanyRegistrationsAsync($cvr_number, string $contentType = self::contentTypes['searchCompanyRegistrations'][0])
    {
        return $this->searchCompanyRegistrationsAsyncWithHttpInfo($cvr_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchCompanyRegistrationsAsyncWithHttpInfo
     *
     * Search Company Registrations
     *
     * @param  mixed $cvr_number CVR-nummer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCompanyRegistrations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCompanyRegistrationsAsyncWithHttpInfo($cvr_number, string $contentType = self::contentTypes['searchCompanyRegistrations'][0])
    {
        $returnType = '\OpenAPI\Client\Model\VirksomhedSoegningRegistreringerModel';
        $request = $this->searchCompanyRegistrationsRequest($cvr_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchCompanyRegistrations'
     *
     * @param  mixed $cvr_number CVR-nummer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCompanyRegistrations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchCompanyRegistrationsRequest($cvr_number, string $contentType = self::contentTypes['searchCompanyRegistrations'][0])
    {

        // verify the required parameter 'cvr_number' is set
        if ($cvr_number === null || (is_array($cvr_number) && count($cvr_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cvr_number when calling searchCompanyRegistrations'
            );
        }


        $resourcePath = '/api/v2/tinglysning/companies/registrations/{cvr_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cvr_number !== null) {
            $resourcePath = str_replace(
                '{' . 'cvr_number' . '}',
                ObjectSerializer::toPathValue($cvr_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
