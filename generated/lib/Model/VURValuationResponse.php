<?php
/**
 * VURValuationResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VURValuationResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VURValuationResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VURValuationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'updated_at' => 'mixed',
        'bfe_numbers' => 'mixed',
        'year' => 'mixed',
        'number_valued_apartments' => 'mixed',
        'usage_code' => 'mixed',
        'coverage_charge_difference_value' => 'mixed',
        'coverage_charge_duty_code' => 'mixed',
        'coverage_charge_duty_code_type' => 'mixed',
        'property_value' => 'mixed',
        'land_value' => 'mixed',
        'legal_category_code' => 'mixed',
        'legal_category_text' => 'mixed',
        'legal_subcategory_code' => 'mixed',
        'legal_subcategory_text' => 'mixed',
        'vur_mark' => 'mixed',
        'area_valued' => 'mixed',
        'valuation_area_code' => 'mixed',
        'change_date' => 'mixed',
        'change_code' => 'mixed',
        'valuation_property' => '\OpenAPI\Client\Model\VURValuationProperty',
        'mother_property' => '\OpenAPI\Client\Model\VURValuationProperty',
        'valued_under' => '\OpenAPI\Client\Model\VURValuationProperty',
        'land_value_specifications' => 'mixed',
        'distributions' => 'mixed',
        'exemptions' => 'mixed',
        'ceiling' => '\OpenAPI\Client\Model\VURCeilingResponse',
        'deduction_for_improvement_overall' => '\OpenAPI\Client\Model\VURDeductionForImprovementOverallResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'updated_at' => 'date-time',
        'bfe_numbers' => null,
        'year' => null,
        'number_valued_apartments' => null,
        'usage_code' => null,
        'coverage_charge_difference_value' => null,
        'coverage_charge_duty_code' => null,
        'coverage_charge_duty_code_type' => null,
        'property_value' => null,
        'land_value' => null,
        'legal_category_code' => null,
        'legal_category_text' => null,
        'legal_subcategory_code' => null,
        'legal_subcategory_text' => null,
        'vur_mark' => null,
        'area_valued' => null,
        'valuation_area_code' => null,
        'change_date' => 'date',
        'change_code' => null,
        'valuation_property' => null,
        'mother_property' => null,
        'valued_under' => null,
        'land_value_specifications' => null,
        'distributions' => null,
        'exemptions' => null,
        'ceiling' => null,
        'deduction_for_improvement_overall' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'updated_at' => true,
		'bfe_numbers' => true,
		'year' => true,
		'number_valued_apartments' => true,
		'usage_code' => true,
		'coverage_charge_difference_value' => true,
		'coverage_charge_duty_code' => true,
		'coverage_charge_duty_code_type' => true,
		'property_value' => true,
		'land_value' => true,
		'legal_category_code' => true,
		'legal_category_text' => true,
		'legal_subcategory_code' => true,
		'legal_subcategory_text' => true,
		'vur_mark' => true,
		'area_valued' => true,
		'valuation_area_code' => true,
		'change_date' => true,
		'change_code' => true,
		'valuation_property' => false,
		'mother_property' => false,
		'valued_under' => false,
		'land_value_specifications' => true,
		'distributions' => true,
		'exemptions' => true,
		'ceiling' => false,
		'deduction_for_improvement_overall' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'updated_at' => 'updated_at',
        'bfe_numbers' => 'bfe_numbers',
        'year' => 'year',
        'number_valued_apartments' => 'number_valued_apartments',
        'usage_code' => 'usage_code',
        'coverage_charge_difference_value' => 'coverage_charge_difference_value',
        'coverage_charge_duty_code' => 'coverage_charge_duty_code',
        'coverage_charge_duty_code_type' => 'coverage_charge_duty_code_type',
        'property_value' => 'property_value',
        'land_value' => 'land_value',
        'legal_category_code' => 'legal_category_code',
        'legal_category_text' => 'legal_category_text',
        'legal_subcategory_code' => 'legal_subcategory_code',
        'legal_subcategory_text' => 'legal_subcategory_text',
        'vur_mark' => 'vur_mark',
        'area_valued' => 'area_valued',
        'valuation_area_code' => 'valuation_area_code',
        'change_date' => 'change_date',
        'change_code' => 'change_code',
        'valuation_property' => 'valuation_property',
        'mother_property' => 'mother_property',
        'valued_under' => 'valued_under',
        'land_value_specifications' => 'land_value_specifications',
        'distributions' => 'distributions',
        'exemptions' => 'exemptions',
        'ceiling' => 'ceiling',
        'deduction_for_improvement_overall' => 'deduction_for_improvement_overall'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'updated_at' => 'setUpdatedAt',
        'bfe_numbers' => 'setBfeNumbers',
        'year' => 'setYear',
        'number_valued_apartments' => 'setNumberValuedApartments',
        'usage_code' => 'setUsageCode',
        'coverage_charge_difference_value' => 'setCoverageChargeDifferenceValue',
        'coverage_charge_duty_code' => 'setCoverageChargeDutyCode',
        'coverage_charge_duty_code_type' => 'setCoverageChargeDutyCodeType',
        'property_value' => 'setPropertyValue',
        'land_value' => 'setLandValue',
        'legal_category_code' => 'setLegalCategoryCode',
        'legal_category_text' => 'setLegalCategoryText',
        'legal_subcategory_code' => 'setLegalSubcategoryCode',
        'legal_subcategory_text' => 'setLegalSubcategoryText',
        'vur_mark' => 'setVurMark',
        'area_valued' => 'setAreaValued',
        'valuation_area_code' => 'setValuationAreaCode',
        'change_date' => 'setChangeDate',
        'change_code' => 'setChangeCode',
        'valuation_property' => 'setValuationProperty',
        'mother_property' => 'setMotherProperty',
        'valued_under' => 'setValuedUnder',
        'land_value_specifications' => 'setLandValueSpecifications',
        'distributions' => 'setDistributions',
        'exemptions' => 'setExemptions',
        'ceiling' => 'setCeiling',
        'deduction_for_improvement_overall' => 'setDeductionForImprovementOverall'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'updated_at' => 'getUpdatedAt',
        'bfe_numbers' => 'getBfeNumbers',
        'year' => 'getYear',
        'number_valued_apartments' => 'getNumberValuedApartments',
        'usage_code' => 'getUsageCode',
        'coverage_charge_difference_value' => 'getCoverageChargeDifferenceValue',
        'coverage_charge_duty_code' => 'getCoverageChargeDutyCode',
        'coverage_charge_duty_code_type' => 'getCoverageChargeDutyCodeType',
        'property_value' => 'getPropertyValue',
        'land_value' => 'getLandValue',
        'legal_category_code' => 'getLegalCategoryCode',
        'legal_category_text' => 'getLegalCategoryText',
        'legal_subcategory_code' => 'getLegalSubcategoryCode',
        'legal_subcategory_text' => 'getLegalSubcategoryText',
        'vur_mark' => 'getVurMark',
        'area_valued' => 'getAreaValued',
        'valuation_area_code' => 'getValuationAreaCode',
        'change_date' => 'getChangeDate',
        'change_code' => 'getChangeCode',
        'valuation_property' => 'getValuationProperty',
        'mother_property' => 'getMotherProperty',
        'valued_under' => 'getValuedUnder',
        'land_value_specifications' => 'getLandValueSpecifications',
        'distributions' => 'getDistributions',
        'exemptions' => 'getExemptions',
        'ceiling' => 'getCeiling',
        'deduction_for_improvement_overall' => 'getDeductionForImprovementOverall'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('bfe_numbers', $data ?? [], null);
        $this->setIfExists('year', $data ?? [], null);
        $this->setIfExists('number_valued_apartments', $data ?? [], null);
        $this->setIfExists('usage_code', $data ?? [], null);
        $this->setIfExists('coverage_charge_difference_value', $data ?? [], null);
        $this->setIfExists('coverage_charge_duty_code', $data ?? [], null);
        $this->setIfExists('coverage_charge_duty_code_type', $data ?? [], null);
        $this->setIfExists('property_value', $data ?? [], null);
        $this->setIfExists('land_value', $data ?? [], null);
        $this->setIfExists('legal_category_code', $data ?? [], null);
        $this->setIfExists('legal_category_text', $data ?? [], null);
        $this->setIfExists('legal_subcategory_code', $data ?? [], null);
        $this->setIfExists('legal_subcategory_text', $data ?? [], null);
        $this->setIfExists('vur_mark', $data ?? [], null);
        $this->setIfExists('area_valued', $data ?? [], null);
        $this->setIfExists('valuation_area_code', $data ?? [], null);
        $this->setIfExists('change_date', $data ?? [], null);
        $this->setIfExists('change_code', $data ?? [], null);
        $this->setIfExists('valuation_property', $data ?? [], null);
        $this->setIfExists('mother_property', $data ?? [], null);
        $this->setIfExists('valued_under', $data ?? [], null);
        $this->setIfExists('land_value_specifications', $data ?? [], null);
        $this->setIfExists('distributions', $data ?? [], null);
        $this->setIfExists('exemptions', $data ?? [], null);
        $this->setIfExists('ceiling', $data ?? [], null);
        $this->setIfExists('deduction_for_improvement_overall', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['year'] === null) {
            $invalidProperties[] = "'year' can't be null";
        }
        if ($this->container['number_valued_apartments'] === null) {
            $invalidProperties[] = "'number_valued_apartments' can't be null";
        }
        if ($this->container['coverage_charge_difference_value'] === null) {
            $invalidProperties[] = "'coverage_charge_difference_value' can't be null";
        }
        if ($this->container['property_value'] === null) {
            $invalidProperties[] = "'property_value' can't be null";
        }
        if ($this->container['land_value'] === null) {
            $invalidProperties[] = "'land_value' can't be null";
        }
        if ($this->container['area_valued'] === null) {
            $invalidProperties[] = "'area_valued' can't be null";
        }
        if ($this->container['valuation_area_code'] === null) {
            $invalidProperties[] = "'valuation_area_code' can't be null";
        }
        if ($this->container['change_date'] === null) {
            $invalidProperties[] = "'change_date' can't be null";
        }
        if ($this->container['land_value_specifications'] === null) {
            $invalidProperties[] = "'land_value_specifications' can't be null";
        }
        if ($this->container['distributions'] === null) {
            $invalidProperties[] = "'distributions' can't be null";
        }
        if ($this->container['exemptions'] === null) {
            $invalidProperties[] = "'exemptions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id NÃ¸gle der entydig identificerer en ejendomsvurdering.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return mixed
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param mixed $updated_at Timestamp for hvornÃ¥r en vurdering, en eventuel vurderingsÃ¦ndring, Ã¥rsregulering eller Â§4/4A vurdering er opdateret enten maskinelt ved en batch-kÃ¸rsel eller i forbindelse med sagsbehandling.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets bfe_numbers
     *
     * @return mixed|null
     */
    public function getBfeNumbers()
    {
        return $this->container['bfe_numbers'];
    }

    /**
     * Sets bfe_numbers
     *
     * @param mixed|null $bfe_numbers Liste af BFE-numre som er omfattet af vurderingen.
     *
     * @return self
     */
    public function setBfeNumbers($bfe_numbers)
    {
        if (is_null($bfe_numbers)) {
            array_push($this->openAPINullablesSetToNull, 'bfe_numbers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bfe_numbers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bfe_numbers'] = $bfe_numbers;

        return $this;
    }

    /**
     * Gets year
     *
     * @return mixed
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param mixed $year Det Ã¥r vurderingen gÃ¦lder for.
     *
     * @return self
     */
    public function setYear($year)
    {
        if (is_null($year)) {
            array_push($this->openAPINullablesSetToNull, 'year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets number_valued_apartments
     *
     * @return mixed
     */
    public function getNumberValuedApartments()
    {
        return $this->container['number_valued_apartments'];
    }

    /**
     * Sets number_valued_apartments
     *
     * @param mixed $number_valued_apartments Antal medvurderede lejligheder i den vurderede ejendom
     *
     * @return self
     */
    public function setNumberValuedApartments($number_valued_apartments)
    {
        if (is_null($number_valued_apartments)) {
            array_push($this->openAPINullablesSetToNull, 'number_valued_apartments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_valued_apartments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_valued_apartments'] = $number_valued_apartments;

        return $this;
    }

    /**
     * Gets usage_code
     *
     * @return mixed|null
     */
    public function getUsageCode()
    {
        return $this->container['usage_code'];
    }

    /**
     * Sets usage_code
     *
     * @param mixed|null $usage_code Benyttelseskode angiver ejendommens benyttelse, som den er blevet fastlagt i forbindelse med en vurdering.
     *
     * @return self
     */
    public function setUsageCode($usage_code)
    {
        if (is_null($usage_code)) {
            array_push($this->openAPINullablesSetToNull, 'usage_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage_code'] = $usage_code;

        return $this;
    }

    /**
     * Gets coverage_charge_difference_value
     *
     * @return mixed
     */
    public function getCoverageChargeDifferenceValue()
    {
        return $this->container['coverage_charge_difference_value'];
    }

    /**
     * Sets coverage_charge_difference_value
     *
     * @param mixed $coverage_charge_difference_value DÃ¦kningsafgiftspligtig forskelsvÃ¦rdi for erhvervsejendomme eller dÃ¦kningsafgiftspligtig forskelsvÃ¦rdi for offentlige ejendomme, der er fritaget for grundskyld.
     *
     * @return self
     */
    public function setCoverageChargeDifferenceValue($coverage_charge_difference_value)
    {
        if (is_null($coverage_charge_difference_value)) {
            array_push($this->openAPINullablesSetToNull, 'coverage_charge_difference_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('coverage_charge_difference_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['coverage_charge_difference_value'] = $coverage_charge_difference_value;

        return $this;
    }

    /**
     * Gets coverage_charge_duty_code
     *
     * @return mixed|null
     */
    public function getCoverageChargeDutyCode()
    {
        return $this->container['coverage_charge_duty_code'];
    }

    /**
     * Sets coverage_charge_duty_code
     *
     * @param mixed|null $coverage_charge_duty_code Kode, der angiver om ejendommen er helt eller delvis dÃ¦kningsafgiftspligtig.
     *
     * @return self
     */
    public function setCoverageChargeDutyCode($coverage_charge_duty_code)
    {
        if (is_null($coverage_charge_duty_code)) {
            array_push($this->openAPINullablesSetToNull, 'coverage_charge_duty_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('coverage_charge_duty_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['coverage_charge_duty_code'] = $coverage_charge_duty_code;

        return $this;
    }

    /**
     * Gets coverage_charge_duty_code_type
     *
     * @return mixed|null
     */
    public function getCoverageChargeDutyCodeType()
    {
        return $this->container['coverage_charge_duty_code_type'];
    }

    /**
     * Sets coverage_charge_duty_code_type
     *
     * @param mixed|null $coverage_charge_duty_code_type Koden angiver typen af dÃ¦kningsafgiftspligten, enten afhÃ¦ngig af ejertype (offentlig) eller af ejendomstypen (erhvervsmÃ¦ssig).
     *
     * @return self
     */
    public function setCoverageChargeDutyCodeType($coverage_charge_duty_code_type)
    {
        if (is_null($coverage_charge_duty_code_type)) {
            array_push($this->openAPINullablesSetToNull, 'coverage_charge_duty_code_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('coverage_charge_duty_code_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['coverage_charge_duty_code_type'] = $coverage_charge_duty_code_type;

        return $this;
    }

    /**
     * Gets property_value
     *
     * @return mixed
     */
    public function getPropertyValue()
    {
        return $this->container['property_value'];
    }

    /**
     * Sets property_value
     *
     * @param mixed $property_value Den ved en vurdering ansatte ejendomsvÃ¦rdi (i hele kroner).
     *
     * @return self
     */
    public function setPropertyValue($property_value)
    {
        if (is_null($property_value)) {
            array_push($this->openAPINullablesSetToNull, 'property_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_value'] = $property_value;

        return $this;
    }

    /**
     * Gets land_value
     *
     * @return mixed
     */
    public function getLandValue()
    {
        return $this->container['land_value'];
    }

    /**
     * Sets land_value
     *
     * @param mixed $land_value Den ved vurdering ansatte grundvÃ¦rdi (i hele kroner).
     *
     * @return self
     */
    public function setLandValue($land_value)
    {
        if (is_null($land_value)) {
            array_push($this->openAPINullablesSetToNull, 'land_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('land_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['land_value'] = $land_value;

        return $this;
    }

    /**
     * Gets legal_category_code
     *
     * @return mixed|null
     */
    public function getLegalCategoryCode()
    {
        return $this->container['legal_category_code'];
    }

    /**
     * Sets legal_category_code
     *
     * @param mixed|null $legal_category_code Kode der angiver den juridiske kategori, som ejendommen er tildelt ved denne ejendomsvurdering.
     *
     * @return self
     */
    public function setLegalCategoryCode($legal_category_code)
    {
        if (is_null($legal_category_code)) {
            array_push($this->openAPINullablesSetToNull, 'legal_category_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legal_category_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legal_category_code'] = $legal_category_code;

        return $this;
    }

    /**
     * Gets legal_category_text
     *
     * @return mixed|null
     */
    public function getLegalCategoryText()
    {
        return $this->container['legal_category_text'];
    }

    /**
     * Sets legal_category_text
     *
     * @param mixed|null $legal_category_text Tekst, der beskriver den juridiske kategori, som ejendommen er tildelt ved denne ejendomsvurdering
     *
     * @return self
     */
    public function setLegalCategoryText($legal_category_text)
    {
        if (is_null($legal_category_text)) {
            array_push($this->openAPINullablesSetToNull, 'legal_category_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legal_category_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legal_category_text'] = $legal_category_text;

        return $this;
    }

    /**
     * Gets legal_subcategory_code
     *
     * @return mixed|null
     */
    public function getLegalSubcategoryCode()
    {
        return $this->container['legal_subcategory_code'];
    }

    /**
     * Sets legal_subcategory_code
     *
     * @param mixed|null $legal_subcategory_code Kode der angiver den juridiske underkategori, som ejendommen er blevet tildelt ved denne ejendomsvurdering
     *
     * @return self
     */
    public function setLegalSubcategoryCode($legal_subcategory_code)
    {
        if (is_null($legal_subcategory_code)) {
            array_push($this->openAPINullablesSetToNull, 'legal_subcategory_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legal_subcategory_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legal_subcategory_code'] = $legal_subcategory_code;

        return $this;
    }

    /**
     * Gets legal_subcategory_text
     *
     * @return mixed|null
     */
    public function getLegalSubcategoryText()
    {
        return $this->container['legal_subcategory_text'];
    }

    /**
     * Sets legal_subcategory_text
     *
     * @param mixed|null $legal_subcategory_text Tekst der beskriver den juridiske underkategori, som er blevet tildelt ved denne vurdering.
     *
     * @return self
     */
    public function setLegalSubcategoryText($legal_subcategory_text)
    {
        if (is_null($legal_subcategory_text)) {
            array_push($this->openAPINullablesSetToNull, 'legal_subcategory_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legal_subcategory_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legal_subcategory_text'] = $legal_subcategory_text;

        return $this;
    }

    /**
     * Gets vur_mark
     *
     * @return mixed|null
     */
    public function getVurMark()
    {
        return $this->container['vur_mark'];
    }

    /**
     * Sets vur_mark
     *
     * @param mixed|null $vur_mark Angiver kilde-system og type for vurderingen
     *
     * @return self
     */
    public function setVurMark($vur_mark)
    {
        if (is_null($vur_mark)) {
            array_push($this->openAPINullablesSetToNull, 'vur_mark');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vur_mark', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vur_mark'] = $vur_mark;

        return $this;
    }

    /**
     * Gets area_valued
     *
     * @return mixed
     */
    public function getAreaValued()
    {
        return $this->container['area_valued'];
    }

    /**
     * Sets area_valued
     *
     * @param mixed $area_valued Vurderet grundareal. Ejendommens samlede vurderede areal i m2 (incl. Vejareal).
     *
     * @return self
     */
    public function setAreaValued($area_valued)
    {
        if (is_null($area_valued)) {
            array_push($this->openAPINullablesSetToNull, 'area_valued');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('area_valued', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['area_valued'] = $area_valued;

        return $this;
    }

    /**
     * Gets valuation_area_code
     *
     * @return mixed
     */
    public function getValuationAreaCode()
    {
        return $this->container['valuation_area_code'];
    }

    /**
     * Sets valuation_area_code
     *
     * @param mixed $valuation_area_code Underinddeling af en kommune, som benyttes ved vurdering.
     *
     * @return self
     */
    public function setValuationAreaCode($valuation_area_code)
    {
        if (is_null($valuation_area_code)) {
            array_push($this->openAPINullablesSetToNull, 'valuation_area_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valuation_area_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valuation_area_code'] = $valuation_area_code;

        return $this;
    }

    /**
     * Gets change_date
     *
     * @return mixed
     */
    public function getChangeDate()
    {
        return $this->container['change_date'];
    }

    /**
     * Sets change_date
     *
     * @param mixed $change_date Dato for seneste gÃ¦ldende vurdering.
     *
     * @return self
     */
    public function setChangeDate($change_date)
    {
        if (is_null($change_date)) {
            array_push($this->openAPINullablesSetToNull, 'change_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('change_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['change_date'] = $change_date;

        return $this;
    }

    /**
     * Gets change_code
     *
     * @return mixed|null
     */
    public function getChangeCode()
    {
        return $this->container['change_code'];
    }

    /**
     * Sets change_code
     *
     * @param mixed|null $change_code Ã…rsagen til Ã¦ndringen af ejendomsvurderingen. Kode, der angiver type af vurdering eller myndighed, der har afgjort en vurdering.
     *
     * @return self
     */
    public function setChangeCode($change_code)
    {
        if (is_null($change_code)) {
            array_push($this->openAPINullablesSetToNull, 'change_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('change_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['change_code'] = $change_code;

        return $this;
    }

    /**
     * Gets valuation_property
     *
     * @return \OpenAPI\Client\Model\VURValuationProperty|null
     */
    public function getValuationProperty()
    {
        return $this->container['valuation_property'];
    }

    /**
     * Sets valuation_property
     *
     * @param \OpenAPI\Client\Model\VURValuationProperty|null $valuation_property valuation_property
     *
     * @return self
     */
    public function setValuationProperty($valuation_property)
    {
        if (is_null($valuation_property)) {
            throw new \InvalidArgumentException('non-nullable valuation_property cannot be null');
        }
        $this->container['valuation_property'] = $valuation_property;

        return $this;
    }

    /**
     * Gets mother_property
     *
     * @return \OpenAPI\Client\Model\VURValuationProperty|null
     */
    public function getMotherProperty()
    {
        return $this->container['mother_property'];
    }

    /**
     * Sets mother_property
     *
     * @param \OpenAPI\Client\Model\VURValuationProperty|null $mother_property mother_property
     *
     * @return self
     */
    public function setMotherProperty($mother_property)
    {
        if (is_null($mother_property)) {
            throw new \InvalidArgumentException('non-nullable mother_property cannot be null');
        }
        $this->container['mother_property'] = $mother_property;

        return $this;
    }

    /**
     * Gets valued_under
     *
     * @return \OpenAPI\Client\Model\VURValuationProperty|null
     */
    public function getValuedUnder()
    {
        return $this->container['valued_under'];
    }

    /**
     * Sets valued_under
     *
     * @param \OpenAPI\Client\Model\VURValuationProperty|null $valued_under valued_under
     *
     * @return self
     */
    public function setValuedUnder($valued_under)
    {
        if (is_null($valued_under)) {
            throw new \InvalidArgumentException('non-nullable valued_under cannot be null');
        }
        $this->container['valued_under'] = $valued_under;

        return $this;
    }

    /**
     * Gets land_value_specifications
     *
     * @return mixed
     */
    public function getLandValueSpecifications()
    {
        return $this->container['land_value_specifications'];
    }

    /**
     * Sets land_value_specifications
     *
     * @param mixed $land_value_specifications land_value_specifications
     *
     * @return self
     */
    public function setLandValueSpecifications($land_value_specifications)
    {
        if (is_null($land_value_specifications)) {
            array_push($this->openAPINullablesSetToNull, 'land_value_specifications');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('land_value_specifications', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['land_value_specifications'] = $land_value_specifications;

        return $this;
    }

    /**
     * Gets distributions
     *
     * @return mixed
     */
    public function getDistributions()
    {
        return $this->container['distributions'];
    }

    /**
     * Sets distributions
     *
     * @param mixed $distributions distributions
     *
     * @return self
     */
    public function setDistributions($distributions)
    {
        if (is_null($distributions)) {
            array_push($this->openAPINullablesSetToNull, 'distributions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('distributions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['distributions'] = $distributions;

        return $this;
    }

    /**
     * Gets exemptions
     *
     * @return mixed
     */
    public function getExemptions()
    {
        return $this->container['exemptions'];
    }

    /**
     * Sets exemptions
     *
     * @param mixed $exemptions exemptions
     *
     * @return self
     */
    public function setExemptions($exemptions)
    {
        if (is_null($exemptions)) {
            array_push($this->openAPINullablesSetToNull, 'exemptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exemptions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exemptions'] = $exemptions;

        return $this;
    }

    /**
     * Gets ceiling
     *
     * @return \OpenAPI\Client\Model\VURCeilingResponse|null
     */
    public function getCeiling()
    {
        return $this->container['ceiling'];
    }

    /**
     * Sets ceiling
     *
     * @param \OpenAPI\Client\Model\VURCeilingResponse|null $ceiling ceiling
     *
     * @return self
     */
    public function setCeiling($ceiling)
    {
        if (is_null($ceiling)) {
            throw new \InvalidArgumentException('non-nullable ceiling cannot be null');
        }
        $this->container['ceiling'] = $ceiling;

        return $this;
    }

    /**
     * Gets deduction_for_improvement_overall
     *
     * @return \OpenAPI\Client\Model\VURDeductionForImprovementOverallResponse|null
     */
    public function getDeductionForImprovementOverall()
    {
        return $this->container['deduction_for_improvement_overall'];
    }

    /**
     * Sets deduction_for_improvement_overall
     *
     * @param \OpenAPI\Client\Model\VURDeductionForImprovementOverallResponse|null $deduction_for_improvement_overall deduction_for_improvement_overall
     *
     * @return self
     */
    public function setDeductionForImprovementOverall($deduction_for_improvement_overall)
    {
        if (is_null($deduction_for_improvement_overall)) {
            throw new \InvalidArgumentException('non-nullable deduction_for_improvement_overall cannot be null');
        }
        $this->container['deduction_for_improvement_overall'] = $deduction_for_improvement_overall;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


