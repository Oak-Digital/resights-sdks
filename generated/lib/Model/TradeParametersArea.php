<?php
/**
 * TradeParametersArea
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TradeParametersArea Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TradeParametersArea implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TradeParametersArea';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'area' => 'mixed',
        'type' => '\OpenAPI\Client\Model\LatestTradeTypeEnum',
        'land_area' => 'mixed',
        'floor_area_br18' => 'mixed',
        'byg038_area_building_total' => 'mixed',
        'tinglyst_area' => 'mixed',
        'unit_area' => 'mixed',
        'enh026_area_unit_total' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'area' => null,
        'type' => null,
        'land_area' => null,
        'floor_area_br18' => null,
        'byg038_area_building_total' => null,
        'tinglyst_area' => null,
        'unit_area' => null,
        'enh026_area_unit_total' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'area' => true,
		'type' => false,
		'land_area' => true,
		'floor_area_br18' => true,
		'byg038_area_building_total' => true,
		'tinglyst_area' => true,
		'unit_area' => true,
		'enh026_area_unit_total' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'area' => 'area',
        'type' => 'type',
        'land_area' => 'land_area',
        'floor_area_br18' => 'floor_area_br18',
        'byg038_area_building_total' => 'byg038_area_building_total',
        'tinglyst_area' => 'tinglyst_area',
        'unit_area' => 'unit_area',
        'enh026_area_unit_total' => 'enh026_area_unit_total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'area' => 'setArea',
        'type' => 'setType',
        'land_area' => 'setLandArea',
        'floor_area_br18' => 'setFloorAreaBr18',
        'byg038_area_building_total' => 'setByg038AreaBuildingTotal',
        'tinglyst_area' => 'setTinglystArea',
        'unit_area' => 'setUnitArea',
        'enh026_area_unit_total' => 'setEnh026AreaUnitTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'area' => 'getArea',
        'type' => 'getType',
        'land_area' => 'getLandArea',
        'floor_area_br18' => 'getFloorAreaBr18',
        'byg038_area_building_total' => 'getByg038AreaBuildingTotal',
        'tinglyst_area' => 'getTinglystArea',
        'unit_area' => 'getUnitArea',
        'enh026_area_unit_total' => 'getEnh026AreaUnitTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('area', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('land_area', $data ?? [], null);
        $this->setIfExists('floor_area_br18', $data ?? [], null);
        $this->setIfExists('byg038_area_building_total', $data ?? [], null);
        $this->setIfExists('tinglyst_area', $data ?? [], null);
        $this->setIfExists('unit_area', $data ?? [], null);
        $this->setIfExists('enh026_area_unit_total', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets area
     *
     * @return mixed|null
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param mixed|null $area Short hand field for first available area. Generally `floor_area_br18` is preferred. However, for agricultural properties, `land_area` is used, while for condominiums `unit_area` is used.
     *
     * @return self
     */
    public function setArea($area)
    {
        if (is_null($area)) {
            array_push($this->openAPINullablesSetToNull, 'area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\LatestTradeTypeEnum|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\LatestTradeTypeEnum|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets land_area
     *
     * @return mixed|null
     */
    public function getLandArea()
    {
        return $this->container['land_area'];
    }

    /**
     * Sets land_area
     *
     * @param mixed|null $land_area land_area
     *
     * @return self
     */
    public function setLandArea($land_area)
    {
        if (is_null($land_area)) {
            array_push($this->openAPINullablesSetToNull, 'land_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('land_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['land_area'] = $land_area;

        return $this;
    }

    /**
     * Gets floor_area_br18
     *
     * @return mixed|null
     */
    public function getFloorAreaBr18()
    {
        return $this->container['floor_area_br18'];
    }

    /**
     * Sets floor_area_br18
     *
     * @param mixed|null $floor_area_br18 floor_area_br18
     *
     * @return self
     */
    public function setFloorAreaBr18($floor_area_br18)
    {
        if (is_null($floor_area_br18)) {
            array_push($this->openAPINullablesSetToNull, 'floor_area_br18');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('floor_area_br18', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['floor_area_br18'] = $floor_area_br18;

        return $this;
    }

    /**
     * Gets byg038_area_building_total
     *
     * @return mixed|null
     */
    public function getByg038AreaBuildingTotal()
    {
        return $this->container['byg038_area_building_total'];
    }

    /**
     * Sets byg038_area_building_total
     *
     * @param mixed|null $byg038_area_building_total byg038_area_building_total
     *
     * @return self
     */
    public function setByg038AreaBuildingTotal($byg038_area_building_total)
    {
        if (is_null($byg038_area_building_total)) {
            array_push($this->openAPINullablesSetToNull, 'byg038_area_building_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg038_area_building_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg038_area_building_total'] = $byg038_area_building_total;

        return $this;
    }

    /**
     * Gets tinglyst_area
     *
     * @return mixed|null
     */
    public function getTinglystArea()
    {
        return $this->container['tinglyst_area'];
    }

    /**
     * Sets tinglyst_area
     *
     * @param mixed|null $tinglyst_area tinglyst_area
     *
     * @return self
     */
    public function setTinglystArea($tinglyst_area)
    {
        if (is_null($tinglyst_area)) {
            array_push($this->openAPINullablesSetToNull, 'tinglyst_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tinglyst_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tinglyst_area'] = $tinglyst_area;

        return $this;
    }

    /**
     * Gets unit_area
     *
     * @return mixed|null
     */
    public function getUnitArea()
    {
        return $this->container['unit_area'];
    }

    /**
     * Sets unit_area
     *
     * @param mixed|null $unit_area unit_area
     *
     * @return self
     */
    public function setUnitArea($unit_area)
    {
        if (is_null($unit_area)) {
            array_push($this->openAPINullablesSetToNull, 'unit_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_area'] = $unit_area;

        return $this;
    }

    /**
     * Gets enh026_area_unit_total
     *
     * @return mixed|null
     */
    public function getEnh026AreaUnitTotal()
    {
        return $this->container['enh026_area_unit_total'];
    }

    /**
     * Sets enh026_area_unit_total
     *
     * @param mixed|null $enh026_area_unit_total enh026_area_unit_total
     *
     * @return self
     */
    public function setEnh026AreaUnitTotal($enh026_area_unit_total)
    {
        if (is_null($enh026_area_unit_total)) {
            array_push($this->openAPINullablesSetToNull, 'enh026_area_unit_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh026_area_unit_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh026_area_unit_total'] = $enh026_area_unit_total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


