<?php
/**
 * SkoedeKoebesumModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SkoedeKoebesumModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SkoedeKoebesumModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SkoedeKoebesumModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'kontant_koebesum' => 'mixed',
        'arv_gave_beloeb' => 'mixed',
        'overtagne_restancer' => 'mixed',
        'afloesningsbare_servitutter' => 'mixed',
        'anlaegs_bidrag' => 'mixed',
        'i_alt_koebesum' => 'mixed',
        'koebesum_tekst' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'kontant_koebesum' => null,
        'arv_gave_beloeb' => null,
        'overtagne_restancer' => null,
        'afloesningsbare_servitutter' => null,
        'anlaegs_bidrag' => null,
        'i_alt_koebesum' => null,
        'koebesum_tekst' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'kontant_koebesum' => true,
		'arv_gave_beloeb' => true,
		'overtagne_restancer' => true,
		'afloesningsbare_servitutter' => true,
		'anlaegs_bidrag' => true,
		'i_alt_koebesum' => true,
		'koebesum_tekst' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kontant_koebesum' => 'KontantKoebesum',
        'arv_gave_beloeb' => 'ArvGaveBeloeb',
        'overtagne_restancer' => 'OvertagneRestancer',
        'afloesningsbare_servitutter' => 'AfloesningsbareServitutter',
        'anlaegs_bidrag' => 'AnlaegsBidrag',
        'i_alt_koebesum' => 'IAltKoebesum',
        'koebesum_tekst' => 'KoebesumTekst'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kontant_koebesum' => 'setKontantKoebesum',
        'arv_gave_beloeb' => 'setArvGaveBeloeb',
        'overtagne_restancer' => 'setOvertagneRestancer',
        'afloesningsbare_servitutter' => 'setAfloesningsbareServitutter',
        'anlaegs_bidrag' => 'setAnlaegsBidrag',
        'i_alt_koebesum' => 'setIAltKoebesum',
        'koebesum_tekst' => 'setKoebesumTekst'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kontant_koebesum' => 'getKontantKoebesum',
        'arv_gave_beloeb' => 'getArvGaveBeloeb',
        'overtagne_restancer' => 'getOvertagneRestancer',
        'afloesningsbare_servitutter' => 'getAfloesningsbareServitutter',
        'anlaegs_bidrag' => 'getAnlaegsBidrag',
        'i_alt_koebesum' => 'getIAltKoebesum',
        'koebesum_tekst' => 'getKoebesumTekst'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('kontant_koebesum', $data ?? [], null);
        $this->setIfExists('arv_gave_beloeb', $data ?? [], null);
        $this->setIfExists('overtagne_restancer', $data ?? [], null);
        $this->setIfExists('afloesningsbare_servitutter', $data ?? [], null);
        $this->setIfExists('anlaegs_bidrag', $data ?? [], null);
        $this->setIfExists('i_alt_koebesum', $data ?? [], null);
        $this->setIfExists('koebesum_tekst', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['kontant_koebesum'] === null) {
            $invalidProperties[] = "'kontant_koebesum' can't be null";
        }
        if ($this->container['i_alt_koebesum'] === null) {
            $invalidProperties[] = "'i_alt_koebesum' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kontant_koebesum
     *
     * @return mixed
     */
    public function getKontantKoebesum()
    {
        return $this->container['kontant_koebesum'];
    }

    /**
     * Sets kontant_koebesum
     *
     * @param mixed $kontant_koebesum Kontant kÃ¸besum
     *
     * @return self
     */
    public function setKontantKoebesum($kontant_koebesum)
    {
        if (is_null($kontant_koebesum)) {
            array_push($this->openAPINullablesSetToNull, 'kontant_koebesum');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('kontant_koebesum', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['kontant_koebesum'] = $kontant_koebesum;

        return $this;
    }

    /**
     * Gets arv_gave_beloeb
     *
     * @return mixed|null
     */
    public function getArvGaveBeloeb()
    {
        return $this->container['arv_gave_beloeb'];
    }

    /**
     * Sets arv_gave_beloeb
     *
     * @param mixed|null $arv_gave_beloeb Der er tale om arv, nÃ¥r en persons formue eller ejendele helt eller delvis udloddes til en anden pga. slÃ¦gtskab eller ifÃ¸lge testamentarisk bestemmelse - bÃ¥de ved a conto-udlodning eller ved den endelige udlodning. Der er tale om en gave, nÃ¥r man giver eller modtager noget af vÃ¦rdi, og der ikke skal betales fuldt ud for det.
     *
     * @return self
     */
    public function setArvGaveBeloeb($arv_gave_beloeb)
    {
        if (is_null($arv_gave_beloeb)) {
            array_push($this->openAPINullablesSetToNull, 'arv_gave_beloeb');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('arv_gave_beloeb', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['arv_gave_beloeb'] = $arv_gave_beloeb;

        return $this;
    }

    /**
     * Gets overtagne_restancer
     *
     * @return mixed|null
     */
    public function getOvertagneRestancer()
    {
        return $this->container['overtagne_restancer'];
    }

    /**
     * Sets overtagne_restancer
     *
     * @param mixed|null $overtagne_restancer Overtagne restancer
     *
     * @return self
     */
    public function setOvertagneRestancer($overtagne_restancer)
    {
        if (is_null($overtagne_restancer)) {
            array_push($this->openAPINullablesSetToNull, 'overtagne_restancer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overtagne_restancer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['overtagne_restancer'] = $overtagne_restancer;

        return $this;
    }

    /**
     * Gets afloesningsbare_servitutter
     *
     * @return mixed|null
     */
    public function getAfloesningsbareServitutter()
    {
        return $this->container['afloesningsbare_servitutter'];
    }

    /**
     * Sets afloesningsbare_servitutter
     *
     * @param mixed|null $afloesningsbare_servitutter AflÃ¸sningsbare servitutter
     *
     * @return self
     */
    public function setAfloesningsbareServitutter($afloesningsbare_servitutter)
    {
        if (is_null($afloesningsbare_servitutter)) {
            array_push($this->openAPINullablesSetToNull, 'afloesningsbare_servitutter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('afloesningsbare_servitutter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['afloesningsbare_servitutter'] = $afloesningsbare_servitutter;

        return $this;
    }

    /**
     * Gets anlaegs_bidrag
     *
     * @return mixed|null
     */
    public function getAnlaegsBidrag()
    {
        return $this->container['anlaegs_bidrag'];
    }

    /**
     * Sets anlaegs_bidrag
     *
     * @param mixed|null $anlaegs_bidrag AnlÃ¦gsbidrag
     *
     * @return self
     */
    public function setAnlaegsBidrag($anlaegs_bidrag)
    {
        if (is_null($anlaegs_bidrag)) {
            array_push($this->openAPINullablesSetToNull, 'anlaegs_bidrag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('anlaegs_bidrag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['anlaegs_bidrag'] = $anlaegs_bidrag;

        return $this;
    }

    /**
     * Gets i_alt_koebesum
     *
     * @return mixed
     */
    public function getIAltKoebesum()
    {
        return $this->container['i_alt_koebesum'];
    }

    /**
     * Sets i_alt_koebesum
     *
     * @param mixed $i_alt_koebesum Hvis kÃ¸besummen er mindre end halvdelen af den offentlige vurdering skal der angives en nÃ¦rmere begrundelse for dette.
     *
     * @return self
     */
    public function setIAltKoebesum($i_alt_koebesum)
    {
        if (is_null($i_alt_koebesum)) {
            array_push($this->openAPINullablesSetToNull, 'i_alt_koebesum');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('i_alt_koebesum', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['i_alt_koebesum'] = $i_alt_koebesum;

        return $this;
    }

    /**
     * Gets koebesum_tekst
     *
     * @return mixed|null
     */
    public function getKoebesumTekst()
    {
        return $this->container['koebesum_tekst'];
    }

    /**
     * Sets koebesum_tekst
     *
     * @param mixed|null $koebesum_tekst Hvis kÃ¸besummen er mindre end halvdelen af den offentlige vurdering skal der angives en nÃ¦rmere begrundelse for dette.
     *
     * @return self
     */
    public function setKoebesumTekst($koebesum_tekst)
    {
        if (is_null($koebesum_tekst)) {
            array_push($this->openAPINullablesSetToNull, 'koebesum_tekst');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('koebesum_tekst', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['koebesum_tekst'] = $koebesum_tekst;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


