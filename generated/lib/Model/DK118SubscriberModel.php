<?php
/**
 * DK118SubscriberModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DK118SubscriberModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DK118SubscriberModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DK118SubscriberModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'serialnumberidentifier' => 'mixed',
        'record_id' => 'mixed',
        'subscr_id' => 'mixed',
        'subscr_type' => '\OpenAPI\Client\Model\DK118SubscriberTypeEnum',
        'first_name' => 'mixed',
        'last_name' => 'mixed',
        'gender' => '\OpenAPI\Client\Model\DK118GenderEnum',
        'robinson' => 'mixed',
        'dir_type' => '\OpenAPI\Client\Model\DK118DirectoryTypeEnum',
        'main_no' => 'mixed',
        'tel_no' => 'mixed',
        'tel_type' => '\OpenAPI\Client\Model\DK118TelephoneTypeEnum',
        'telephonesubscriberprotection_' => 'mixed',
        'select_disp' => 'mixed',
        'secret' => '\OpenAPI\Client\Model\DK118SecretEnum',
        'indent' => 'mixed',
        'ex_op' => '\OpenAPI\Client\Model\DK118OperatorAuthorizationEnum',
        'vendor_valid' => 'mixed',
        'ranking' => 'mixed',
        'street' => 'mixed',
        'house_no' => 'mixed',
        'floor' => 'mixed',
        'postal_code' => 'mixed',
        'po_name' => 'mixed',
        'town' => 'mixed',
        'coy' => 'mixed',
        'cox' => 'mixed',
        'movementdate' => 'mixed',
        'update_date' => 'mixed',
        'valid_from' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'serialnumberidentifier' => null,
        'record_id' => null,
        'subscr_id' => null,
        'subscr_type' => null,
        'first_name' => null,
        'last_name' => null,
        'gender' => null,
        'robinson' => null,
        'dir_type' => null,
        'main_no' => null,
        'tel_no' => null,
        'tel_type' => null,
        'telephonesubscriberprotection_' => null,
        'select_disp' => null,
        'secret' => null,
        'indent' => null,
        'ex_op' => null,
        'vendor_valid' => null,
        'ranking' => null,
        'street' => null,
        'house_no' => null,
        'floor' => null,
        'postal_code' => null,
        'po_name' => null,
        'town' => null,
        'coy' => null,
        'cox' => null,
        'movementdate' => null,
        'update_date' => 'date',
        'valid_from' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'serialnumberidentifier' => true,
		'record_id' => true,
		'subscr_id' => true,
		'subscr_type' => false,
		'first_name' => true,
		'last_name' => true,
		'gender' => false,
		'robinson' => true,
		'dir_type' => false,
		'main_no' => true,
		'tel_no' => true,
		'tel_type' => false,
		'telephonesubscriberprotection_' => true,
		'select_disp' => true,
		'secret' => false,
		'indent' => true,
		'ex_op' => false,
		'vendor_valid' => true,
		'ranking' => true,
		'street' => true,
		'house_no' => true,
		'floor' => true,
		'postal_code' => true,
		'po_name' => true,
		'town' => true,
		'coy' => true,
		'cox' => true,
		'movementdate' => true,
		'update_date' => true,
		'valid_from' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'serialnumberidentifier' => 'serialnumberidentifier',
        'record_id' => 'record_id',
        'subscr_id' => 'subscr_id',
        'subscr_type' => 'subscr_type',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'gender' => 'gender',
        'robinson' => 'robinson',
        'dir_type' => 'dir_type',
        'main_no' => 'main_no',
        'tel_no' => 'tel_no',
        'tel_type' => 'tel_type',
        'telephonesubscriberprotection_' => 'telephonesubscriberprotection_',
        'select_disp' => 'select_disp',
        'secret' => 'secret',
        'indent' => 'indent',
        'ex_op' => 'ex_op',
        'vendor_valid' => 'vendor_valid',
        'ranking' => 'ranking',
        'street' => 'street',
        'house_no' => 'house_no',
        'floor' => 'floor',
        'postal_code' => 'postal_code',
        'po_name' => 'po_name',
        'town' => 'town',
        'coy' => 'coy',
        'cox' => 'cox',
        'movementdate' => 'movementdate',
        'update_date' => 'update_date',
        'valid_from' => 'valid_from'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'serialnumberidentifier' => 'setSerialnumberidentifier',
        'record_id' => 'setRecordId',
        'subscr_id' => 'setSubscrId',
        'subscr_type' => 'setSubscrType',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'gender' => 'setGender',
        'robinson' => 'setRobinson',
        'dir_type' => 'setDirType',
        'main_no' => 'setMainNo',
        'tel_no' => 'setTelNo',
        'tel_type' => 'setTelType',
        'telephonesubscriberprotection_' => 'setTelephonesubscriberprotection',
        'select_disp' => 'setSelectDisp',
        'secret' => 'setSecret',
        'indent' => 'setIndent',
        'ex_op' => 'setExOp',
        'vendor_valid' => 'setVendorValid',
        'ranking' => 'setRanking',
        'street' => 'setStreet',
        'house_no' => 'setHouseNo',
        'floor' => 'setFloor',
        'postal_code' => 'setPostalCode',
        'po_name' => 'setPoName',
        'town' => 'setTown',
        'coy' => 'setCoy',
        'cox' => 'setCox',
        'movementdate' => 'setMovementdate',
        'update_date' => 'setUpdateDate',
        'valid_from' => 'setValidFrom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'serialnumberidentifier' => 'getSerialnumberidentifier',
        'record_id' => 'getRecordId',
        'subscr_id' => 'getSubscrId',
        'subscr_type' => 'getSubscrType',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'gender' => 'getGender',
        'robinson' => 'getRobinson',
        'dir_type' => 'getDirType',
        'main_no' => 'getMainNo',
        'tel_no' => 'getTelNo',
        'tel_type' => 'getTelType',
        'telephonesubscriberprotection_' => 'getTelephonesubscriberprotection',
        'select_disp' => 'getSelectDisp',
        'secret' => 'getSecret',
        'indent' => 'getIndent',
        'ex_op' => 'getExOp',
        'vendor_valid' => 'getVendorValid',
        'ranking' => 'getRanking',
        'street' => 'getStreet',
        'house_no' => 'getHouseNo',
        'floor' => 'getFloor',
        'postal_code' => 'getPostalCode',
        'po_name' => 'getPoName',
        'town' => 'getTown',
        'coy' => 'getCoy',
        'cox' => 'getCox',
        'movementdate' => 'getMovementdate',
        'update_date' => 'getUpdateDate',
        'valid_from' => 'getValidFrom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('serialnumberidentifier', $data ?? [], null);
        $this->setIfExists('record_id', $data ?? [], null);
        $this->setIfExists('subscr_id', $data ?? [], null);
        $this->setIfExists('subscr_type', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('robinson', $data ?? [], null);
        $this->setIfExists('dir_type', $data ?? [], null);
        $this->setIfExists('main_no', $data ?? [], null);
        $this->setIfExists('tel_no', $data ?? [], null);
        $this->setIfExists('tel_type', $data ?? [], null);
        $this->setIfExists('telephonesubscriberprotection_', $data ?? [], null);
        $this->setIfExists('select_disp', $data ?? [], null);
        $this->setIfExists('secret', $data ?? [], null);
        $this->setIfExists('indent', $data ?? [], null);
        $this->setIfExists('ex_op', $data ?? [], null);
        $this->setIfExists('vendor_valid', $data ?? [], null);
        $this->setIfExists('ranking', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('house_no', $data ?? [], null);
        $this->setIfExists('floor', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('po_name', $data ?? [], null);
        $this->setIfExists('town', $data ?? [], null);
        $this->setIfExists('coy', $data ?? [], null);
        $this->setIfExists('cox', $data ?? [], null);
        $this->setIfExists('movementdate', $data ?? [], null);
        $this->setIfExists('update_date', $data ?? [], null);
        $this->setIfExists('valid_from', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['serialnumberidentifier'] === null) {
            $invalidProperties[] = "'serialnumberidentifier' can't be null";
        }
        if ($this->container['robinson'] === null) {
            $invalidProperties[] = "'robinson' can't be null";
        }
        if ($this->container['secret'] === null) {
            $invalidProperties[] = "'secret' can't be null";
        }
        if ($this->container['ranking'] === null) {
            $invalidProperties[] = "'ranking' can't be null";
        }
        if ($this->container['update_date'] === null) {
            $invalidProperties[] = "'update_date' can't be null";
        }
        if ($this->container['valid_from'] === null) {
            $invalidProperties[] = "'valid_from' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets serialnumberidentifier
     *
     * @return mixed
     */
    public function getSerialnumberidentifier()
    {
        return $this->container['serialnumberidentifier'];
    }

    /**
     * Sets serialnumberidentifier
     *
     * @param mixed $serialnumberidentifier serialnumberidentifier
     *
     * @return self
     */
    public function setSerialnumberidentifier($serialnumberidentifier)
    {
        if (is_null($serialnumberidentifier)) {
            array_push($this->openAPINullablesSetToNull, 'serialnumberidentifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serialnumberidentifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serialnumberidentifier'] = $serialnumberidentifier;

        return $this;
    }

    /**
     * Gets record_id
     *
     * @return mixed|null
     */
    public function getRecordId()
    {
        return $this->container['record_id'];
    }

    /**
     * Sets record_id
     *
     * @param mixed|null $record_id record_id
     *
     * @return self
     */
    public function setRecordId($record_id)
    {
        if (is_null($record_id)) {
            array_push($this->openAPINullablesSetToNull, 'record_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('record_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['record_id'] = $record_id;

        return $this;
    }

    /**
     * Gets subscr_id
     *
     * @return mixed|null
     */
    public function getSubscrId()
    {
        return $this->container['subscr_id'];
    }

    /**
     * Sets subscr_id
     *
     * @param mixed|null $subscr_id subscr_id
     *
     * @return self
     */
    public function setSubscrId($subscr_id)
    {
        if (is_null($subscr_id)) {
            array_push($this->openAPINullablesSetToNull, 'subscr_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subscr_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subscr_id'] = $subscr_id;

        return $this;
    }

    /**
     * Gets subscr_type
     *
     * @return \OpenAPI\Client\Model\DK118SubscriberTypeEnum|null
     */
    public function getSubscrType()
    {
        return $this->container['subscr_type'];
    }

    /**
     * Sets subscr_type
     *
     * @param \OpenAPI\Client\Model\DK118SubscriberTypeEnum|null $subscr_type subscr_type
     *
     * @return self
     */
    public function setSubscrType($subscr_type)
    {
        if (is_null($subscr_type)) {
            throw new \InvalidArgumentException('non-nullable subscr_type cannot be null');
        }
        $this->container['subscr_type'] = $subscr_type;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return mixed|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param mixed|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return mixed|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param mixed|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return \OpenAPI\Client\Model\DK118GenderEnum|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \OpenAPI\Client\Model\DK118GenderEnum|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets robinson
     *
     * @return mixed
     */
    public function getRobinson()
    {
        return $this->container['robinson'];
    }

    /**
     * Sets robinson
     *
     * @param mixed $robinson robinson
     *
     * @return self
     */
    public function setRobinson($robinson)
    {
        if (is_null($robinson)) {
            array_push($this->openAPINullablesSetToNull, 'robinson');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('robinson', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['robinson'] = $robinson;

        return $this;
    }

    /**
     * Gets dir_type
     *
     * @return \OpenAPI\Client\Model\DK118DirectoryTypeEnum|null
     */
    public function getDirType()
    {
        return $this->container['dir_type'];
    }

    /**
     * Sets dir_type
     *
     * @param \OpenAPI\Client\Model\DK118DirectoryTypeEnum|null $dir_type dir_type
     *
     * @return self
     */
    public function setDirType($dir_type)
    {
        if (is_null($dir_type)) {
            throw new \InvalidArgumentException('non-nullable dir_type cannot be null');
        }
        $this->container['dir_type'] = $dir_type;

        return $this;
    }

    /**
     * Gets main_no
     *
     * @return mixed|null
     */
    public function getMainNo()
    {
        return $this->container['main_no'];
    }

    /**
     * Sets main_no
     *
     * @param mixed|null $main_no main_no
     *
     * @return self
     */
    public function setMainNo($main_no)
    {
        if (is_null($main_no)) {
            array_push($this->openAPINullablesSetToNull, 'main_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('main_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['main_no'] = $main_no;

        return $this;
    }

    /**
     * Gets tel_no
     *
     * @return mixed|null
     */
    public function getTelNo()
    {
        return $this->container['tel_no'];
    }

    /**
     * Sets tel_no
     *
     * @param mixed|null $tel_no tel_no
     *
     * @return self
     */
    public function setTelNo($tel_no)
    {
        if (is_null($tel_no)) {
            array_push($this->openAPINullablesSetToNull, 'tel_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tel_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tel_no'] = $tel_no;

        return $this;
    }

    /**
     * Gets tel_type
     *
     * @return \OpenAPI\Client\Model\DK118TelephoneTypeEnum|null
     */
    public function getTelType()
    {
        return $this->container['tel_type'];
    }

    /**
     * Sets tel_type
     *
     * @param \OpenAPI\Client\Model\DK118TelephoneTypeEnum|null $tel_type tel_type
     *
     * @return self
     */
    public function setTelType($tel_type)
    {
        if (is_null($tel_type)) {
            throw new \InvalidArgumentException('non-nullable tel_type cannot be null');
        }
        $this->container['tel_type'] = $tel_type;

        return $this;
    }

    /**
     * Gets telephonesubscriberprotection_
     *
     * @return mixed|null
     */
    public function getTelephonesubscriberprotection()
    {
        return $this->container['telephonesubscriberprotection_'];
    }

    /**
     * Sets telephonesubscriberprotection_
     *
     * @param mixed|null $telephonesubscriberprotection_ telephonesubscriberprotection_
     *
     * @return self
     */
    public function setTelephonesubscriberprotection($telephonesubscriberprotection_)
    {
        if (is_null($telephonesubscriberprotection_)) {
            array_push($this->openAPINullablesSetToNull, 'telephonesubscriberprotection_');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('telephonesubscriberprotection_', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['telephonesubscriberprotection_'] = $telephonesubscriberprotection_;

        return $this;
    }

    /**
     * Gets select_disp
     *
     * @return mixed|null
     */
    public function getSelectDisp()
    {
        return $this->container['select_disp'];
    }

    /**
     * Sets select_disp
     *
     * @param mixed|null $select_disp select_disp
     *
     * @return self
     */
    public function setSelectDisp($select_disp)
    {
        if (is_null($select_disp)) {
            array_push($this->openAPINullablesSetToNull, 'select_disp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('select_disp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['select_disp'] = $select_disp;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return \OpenAPI\Client\Model\DK118SecretEnum
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param \OpenAPI\Client\Model\DK118SecretEnum $secret secret
     *
     * @return self
     */
    public function setSecret($secret)
    {
        if (is_null($secret)) {
            throw new \InvalidArgumentException('non-nullable secret cannot be null');
        }
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets indent
     *
     * @return mixed|null
     */
    public function getIndent()
    {
        return $this->container['indent'];
    }

    /**
     * Sets indent
     *
     * @param mixed|null $indent indent
     *
     * @return self
     */
    public function setIndent($indent)
    {
        if (is_null($indent)) {
            array_push($this->openAPINullablesSetToNull, 'indent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('indent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['indent'] = $indent;

        return $this;
    }

    /**
     * Gets ex_op
     *
     * @return \OpenAPI\Client\Model\DK118OperatorAuthorizationEnum|null
     */
    public function getExOp()
    {
        return $this->container['ex_op'];
    }

    /**
     * Sets ex_op
     *
     * @param \OpenAPI\Client\Model\DK118OperatorAuthorizationEnum|null $ex_op ex_op
     *
     * @return self
     */
    public function setExOp($ex_op)
    {
        if (is_null($ex_op)) {
            throw new \InvalidArgumentException('non-nullable ex_op cannot be null');
        }
        $this->container['ex_op'] = $ex_op;

        return $this;
    }

    /**
     * Gets vendor_valid
     *
     * @return mixed|null
     */
    public function getVendorValid()
    {
        return $this->container['vendor_valid'];
    }

    /**
     * Sets vendor_valid
     *
     * @param mixed|null $vendor_valid vendor_valid
     *
     * @return self
     */
    public function setVendorValid($vendor_valid)
    {
        if (is_null($vendor_valid)) {
            array_push($this->openAPINullablesSetToNull, 'vendor_valid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendor_valid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendor_valid'] = $vendor_valid;

        return $this;
    }

    /**
     * Gets ranking
     *
     * @return mixed
     */
    public function getRanking()
    {
        return $this->container['ranking'];
    }

    /**
     * Sets ranking
     *
     * @param mixed $ranking ranking
     *
     * @return self
     */
    public function setRanking($ranking)
    {
        if (is_null($ranking)) {
            array_push($this->openAPINullablesSetToNull, 'ranking');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ranking', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ranking'] = $ranking;

        return $this;
    }

    /**
     * Gets street
     *
     * @return mixed|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param mixed|null $street street
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            array_push($this->openAPINullablesSetToNull, 'street');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets house_no
     *
     * @return mixed|null
     */
    public function getHouseNo()
    {
        return $this->container['house_no'];
    }

    /**
     * Sets house_no
     *
     * @param mixed|null $house_no house_no
     *
     * @return self
     */
    public function setHouseNo($house_no)
    {
        if (is_null($house_no)) {
            array_push($this->openAPINullablesSetToNull, 'house_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('house_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['house_no'] = $house_no;

        return $this;
    }

    /**
     * Gets floor
     *
     * @return mixed|null
     */
    public function getFloor()
    {
        return $this->container['floor'];
    }

    /**
     * Sets floor
     *
     * @param mixed|null $floor floor
     *
     * @return self
     */
    public function setFloor($floor)
    {
        if (is_null($floor)) {
            array_push($this->openAPINullablesSetToNull, 'floor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('floor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['floor'] = $floor;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return mixed|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param mixed|null $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets po_name
     *
     * @return mixed|null
     */
    public function getPoName()
    {
        return $this->container['po_name'];
    }

    /**
     * Sets po_name
     *
     * @param mixed|null $po_name po_name
     *
     * @return self
     */
    public function setPoName($po_name)
    {
        if (is_null($po_name)) {
            array_push($this->openAPINullablesSetToNull, 'po_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['po_name'] = $po_name;

        return $this;
    }

    /**
     * Gets town
     *
     * @return mixed|null
     */
    public function getTown()
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param mixed|null $town town
     *
     * @return self
     */
    public function setTown($town)
    {
        if (is_null($town)) {
            array_push($this->openAPINullablesSetToNull, 'town');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('town', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets coy
     *
     * @return mixed|null
     */
    public function getCoy()
    {
        return $this->container['coy'];
    }

    /**
     * Sets coy
     *
     * @param mixed|null $coy coy
     *
     * @return self
     */
    public function setCoy($coy)
    {
        if (is_null($coy)) {
            array_push($this->openAPINullablesSetToNull, 'coy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('coy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['coy'] = $coy;

        return $this;
    }

    /**
     * Gets cox
     *
     * @return mixed|null
     */
    public function getCox()
    {
        return $this->container['cox'];
    }

    /**
     * Sets cox
     *
     * @param mixed|null $cox cox
     *
     * @return self
     */
    public function setCox($cox)
    {
        if (is_null($cox)) {
            array_push($this->openAPINullablesSetToNull, 'cox');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cox', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cox'] = $cox;

        return $this;
    }

    /**
     * Gets movementdate
     *
     * @return mixed|null
     */
    public function getMovementdate()
    {
        return $this->container['movementdate'];
    }

    /**
     * Sets movementdate
     *
     * @param mixed|null $movementdate movementdate
     *
     * @return self
     */
    public function setMovementdate($movementdate)
    {
        if (is_null($movementdate)) {
            array_push($this->openAPINullablesSetToNull, 'movementdate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('movementdate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['movementdate'] = $movementdate;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return mixed
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param mixed $update_date update_date
     *
     * @return self
     */
    public function setUpdateDate($update_date)
    {
        if (is_null($update_date)) {
            array_push($this->openAPINullablesSetToNull, 'update_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('update_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return mixed
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param mixed $valid_from valid_from
     *
     * @return self
     */
    public function setValidFrom($valid_from)
    {
        if (is_null($valid_from)) {
            array_push($this->openAPINullablesSetToNull, 'valid_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valid_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valid_from'] = $valid_from;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


