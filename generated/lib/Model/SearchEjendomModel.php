<?php
/**
 * SearchEjendomModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SearchEjendomModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SearchEjendomModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SearchEjendomModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'adresse' => 'mixed',
        'vedroerende' => 'mixed',
        'ejendomsvurdering' => 'mixed',
        'grundvaerdi' => 'mixed',
        'vurdering_dato' => 'mixed',
        'ejendomsnummer' => 'mixed',
        'kommunekode' => 'mixed',
        'uma_nummer' => 'mixed',
        'beskrivelse' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'adresse' => null,
        'vedroerende' => null,
        'ejendomsvurdering' => null,
        'grundvaerdi' => null,
        'vurdering_dato' => 'date',
        'ejendomsnummer' => null,
        'kommunekode' => null,
        'uma_nummer' => null,
        'beskrivelse' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'adresse' => true,
		'vedroerende' => true,
		'ejendomsvurdering' => true,
		'grundvaerdi' => true,
		'vurdering_dato' => true,
		'ejendomsnummer' => true,
		'kommunekode' => true,
		'uma_nummer' => true,
		'beskrivelse' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'adresse' => 'Adresse',
        'vedroerende' => 'Vedroerende',
        'ejendomsvurdering' => 'Ejendomsvurdering',
        'grundvaerdi' => 'Grundvaerdi',
        'vurdering_dato' => 'VurderingDato',
        'ejendomsnummer' => 'Ejendomsnummer',
        'kommunekode' => 'Kommunekode',
        'uma_nummer' => 'UmaNummer',
        'beskrivelse' => 'Beskrivelse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'adresse' => 'setAdresse',
        'vedroerende' => 'setVedroerende',
        'ejendomsvurdering' => 'setEjendomsvurdering',
        'grundvaerdi' => 'setGrundvaerdi',
        'vurdering_dato' => 'setVurderingDato',
        'ejendomsnummer' => 'setEjendomsnummer',
        'kommunekode' => 'setKommunekode',
        'uma_nummer' => 'setUmaNummer',
        'beskrivelse' => 'setBeskrivelse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'adresse' => 'getAdresse',
        'vedroerende' => 'getVedroerende',
        'ejendomsvurdering' => 'getEjendomsvurdering',
        'grundvaerdi' => 'getGrundvaerdi',
        'vurdering_dato' => 'getVurderingDato',
        'ejendomsnummer' => 'getEjendomsnummer',
        'kommunekode' => 'getKommunekode',
        'uma_nummer' => 'getUmaNummer',
        'beskrivelse' => 'getBeskrivelse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('adresse', $data ?? [], null);
        $this->setIfExists('vedroerende', $data ?? [], null);
        $this->setIfExists('ejendomsvurdering', $data ?? [], null);
        $this->setIfExists('grundvaerdi', $data ?? [], null);
        $this->setIfExists('vurdering_dato', $data ?? [], null);
        $this->setIfExists('ejendomsnummer', $data ?? [], null);
        $this->setIfExists('kommunekode', $data ?? [], null);
        $this->setIfExists('uma_nummer', $data ?? [], null);
        $this->setIfExists('beskrivelse', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['vedroerende'] === null) {
            $invalidProperties[] = "'vedroerende' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id Unik identifikator.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets adresse
     *
     * @return mixed|null
     */
    public function getAdresse()
    {
        return $this->container['adresse'];
    }

    /**
     * Sets adresse
     *
     * @param mixed|null $adresse Ejendommens adresse.
     *
     * @return self
     */
    public function setAdresse($adresse)
    {
        if (is_null($adresse)) {
            array_push($this->openAPINullablesSetToNull, 'adresse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('adresse', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['adresse'] = $adresse;

        return $this;
    }

    /**
     * Gets vedroerende
     *
     * @return mixed
     */
    public function getVedroerende()
    {
        return $this->container['vedroerende'];
    }

    /**
     * Sets vedroerende
     *
     * @param mixed $vedroerende vedroerende
     *
     * @return self
     */
    public function setVedroerende($vedroerende)
    {
        if (is_null($vedroerende)) {
            array_push($this->openAPINullablesSetToNull, 'vedroerende');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vedroerende', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vedroerende'] = $vedroerende;

        return $this;
    }

    /**
     * Gets ejendomsvurdering
     *
     * @return mixed|null
     */
    public function getEjendomsvurdering()
    {
        return $this->container['ejendomsvurdering'];
    }

    /**
     * Sets ejendomsvurdering
     *
     * @param mixed|null $ejendomsvurdering Offentlig ejendomsvurdering i hele kroner.
     *
     * @return self
     */
    public function setEjendomsvurdering($ejendomsvurdering)
    {
        if (is_null($ejendomsvurdering)) {
            array_push($this->openAPINullablesSetToNull, 'ejendomsvurdering');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ejendomsvurdering', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ejendomsvurdering'] = $ejendomsvurdering;

        return $this;
    }

    /**
     * Gets grundvaerdi
     *
     * @return mixed|null
     */
    public function getGrundvaerdi()
    {
        return $this->container['grundvaerdi'];
    }

    /**
     * Sets grundvaerdi
     *
     * @param mixed|null $grundvaerdi Den beregnede grundvÃ¦rdi fra hele kroner. GrundvÃ¦rdien er en del af den samlede ejendomsvÃ¦rdi.
     *
     * @return self
     */
    public function setGrundvaerdi($grundvaerdi)
    {
        if (is_null($grundvaerdi)) {
            array_push($this->openAPINullablesSetToNull, 'grundvaerdi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grundvaerdi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grundvaerdi'] = $grundvaerdi;

        return $this;
    }

    /**
     * Gets vurdering_dato
     *
     * @return mixed|null
     */
    public function getVurderingDato()
    {
        return $this->container['vurdering_dato'];
    }

    /**
     * Sets vurdering_dato
     *
     * @param mixed|null $vurdering_dato Dato for seneste ejendomsvurdering eller regulering af ejendomsvÃ¦rdien.
     *
     * @return self
     */
    public function setVurderingDato($vurdering_dato)
    {
        if (is_null($vurdering_dato)) {
            array_push($this->openAPINullablesSetToNull, 'vurdering_dato');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vurdering_dato', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vurdering_dato'] = $vurdering_dato;

        return $this;
    }

    /**
     * Gets ejendomsnummer
     *
     * @return mixed|null
     */
    public function getEjendomsnummer()
    {
        return $this->container['ejendomsnummer'];
    }

    /**
     * Sets ejendomsnummer
     *
     * @param mixed|null $ejendomsnummer The real property identifier is composed of 5 digits and a control number. The real property identifier is unique within the single municipality. The real property identifier identifies the single property within the municipality. When the real property identifier is complemented with the municipality code, it uniquely identifies the single property nationally.
     *
     * @return self
     */
    public function setEjendomsnummer($ejendomsnummer)
    {
        if (is_null($ejendomsnummer)) {
            array_push($this->openAPINullablesSetToNull, 'ejendomsnummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ejendomsnummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ejendomsnummer'] = $ejendomsnummer;

        return $this;
    }

    /**
     * Gets kommunekode
     *
     * @return mixed|null
     */
    public function getKommunekode()
    {
        return $this->container['kommunekode'];
    }

    /**
     * Sets kommunekode
     *
     * @param mixed|null $kommunekode The code of a municipality. The plain text of a municipality is to be found by reference to the authority-data in the civilregistrationsystem. The code will always be unique.
     *
     * @return self
     */
    public function setKommunekode($kommunekode)
    {
        if (is_null($kommunekode)) {
            array_push($this->openAPINullablesSetToNull, 'kommunekode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('kommunekode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['kommunekode'] = $kommunekode;

        return $this;
    }

    /**
     * Gets uma_nummer
     *
     * @return mixed|null
     */
    public function getUmaNummer()
    {
        return $this->container['uma_nummer'];
    }

    /**
     * Sets uma_nummer
     *
     * @param mixed|null $uma_nummer uma_nummer
     *
     * @return self
     */
    public function setUmaNummer($uma_nummer)
    {
        if (is_null($uma_nummer)) {
            array_push($this->openAPINullablesSetToNull, 'uma_nummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uma_nummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uma_nummer'] = $uma_nummer;

        return $this;
    }

    /**
     * Gets beskrivelse
     *
     * @return mixed|null
     */
    public function getBeskrivelse()
    {
        return $this->container['beskrivelse'];
    }

    /**
     * Sets beskrivelse
     *
     * @param mixed|null $beskrivelse Beskrivelse.
     *
     * @return self
     */
    public function setBeskrivelse($beskrivelse)
    {
        if (is_null($beskrivelse)) {
            array_push($this->openAPINullablesSetToNull, 'beskrivelse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('beskrivelse', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['beskrivelse'] = $beskrivelse;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


