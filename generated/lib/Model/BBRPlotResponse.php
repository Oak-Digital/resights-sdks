<?php
/**
 * BBRPlotResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API üëã</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BBRPlotResponse Class Doc Comment
 *
 * @category Class
 * @description Definition: Ved en Grund forst√•s enten arealer, som i Matriklen er opf√∏rt som √©t Jordstykke, eller fysisk sammenh√¶ngende arealer, som i Matriklen er opf√∏rt som flere Jordstykker, n√•r de if√∏lge noteringen i Matriklen skal holdes forenede som en Samlet fast ejendom og ligger i samme kommune.  Beskrivelse: P√• grundniveau i BBR findes de oplysninger, der er f√¶lles for alle Bygninger og Enheder inden for den p√•g√¶ldende ejendom (eksempelvis kloakforhold og vandforsyning)  Bem√¶rkning: Fysisk sammenh√¶ngende Jordstykker for en Samlet Fast Ejendom, som tilh√∏rer forskellige ejerlav, udg√∏r ligeledes √©n Grund.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BBRPlotResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BBRPlotResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'namespace' => 'mixed',
        'status' => 'mixed',
        'business_process' => 'mixed',
        'business_area' => 'mixed',
        'business_event' => 'mixed',
        'registration_from' => 'mixed',
        'registration_to' => 'mixed',
        'registration_actor' => 'mixed',
        'effect_from' => 'mixed',
        'effect_to' => 'mixed',
        'effect_actor' => 'mixed',
        'municipality_code' => 'mixed',
        'gru009_water_supply' => 'mixed',
        'gru010_drainage' => 'mixed',
        'gru021_discharge_permit' => 'mixed',
        'gru022_wastewater_supply_membership' => 'mixed',
        'gru023_wastewater_drainage_order' => 'mixed',
        'gru024_wastewater_drainage_deadline' => 'mixed',
        'gru025_permission_to_exit' => 'mixed',
        'gru026_permission_to_exit_date' => 'mixed',
        'gru027_permission_to_alternative_disposal_diversion' => 'mixed',
        'gru028_permission_to_alternative_disposal_diversion_date' => 'mixed',
        'gru029_exemption_collective_heating_supply' => 'mixed',
        'gru030_exemption_collective_heating_supply_date' => 'mixed',
        'gru500_note' => 'mixed',
        'access_address' => '\OpenAPI\Client\Model\DARAccessAddress',
        'property_relation_id' => 'mixed',
        'land_ids' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'namespace' => null,
        'status' => null,
        'business_process' => null,
        'business_area' => null,
        'business_event' => null,
        'registration_from' => 'date-time',
        'registration_to' => 'date-time',
        'registration_actor' => null,
        'effect_from' => 'date-time',
        'effect_to' => 'date-time',
        'effect_actor' => null,
        'municipality_code' => null,
        'gru009_water_supply' => null,
        'gru010_drainage' => null,
        'gru021_discharge_permit' => null,
        'gru022_wastewater_supply_membership' => null,
        'gru023_wastewater_drainage_order' => null,
        'gru024_wastewater_drainage_deadline' => 'date-time',
        'gru025_permission_to_exit' => null,
        'gru026_permission_to_exit_date' => 'date-time',
        'gru027_permission_to_alternative_disposal_diversion' => null,
        'gru028_permission_to_alternative_disposal_diversion_date' => 'date-time',
        'gru029_exemption_collective_heating_supply' => null,
        'gru030_exemption_collective_heating_supply_date' => 'date-time',
        'gru500_note' => null,
        'access_address' => null,
        'property_relation_id' => 'uuid',
        'land_ids' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'namespace' => true,
		'status' => true,
		'business_process' => true,
		'business_area' => true,
		'business_event' => true,
		'registration_from' => true,
		'registration_to' => true,
		'registration_actor' => true,
		'effect_from' => true,
		'effect_to' => true,
		'effect_actor' => true,
		'municipality_code' => true,
		'gru009_water_supply' => true,
		'gru010_drainage' => true,
		'gru021_discharge_permit' => true,
		'gru022_wastewater_supply_membership' => true,
		'gru023_wastewater_drainage_order' => true,
		'gru024_wastewater_drainage_deadline' => true,
		'gru025_permission_to_exit' => true,
		'gru026_permission_to_exit_date' => true,
		'gru027_permission_to_alternative_disposal_diversion' => true,
		'gru028_permission_to_alternative_disposal_diversion_date' => true,
		'gru029_exemption_collective_heating_supply' => true,
		'gru030_exemption_collective_heating_supply_date' => true,
		'gru500_note' => true,
		'access_address' => false,
		'property_relation_id' => true,
		'land_ids' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'namespace' => 'namespace',
        'status' => 'status',
        'business_process' => 'business_process',
        'business_area' => 'business_area',
        'business_event' => 'business_event',
        'registration_from' => 'registration_from',
        'registration_to' => 'registration_to',
        'registration_actor' => 'registration_actor',
        'effect_from' => 'effect_from',
        'effect_to' => 'effect_to',
        'effect_actor' => 'effect_actor',
        'municipality_code' => 'municipality_code',
        'gru009_water_supply' => 'gru009_water_supply',
        'gru010_drainage' => 'gru010_drainage',
        'gru021_discharge_permit' => 'gru021_discharge_permit',
        'gru022_wastewater_supply_membership' => 'gru022_wastewater_supply_membership',
        'gru023_wastewater_drainage_order' => 'gru023_wastewater_drainage_order',
        'gru024_wastewater_drainage_deadline' => 'gru024_wastewater_drainage_deadline',
        'gru025_permission_to_exit' => 'gru025_permission_to_exit',
        'gru026_permission_to_exit_date' => 'gru026_permission_to_exit_date',
        'gru027_permission_to_alternative_disposal_diversion' => 'gru027_permission_to_alternative_disposal_diversion',
        'gru028_permission_to_alternative_disposal_diversion_date' => 'gru028_permission_to_alternative_disposal_diversion_date',
        'gru029_exemption_collective_heating_supply' => 'gru029_exemption_collective_heating_supply',
        'gru030_exemption_collective_heating_supply_date' => 'gru030_exemption_collective_heating_supply_date',
        'gru500_note' => 'gru500_note',
        'access_address' => 'access_address',
        'property_relation_id' => 'property_relation_id',
        'land_ids' => 'land_ids'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'namespace' => 'setNamespace',
        'status' => 'setStatus',
        'business_process' => 'setBusinessProcess',
        'business_area' => 'setBusinessArea',
        'business_event' => 'setBusinessEvent',
        'registration_from' => 'setRegistrationFrom',
        'registration_to' => 'setRegistrationTo',
        'registration_actor' => 'setRegistrationActor',
        'effect_from' => 'setEffectFrom',
        'effect_to' => 'setEffectTo',
        'effect_actor' => 'setEffectActor',
        'municipality_code' => 'setMunicipalityCode',
        'gru009_water_supply' => 'setGru009WaterSupply',
        'gru010_drainage' => 'setGru010Drainage',
        'gru021_discharge_permit' => 'setGru021DischargePermit',
        'gru022_wastewater_supply_membership' => 'setGru022WastewaterSupplyMembership',
        'gru023_wastewater_drainage_order' => 'setGru023WastewaterDrainageOrder',
        'gru024_wastewater_drainage_deadline' => 'setGru024WastewaterDrainageDeadline',
        'gru025_permission_to_exit' => 'setGru025PermissionToExit',
        'gru026_permission_to_exit_date' => 'setGru026PermissionToExitDate',
        'gru027_permission_to_alternative_disposal_diversion' => 'setGru027PermissionToAlternativeDisposalDiversion',
        'gru028_permission_to_alternative_disposal_diversion_date' => 'setGru028PermissionToAlternativeDisposalDiversionDate',
        'gru029_exemption_collective_heating_supply' => 'setGru029ExemptionCollectiveHeatingSupply',
        'gru030_exemption_collective_heating_supply_date' => 'setGru030ExemptionCollectiveHeatingSupplyDate',
        'gru500_note' => 'setGru500Note',
        'access_address' => 'setAccessAddress',
        'property_relation_id' => 'setPropertyRelationId',
        'land_ids' => 'setLandIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'namespace' => 'getNamespace',
        'status' => 'getStatus',
        'business_process' => 'getBusinessProcess',
        'business_area' => 'getBusinessArea',
        'business_event' => 'getBusinessEvent',
        'registration_from' => 'getRegistrationFrom',
        'registration_to' => 'getRegistrationTo',
        'registration_actor' => 'getRegistrationActor',
        'effect_from' => 'getEffectFrom',
        'effect_to' => 'getEffectTo',
        'effect_actor' => 'getEffectActor',
        'municipality_code' => 'getMunicipalityCode',
        'gru009_water_supply' => 'getGru009WaterSupply',
        'gru010_drainage' => 'getGru010Drainage',
        'gru021_discharge_permit' => 'getGru021DischargePermit',
        'gru022_wastewater_supply_membership' => 'getGru022WastewaterSupplyMembership',
        'gru023_wastewater_drainage_order' => 'getGru023WastewaterDrainageOrder',
        'gru024_wastewater_drainage_deadline' => 'getGru024WastewaterDrainageDeadline',
        'gru025_permission_to_exit' => 'getGru025PermissionToExit',
        'gru026_permission_to_exit_date' => 'getGru026PermissionToExitDate',
        'gru027_permission_to_alternative_disposal_diversion' => 'getGru027PermissionToAlternativeDisposalDiversion',
        'gru028_permission_to_alternative_disposal_diversion_date' => 'getGru028PermissionToAlternativeDisposalDiversionDate',
        'gru029_exemption_collective_heating_supply' => 'getGru029ExemptionCollectiveHeatingSupply',
        'gru030_exemption_collective_heating_supply_date' => 'getGru030ExemptionCollectiveHeatingSupplyDate',
        'gru500_note' => 'getGru500Note',
        'access_address' => 'getAccessAddress',
        'property_relation_id' => 'getPropertyRelationId',
        'land_ids' => 'getLandIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('namespace', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('business_process', $data ?? [], null);
        $this->setIfExists('business_area', $data ?? [], null);
        $this->setIfExists('business_event', $data ?? [], null);
        $this->setIfExists('registration_from', $data ?? [], null);
        $this->setIfExists('registration_to', $data ?? [], null);
        $this->setIfExists('registration_actor', $data ?? [], null);
        $this->setIfExists('effect_from', $data ?? [], null);
        $this->setIfExists('effect_to', $data ?? [], null);
        $this->setIfExists('effect_actor', $data ?? [], null);
        $this->setIfExists('municipality_code', $data ?? [], null);
        $this->setIfExists('gru009_water_supply', $data ?? [], null);
        $this->setIfExists('gru010_drainage', $data ?? [], null);
        $this->setIfExists('gru021_discharge_permit', $data ?? [], null);
        $this->setIfExists('gru022_wastewater_supply_membership', $data ?? [], null);
        $this->setIfExists('gru023_wastewater_drainage_order', $data ?? [], null);
        $this->setIfExists('gru024_wastewater_drainage_deadline', $data ?? [], null);
        $this->setIfExists('gru025_permission_to_exit', $data ?? [], null);
        $this->setIfExists('gru026_permission_to_exit_date', $data ?? [], null);
        $this->setIfExists('gru027_permission_to_alternative_disposal_diversion', $data ?? [], null);
        $this->setIfExists('gru028_permission_to_alternative_disposal_diversion_date', $data ?? [], null);
        $this->setIfExists('gru029_exemption_collective_heating_supply', $data ?? [], null);
        $this->setIfExists('gru030_exemption_collective_heating_supply_date', $data ?? [], null);
        $this->setIfExists('gru500_note', $data ?? [], null);
        $this->setIfExists('access_address', $data ?? [], null);
        $this->setIfExists('property_relation_id', $data ?? [], null);
        $this->setIfExists('land_ids', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['namespace'] === null) {
            $invalidProperties[] = "'namespace' can't be null";
        }
        if ($this->container['registration_from'] === null) {
            $invalidProperties[] = "'registration_from' can't be null";
        }
        if ($this->container['registration_actor'] === null) {
            $invalidProperties[] = "'registration_actor' can't be null";
        }
        if ($this->container['effect_from'] === null) {
            $invalidProperties[] = "'effect_from' can't be null";
        }
        if ($this->container['effect_actor'] === null) {
            $invalidProperties[] = "'effect_actor' can't be null";
        }
        if ($this->container['property_relation_id'] === null) {
            $invalidProperties[] = "'property_relation_id' can't be null";
        }
        if ($this->container['land_ids'] === null) {
            $invalidProperties[] = "'land_ids' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id Persistent unik n√∏gle.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return mixed
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param mixed $namespace namespace
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        if (is_null($namespace)) {
            array_push($this->openAPINullablesSetToNull, 'namespace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('namespace', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets status
     *
     * @return mixed|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param mixed|null $status Angivelse af hvor et forvaltningsobjekt er i sin livscyklus.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets business_process
     *
     * @return mixed|null
     */
    public function getBusinessProcess()
    {
        return $this->container['business_process'];
    }

    /**
     * Sets business_process
     *
     * @param mixed|null $business_process Den manuelle eller IT-underst√∏ttede proces hvori forretningsomr√•det h√•ndterer h√¶ndelsen.
     *
     * @return self
     */
    public function setBusinessProcess($business_process)
    {
        if (is_null($business_process)) {
            array_push($this->openAPINullablesSetToNull, 'business_process');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_process', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_process'] = $business_process;

        return $this;
    }

    /**
     * Gets business_area
     *
     * @return mixed|null
     */
    public function getBusinessArea()
    {
        return $this->container['business_area'];
    }

    /**
     * Sets business_area
     *
     * @param mixed|null $business_area Den del af den offentlige forretning der h√•ndterer h√¶ndelsen og derved udvirker √¶ndringen i data.
     *
     * @return self
     */
    public function setBusinessArea($business_area)
    {
        if (is_null($business_area)) {
            array_push($this->openAPINullablesSetToNull, 'business_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_area'] = $business_area;

        return $this;
    }

    /**
     * Gets business_event
     *
     * @return mixed|null
     */
    public function getBusinessEvent()
    {
        return $this->container['business_event'];
    }

    /**
     * Sets business_event
     *
     * @param mixed|null $business_event Den begivenhed i virkeligheden som udl√∏ste √¶ndringen i data.
     *
     * @return self
     */
    public function setBusinessEvent($business_event)
    {
        if (is_null($business_event)) {
            array_push($this->openAPINullablesSetToNull, 'business_event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_event'] = $business_event;

        return $this;
    }

    /**
     * Gets registration_from
     *
     * @return mixed
     */
    public function getRegistrationFrom()
    {
        return $this->container['registration_from'];
    }

    /**
     * Sets registration_from
     *
     * @param mixed $registration_from Tidspunktet hvor registreringen er foretaget.
     *
     * @return self
     */
    public function setRegistrationFrom($registration_from)
    {
        if (is_null($registration_from)) {
            array_push($this->openAPINullablesSetToNull, 'registration_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_from'] = $registration_from;

        return $this;
    }

    /**
     * Gets registration_to
     *
     * @return mixed|null
     */
    public function getRegistrationTo()
    {
        return $this->container['registration_to'];
    }

    /**
     * Sets registration_to
     *
     * @param mixed|null $registration_to Tidspunktet hvor en ny registrering er foretaget p√• objektet, og hvor denne version s√•ledes ikke l√¶ngere er den seneste.
     *
     * @return self
     */
    public function setRegistrationTo($registration_to)
    {
        if (is_null($registration_to)) {
            array_push($this->openAPINullablesSetToNull, 'registration_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_to'] = $registration_to;

        return $this;
    }

    /**
     * Gets registration_actor
     *
     * @return mixed
     */
    public function getRegistrationActor()
    {
        return $this->container['registration_actor'];
    }

    /**
     * Sets registration_actor
     *
     * @param mixed $registration_actor Den akt√∏r der har foretaget registreringen.
     *
     * @return self
     */
    public function setRegistrationActor($registration_actor)
    {
        if (is_null($registration_actor)) {
            array_push($this->openAPINullablesSetToNull, 'registration_actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_actor'] = $registration_actor;

        return $this;
    }

    /**
     * Gets effect_from
     *
     * @return mixed
     */
    public function getEffectFrom()
    {
        return $this->container['effect_from'];
    }

    /**
     * Sets effect_from
     *
     * @param mixed $effect_from Tidspunktet hvorfra objektet har virkning.
     *
     * @return self
     */
    public function setEffectFrom($effect_from)
    {
        if (is_null($effect_from)) {
            array_push($this->openAPINullablesSetToNull, 'effect_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_from'] = $effect_from;

        return $this;
    }

    /**
     * Gets effect_to
     *
     * @return mixed|null
     */
    public function getEffectTo()
    {
        return $this->container['effect_to'];
    }

    /**
     * Sets effect_to
     *
     * @param mixed|null $effect_to Tidspunktet hvor objektets virkning oph√∏rer.
     *
     * @return self
     */
    public function setEffectTo($effect_to)
    {
        if (is_null($effect_to)) {
            array_push($this->openAPINullablesSetToNull, 'effect_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_to'] = $effect_to;

        return $this;
    }

    /**
     * Gets effect_actor
     *
     * @return mixed
     */
    public function getEffectActor()
    {
        return $this->container['effect_actor'];
    }

    /**
     * Sets effect_actor
     *
     * @param mixed $effect_actor Den akt√∏r der har afstedkommet objektets virkning.
     *
     * @return self
     */
    public function setEffectActor($effect_actor)
    {
        if (is_null($effect_actor)) {
            array_push($this->openAPINullablesSetToNull, 'effect_actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_actor'] = $effect_actor;

        return $this;
    }

    /**
     * Gets municipality_code
     *
     * @return mixed|null
     */
    public function getMunicipalityCode()
    {
        return $this->container['municipality_code'];
    }

    /**
     * Sets municipality_code
     *
     * @param mixed|null $municipality_code municipality_code
     *
     * @return self
     */
    public function setMunicipalityCode($municipality_code)
    {
        if (is_null($municipality_code)) {
            array_push($this->openAPINullablesSetToNull, 'municipality_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('municipality_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['municipality_code'] = $municipality_code;

        return $this;
    }

    /**
     * Gets gru009_water_supply
     *
     * @return mixed|null
     */
    public function getGru009WaterSupply()
    {
        return $this->container['gru009_water_supply'];
    }

    /**
     * Sets gru009_water_supply
     *
     * @param mixed|null $gru009_water_supply Forhold omkring vandforsyning for grunden.
     *
     * @return self
     */
    public function setGru009WaterSupply($gru009_water_supply)
    {
        if (is_null($gru009_water_supply)) {
            array_push($this->openAPINullablesSetToNull, 'gru009_water_supply');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gru009_water_supply', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gru009_water_supply'] = $gru009_water_supply;

        return $this;
    }

    /**
     * Gets gru010_drainage
     *
     * @return mixed|null
     */
    public function getGru010Drainage()
    {
        return $this->container['gru010_drainage'];
    }

    /**
     * Sets gru010_drainage
     *
     * @param mixed|null $gru010_drainage Forhold omkring afl√∏b for grunden.
     *
     * @return self
     */
    public function setGru010Drainage($gru010_drainage)
    {
        if (is_null($gru010_drainage)) {
            array_push($this->openAPINullablesSetToNull, 'gru010_drainage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gru010_drainage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gru010_drainage'] = $gru010_drainage;

        return $this;
    }

    /**
     * Gets gru021_discharge_permit
     *
     * @return mixed|null
     */
    public function getGru021DischargePermit()
    {
        return $this->container['gru021_discharge_permit'];
    }

    /**
     * Sets gru021_discharge_permit
     *
     * @param mixed|null $gru021_discharge_permit Udledningstilladelse for grund. For grunde udenfor kloakopland jf. spildevandsplanen (afl√∏bskoder 101 - 601) angives status for deres udledningstilladelse.
     *
     * @return self
     */
    public function setGru021DischargePermit($gru021_discharge_permit)
    {
        if (is_null($gru021_discharge_permit)) {
            array_push($this->openAPINullablesSetToNull, 'gru021_discharge_permit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gru021_discharge_permit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gru021_discharge_permit'] = $gru021_discharge_permit;

        return $this;
    }

    /**
     * Gets gru022_wastewater_supply_membership
     *
     * @return mixed|null
     */
    public function getGru022WastewaterSupplyMembership()
    {
        return $this->container['gru022_wastewater_supply_membership'];
    }

    /**
     * Sets gru022_wastewater_supply_membership
     *
     * @param mixed|null $gru022_wastewater_supply_membership For grunde udenfor kloakopland jf. spildevandsplanen (afl√∏bskoder 101-601) angives om der indg√•et kontraktligt medlemskab med et spildevandsforsyningsselskab.
     *
     * @return self
     */
    public function setGru022WastewaterSupplyMembership($gru022_wastewater_supply_membership)
    {
        if (is_null($gru022_wastewater_supply_membership)) {
            array_push($this->openAPINullablesSetToNull, 'gru022_wastewater_supply_membership');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gru022_wastewater_supply_membership', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gru022_wastewater_supply_membership'] = $gru022_wastewater_supply_membership;

        return $this;
    }

    /**
     * Gets gru023_wastewater_drainage_order
     *
     * @return mixed|null
     */
    public function getGru023WastewaterDrainageOrder()
    {
        return $this->container['gru023_wastewater_drainage_order'];
    }

    /**
     * Sets gru023_wastewater_drainage_order
     *
     * @param mixed|null $gru023_wastewater_drainage_order Her angives p√•bud vedr. spildevandsafledning.  For grunde/bygninger udenfor kloakopland jf. spildevandsplanen (afl√∏bskoder 101-601) angives om kommunen har givet p√•bud om at etablere forbedret rensning, s√• regionplanens og vandplanens renseklasser overholdes eller om kommunen har givet p√•bud om tilslutning til spildevandsforsyningsselskab (koderne 0-6).  For grunde/bygninger indenfor kloakopland (afl√∏bskoder 1-9) angives om kommunen har givet p√•bud om, at grunden/bygningen skal tilsluttes separatkloakering (kode7).   For grunde/bygninger angives om kommunen har givet p√•bud p√•bud vedr. korrektion af fejltilslutninger (kode 8)  eller om kommunen har givet andre p√•bud iht. Milj√∏beskyttelseslovens  paragraf 30, stk. 1 (kode 9).  I de tilf√¶lde hvor der benyttes koderne 2-9 skal der √¶ndres til kode 1,  n√•r p√•buddet er opfyldt.
     *
     * @return self
     */
    public function setGru023WastewaterDrainageOrder($gru023_wastewater_drainage_order)
    {
        if (is_null($gru023_wastewater_drainage_order)) {
            array_push($this->openAPINullablesSetToNull, 'gru023_wastewater_drainage_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gru023_wastewater_drainage_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gru023_wastewater_drainage_order'] = $gru023_wastewater_drainage_order;

        return $this;
    }

    /**
     * Gets gru024_wastewater_drainage_deadline
     *
     * @return mixed|null
     */
    public function getGru024WastewaterDrainageDeadline()
    {
        return $this->container['gru024_wastewater_drainage_deadline'];
    }

    /**
     * Sets gru024_wastewater_drainage_deadline
     *
     * @param mixed|null $gru024_wastewater_drainage_deadline Dato for frist vedr. spildevandsafledning. For grunde/bygninger hvor der if√∏lge feltet ‚ÄùP√•bud vedr. spildevandsafledning‚Äù er givet et p√•bud, angives det hvorn√•r fristen opfyldelse af p√•buddet udl√∏ber.   Angives i formatet √•√•√•√•mmdd.
     *
     * @return self
     */
    public function setGru024WastewaterDrainageDeadline($gru024_wastewater_drainage_deadline)
    {
        if (is_null($gru024_wastewater_drainage_deadline)) {
            array_push($this->openAPINullablesSetToNull, 'gru024_wastewater_drainage_deadline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gru024_wastewater_drainage_deadline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gru024_wastewater_drainage_deadline'] = $gru024_wastewater_drainage_deadline;

        return $this;
    }

    /**
     * Gets gru025_permission_to_exit
     *
     * @return mixed|null
     */
    public function getGru025PermissionToExit()
    {
        return $this->container['gru025_permission_to_exit'];
    }

    /**
     * Sets gru025_permission_to_exit
     *
     * @param mixed|null $gru025_permission_to_exit For grunde indenfor kloakopland jf. spildevandsplanen (afl√∏bskoder 1-9) angives status for tilladelse til hel eller delvis udtr√¶den af \"det offentlige kloakf√¶llesskab\" (Spildevandsforsyning) jf. Spildevandsbekendtg√∏rrelsen ¬ß11, stk 1.
     *
     * @return self
     */
    public function setGru025PermissionToExit($gru025_permission_to_exit)
    {
        if (is_null($gru025_permission_to_exit)) {
            array_push($this->openAPINullablesSetToNull, 'gru025_permission_to_exit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gru025_permission_to_exit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gru025_permission_to_exit'] = $gru025_permission_to_exit;

        return $this;
    }

    /**
     * Gets gru026_permission_to_exit_date
     *
     * @return mixed|null
     */
    public function getGru026PermissionToExitDate()
    {
        return $this->container['gru026_permission_to_exit_date'];
    }

    /**
     * Sets gru026_permission_to_exit_date
     *
     * @param mixed|null $gru026_permission_to_exit_date For grunde, hvor der if√∏lge feltet ‚ÄùTilladelse til udtr√¶den‚Äù er meddelt tilladelse eller tilladelse er bortfaldet, skal det angives fra hvilken dato tilladelsen er g√¶ldende, hhv. fra hvilken dato tilladelsen er bortfaldet.  Angives i formatet √•√•√•√•mmdd.
     *
     * @return self
     */
    public function setGru026PermissionToExitDate($gru026_permission_to_exit_date)
    {
        if (is_null($gru026_permission_to_exit_date)) {
            array_push($this->openAPINullablesSetToNull, 'gru026_permission_to_exit_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gru026_permission_to_exit_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gru026_permission_to_exit_date'] = $gru026_permission_to_exit_date;

        return $this;
    }

    /**
     * Gets gru027_permission_to_alternative_disposal_diversion
     *
     * @return mixed|null
     */
    public function getGru027PermissionToAlternativeDisposalDiversion()
    {
        return $this->container['gru027_permission_to_alternative_disposal_diversion'];
    }

    /**
     * Sets gru027_permission_to_alternative_disposal_diversion
     *
     * @param mixed|null $gru027_permission_to_alternative_disposal_diversion For grunde indenfor kloakopland jf. spildevandsplanen (afl√∏bskoder 1-9) angives status for tilladelse til alternativ bortskaffelse eller afledning jf. Spildevandsbekendtg√∏relsens ¬ß 11, stk. 2.
     *
     * @return self
     */
    public function setGru027PermissionToAlternativeDisposalDiversion($gru027_permission_to_alternative_disposal_diversion)
    {
        if (is_null($gru027_permission_to_alternative_disposal_diversion)) {
            array_push($this->openAPINullablesSetToNull, 'gru027_permission_to_alternative_disposal_diversion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gru027_permission_to_alternative_disposal_diversion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gru027_permission_to_alternative_disposal_diversion'] = $gru027_permission_to_alternative_disposal_diversion;

        return $this;
    }

    /**
     * Gets gru028_permission_to_alternative_disposal_diversion_date
     *
     * @return mixed|null
     */
    public function getGru028PermissionToAlternativeDisposalDiversionDate()
    {
        return $this->container['gru028_permission_to_alternative_disposal_diversion_date'];
    }

    /**
     * Sets gru028_permission_to_alternative_disposal_diversion_date
     *
     * @param mixed|null $gru028_permission_to_alternative_disposal_diversion_date For grunde hvor der if√∏lge feltet ‚ÄùTilladelse til alt. bortskaffelse eller afledning‚Äù er meddelt tilladelse eller tilladelse er bortfaldet, skal det angives fra hvilken dato tilladelsen er g√¶ldende, hhv. fra hvilken dato tilladelsen er bortfaldet.   Angives i formatet √•√•√•√•mmdd.
     *
     * @return self
     */
    public function setGru028PermissionToAlternativeDisposalDiversionDate($gru028_permission_to_alternative_disposal_diversion_date)
    {
        if (is_null($gru028_permission_to_alternative_disposal_diversion_date)) {
            array_push($this->openAPINullablesSetToNull, 'gru028_permission_to_alternative_disposal_diversion_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gru028_permission_to_alternative_disposal_diversion_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gru028_permission_to_alternative_disposal_diversion_date'] = $gru028_permission_to_alternative_disposal_diversion_date;

        return $this;
    }

    /**
     * Gets gru029_exemption_collective_heating_supply
     *
     * @return mixed|null
     */
    public function getGru029ExemptionCollectiveHeatingSupply()
    {
        return $this->container['gru029_exemption_collective_heating_supply'];
    }

    /**
     * Sets gru029_exemption_collective_heating_supply
     *
     * @param mixed|null $gru029_exemption_collective_heating_supply For ubebyggede grunde, hvor der if√∏lge feltet ‚ÄùDato for dispensation/fritagelse‚Äù er oplyst en dato, angives det om den er tidsbegr√¶nset.
     *
     * @return self
     */
    public function setGru029ExemptionCollectiveHeatingSupply($gru029_exemption_collective_heating_supply)
    {
        if (is_null($gru029_exemption_collective_heating_supply)) {
            array_push($this->openAPINullablesSetToNull, 'gru029_exemption_collective_heating_supply');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gru029_exemption_collective_heating_supply', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gru029_exemption_collective_heating_supply'] = $gru029_exemption_collective_heating_supply;

        return $this;
    }

    /**
     * Gets gru030_exemption_collective_heating_supply_date
     *
     * @return mixed|null
     */
    public function getGru030ExemptionCollectiveHeatingSupplyDate()
    {
        return $this->container['gru030_exemption_collective_heating_supply_date'];
    }

    /**
     * Sets gru030_exemption_collective_heating_supply_date
     *
     * @param mixed|null $gru030_exemption_collective_heating_supply_date For ubebyggede grunde, hvor der if√∏lge feltet ‚ÄùDispensation/fritagelse‚Äù er udstedt dispensation eller fritagelse, angives dato for dispensation eller fritagelsen.  Angives i formatet √•√•√•√•mmdd.
     *
     * @return self
     */
    public function setGru030ExemptionCollectiveHeatingSupplyDate($gru030_exemption_collective_heating_supply_date)
    {
        if (is_null($gru030_exemption_collective_heating_supply_date)) {
            array_push($this->openAPINullablesSetToNull, 'gru030_exemption_collective_heating_supply_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gru030_exemption_collective_heating_supply_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gru030_exemption_collective_heating_supply_date'] = $gru030_exemption_collective_heating_supply_date;

        return $this;
    }

    /**
     * Gets gru500_note
     *
     * @return mixed|null
     */
    public function getGru500Note()
    {
        return $this->container['gru500_note'];
    }

    /**
     * Sets gru500_note
     *
     * @param mixed|null $gru500_note Notatlinjer indeholder tekstuel information om et givet BBR objekt, som ikke naturligt omfattes af eksisterende attributter p√• BBR objektet. Det kan for eksempel v√¶re s√¶rlige forhold om adgang til eller anvendelsen af BBR objektet. Der kan, som navnet angiver, angives flere notatlinjer.
     *
     * @return self
     */
    public function setGru500Note($gru500_note)
    {
        if (is_null($gru500_note)) {
            array_push($this->openAPINullablesSetToNull, 'gru500_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gru500_note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gru500_note'] = $gru500_note;

        return $this;
    }

    /**
     * Gets access_address
     *
     * @return \OpenAPI\Client\Model\DARAccessAddress|null
     */
    public function getAccessAddress()
    {
        return $this->container['access_address'];
    }

    /**
     * Sets access_address
     *
     * @param \OpenAPI\Client\Model\DARAccessAddress|null $access_address access_address
     *
     * @return self
     */
    public function setAccessAddress($access_address)
    {
        if (is_null($access_address)) {
            throw new \InvalidArgumentException('non-nullable access_address cannot be null');
        }
        $this->container['access_address'] = $access_address;

        return $this;
    }

    /**
     * Gets property_relation_id
     *
     * @return mixed
     */
    public function getPropertyRelationId()
    {
        return $this->container['property_relation_id'];
    }

    /**
     * Sets property_relation_id
     *
     * @param mixed $property_relation_id property_relation_id
     *
     * @return self
     */
    public function setPropertyRelationId($property_relation_id)
    {
        if (is_null($property_relation_id)) {
            array_push($this->openAPINullablesSetToNull, 'property_relation_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_relation_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_relation_id'] = $property_relation_id;

        return $this;
    }

    /**
     * Gets land_ids
     *
     * @return mixed
     */
    public function getLandIds()
    {
        return $this->container['land_ids'];
    }

    /**
     * Sets land_ids
     *
     * @param mixed $land_ids land_ids
     *
     * @return self
     */
    public function setLandIds($land_ids)
    {
        if (is_null($land_ids)) {
            array_push($this->openAPINullablesSetToNull, 'land_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('land_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['land_ids'] = $land_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


