<?php
/**
 * BBRFloorResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API üëã</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BBRFloorResponse Class Doc Comment
 *
 * @category Class
 * @description Definition: Et sammenh√¶ngende vandret b√¶rende etageplan i en Bygning.  Beskrivelse: Etager, der opdeles af et niveauspring p√• mere end en halv etage h√∏jde, regnes ikke som en samlet Etage. Trappeskakter, udvendige trapper og adgangsarealer indregnes i Etagen.  Bem√¶rkninger: Definition af de enkelte Etager tilf√∏rer ikke forretningsm√¶ssigv√¶rdi til beskrivelsen af alle typer Bygninger. En Etage kan have flere Enheder, og en Enhed kan have flere Etager. Derfor er relationerne mellem Etage og Enhed 0..*_/0..*. Der kan v√¶re flere Enheder og Etager i en bygning, men Enheder og Etager kan ikke deles mellem Bygninger. Derfor er kardinaliteterne her henholdsvis 0..1 og 1.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BBRFloorResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BBRFloorResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'namespace' => 'mixed',
        'status' => 'mixed',
        'business_process' => 'mixed',
        'business_area' => 'mixed',
        'business_event' => 'mixed',
        'registration_from' => 'mixed',
        'registration_to' => 'mixed',
        'registration_actor' => 'mixed',
        'effect_from' => 'mixed',
        'effect_to' => 'mixed',
        'effect_actor' => 'mixed',
        'municipality_code' => 'mixed',
        'eta006_floor_name_building' => 'mixed',
        'eta020_area_total_floor' => 'mixed',
        'eta021_area_utilized_attic' => 'mixed',
        'eta022_area_basement' => 'mixed',
        'eta023_area_legal_residential_basement' => 'mixed',
        'eta024_area_access' => 'mixed',
        'eta025_floor_type' => 'mixed',
        'eta026_basement_commercial' => 'mixed',
        'eta500_note' => 'mixed',
        'building_id' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'namespace' => null,
        'status' => null,
        'business_process' => null,
        'business_area' => null,
        'business_event' => null,
        'registration_from' => 'date-time',
        'registration_to' => 'date-time',
        'registration_actor' => null,
        'effect_from' => 'date-time',
        'effect_to' => 'date-time',
        'effect_actor' => null,
        'municipality_code' => null,
        'eta006_floor_name_building' => null,
        'eta020_area_total_floor' => null,
        'eta021_area_utilized_attic' => null,
        'eta022_area_basement' => null,
        'eta023_area_legal_residential_basement' => null,
        'eta024_area_access' => null,
        'eta025_floor_type' => null,
        'eta026_basement_commercial' => null,
        'eta500_note' => null,
        'building_id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'namespace' => true,
		'status' => true,
		'business_process' => true,
		'business_area' => true,
		'business_event' => true,
		'registration_from' => true,
		'registration_to' => true,
		'registration_actor' => true,
		'effect_from' => true,
		'effect_to' => true,
		'effect_actor' => true,
		'municipality_code' => true,
		'eta006_floor_name_building' => true,
		'eta020_area_total_floor' => true,
		'eta021_area_utilized_attic' => true,
		'eta022_area_basement' => true,
		'eta023_area_legal_residential_basement' => true,
		'eta024_area_access' => true,
		'eta025_floor_type' => true,
		'eta026_basement_commercial' => true,
		'eta500_note' => true,
		'building_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'namespace' => 'namespace',
        'status' => 'status',
        'business_process' => 'business_process',
        'business_area' => 'business_area',
        'business_event' => 'business_event',
        'registration_from' => 'registration_from',
        'registration_to' => 'registration_to',
        'registration_actor' => 'registration_actor',
        'effect_from' => 'effect_from',
        'effect_to' => 'effect_to',
        'effect_actor' => 'effect_actor',
        'municipality_code' => 'municipality_code',
        'eta006_floor_name_building' => 'eta006_floor_name_building',
        'eta020_area_total_floor' => 'eta020_area_total_floor',
        'eta021_area_utilized_attic' => 'eta021_area_utilized_attic',
        'eta022_area_basement' => 'eta022_area_basement',
        'eta023_area_legal_residential_basement' => 'eta023_area_legal_residential_basement',
        'eta024_area_access' => 'eta024_area_access',
        'eta025_floor_type' => 'eta025_floor_type',
        'eta026_basement_commercial' => 'eta026_basement_commercial',
        'eta500_note' => 'eta500_note',
        'building_id' => 'building_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'namespace' => 'setNamespace',
        'status' => 'setStatus',
        'business_process' => 'setBusinessProcess',
        'business_area' => 'setBusinessArea',
        'business_event' => 'setBusinessEvent',
        'registration_from' => 'setRegistrationFrom',
        'registration_to' => 'setRegistrationTo',
        'registration_actor' => 'setRegistrationActor',
        'effect_from' => 'setEffectFrom',
        'effect_to' => 'setEffectTo',
        'effect_actor' => 'setEffectActor',
        'municipality_code' => 'setMunicipalityCode',
        'eta006_floor_name_building' => 'setEta006FloorNameBuilding',
        'eta020_area_total_floor' => 'setEta020AreaTotalFloor',
        'eta021_area_utilized_attic' => 'setEta021AreaUtilizedAttic',
        'eta022_area_basement' => 'setEta022AreaBasement',
        'eta023_area_legal_residential_basement' => 'setEta023AreaLegalResidentialBasement',
        'eta024_area_access' => 'setEta024AreaAccess',
        'eta025_floor_type' => 'setEta025FloorType',
        'eta026_basement_commercial' => 'setEta026BasementCommercial',
        'eta500_note' => 'setEta500Note',
        'building_id' => 'setBuildingId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'namespace' => 'getNamespace',
        'status' => 'getStatus',
        'business_process' => 'getBusinessProcess',
        'business_area' => 'getBusinessArea',
        'business_event' => 'getBusinessEvent',
        'registration_from' => 'getRegistrationFrom',
        'registration_to' => 'getRegistrationTo',
        'registration_actor' => 'getRegistrationActor',
        'effect_from' => 'getEffectFrom',
        'effect_to' => 'getEffectTo',
        'effect_actor' => 'getEffectActor',
        'municipality_code' => 'getMunicipalityCode',
        'eta006_floor_name_building' => 'getEta006FloorNameBuilding',
        'eta020_area_total_floor' => 'getEta020AreaTotalFloor',
        'eta021_area_utilized_attic' => 'getEta021AreaUtilizedAttic',
        'eta022_area_basement' => 'getEta022AreaBasement',
        'eta023_area_legal_residential_basement' => 'getEta023AreaLegalResidentialBasement',
        'eta024_area_access' => 'getEta024AreaAccess',
        'eta025_floor_type' => 'getEta025FloorType',
        'eta026_basement_commercial' => 'getEta026BasementCommercial',
        'eta500_note' => 'getEta500Note',
        'building_id' => 'getBuildingId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('namespace', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('business_process', $data ?? [], null);
        $this->setIfExists('business_area', $data ?? [], null);
        $this->setIfExists('business_event', $data ?? [], null);
        $this->setIfExists('registration_from', $data ?? [], null);
        $this->setIfExists('registration_to', $data ?? [], null);
        $this->setIfExists('registration_actor', $data ?? [], null);
        $this->setIfExists('effect_from', $data ?? [], null);
        $this->setIfExists('effect_to', $data ?? [], null);
        $this->setIfExists('effect_actor', $data ?? [], null);
        $this->setIfExists('municipality_code', $data ?? [], null);
        $this->setIfExists('eta006_floor_name_building', $data ?? [], null);
        $this->setIfExists('eta020_area_total_floor', $data ?? [], null);
        $this->setIfExists('eta021_area_utilized_attic', $data ?? [], null);
        $this->setIfExists('eta022_area_basement', $data ?? [], null);
        $this->setIfExists('eta023_area_legal_residential_basement', $data ?? [], null);
        $this->setIfExists('eta024_area_access', $data ?? [], null);
        $this->setIfExists('eta025_floor_type', $data ?? [], null);
        $this->setIfExists('eta026_basement_commercial', $data ?? [], null);
        $this->setIfExists('eta500_note', $data ?? [], null);
        $this->setIfExists('building_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['namespace'] === null) {
            $invalidProperties[] = "'namespace' can't be null";
        }
        if ($this->container['registration_from'] === null) {
            $invalidProperties[] = "'registration_from' can't be null";
        }
        if ($this->container['registration_actor'] === null) {
            $invalidProperties[] = "'registration_actor' can't be null";
        }
        if ($this->container['effect_from'] === null) {
            $invalidProperties[] = "'effect_from' can't be null";
        }
        if ($this->container['effect_actor'] === null) {
            $invalidProperties[] = "'effect_actor' can't be null";
        }
        if ($this->container['building_id'] === null) {
            $invalidProperties[] = "'building_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id Persistent unik n√∏gle.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return mixed
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param mixed $namespace namespace
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        if (is_null($namespace)) {
            array_push($this->openAPINullablesSetToNull, 'namespace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('namespace', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets status
     *
     * @return mixed|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param mixed|null $status Angivelse af hvor et forvaltningsobjekt er i sin livscyklus.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets business_process
     *
     * @return mixed|null
     */
    public function getBusinessProcess()
    {
        return $this->container['business_process'];
    }

    /**
     * Sets business_process
     *
     * @param mixed|null $business_process Den manuelle eller IT-underst√∏ttede proces hvori forretningsomr√•det h√•ndterer h√¶ndelsen.
     *
     * @return self
     */
    public function setBusinessProcess($business_process)
    {
        if (is_null($business_process)) {
            array_push($this->openAPINullablesSetToNull, 'business_process');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_process', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_process'] = $business_process;

        return $this;
    }

    /**
     * Gets business_area
     *
     * @return mixed|null
     */
    public function getBusinessArea()
    {
        return $this->container['business_area'];
    }

    /**
     * Sets business_area
     *
     * @param mixed|null $business_area Den del af den offentlige forretning der h√•ndterer h√¶ndelsen og derved udvirker √¶ndringen i data.
     *
     * @return self
     */
    public function setBusinessArea($business_area)
    {
        if (is_null($business_area)) {
            array_push($this->openAPINullablesSetToNull, 'business_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_area'] = $business_area;

        return $this;
    }

    /**
     * Gets business_event
     *
     * @return mixed|null
     */
    public function getBusinessEvent()
    {
        return $this->container['business_event'];
    }

    /**
     * Sets business_event
     *
     * @param mixed|null $business_event Den begivenhed i virkeligheden som udl√∏ste √¶ndringen i data.
     *
     * @return self
     */
    public function setBusinessEvent($business_event)
    {
        if (is_null($business_event)) {
            array_push($this->openAPINullablesSetToNull, 'business_event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_event'] = $business_event;

        return $this;
    }

    /**
     * Gets registration_from
     *
     * @return mixed
     */
    public function getRegistrationFrom()
    {
        return $this->container['registration_from'];
    }

    /**
     * Sets registration_from
     *
     * @param mixed $registration_from Tidspunktet hvor registreringen er foretaget.
     *
     * @return self
     */
    public function setRegistrationFrom($registration_from)
    {
        if (is_null($registration_from)) {
            array_push($this->openAPINullablesSetToNull, 'registration_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_from'] = $registration_from;

        return $this;
    }

    /**
     * Gets registration_to
     *
     * @return mixed|null
     */
    public function getRegistrationTo()
    {
        return $this->container['registration_to'];
    }

    /**
     * Sets registration_to
     *
     * @param mixed|null $registration_to Tidspunktet hvor en ny registrering er foretaget p√• objektet, og hvor denne version s√•ledes ikke l√¶ngere er den seneste.
     *
     * @return self
     */
    public function setRegistrationTo($registration_to)
    {
        if (is_null($registration_to)) {
            array_push($this->openAPINullablesSetToNull, 'registration_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_to'] = $registration_to;

        return $this;
    }

    /**
     * Gets registration_actor
     *
     * @return mixed
     */
    public function getRegistrationActor()
    {
        return $this->container['registration_actor'];
    }

    /**
     * Sets registration_actor
     *
     * @param mixed $registration_actor Den akt√∏r der har foretaget registreringen.
     *
     * @return self
     */
    public function setRegistrationActor($registration_actor)
    {
        if (is_null($registration_actor)) {
            array_push($this->openAPINullablesSetToNull, 'registration_actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_actor'] = $registration_actor;

        return $this;
    }

    /**
     * Gets effect_from
     *
     * @return mixed
     */
    public function getEffectFrom()
    {
        return $this->container['effect_from'];
    }

    /**
     * Sets effect_from
     *
     * @param mixed $effect_from Tidspunktet hvorfra objektet har virkning.
     *
     * @return self
     */
    public function setEffectFrom($effect_from)
    {
        if (is_null($effect_from)) {
            array_push($this->openAPINullablesSetToNull, 'effect_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_from'] = $effect_from;

        return $this;
    }

    /**
     * Gets effect_to
     *
     * @return mixed|null
     */
    public function getEffectTo()
    {
        return $this->container['effect_to'];
    }

    /**
     * Sets effect_to
     *
     * @param mixed|null $effect_to Tidspunktet hvor objektets virkning oph√∏rer.
     *
     * @return self
     */
    public function setEffectTo($effect_to)
    {
        if (is_null($effect_to)) {
            array_push($this->openAPINullablesSetToNull, 'effect_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_to'] = $effect_to;

        return $this;
    }

    /**
     * Gets effect_actor
     *
     * @return mixed
     */
    public function getEffectActor()
    {
        return $this->container['effect_actor'];
    }

    /**
     * Sets effect_actor
     *
     * @param mixed $effect_actor Den akt√∏r der har afstedkommet objektets virkning.
     *
     * @return self
     */
    public function setEffectActor($effect_actor)
    {
        if (is_null($effect_actor)) {
            array_push($this->openAPINullablesSetToNull, 'effect_actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_actor'] = $effect_actor;

        return $this;
    }

    /**
     * Gets municipality_code
     *
     * @return mixed|null
     */
    public function getMunicipalityCode()
    {
        return $this->container['municipality_code'];
    }

    /**
     * Sets municipality_code
     *
     * @param mixed|null $municipality_code municipality_code
     *
     * @return self
     */
    public function setMunicipalityCode($municipality_code)
    {
        if (is_null($municipality_code)) {
            array_push($this->openAPINullablesSetToNull, 'municipality_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('municipality_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['municipality_code'] = $municipality_code;

        return $this;
    }

    /**
     * Gets eta006_floor_name_building
     *
     * @return mixed|null
     */
    public function getEta006FloorNameBuilding()
    {
        return $this->container['eta006_floor_name_building'];
    }

    /**
     * Sets eta006_floor_name_building
     *
     * @param mixed|null $eta006_floor_name_building Her angives etagebetegnelsen  som anvendes i bygningen.   Bem√¶rkning: Dette er ikke identisk med etagebegrebet i Grunddataregister (DAR)
     *
     * @return self
     */
    public function setEta006FloorNameBuilding($eta006_floor_name_building)
    {
        if (is_null($eta006_floor_name_building)) {
            array_push($this->openAPINullablesSetToNull, 'eta006_floor_name_building');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eta006_floor_name_building', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eta006_floor_name_building'] = $eta006_floor_name_building;

        return $this;
    }

    /**
     * Gets eta020_area_total_floor
     *
     * @return mixed|null
     */
    public function getEta020AreaTotalFloor()
    {
        return $this->container['eta020_area_total_floor'];
    }

    /**
     * Sets eta020_area_total_floor
     *
     * @param mixed|null $eta020_area_total_floor Det samlede areal af den p√•g√¶ldende etage.  Angives i kvadratmeter.
     *
     * @return self
     */
    public function setEta020AreaTotalFloor($eta020_area_total_floor)
    {
        if (is_null($eta020_area_total_floor)) {
            array_push($this->openAPINullablesSetToNull, 'eta020_area_total_floor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eta020_area_total_floor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eta020_area_total_floor'] = $eta020_area_total_floor;

        return $this;
    }

    /**
     * Gets eta021_area_utilized_attic
     *
     * @return mixed|null
     */
    public function getEta021AreaUtilizedAttic()
    {
        return $this->container['eta021_area_utilized_attic'];
    }

    /**
     * Sets eta021_area_utilized_attic
     *
     * @param mixed|null $eta021_area_utilized_attic Arealet af den del af tagetagen, der bliver udnyttet til beboelse eller erhverv.  Angives i kvadratmeter.
     *
     * @return self
     */
    public function setEta021AreaUtilizedAttic($eta021_area_utilized_attic)
    {
        if (is_null($eta021_area_utilized_attic)) {
            array_push($this->openAPINullablesSetToNull, 'eta021_area_utilized_attic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eta021_area_utilized_attic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eta021_area_utilized_attic'] = $eta021_area_utilized_attic;

        return $this;
    }

    /**
     * Gets eta022_area_basement
     *
     * @return mixed|null
     */
    public function getEta022AreaBasement()
    {
        return $this->container['eta022_area_basement'];
    }

    /**
     * Sets eta022_area_basement
     *
     * @param mixed|null $eta022_area_basement Her angives areal p√• k√¶lder, hvis loft ligger mindre end 1.25 m over terr√¶n.
     *
     * @return self
     */
    public function setEta022AreaBasement($eta022_area_basement)
    {
        if (is_null($eta022_area_basement)) {
            array_push($this->openAPINullablesSetToNull, 'eta022_area_basement');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eta022_area_basement', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eta022_area_basement'] = $eta022_area_basement;

        return $this;
    }

    /**
     * Gets eta023_area_legal_residential_basement
     *
     * @return mixed|null
     */
    public function getEta023AreaLegalResidentialBasement()
    {
        return $this->container['eta023_area_legal_residential_basement'];
    }

    /**
     * Sets eta023_area_legal_residential_basement
     *
     * @param mixed|null $eta023_area_legal_residential_basement Arealet af den del af k√¶lderen der er indrettet til lovlig beboelse i henhold til byggelovgivningen.  Angives i kvadratmeter.
     *
     * @return self
     */
    public function setEta023AreaLegalResidentialBasement($eta023_area_legal_residential_basement)
    {
        if (is_null($eta023_area_legal_residential_basement)) {
            array_push($this->openAPINullablesSetToNull, 'eta023_area_legal_residential_basement');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eta023_area_legal_residential_basement', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eta023_area_legal_residential_basement'] = $eta023_area_legal_residential_basement;

        return $this;
    }

    /**
     * Gets eta024_area_access
     *
     * @return mixed|null
     */
    public function getEta024AreaAccess()
    {
        return $this->container['eta024_area_access'];
    }

    /**
     * Sets eta024_area_access
     *
     * @param mixed|null $eta024_area_access Etagens samlede adgangsareal.  Angives i kvadratmeter.
     *
     * @return self
     */
    public function setEta024AreaAccess($eta024_area_access)
    {
        if (is_null($eta024_area_access)) {
            array_push($this->openAPINullablesSetToNull, 'eta024_area_access');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eta024_area_access', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eta024_area_access'] = $eta024_area_access;

        return $this;
    }

    /**
     * Gets eta025_floor_type
     *
     * @return mixed|null
     */
    public function getEta025FloorType()
    {
        return $this->container['eta025_floor_type'];
    }

    /**
     * Sets eta025_floor_type
     *
     * @param mixed|null $eta025_floor_type Her angives om etagen er en tagetage.
     *
     * @return self
     */
    public function setEta025FloorType($eta025_floor_type)
    {
        if (is_null($eta025_floor_type)) {
            array_push($this->openAPINullablesSetToNull, 'eta025_floor_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eta025_floor_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eta025_floor_type'] = $eta025_floor_type;

        return $this;
    }

    /**
     * Gets eta026_basement_commercial
     *
     * @return mixed|null
     */
    public function getEta026BasementCommercial()
    {
        return $this->container['eta026_basement_commercial'];
    }

    /**
     * Sets eta026_basement_commercial
     *
     * @param mixed|null $eta026_basement_commercial Her angives det samlede areal af erhverv i k√¶lder.  Angives i kvadratmeter.
     *
     * @return self
     */
    public function setEta026BasementCommercial($eta026_basement_commercial)
    {
        if (is_null($eta026_basement_commercial)) {
            array_push($this->openAPINullablesSetToNull, 'eta026_basement_commercial');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eta026_basement_commercial', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eta026_basement_commercial'] = $eta026_basement_commercial;

        return $this;
    }

    /**
     * Gets eta500_note
     *
     * @return mixed|null
     */
    public function getEta500Note()
    {
        return $this->container['eta500_note'];
    }

    /**
     * Sets eta500_note
     *
     * @param mixed|null $eta500_note eta500_note
     *
     * @return self
     */
    public function setEta500Note($eta500_note)
    {
        if (is_null($eta500_note)) {
            array_push($this->openAPINullablesSetToNull, 'eta500_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eta500_note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eta500_note'] = $eta500_note;

        return $this;
    }

    /**
     * Gets building_id
     *
     * @return mixed
     */
    public function getBuildingId()
    {
        return $this->container['building_id'];
    }

    /**
     * Sets building_id
     *
     * @param mixed $building_id building_id
     *
     * @return self
     */
    public function setBuildingId($building_id)
    {
        if (is_null($building_id)) {
            array_push($this->openAPINullablesSetToNull, 'building_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_id'] = $building_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


