<?php
/**
 * NewRelicStatsResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NewRelicStatsResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NewRelicStatsResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NewRelicStatsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'timestamp' => 'mixed',
        'number_requests_daily' => 'mixed',
        'number_requests_total' => 'mixed',
        'number_unique_users_daily' => 'mixed',
        'number_unique_users_total' => 'mixed',
        'ips' => 'mixed',
        'endpoints' => 'mixed',
        'user_agents' => 'mixed',
        'map_layers' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'timestamp' => 'date-time',
        'number_requests_daily' => null,
        'number_requests_total' => null,
        'number_unique_users_daily' => null,
        'number_unique_users_total' => null,
        'ips' => null,
        'endpoints' => null,
        'user_agents' => null,
        'map_layers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'timestamp' => true,
		'number_requests_daily' => true,
		'number_requests_total' => true,
		'number_unique_users_daily' => true,
		'number_unique_users_total' => true,
		'ips' => true,
		'endpoints' => true,
		'user_agents' => true,
		'map_layers' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timestamp' => 'timestamp',
        'number_requests_daily' => 'number_requests_daily',
        'number_requests_total' => 'number_requests_total',
        'number_unique_users_daily' => 'number_unique_users_daily',
        'number_unique_users_total' => 'number_unique_users_total',
        'ips' => 'ips',
        'endpoints' => 'endpoints',
        'user_agents' => 'user_agents',
        'map_layers' => 'map_layers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timestamp' => 'setTimestamp',
        'number_requests_daily' => 'setNumberRequestsDaily',
        'number_requests_total' => 'setNumberRequestsTotal',
        'number_unique_users_daily' => 'setNumberUniqueUsersDaily',
        'number_unique_users_total' => 'setNumberUniqueUsersTotal',
        'ips' => 'setIps',
        'endpoints' => 'setEndpoints',
        'user_agents' => 'setUserAgents',
        'map_layers' => 'setMapLayers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timestamp' => 'getTimestamp',
        'number_requests_daily' => 'getNumberRequestsDaily',
        'number_requests_total' => 'getNumberRequestsTotal',
        'number_unique_users_daily' => 'getNumberUniqueUsersDaily',
        'number_unique_users_total' => 'getNumberUniqueUsersTotal',
        'ips' => 'getIps',
        'endpoints' => 'getEndpoints',
        'user_agents' => 'getUserAgents',
        'map_layers' => 'getMapLayers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('number_requests_daily', $data ?? [], null);
        $this->setIfExists('number_requests_total', $data ?? [], null);
        $this->setIfExists('number_unique_users_daily', $data ?? [], null);
        $this->setIfExists('number_unique_users_total', $data ?? [], null);
        $this->setIfExists('ips', $data ?? [], null);
        $this->setIfExists('endpoints', $data ?? [], null);
        $this->setIfExists('user_agents', $data ?? [], null);
        $this->setIfExists('map_layers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number_requests_daily'] === null) {
            $invalidProperties[] = "'number_requests_daily' can't be null";
        }
        if ($this->container['number_requests_total'] === null) {
            $invalidProperties[] = "'number_requests_total' can't be null";
        }
        if ($this->container['number_unique_users_daily'] === null) {
            $invalidProperties[] = "'number_unique_users_daily' can't be null";
        }
        if ($this->container['number_unique_users_total'] === null) {
            $invalidProperties[] = "'number_unique_users_total' can't be null";
        }
        if ($this->container['ips'] === null) {
            $invalidProperties[] = "'ips' can't be null";
        }
        if ($this->container['endpoints'] === null) {
            $invalidProperties[] = "'endpoints' can't be null";
        }
        if ($this->container['user_agents'] === null) {
            $invalidProperties[] = "'user_agents' can't be null";
        }
        if ($this->container['map_layers'] === null) {
            $invalidProperties[] = "'map_layers' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timestamp
     *
     * @return mixed|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param mixed|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets number_requests_daily
     *
     * @return mixed
     */
    public function getNumberRequestsDaily()
    {
        return $this->container['number_requests_daily'];
    }

    /**
     * Sets number_requests_daily
     *
     * @param mixed $number_requests_daily number_requests_daily
     *
     * @return self
     */
    public function setNumberRequestsDaily($number_requests_daily)
    {
        if (is_null($number_requests_daily)) {
            array_push($this->openAPINullablesSetToNull, 'number_requests_daily');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_requests_daily', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_requests_daily'] = $number_requests_daily;

        return $this;
    }

    /**
     * Gets number_requests_total
     *
     * @return mixed
     */
    public function getNumberRequestsTotal()
    {
        return $this->container['number_requests_total'];
    }

    /**
     * Sets number_requests_total
     *
     * @param mixed $number_requests_total number_requests_total
     *
     * @return self
     */
    public function setNumberRequestsTotal($number_requests_total)
    {
        if (is_null($number_requests_total)) {
            array_push($this->openAPINullablesSetToNull, 'number_requests_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_requests_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_requests_total'] = $number_requests_total;

        return $this;
    }

    /**
     * Gets number_unique_users_daily
     *
     * @return mixed
     */
    public function getNumberUniqueUsersDaily()
    {
        return $this->container['number_unique_users_daily'];
    }

    /**
     * Sets number_unique_users_daily
     *
     * @param mixed $number_unique_users_daily number_unique_users_daily
     *
     * @return self
     */
    public function setNumberUniqueUsersDaily($number_unique_users_daily)
    {
        if (is_null($number_unique_users_daily)) {
            array_push($this->openAPINullablesSetToNull, 'number_unique_users_daily');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_unique_users_daily', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_unique_users_daily'] = $number_unique_users_daily;

        return $this;
    }

    /**
     * Gets number_unique_users_total
     *
     * @return mixed
     */
    public function getNumberUniqueUsersTotal()
    {
        return $this->container['number_unique_users_total'];
    }

    /**
     * Sets number_unique_users_total
     *
     * @param mixed $number_unique_users_total number_unique_users_total
     *
     * @return self
     */
    public function setNumberUniqueUsersTotal($number_unique_users_total)
    {
        if (is_null($number_unique_users_total)) {
            array_push($this->openAPINullablesSetToNull, 'number_unique_users_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_unique_users_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_unique_users_total'] = $number_unique_users_total;

        return $this;
    }

    /**
     * Gets ips
     *
     * @return mixed
     */
    public function getIps()
    {
        return $this->container['ips'];
    }

    /**
     * Sets ips
     *
     * @param mixed $ips ips
     *
     * @return self
     */
    public function setIps($ips)
    {
        if (is_null($ips)) {
            array_push($this->openAPINullablesSetToNull, 'ips');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ips', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ips'] = $ips;

        return $this;
    }

    /**
     * Gets endpoints
     *
     * @return mixed
     */
    public function getEndpoints()
    {
        return $this->container['endpoints'];
    }

    /**
     * Sets endpoints
     *
     * @param mixed $endpoints endpoints
     *
     * @return self
     */
    public function setEndpoints($endpoints)
    {
        if (is_null($endpoints)) {
            array_push($this->openAPINullablesSetToNull, 'endpoints');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('endpoints', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['endpoints'] = $endpoints;

        return $this;
    }

    /**
     * Gets user_agents
     *
     * @return mixed
     */
    public function getUserAgents()
    {
        return $this->container['user_agents'];
    }

    /**
     * Sets user_agents
     *
     * @param mixed $user_agents user_agents
     *
     * @return self
     */
    public function setUserAgents($user_agents)
    {
        if (is_null($user_agents)) {
            array_push($this->openAPINullablesSetToNull, 'user_agents');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_agents', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_agents'] = $user_agents;

        return $this;
    }

    /**
     * Gets map_layers
     *
     * @return mixed
     */
    public function getMapLayers()
    {
        return $this->container['map_layers'];
    }

    /**
     * Sets map_layers
     *
     * @param mixed $map_layers map_layers
     *
     * @return self
     */
    public function setMapLayers($map_layers)
    {
        if (is_null($map_layers)) {
            array_push($this->openAPINullablesSetToNull, 'map_layers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('map_layers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['map_layers'] = $map_layers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


