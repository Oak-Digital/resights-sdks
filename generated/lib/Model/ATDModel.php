<?php
/**
 * ATDModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ATDModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ATDModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ATDModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'type' => '\OpenAPI\Client\Model\DokumentTypeEnum',
        'revision_nummer' => 'mixed',
        'alias_id' => 'mixed',
        'tinglysning_dato' => 'mixed',
        'fast_ejendom_med_rettigheder_samling' => 'mixed',
        'adkomst_struktur' => '\OpenAPI\Client\Model\AdkomstStrukturModel',
        'haeftelse_struktur' => '\OpenAPI\Client\Model\HaeftelseStrukturModel',
        'servitut_struktur' => '\OpenAPI\Client\Model\ServitutStrukturModel',
        'anmeldelse_information' => '\OpenAPI\Client\Model\AnmeldelseInformationModel',
        'anmaerkning_samling' => 'mixed',
        'frist_information_samling' => 'mixed',
        'snapshot' => '\OpenAPI\Client\Model\SnapshotModel',
        'tillaegstekst_samling' => 'mixed',
        'aendringspaategning_samling' => 'mixed',
        'tinglysning_afgift_overfoersel_indikator' => 'mixed',
        'seneste_anmeldelse_svar' => '\OpenAPI\Client\Model\SenesteAnmeldelseSvarModel',
        'udskrift_dato_tid' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'type' => null,
        'revision_nummer' => null,
        'alias_id' => null,
        'tinglysning_dato' => 'date-time',
        'fast_ejendom_med_rettigheder_samling' => null,
        'adkomst_struktur' => null,
        'haeftelse_struktur' => null,
        'servitut_struktur' => null,
        'anmeldelse_information' => null,
        'anmaerkning_samling' => null,
        'frist_information_samling' => null,
        'snapshot' => null,
        'tillaegstekst_samling' => null,
        'aendringspaategning_samling' => null,
        'tinglysning_afgift_overfoersel_indikator' => null,
        'seneste_anmeldelse_svar' => null,
        'udskrift_dato_tid' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'type' => false,
		'revision_nummer' => true,
		'alias_id' => true,
		'tinglysning_dato' => true,
		'fast_ejendom_med_rettigheder_samling' => true,
		'adkomst_struktur' => false,
		'haeftelse_struktur' => false,
		'servitut_struktur' => false,
		'anmeldelse_information' => false,
		'anmaerkning_samling' => true,
		'frist_information_samling' => true,
		'snapshot' => false,
		'tillaegstekst_samling' => true,
		'aendringspaategning_samling' => true,
		'tinglysning_afgift_overfoersel_indikator' => true,
		'seneste_anmeldelse_svar' => false,
		'udskrift_dato_tid' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'type' => 'Type',
        'revision_nummer' => 'RevisionNummer',
        'alias_id' => 'AliasId',
        'tinglysning_dato' => 'TinglysningDato',
        'fast_ejendom_med_rettigheder_samling' => 'FastEjendomMedRettighederSamling',
        'adkomst_struktur' => 'AdkomstStruktur',
        'haeftelse_struktur' => 'HaeftelseStruktur',
        'servitut_struktur' => 'ServitutStruktur',
        'anmeldelse_information' => 'AnmeldelseInformation',
        'anmaerkning_samling' => 'AnmaerkningSamling',
        'frist_information_samling' => 'FristInformationSamling',
        'snapshot' => 'Snapshot',
        'tillaegstekst_samling' => 'TillaegstekstSamling',
        'aendringspaategning_samling' => 'AendringspaategningSamling',
        'tinglysning_afgift_overfoersel_indikator' => 'TinglysningAfgiftOverfoerselIndikator',
        'seneste_anmeldelse_svar' => 'SenesteAnmeldelseSvar',
        'udskrift_dato_tid' => 'UdskriftDatoTid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'revision_nummer' => 'setRevisionNummer',
        'alias_id' => 'setAliasId',
        'tinglysning_dato' => 'setTinglysningDato',
        'fast_ejendom_med_rettigheder_samling' => 'setFastEjendomMedRettighederSamling',
        'adkomst_struktur' => 'setAdkomstStruktur',
        'haeftelse_struktur' => 'setHaeftelseStruktur',
        'servitut_struktur' => 'setServitutStruktur',
        'anmeldelse_information' => 'setAnmeldelseInformation',
        'anmaerkning_samling' => 'setAnmaerkningSamling',
        'frist_information_samling' => 'setFristInformationSamling',
        'snapshot' => 'setSnapshot',
        'tillaegstekst_samling' => 'setTillaegstekstSamling',
        'aendringspaategning_samling' => 'setAendringspaategningSamling',
        'tinglysning_afgift_overfoersel_indikator' => 'setTinglysningAfgiftOverfoerselIndikator',
        'seneste_anmeldelse_svar' => 'setSenesteAnmeldelseSvar',
        'udskrift_dato_tid' => 'setUdskriftDatoTid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'revision_nummer' => 'getRevisionNummer',
        'alias_id' => 'getAliasId',
        'tinglysning_dato' => 'getTinglysningDato',
        'fast_ejendom_med_rettigheder_samling' => 'getFastEjendomMedRettighederSamling',
        'adkomst_struktur' => 'getAdkomstStruktur',
        'haeftelse_struktur' => 'getHaeftelseStruktur',
        'servitut_struktur' => 'getServitutStruktur',
        'anmeldelse_information' => 'getAnmeldelseInformation',
        'anmaerkning_samling' => 'getAnmaerkningSamling',
        'frist_information_samling' => 'getFristInformationSamling',
        'snapshot' => 'getSnapshot',
        'tillaegstekst_samling' => 'getTillaegstekstSamling',
        'aendringspaategning_samling' => 'getAendringspaategningSamling',
        'tinglysning_afgift_overfoersel_indikator' => 'getTinglysningAfgiftOverfoerselIndikator',
        'seneste_anmeldelse_svar' => 'getSenesteAnmeldelseSvar',
        'udskrift_dato_tid' => 'getUdskriftDatoTid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('revision_nummer', $data ?? [], null);
        $this->setIfExists('alias_id', $data ?? [], null);
        $this->setIfExists('tinglysning_dato', $data ?? [], null);
        $this->setIfExists('fast_ejendom_med_rettigheder_samling', $data ?? [], null);
        $this->setIfExists('adkomst_struktur', $data ?? [], null);
        $this->setIfExists('haeftelse_struktur', $data ?? [], null);
        $this->setIfExists('servitut_struktur', $data ?? [], null);
        $this->setIfExists('anmeldelse_information', $data ?? [], null);
        $this->setIfExists('anmaerkning_samling', $data ?? [], null);
        $this->setIfExists('frist_information_samling', $data ?? [], null);
        $this->setIfExists('snapshot', $data ?? [], null);
        $this->setIfExists('tillaegstekst_samling', $data ?? [], null);
        $this->setIfExists('aendringspaategning_samling', $data ?? [], null);
        $this->setIfExists('tinglysning_afgift_overfoersel_indikator', $data ?? [], null);
        $this->setIfExists('seneste_anmeldelse_svar', $data ?? [], null);
        $this->setIfExists('udskrift_dato_tid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['revision_nummer'] === null) {
            $invalidProperties[] = "'revision_nummer' can't be null";
        }
        if ($this->container['tinglysning_dato'] === null) {
            $invalidProperties[] = "'tinglysning_dato' can't be null";
        }
        if ($this->container['snapshot'] === null) {
            $invalidProperties[] = "'snapshot' can't be null";
        }
        if ($this->container['tinglysning_afgift_overfoersel_indikator'] === null) {
            $invalidProperties[] = "'tinglysning_afgift_overfoersel_indikator' can't be null";
        }
        if ($this->container['udskrift_dato_tid'] === null) {
            $invalidProperties[] = "'udskrift_dato_tid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id Identifikation af et dokument, som kan vÃ¦re et adkomst-, hÃ¦ftelses- eller servitutdokument. Kunne ogsÃ¥ kaldes en sagsreference
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\DokumentTypeEnum|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\DokumentTypeEnum|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets revision_nummer
     *
     * @return mixed
     */
    public function getRevisionNummer()
    {
        return $this->container['revision_nummer'];
    }

    /**
     * Sets revision_nummer
     *
     * @param mixed $revision_nummer Revisionsnummer for rettighedsdokument.
     *
     * @return self
     */
    public function setRevisionNummer($revision_nummer)
    {
        if (is_null($revision_nummer)) {
            array_push($this->openAPINullablesSetToNull, 'revision_nummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('revision_nummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['revision_nummer'] = $revision_nummer;

        return $this;
    }

    /**
     * Gets alias_id
     *
     * @return mixed|null
     */
    public function getAliasId()
    {
        return $this->container['alias_id'];
    }

    /**
     * Sets alias_id
     *
     * @param mixed|null $alias_id Unikt dokument-alias bestÃ¥ende af dags dato og et lÃ¸benummer. F.eks. 20080304-1234567890
     *
     * @return self
     */
    public function setAliasId($alias_id)
    {
        if (is_null($alias_id)) {
            array_push($this->openAPINullablesSetToNull, 'alias_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alias_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alias_id'] = $alias_id;

        return $this;
    }

    /**
     * Gets tinglysning_dato
     *
     * @return mixed
     */
    public function getTinglysningDato()
    {
        return $this->container['tinglysning_dato'];
    }

    /**
     * Sets tinglysning_dato
     *
     * @param mixed $tinglysning_dato Tinglysningsdatoen er tidspunktet for modtagelsen af en anmeldelse, der indeholder oprettende ekspeditionstype. Tinglysningsdatoen viser altid datoen for den oprindelige tinglysning. Datoen for eventuelle pÃ¥tegninger kan udelukkende ses i akten via revisionssporet.
     *
     * @return self
     */
    public function setTinglysningDato($tinglysning_dato)
    {
        if (is_null($tinglysning_dato)) {
            array_push($this->openAPINullablesSetToNull, 'tinglysning_dato');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tinglysning_dato', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tinglysning_dato'] = $tinglysning_dato;

        return $this;
    }

    /**
     * Gets fast_ejendom_med_rettigheder_samling
     *
     * @return mixed|null
     */
    public function getFastEjendomMedRettighederSamling()
    {
        return $this->container['fast_ejendom_med_rettigheder_samling'];
    }

    /**
     * Sets fast_ejendom_med_rettigheder_samling
     *
     * @param mixed|null $fast_ejendom_med_rettigheder_samling Samling af faste ejendomme, med tilhÃ¸rende pantrettigheder
     *
     * @return self
     */
    public function setFastEjendomMedRettighederSamling($fast_ejendom_med_rettigheder_samling)
    {
        if (is_null($fast_ejendom_med_rettigheder_samling)) {
            array_push($this->openAPINullablesSetToNull, 'fast_ejendom_med_rettigheder_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fast_ejendom_med_rettigheder_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fast_ejendom_med_rettigheder_samling'] = $fast_ejendom_med_rettigheder_samling;

        return $this;
    }

    /**
     * Gets adkomst_struktur
     *
     * @return \OpenAPI\Client\Model\AdkomstStrukturModel|null
     */
    public function getAdkomstStruktur()
    {
        return $this->container['adkomst_struktur'];
    }

    /**
     * Sets adkomst_struktur
     *
     * @param \OpenAPI\Client\Model\AdkomstStrukturModel|null $adkomst_struktur adkomst_struktur
     *
     * @return self
     */
    public function setAdkomstStruktur($adkomst_struktur)
    {
        if (is_null($adkomst_struktur)) {
            throw new \InvalidArgumentException('non-nullable adkomst_struktur cannot be null');
        }
        $this->container['adkomst_struktur'] = $adkomst_struktur;

        return $this;
    }

    /**
     * Gets haeftelse_struktur
     *
     * @return \OpenAPI\Client\Model\HaeftelseStrukturModel|null
     */
    public function getHaeftelseStruktur()
    {
        return $this->container['haeftelse_struktur'];
    }

    /**
     * Sets haeftelse_struktur
     *
     * @param \OpenAPI\Client\Model\HaeftelseStrukturModel|null $haeftelse_struktur haeftelse_struktur
     *
     * @return self
     */
    public function setHaeftelseStruktur($haeftelse_struktur)
    {
        if (is_null($haeftelse_struktur)) {
            throw new \InvalidArgumentException('non-nullable haeftelse_struktur cannot be null');
        }
        $this->container['haeftelse_struktur'] = $haeftelse_struktur;

        return $this;
    }

    /**
     * Gets servitut_struktur
     *
     * @return \OpenAPI\Client\Model\ServitutStrukturModel|null
     */
    public function getServitutStruktur()
    {
        return $this->container['servitut_struktur'];
    }

    /**
     * Sets servitut_struktur
     *
     * @param \OpenAPI\Client\Model\ServitutStrukturModel|null $servitut_struktur servitut_struktur
     *
     * @return self
     */
    public function setServitutStruktur($servitut_struktur)
    {
        if (is_null($servitut_struktur)) {
            throw new \InvalidArgumentException('non-nullable servitut_struktur cannot be null');
        }
        $this->container['servitut_struktur'] = $servitut_struktur;

        return $this;
    }

    /**
     * Gets anmeldelse_information
     *
     * @return \OpenAPI\Client\Model\AnmeldelseInformationModel|null
     */
    public function getAnmeldelseInformation()
    {
        return $this->container['anmeldelse_information'];
    }

    /**
     * Sets anmeldelse_information
     *
     * @param \OpenAPI\Client\Model\AnmeldelseInformationModel|null $anmeldelse_information anmeldelse_information
     *
     * @return self
     */
    public function setAnmeldelseInformation($anmeldelse_information)
    {
        if (is_null($anmeldelse_information)) {
            throw new \InvalidArgumentException('non-nullable anmeldelse_information cannot be null');
        }
        $this->container['anmeldelse_information'] = $anmeldelse_information;

        return $this;
    }

    /**
     * Gets anmaerkning_samling
     *
     * @return mixed|null
     */
    public function getAnmaerkningSamling()
    {
        return $this->container['anmaerkning_samling'];
    }

    /**
     * Sets anmaerkning_samling
     *
     * @param mixed|null $anmaerkning_samling Samling af anmaerkninger. Det kan vÃ¦re anmaerkninger om servitutter og hÃ¦ftelser angivet ved nummer. AnmÃ¦rkninger vedrÃ¸rer altid respekter. Mangler der i en anmeldelse respekt for en eller flere hÃ¦ftelser eller servitutter, giver sagsbehandlingen anledning til anmÃ¦rkninger herom. AnmÃ¦rkning for servitutter indeholder kode for yderligere oplysninger om servitutten.
     *
     * @return self
     */
    public function setAnmaerkningSamling($anmaerkning_samling)
    {
        if (is_null($anmaerkning_samling)) {
            array_push($this->openAPINullablesSetToNull, 'anmaerkning_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('anmaerkning_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['anmaerkning_samling'] = $anmaerkning_samling;

        return $this;
    }

    /**
     * Gets frist_information_samling
     *
     * @return mixed|null
     */
    public function getFristInformationSamling()
    {
        return $this->container['frist_information_samling'];
    }

    /**
     * Sets frist_information_samling
     *
     * @param mixed|null $frist_information_samling FristInformation ved tinglysning med frist. Her oplyses Ã¥rsag og fristdato.
     *
     * @return self
     */
    public function setFristInformationSamling($frist_information_samling)
    {
        if (is_null($frist_information_samling)) {
            array_push($this->openAPINullablesSetToNull, 'frist_information_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('frist_information_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['frist_information_samling'] = $frist_information_samling;

        return $this;
    }

    /**
     * Gets snapshot
     *
     * @return \OpenAPI\Client\Model\SnapshotModel
     */
    public function getSnapshot()
    {
        return $this->container['snapshot'];
    }

    /**
     * Sets snapshot
     *
     * @param \OpenAPI\Client\Model\SnapshotModel $snapshot snapshot
     *
     * @return self
     */
    public function setSnapshot($snapshot)
    {
        if (is_null($snapshot)) {
            throw new \InvalidArgumentException('non-nullable snapshot cannot be null');
        }
        $this->container['snapshot'] = $snapshot;

        return $this;
    }

    /**
     * Gets tillaegstekst_samling
     *
     * @return mixed|null
     */
    public function getTillaegstekstSamling()
    {
        return $this->container['tillaegstekst_samling'];
    }

    /**
     * Sets tillaegstekst_samling
     *
     * @param mixed|null $tillaegstekst_samling Oplysende tekster som tinglysningsretten i form af en berigelse pÃ¥fÃ¸rer dokumentet.
     *
     * @return self
     */
    public function setTillaegstekstSamling($tillaegstekst_samling)
    {
        if (is_null($tillaegstekst_samling)) {
            array_push($this->openAPINullablesSetToNull, 'tillaegstekst_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tillaegstekst_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tillaegstekst_samling'] = $tillaegstekst_samling;

        return $this;
    }

    /**
     * Gets aendringspaategning_samling
     *
     * @return mixed|null
     */
    public function getAendringspaategningSamling()
    {
        return $this->container['aendringspaategning_samling'];
    }

    /**
     * Sets aendringspaategning_samling
     *
     * @param mixed|null $aendringspaategning_samling PÃ¥tegninger som ligger pÃ¥ dokumentet, men som er tinglyst med frist eller hvor en forhÃ¸jelse er spaltet og som derfor ikke er 'flettet' ind i ATR-dokumentet endnu. I en anmeldelse med en kombinationspÃ¥tegning kan der indgÃ¥ flere forskellige Ã¦ndringer, som alle bliver samlet i Ã©n ny version af dokumentet. For ekspeditionstype 80 omsÃ¦tter sagsbehandleren pÃ¥tegningsteksten til Ã©n eller flere elementer under kombipÃ¥tegningen. SÃ¥ledes er der ikke behov for at gemme og returnere selve den inddaterede pÃ¥tegningstekst. Ã†ndringer i roller (kreditorskift/transport, debitorskift, Ã¦ndring af meddelelseshavere samt fuldmagtsÃ¦ndringer) er afspejlet i rollesamlingen og indgÃ¥r derfor ikke som Ã¦ndringspÃ¥tegning.
     *
     * @return self
     */
    public function setAendringspaategningSamling($aendringspaategning_samling)
    {
        if (is_null($aendringspaategning_samling)) {
            array_push($this->openAPINullablesSetToNull, 'aendringspaategning_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aendringspaategning_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aendringspaategning_samling'] = $aendringspaategning_samling;

        return $this;
    }

    /**
     * Gets tinglysning_afgift_overfoersel_indikator
     *
     * @return mixed
     */
    public function getTinglysningAfgiftOverfoerselIndikator()
    {
        return $this->container['tinglysning_afgift_overfoersel_indikator'];
    }

    /**
     * Sets tinglysning_afgift_overfoersel_indikator
     *
     * @param mixed $tinglysning_afgift_overfoersel_indikator True angiver at der findes en erklÃ¦ring om at hÃ¦ftelse alene indestÃ¥r med henblik pÃ¥ overfÃ¸rsel af tinglysningsafgift.
     *
     * @return self
     */
    public function setTinglysningAfgiftOverfoerselIndikator($tinglysning_afgift_overfoersel_indikator)
    {
        if (is_null($tinglysning_afgift_overfoersel_indikator)) {
            array_push($this->openAPINullablesSetToNull, 'tinglysning_afgift_overfoersel_indikator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tinglysning_afgift_overfoersel_indikator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tinglysning_afgift_overfoersel_indikator'] = $tinglysning_afgift_overfoersel_indikator;

        return $this;
    }

    /**
     * Gets seneste_anmeldelse_svar
     *
     * @return \OpenAPI\Client\Model\SenesteAnmeldelseSvarModel|null
     */
    public function getSenesteAnmeldelseSvar()
    {
        return $this->container['seneste_anmeldelse_svar'];
    }

    /**
     * Sets seneste_anmeldelse_svar
     *
     * @param \OpenAPI\Client\Model\SenesteAnmeldelseSvarModel|null $seneste_anmeldelse_svar seneste_anmeldelse_svar
     *
     * @return self
     */
    public function setSenesteAnmeldelseSvar($seneste_anmeldelse_svar)
    {
        if (is_null($seneste_anmeldelse_svar)) {
            throw new \InvalidArgumentException('non-nullable seneste_anmeldelse_svar cannot be null');
        }
        $this->container['seneste_anmeldelse_svar'] = $seneste_anmeldelse_svar;

        return $this;
    }

    /**
     * Gets udskrift_dato_tid
     *
     * @return mixed
     */
    public function getUdskriftDatoTid()
    {
        return $this->container['udskrift_dato_tid'];
    }

    /**
     * Sets udskrift_dato_tid
     *
     * @param mixed $udskrift_dato_tid Tidspunktet for en udskrift
     *
     * @return self
     */
    public function setUdskriftDatoTid($udskrift_dato_tid)
    {
        if (is_null($udskrift_dato_tid)) {
            array_push($this->openAPINullablesSetToNull, 'udskrift_dato_tid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('udskrift_dato_tid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['udskrift_dato_tid'] = $udskrift_dato_tid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


