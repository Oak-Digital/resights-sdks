<?php
/**
 * DomusProBudgetModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DomusProBudgetModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomusProBudgetModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DomusProBudgetModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountant' => 'mixed',
        'administration' => 'mixed',
        'approved_by_general_assembly' => 'mixed',
        'block_board' => 'mixed',
        'budget_end_date' => 'mixed',
        'budget_source_identifier' => 'mixed',
        'budget_source_name' => 'mixed',
        'budget_start_date' => 'mixed',
        'building_insurance' => 'mixed',
        'building_tax' => 'mixed',
        'cleaning' => 'mixed',
        'deleted' => 'mixed',
        'electricity' => 'mixed',
        'fiscal_year' => '\OpenAPI\Client\Model\DomusProFiscalYearModel',
        'external_comments' => 'mixed',
        'general_assembly_date' => 'mixed',
        'heat_accounting' => 'mixed',
        'heating_central_maintenance' => 'mixed',
        'income_commercial_leases' => 'mixed',
        'income_property_charges' => 'mixed',
        'janitor' => 'mixed',
        'land_tax' => 'mixed',
        'latest_update' => 'mixed',
        'ongoing_maintenance' => 'mixed',
        'renovation' => 'mixed',
        'report_standard_version' => 'mixed',
        'rodent_control' => 'mixed',
        'total_income' => 'mixed',
        'file_token' => 'mixed',
        'gardener' => 'mixed',
        'income_other' => 'mixed',
        'income_parking_and_garages' => 'mixed',
        'stair_cleaning' => 'mixed',
        'water' => 'mixed',
        'window_cleaning' => 'mixed',
        'unspecified_taxes' => 'mixed',
        'other_expenses' => 'mixed',
        'other_facilities' => 'mixed',
        'income_residential_leases' => 'mixed',
        'income_commercial_share_charges' => 'mixed',
        'sidewalk_clearing' => 'mixed',
        'electrolysis' => 'mixed',
        'income_cellular_antennas' => 'mixed',
        'income_total_charges' => 'mixed',
        'total_administration_and_audit_expenses' => 'mixed',
        'total_janitor_and_cleaning_expenses' => 'mixed',
        'total_miscellaneous_expenses' => 'mixed',
        'income_club_rooms' => 'mixed',
        'income_banners' => 'mixed',
        'income_janitor' => 'mixed',
        'fire_alarm' => 'mixed',
        'dredging' => 'mixed',
        'ventilation' => 'mixed',
        'total_taxes' => 'mixed',
        'elevator' => 'mixed',
        'public_allowed' => 'mixed',
        'published_date' => 'mixed',
        'report_standard_name' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accountant' => null,
        'administration' => null,
        'approved_by_general_assembly' => null,
        'block_board' => null,
        'budget_end_date' => 'date',
        'budget_source_identifier' => null,
        'budget_source_name' => null,
        'budget_start_date' => 'date',
        'building_insurance' => null,
        'building_tax' => null,
        'cleaning' => null,
        'deleted' => null,
        'electricity' => null,
        'fiscal_year' => null,
        'external_comments' => null,
        'general_assembly_date' => 'date',
        'heat_accounting' => null,
        'heating_central_maintenance' => null,
        'income_commercial_leases' => null,
        'income_property_charges' => null,
        'janitor' => null,
        'land_tax' => null,
        'latest_update' => 'date',
        'ongoing_maintenance' => null,
        'renovation' => null,
        'report_standard_version' => null,
        'rodent_control' => null,
        'total_income' => null,
        'file_token' => null,
        'gardener' => null,
        'income_other' => null,
        'income_parking_and_garages' => null,
        'stair_cleaning' => null,
        'water' => null,
        'window_cleaning' => null,
        'unspecified_taxes' => null,
        'other_expenses' => null,
        'other_facilities' => null,
        'income_residential_leases' => null,
        'income_commercial_share_charges' => null,
        'sidewalk_clearing' => null,
        'electrolysis' => null,
        'income_cellular_antennas' => null,
        'income_total_charges' => null,
        'total_administration_and_audit_expenses' => null,
        'total_janitor_and_cleaning_expenses' => null,
        'total_miscellaneous_expenses' => null,
        'income_club_rooms' => null,
        'income_banners' => null,
        'income_janitor' => null,
        'fire_alarm' => null,
        'dredging' => null,
        'ventilation' => null,
        'total_taxes' => null,
        'elevator' => null,
        'public_allowed' => null,
        'published_date' => 'date',
        'report_standard_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accountant' => true,
		'administration' => true,
		'approved_by_general_assembly' => true,
		'block_board' => true,
		'budget_end_date' => true,
		'budget_source_identifier' => true,
		'budget_source_name' => true,
		'budget_start_date' => true,
		'building_insurance' => true,
		'building_tax' => true,
		'cleaning' => true,
		'deleted' => true,
		'electricity' => true,
		'fiscal_year' => false,
		'external_comments' => true,
		'general_assembly_date' => true,
		'heat_accounting' => true,
		'heating_central_maintenance' => true,
		'income_commercial_leases' => true,
		'income_property_charges' => true,
		'janitor' => true,
		'land_tax' => true,
		'latest_update' => true,
		'ongoing_maintenance' => true,
		'renovation' => true,
		'report_standard_version' => true,
		'rodent_control' => true,
		'total_income' => true,
		'file_token' => true,
		'gardener' => true,
		'income_other' => true,
		'income_parking_and_garages' => true,
		'stair_cleaning' => true,
		'water' => true,
		'window_cleaning' => true,
		'unspecified_taxes' => true,
		'other_expenses' => true,
		'other_facilities' => true,
		'income_residential_leases' => true,
		'income_commercial_share_charges' => true,
		'sidewalk_clearing' => true,
		'electrolysis' => true,
		'income_cellular_antennas' => true,
		'income_total_charges' => true,
		'total_administration_and_audit_expenses' => true,
		'total_janitor_and_cleaning_expenses' => true,
		'total_miscellaneous_expenses' => true,
		'income_club_rooms' => true,
		'income_banners' => true,
		'income_janitor' => true,
		'fire_alarm' => true,
		'dredging' => true,
		'ventilation' => true,
		'total_taxes' => true,
		'elevator' => true,
		'public_allowed' => true,
		'published_date' => true,
		'report_standard_name' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountant' => 'accountant',
        'administration' => 'administration',
        'approved_by_general_assembly' => 'approvedByGeneralAssembly',
        'block_board' => 'blockBoard',
        'budget_end_date' => 'budgetEndDate',
        'budget_source_identifier' => 'budgetSourceIdentifier',
        'budget_source_name' => 'budgetSourceName',
        'budget_start_date' => 'budgetStartDate',
        'building_insurance' => 'buildingInsurance',
        'building_tax' => 'buildingTax',
        'cleaning' => 'cleaning',
        'deleted' => 'deleted',
        'electricity' => 'electricity',
        'fiscal_year' => 'fiscalYear',
        'external_comments' => 'externalComments',
        'general_assembly_date' => 'generalAssemblyDate',
        'heat_accounting' => 'heatAccounting',
        'heating_central_maintenance' => 'heatingCentralMaintenance',
        'income_commercial_leases' => 'incomeCommercialLeases',
        'income_property_charges' => 'incomePropertyCharges',
        'janitor' => 'janitor',
        'land_tax' => 'landTax',
        'latest_update' => 'latestUpdate',
        'ongoing_maintenance' => 'ongoingMaintenance',
        'renovation' => 'renovation',
        'report_standard_version' => 'reportStandardVersion',
        'rodent_control' => 'rodentControl',
        'total_income' => 'totalIncome',
        'file_token' => 'fileToken',
        'gardener' => 'gardener',
        'income_other' => 'incomeOther',
        'income_parking_and_garages' => 'incomeParkingAndGarages',
        'stair_cleaning' => 'stairCleaning',
        'water' => 'water',
        'window_cleaning' => 'windowCleaning',
        'unspecified_taxes' => 'unspecifiedTaxes',
        'other_expenses' => 'otherExpenses',
        'other_facilities' => 'otherFacilities',
        'income_residential_leases' => 'incomeResidentialLeases',
        'income_commercial_share_charges' => 'incomeCommercialShareCharges',
        'sidewalk_clearing' => 'sidewalkClearing',
        'electrolysis' => 'electrolysis',
        'income_cellular_antennas' => 'incomeCellularAntennas',
        'income_total_charges' => 'incomeTotalCharges',
        'total_administration_and_audit_expenses' => 'totalAdministrationAndAuditExpenses',
        'total_janitor_and_cleaning_expenses' => 'totalJanitorAndCleaningExpenses',
        'total_miscellaneous_expenses' => 'totalMiscellaneousExpenses',
        'income_club_rooms' => 'incomeClubRooms',
        'income_banners' => 'incomeBanners',
        'income_janitor' => 'incomeJanitor',
        'fire_alarm' => 'fireAlarm',
        'dredging' => 'dredging',
        'ventilation' => 'ventilation',
        'total_taxes' => 'totalTaxes',
        'elevator' => 'elevator',
        'public_allowed' => 'publicAllowed',
        'published_date' => 'publishedDate',
        'report_standard_name' => 'reportStandardName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountant' => 'setAccountant',
        'administration' => 'setAdministration',
        'approved_by_general_assembly' => 'setApprovedByGeneralAssembly',
        'block_board' => 'setBlockBoard',
        'budget_end_date' => 'setBudgetEndDate',
        'budget_source_identifier' => 'setBudgetSourceIdentifier',
        'budget_source_name' => 'setBudgetSourceName',
        'budget_start_date' => 'setBudgetStartDate',
        'building_insurance' => 'setBuildingInsurance',
        'building_tax' => 'setBuildingTax',
        'cleaning' => 'setCleaning',
        'deleted' => 'setDeleted',
        'electricity' => 'setElectricity',
        'fiscal_year' => 'setFiscalYear',
        'external_comments' => 'setExternalComments',
        'general_assembly_date' => 'setGeneralAssemblyDate',
        'heat_accounting' => 'setHeatAccounting',
        'heating_central_maintenance' => 'setHeatingCentralMaintenance',
        'income_commercial_leases' => 'setIncomeCommercialLeases',
        'income_property_charges' => 'setIncomePropertyCharges',
        'janitor' => 'setJanitor',
        'land_tax' => 'setLandTax',
        'latest_update' => 'setLatestUpdate',
        'ongoing_maintenance' => 'setOngoingMaintenance',
        'renovation' => 'setRenovation',
        'report_standard_version' => 'setReportStandardVersion',
        'rodent_control' => 'setRodentControl',
        'total_income' => 'setTotalIncome',
        'file_token' => 'setFileToken',
        'gardener' => 'setGardener',
        'income_other' => 'setIncomeOther',
        'income_parking_and_garages' => 'setIncomeParkingAndGarages',
        'stair_cleaning' => 'setStairCleaning',
        'water' => 'setWater',
        'window_cleaning' => 'setWindowCleaning',
        'unspecified_taxes' => 'setUnspecifiedTaxes',
        'other_expenses' => 'setOtherExpenses',
        'other_facilities' => 'setOtherFacilities',
        'income_residential_leases' => 'setIncomeResidentialLeases',
        'income_commercial_share_charges' => 'setIncomeCommercialShareCharges',
        'sidewalk_clearing' => 'setSidewalkClearing',
        'electrolysis' => 'setElectrolysis',
        'income_cellular_antennas' => 'setIncomeCellularAntennas',
        'income_total_charges' => 'setIncomeTotalCharges',
        'total_administration_and_audit_expenses' => 'setTotalAdministrationAndAuditExpenses',
        'total_janitor_and_cleaning_expenses' => 'setTotalJanitorAndCleaningExpenses',
        'total_miscellaneous_expenses' => 'setTotalMiscellaneousExpenses',
        'income_club_rooms' => 'setIncomeClubRooms',
        'income_banners' => 'setIncomeBanners',
        'income_janitor' => 'setIncomeJanitor',
        'fire_alarm' => 'setFireAlarm',
        'dredging' => 'setDredging',
        'ventilation' => 'setVentilation',
        'total_taxes' => 'setTotalTaxes',
        'elevator' => 'setElevator',
        'public_allowed' => 'setPublicAllowed',
        'published_date' => 'setPublishedDate',
        'report_standard_name' => 'setReportStandardName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountant' => 'getAccountant',
        'administration' => 'getAdministration',
        'approved_by_general_assembly' => 'getApprovedByGeneralAssembly',
        'block_board' => 'getBlockBoard',
        'budget_end_date' => 'getBudgetEndDate',
        'budget_source_identifier' => 'getBudgetSourceIdentifier',
        'budget_source_name' => 'getBudgetSourceName',
        'budget_start_date' => 'getBudgetStartDate',
        'building_insurance' => 'getBuildingInsurance',
        'building_tax' => 'getBuildingTax',
        'cleaning' => 'getCleaning',
        'deleted' => 'getDeleted',
        'electricity' => 'getElectricity',
        'fiscal_year' => 'getFiscalYear',
        'external_comments' => 'getExternalComments',
        'general_assembly_date' => 'getGeneralAssemblyDate',
        'heat_accounting' => 'getHeatAccounting',
        'heating_central_maintenance' => 'getHeatingCentralMaintenance',
        'income_commercial_leases' => 'getIncomeCommercialLeases',
        'income_property_charges' => 'getIncomePropertyCharges',
        'janitor' => 'getJanitor',
        'land_tax' => 'getLandTax',
        'latest_update' => 'getLatestUpdate',
        'ongoing_maintenance' => 'getOngoingMaintenance',
        'renovation' => 'getRenovation',
        'report_standard_version' => 'getReportStandardVersion',
        'rodent_control' => 'getRodentControl',
        'total_income' => 'getTotalIncome',
        'file_token' => 'getFileToken',
        'gardener' => 'getGardener',
        'income_other' => 'getIncomeOther',
        'income_parking_and_garages' => 'getIncomeParkingAndGarages',
        'stair_cleaning' => 'getStairCleaning',
        'water' => 'getWater',
        'window_cleaning' => 'getWindowCleaning',
        'unspecified_taxes' => 'getUnspecifiedTaxes',
        'other_expenses' => 'getOtherExpenses',
        'other_facilities' => 'getOtherFacilities',
        'income_residential_leases' => 'getIncomeResidentialLeases',
        'income_commercial_share_charges' => 'getIncomeCommercialShareCharges',
        'sidewalk_clearing' => 'getSidewalkClearing',
        'electrolysis' => 'getElectrolysis',
        'income_cellular_antennas' => 'getIncomeCellularAntennas',
        'income_total_charges' => 'getIncomeTotalCharges',
        'total_administration_and_audit_expenses' => 'getTotalAdministrationAndAuditExpenses',
        'total_janitor_and_cleaning_expenses' => 'getTotalJanitorAndCleaningExpenses',
        'total_miscellaneous_expenses' => 'getTotalMiscellaneousExpenses',
        'income_club_rooms' => 'getIncomeClubRooms',
        'income_banners' => 'getIncomeBanners',
        'income_janitor' => 'getIncomeJanitor',
        'fire_alarm' => 'getFireAlarm',
        'dredging' => 'getDredging',
        'ventilation' => 'getVentilation',
        'total_taxes' => 'getTotalTaxes',
        'elevator' => 'getElevator',
        'public_allowed' => 'getPublicAllowed',
        'published_date' => 'getPublishedDate',
        'report_standard_name' => 'getReportStandardName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('accountant', $data ?? [], null);
        $this->setIfExists('administration', $data ?? [], null);
        $this->setIfExists('approved_by_general_assembly', $data ?? [], null);
        $this->setIfExists('block_board', $data ?? [], null);
        $this->setIfExists('budget_end_date', $data ?? [], null);
        $this->setIfExists('budget_source_identifier', $data ?? [], null);
        $this->setIfExists('budget_source_name', $data ?? [], null);
        $this->setIfExists('budget_start_date', $data ?? [], null);
        $this->setIfExists('building_insurance', $data ?? [], null);
        $this->setIfExists('building_tax', $data ?? [], null);
        $this->setIfExists('cleaning', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('electricity', $data ?? [], null);
        $this->setIfExists('fiscal_year', $data ?? [], null);
        $this->setIfExists('external_comments', $data ?? [], null);
        $this->setIfExists('general_assembly_date', $data ?? [], null);
        $this->setIfExists('heat_accounting', $data ?? [], null);
        $this->setIfExists('heating_central_maintenance', $data ?? [], null);
        $this->setIfExists('income_commercial_leases', $data ?? [], null);
        $this->setIfExists('income_property_charges', $data ?? [], null);
        $this->setIfExists('janitor', $data ?? [], null);
        $this->setIfExists('land_tax', $data ?? [], null);
        $this->setIfExists('latest_update', $data ?? [], null);
        $this->setIfExists('ongoing_maintenance', $data ?? [], null);
        $this->setIfExists('renovation', $data ?? [], null);
        $this->setIfExists('report_standard_version', $data ?? [], null);
        $this->setIfExists('rodent_control', $data ?? [], null);
        $this->setIfExists('total_income', $data ?? [], null);
        $this->setIfExists('file_token', $data ?? [], null);
        $this->setIfExists('gardener', $data ?? [], null);
        $this->setIfExists('income_other', $data ?? [], null);
        $this->setIfExists('income_parking_and_garages', $data ?? [], null);
        $this->setIfExists('stair_cleaning', $data ?? [], null);
        $this->setIfExists('water', $data ?? [], null);
        $this->setIfExists('window_cleaning', $data ?? [], null);
        $this->setIfExists('unspecified_taxes', $data ?? [], null);
        $this->setIfExists('other_expenses', $data ?? [], null);
        $this->setIfExists('other_facilities', $data ?? [], null);
        $this->setIfExists('income_residential_leases', $data ?? [], null);
        $this->setIfExists('income_commercial_share_charges', $data ?? [], null);
        $this->setIfExists('sidewalk_clearing', $data ?? [], null);
        $this->setIfExists('electrolysis', $data ?? [], null);
        $this->setIfExists('income_cellular_antennas', $data ?? [], null);
        $this->setIfExists('income_total_charges', $data ?? [], null);
        $this->setIfExists('total_administration_and_audit_expenses', $data ?? [], null);
        $this->setIfExists('total_janitor_and_cleaning_expenses', $data ?? [], null);
        $this->setIfExists('total_miscellaneous_expenses', $data ?? [], null);
        $this->setIfExists('income_club_rooms', $data ?? [], null);
        $this->setIfExists('income_banners', $data ?? [], null);
        $this->setIfExists('income_janitor', $data ?? [], null);
        $this->setIfExists('fire_alarm', $data ?? [], null);
        $this->setIfExists('dredging', $data ?? [], null);
        $this->setIfExists('ventilation', $data ?? [], null);
        $this->setIfExists('total_taxes', $data ?? [], null);
        $this->setIfExists('elevator', $data ?? [], null);
        $this->setIfExists('public_allowed', $data ?? [], null);
        $this->setIfExists('published_date', $data ?? [], null);
        $this->setIfExists('report_standard_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['budget_start_date'] === null) {
            $invalidProperties[] = "'budget_start_date' can't be null";
        }
        if ($this->container['deleted'] === null) {
            $invalidProperties[] = "'deleted' can't be null";
        }
        if ($this->container['latest_update'] === null) {
            $invalidProperties[] = "'latest_update' can't be null";
        }
        if ($this->container['report_standard_version'] === null) {
            $invalidProperties[] = "'report_standard_version' can't be null";
        }
        if ($this->container['total_income'] === null) {
            $invalidProperties[] = "'total_income' can't be null";
        }
        if ($this->container['file_token'] === null) {
            $invalidProperties[] = "'file_token' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountant
     *
     * @return mixed|null
     */
    public function getAccountant()
    {
        return $this->container['accountant'];
    }

    /**
     * Sets accountant
     *
     * @param mixed|null $accountant accountant
     *
     * @return self
     */
    public function setAccountant($accountant)
    {
        if (is_null($accountant)) {
            array_push($this->openAPINullablesSetToNull, 'accountant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accountant'] = $accountant;

        return $this;
    }

    /**
     * Gets administration
     *
     * @return mixed|null
     */
    public function getAdministration()
    {
        return $this->container['administration'];
    }

    /**
     * Sets administration
     *
     * @param mixed|null $administration Administration og revision i alt
     *
     * @return self
     */
    public function setAdministration($administration)
    {
        if (is_null($administration)) {
            array_push($this->openAPINullablesSetToNull, 'administration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('administration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['administration'] = $administration;

        return $this;
    }

    /**
     * Gets approved_by_general_assembly
     *
     * @return mixed|null
     */
    public function getApprovedByGeneralAssembly()
    {
        return $this->container['approved_by_general_assembly'];
    }

    /**
     * Sets approved_by_general_assembly
     *
     * @param mixed|null $approved_by_general_assembly Er budgettet godkendt pÃ¥ generalforsamling
     *
     * @return self
     */
    public function setApprovedByGeneralAssembly($approved_by_general_assembly)
    {
        if (is_null($approved_by_general_assembly)) {
            array_push($this->openAPINullablesSetToNull, 'approved_by_general_assembly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approved_by_general_assembly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approved_by_general_assembly'] = $approved_by_general_assembly;

        return $this;
    }

    /**
     * Gets block_board
     *
     * @return mixed|null
     */
    public function getBlockBoard()
    {
        return $this->container['block_board'];
    }

    /**
     * Sets block_board
     *
     * @param mixed|null $block_board block_board
     *
     * @return self
     */
    public function setBlockBoard($block_board)
    {
        if (is_null($block_board)) {
            array_push($this->openAPINullablesSetToNull, 'block_board');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_board', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['block_board'] = $block_board;

        return $this;
    }

    /**
     * Gets budget_end_date
     *
     * @return mixed|null
     */
    public function getBudgetEndDate()
    {
        return $this->container['budget_end_date'];
    }

    /**
     * Sets budget_end_date
     *
     * @param mixed|null $budget_end_date Sidste dato i budgetÃ¥ret
     *
     * @return self
     */
    public function setBudgetEndDate($budget_end_date)
    {
        if (is_null($budget_end_date)) {
            array_push($this->openAPINullablesSetToNull, 'budget_end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('budget_end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['budget_end_date'] = $budget_end_date;

        return $this;
    }

    /**
     * Gets budget_source_identifier
     *
     * @return mixed|null
     */
    public function getBudgetSourceIdentifier()
    {
        return $this->container['budget_source_identifier'];
    }

    /**
     * Sets budget_source_identifier
     *
     * @param mixed|null $budget_source_identifier Budgetkilde ID
     *
     * @return self
     */
    public function setBudgetSourceIdentifier($budget_source_identifier)
    {
        if (is_null($budget_source_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'budget_source_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('budget_source_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['budget_source_identifier'] = $budget_source_identifier;

        return $this;
    }

    /**
     * Gets budget_source_name
     *
     * @return mixed|null
     */
    public function getBudgetSourceName()
    {
        return $this->container['budget_source_name'];
    }

    /**
     * Sets budget_source_name
     *
     * @param mixed|null $budget_source_name Budgetkildens navn
     *
     * @return self
     */
    public function setBudgetSourceName($budget_source_name)
    {
        if (is_null($budget_source_name)) {
            array_push($this->openAPINullablesSetToNull, 'budget_source_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('budget_source_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['budget_source_name'] = $budget_source_name;

        return $this;
    }

    /**
     * Gets budget_start_date
     *
     * @return mixed
     */
    public function getBudgetStartDate()
    {
        return $this->container['budget_start_date'];
    }

    /**
     * Sets budget_start_date
     *
     * @param mixed $budget_start_date FÃ¸rste dato i budgetÃ¥ret
     *
     * @return self
     */
    public function setBudgetStartDate($budget_start_date)
    {
        if (is_null($budget_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'budget_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('budget_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['budget_start_date'] = $budget_start_date;

        return $this;
    }

    /**
     * Gets building_insurance
     *
     * @return mixed|null
     */
    public function getBuildingInsurance()
    {
        return $this->container['building_insurance'];
    }

    /**
     * Sets building_insurance
     *
     * @param mixed|null $building_insurance Bygningsforsikring
     *
     * @return self
     */
    public function setBuildingInsurance($building_insurance)
    {
        if (is_null($building_insurance)) {
            array_push($this->openAPINullablesSetToNull, 'building_insurance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_insurance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_insurance'] = $building_insurance;

        return $this;
    }

    /**
     * Gets building_tax
     *
     * @return mixed|null
     */
    public function getBuildingTax()
    {
        return $this->container['building_tax'];
    }

    /**
     * Sets building_tax
     *
     * @param mixed|null $building_tax DÃ¦kningsafgift
     *
     * @return self
     */
    public function setBuildingTax($building_tax)
    {
        if (is_null($building_tax)) {
            array_push($this->openAPINullablesSetToNull, 'building_tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_tax'] = $building_tax;

        return $this;
    }

    /**
     * Gets cleaning
     *
     * @return mixed|null
     */
    public function getCleaning()
    {
        return $this->container['cleaning'];
    }

    /**
     * Sets cleaning
     *
     * @param mixed|null $cleaning Renholdelse inkl. rengÃ¸ringsartikler
     *
     * @return self
     */
    public function setCleaning($cleaning)
    {
        if (is_null($cleaning)) {
            array_push($this->openAPINullablesSetToNull, 'cleaning');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cleaning', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cleaning'] = $cleaning;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return mixed
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param mixed $deleted Er budgettet markeret til sletning
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            array_push($this->openAPINullablesSetToNull, 'deleted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets electricity
     *
     * @return mixed|null
     */
    public function getElectricity()
    {
        return $this->container['electricity'];
    }

    /**
     * Sets electricity
     *
     * @param mixed|null $electricity Elektricitet
     *
     * @return self
     */
    public function setElectricity($electricity)
    {
        if (is_null($electricity)) {
            array_push($this->openAPINullablesSetToNull, 'electricity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('electricity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['electricity'] = $electricity;

        return $this;
    }

    /**
     * Gets fiscal_year
     *
     * @return \OpenAPI\Client\Model\DomusProFiscalYearModel|null
     */
    public function getFiscalYear()
    {
        return $this->container['fiscal_year'];
    }

    /**
     * Sets fiscal_year
     *
     * @param \OpenAPI\Client\Model\DomusProFiscalYearModel|null $fiscal_year fiscal_year
     *
     * @return self
     */
    public function setFiscalYear($fiscal_year)
    {
        if (is_null($fiscal_year)) {
            throw new \InvalidArgumentException('non-nullable fiscal_year cannot be null');
        }
        $this->container['fiscal_year'] = $fiscal_year;

        return $this;
    }

    /**
     * Gets external_comments
     *
     * @return mixed|null
     */
    public function getExternalComments()
    {
        return $this->container['external_comments'];
    }

    /**
     * Sets external_comments
     *
     * @param mixed|null $external_comments Eksterne bemÃ¦rkninger
     *
     * @return self
     */
    public function setExternalComments($external_comments)
    {
        if (is_null($external_comments)) {
            array_push($this->openAPINullablesSetToNull, 'external_comments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_comments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_comments'] = $external_comments;

        return $this;
    }

    /**
     * Gets general_assembly_date
     *
     * @return mixed|null
     */
    public function getGeneralAssemblyDate()
    {
        return $this->container['general_assembly_date'];
    }

    /**
     * Sets general_assembly_date
     *
     * @param mixed|null $general_assembly_date Generalforsamlingsdato, hvor budgettet er vedtaget
     *
     * @return self
     */
    public function setGeneralAssemblyDate($general_assembly_date)
    {
        if (is_null($general_assembly_date)) {
            array_push($this->openAPINullablesSetToNull, 'general_assembly_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('general_assembly_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['general_assembly_date'] = $general_assembly_date;

        return $this;
    }

    /**
     * Gets heat_accounting
     *
     * @return mixed|null
     */
    public function getHeatAccounting()
    {
        return $this->container['heat_accounting'];
    }

    /**
     * Sets heat_accounting
     *
     * @param mixed|null $heat_accounting Udgift til udarbejdelse af regnskab for varme. Selve varmeudgifterne er ikke inkluderet, da de pÃ¥fÃ¸res andelshaverne og lejerne
     *
     * @return self
     */
    public function setHeatAccounting($heat_accounting)
    {
        if (is_null($heat_accounting)) {
            array_push($this->openAPINullablesSetToNull, 'heat_accounting');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('heat_accounting', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['heat_accounting'] = $heat_accounting;

        return $this;
    }

    /**
     * Gets heating_central_maintenance
     *
     * @return mixed|null
     */
    public function getHeatingCentralMaintenance()
    {
        return $this->container['heating_central_maintenance'];
    }

    /**
     * Sets heating_central_maintenance
     *
     * @param mixed|null $heating_central_maintenance Servicearbejde pÃ¥ varmecentral
     *
     * @return self
     */
    public function setHeatingCentralMaintenance($heating_central_maintenance)
    {
        if (is_null($heating_central_maintenance)) {
            array_push($this->openAPINullablesSetToNull, 'heating_central_maintenance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('heating_central_maintenance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['heating_central_maintenance'] = $heating_central_maintenance;

        return $this;
    }

    /**
     * Gets income_commercial_leases
     *
     * @return mixed|null
     */
    public function getIncomeCommercialLeases()
    {
        return $this->container['income_commercial_leases'];
    }

    /**
     * Sets income_commercial_leases
     *
     * @param mixed|null $income_commercial_leases Erhvervsleje. ErhvervslejemÃ¥l. IndtÃ¦gt svarende til B4-enhederne
     *
     * @return self
     */
    public function setIncomeCommercialLeases($income_commercial_leases)
    {
        if (is_null($income_commercial_leases)) {
            array_push($this->openAPINullablesSetToNull, 'income_commercial_leases');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('income_commercial_leases', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['income_commercial_leases'] = $income_commercial_leases;

        return $this;
    }

    /**
     * Gets income_property_charges
     *
     * @return mixed|null
     */
    public function getIncomePropertyCharges()
    {
        return $this->container['income_property_charges'];
    }

    /**
     * Sets income_property_charges
     *
     * @param mixed|null $income_property_charges Boligafgift. Andelsboliger. IndtÃ¦gt svarende til B1-enhederne bortset fra at vicevÃ¦rt/klubvÃ¦relser kan vÃ¦re trukket fra
     *
     * @return self
     */
    public function setIncomePropertyCharges($income_property_charges)
    {
        if (is_null($income_property_charges)) {
            array_push($this->openAPINullablesSetToNull, 'income_property_charges');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('income_property_charges', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['income_property_charges'] = $income_property_charges;

        return $this;
    }

    /**
     * Gets janitor
     *
     * @return mixed|null
     */
    public function getJanitor()
    {
        return $this->container['janitor'];
    }

    /**
     * Sets janitor
     *
     * @param mixed|null $janitor VicevÃ¦rt - uanset om det er lÃ¸n eller faktura
     *
     * @return self
     */
    public function setJanitor($janitor)
    {
        if (is_null($janitor)) {
            array_push($this->openAPINullablesSetToNull, 'janitor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('janitor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['janitor'] = $janitor;

        return $this;
    }

    /**
     * Gets land_tax
     *
     * @return mixed|null
     */
    public function getLandTax()
    {
        return $this->container['land_tax'];
    }

    /**
     * Sets land_tax
     *
     * @param mixed|null $land_tax Grundskyld
     *
     * @return self
     */
    public function setLandTax($land_tax)
    {
        if (is_null($land_tax)) {
            array_push($this->openAPINullablesSetToNull, 'land_tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('land_tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['land_tax'] = $land_tax;

        return $this;
    }

    /**
     * Gets latest_update
     *
     * @return mixed
     */
    public function getLatestUpdate()
    {
        return $this->container['latest_update'];
    }

    /**
     * Sets latest_update
     *
     * @param mixed $latest_update Senest opdateret
     *
     * @return self
     */
    public function setLatestUpdate($latest_update)
    {
        if (is_null($latest_update)) {
            array_push($this->openAPINullablesSetToNull, 'latest_update');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('latest_update', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['latest_update'] = $latest_update;

        return $this;
    }

    /**
     * Gets ongoing_maintenance
     *
     * @return mixed|null
     */
    public function getOngoingMaintenance()
    {
        return $this->container['ongoing_maintenance'];
    }

    /**
     * Sets ongoing_maintenance
     *
     * @param mixed|null $ongoing_maintenance LÃ¸bende vedligeholdelse. Foreninger, der ikke udspecificerer under Diverse har mÃ¥ske en flydende grÃ¦nse mellem lÃ¸bende vedligehold og posterne under Diverse
     *
     * @return self
     */
    public function setOngoingMaintenance($ongoing_maintenance)
    {
        if (is_null($ongoing_maintenance)) {
            array_push($this->openAPINullablesSetToNull, 'ongoing_maintenance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ongoing_maintenance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ongoing_maintenance'] = $ongoing_maintenance;

        return $this;
    }

    /**
     * Gets renovation
     *
     * @return mixed|null
     */
    public function getRenovation()
    {
        return $this->container['renovation'];
    }

    /**
     * Sets renovation
     *
     * @param mixed|null $renovation Renovation
     *
     * @return self
     */
    public function setRenovation($renovation)
    {
        if (is_null($renovation)) {
            array_push($this->openAPINullablesSetToNull, 'renovation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('renovation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['renovation'] = $renovation;

        return $this;
    }

    /**
     * Gets report_standard_version
     *
     * @return mixed
     */
    public function getReportStandardVersion()
    {
        return $this->container['report_standard_version'];
    }

    /**
     * Sets report_standard_version
     *
     * @param mixed $report_standard_version Regnskabsstandards version
     *
     * @return self
     */
    public function setReportStandardVersion($report_standard_version)
    {
        if (is_null($report_standard_version)) {
            array_push($this->openAPINullablesSetToNull, 'report_standard_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_standard_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['report_standard_version'] = $report_standard_version;

        return $this;
    }

    /**
     * Gets rodent_control
     *
     * @return mixed|null
     */
    public function getRodentControl()
    {
        return $this->container['rodent_control'];
    }

    /**
     * Sets rodent_control
     *
     * @param mixed|null $rodent_control RottebekÃ¦mpelse
     *
     * @return self
     */
    public function setRodentControl($rodent_control)
    {
        if (is_null($rodent_control)) {
            array_push($this->openAPINullablesSetToNull, 'rodent_control');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rodent_control', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rodent_control'] = $rodent_control;

        return $this;
    }

    /**
     * Gets total_income
     *
     * @return mixed
     */
    public function getTotalIncome()
    {
        return $this->container['total_income'];
    }

    /**
     * Sets total_income
     *
     * @param mixed $total_income IndtÃ¦gter i alt
     *
     * @return self
     */
    public function setTotalIncome($total_income)
    {
        if (is_null($total_income)) {
            array_push($this->openAPINullablesSetToNull, 'total_income');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_income', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_income'] = $total_income;

        return $this;
    }

    /**
     * Gets file_token
     *
     * @return mixed
     */
    public function getFileToken()
    {
        return $this->container['file_token'];
    }

    /**
     * Sets file_token
     *
     * @param mixed $file_token Filetoken which can be used in fetchFile method of document Webservice
     *
     * @return self
     */
    public function setFileToken($file_token)
    {
        if (is_null($file_token)) {
            array_push($this->openAPINullablesSetToNull, 'file_token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_token'] = $file_token;

        return $this;
    }

    /**
     * Gets gardener
     *
     * @return mixed|null
     */
    public function getGardener()
    {
        return $this->container['gardener'];
    }

    /**
     * Sets gardener
     *
     * @param mixed|null $gardener Gartner/grÃ¸nne arealer/gÃ¥rd
     *
     * @return self
     */
    public function setGardener($gardener)
    {
        if (is_null($gardener)) {
            array_push($this->openAPINullablesSetToNull, 'gardener');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gardener', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gardener'] = $gardener;

        return $this;
    }

    /**
     * Gets income_other
     *
     * @return mixed|null
     */
    public function getIncomeOther()
    {
        return $this->container['income_other'];
    }

    /**
     * Sets income_other
     *
     * @param mixed|null $income_other IndtÃ¦gter, der ikke er med i Ã¸vrige indtÃ¦gtsfelter - dog ikke antenneforening samt vaskeri
     *
     * @return self
     */
    public function setIncomeOther($income_other)
    {
        if (is_null($income_other)) {
            array_push($this->openAPINullablesSetToNull, 'income_other');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('income_other', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['income_other'] = $income_other;

        return $this;
    }

    /**
     * Gets income_parking_and_garages
     *
     * @return mixed|null
     */
    public function getIncomeParkingAndGarages()
    {
        return $this->container['income_parking_and_garages'];
    }

    /**
     * Sets income_parking_and_garages
     *
     * @param mixed|null $income_parking_and_garages LejeindtÃ¦gter fra garager, p-plads og kÃ¦ldre. Nogenlunde svarende til B5-enhederne
     *
     * @return self
     */
    public function setIncomeParkingAndGarages($income_parking_and_garages)
    {
        if (is_null($income_parking_and_garages)) {
            array_push($this->openAPINullablesSetToNull, 'income_parking_and_garages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('income_parking_and_garages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['income_parking_and_garages'] = $income_parking_and_garages;

        return $this;
    }

    /**
     * Gets stair_cleaning
     *
     * @return mixed|null
     */
    public function getStairCleaning()
    {
        return $this->container['stair_cleaning'];
    }

    /**
     * Sets stair_cleaning
     *
     * @param mixed|null $stair_cleaning Trappevask
     *
     * @return self
     */
    public function setStairCleaning($stair_cleaning)
    {
        if (is_null($stair_cleaning)) {
            array_push($this->openAPINullablesSetToNull, 'stair_cleaning');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stair_cleaning', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stair_cleaning'] = $stair_cleaning;

        return $this;
    }

    /**
     * Gets water
     *
     * @return mixed|null
     */
    public function getWater()
    {
        return $this->container['water'];
    }

    /**
     * Sets water
     *
     * @param mixed|null $water water
     *
     * @return self
     */
    public function setWater($water)
    {
        if (is_null($water)) {
            array_push($this->openAPINullablesSetToNull, 'water');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('water', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['water'] = $water;

        return $this;
    }

    /**
     * Gets window_cleaning
     *
     * @return mixed|null
     */
    public function getWindowCleaning()
    {
        return $this->container['window_cleaning'];
    }

    /**
     * Sets window_cleaning
     *
     * @param mixed|null $window_cleaning Vinduespolering
     *
     * @return self
     */
    public function setWindowCleaning($window_cleaning)
    {
        if (is_null($window_cleaning)) {
            array_push($this->openAPINullablesSetToNull, 'window_cleaning');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('window_cleaning', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['window_cleaning'] = $window_cleaning;

        return $this;
    }

    /**
     * Gets unspecified_taxes
     *
     * @return mixed|null
     */
    public function getUnspecifiedTaxes()
    {
        return $this->container['unspecified_taxes'];
    }

    /**
     * Sets unspecified_taxes
     *
     * @param mixed|null $unspecified_taxes Uspecificerede skatter og afgifter
     *
     * @return self
     */
    public function setUnspecifiedTaxes($unspecified_taxes)
    {
        if (is_null($unspecified_taxes)) {
            array_push($this->openAPINullablesSetToNull, 'unspecified_taxes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unspecified_taxes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unspecified_taxes'] = $unspecified_taxes;

        return $this;
    }

    /**
     * Gets other_expenses
     *
     * @return mixed|null
     */
    public function getOtherExpenses()
    {
        return $this->container['other_expenses'];
    }

    /**
     * Sets other_expenses
     *
     * @param mixed|null $other_expenses Ã˜vrige udgifter
     *
     * @return self
     */
    public function setOtherExpenses($other_expenses)
    {
        if (is_null($other_expenses)) {
            array_push($this->openAPINullablesSetToNull, 'other_expenses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_expenses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['other_expenses'] = $other_expenses;

        return $this;
    }

    /**
     * Gets other_facilities
     *
     * @return mixed|null
     */
    public function getOtherFacilities()
    {
        return $this->container['other_facilities'];
    }

    /**
     * Sets other_facilities
     *
     * @param mixed|null $other_facilities Andre anlÃ¦g
     *
     * @return self
     */
    public function setOtherFacilities($other_facilities)
    {
        if (is_null($other_facilities)) {
            array_push($this->openAPINullablesSetToNull, 'other_facilities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_facilities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['other_facilities'] = $other_facilities;

        return $this;
    }

    /**
     * Gets income_residential_leases
     *
     * @return mixed|null
     */
    public function getIncomeResidentialLeases()
    {
        return $this->container['income_residential_leases'];
    }

    /**
     * Sets income_residential_leases
     *
     * @param mixed|null $income_residential_leases Boligleje. BoliglejemÃ¥l. IndtÃ¦gt svarende til B3-enhederne bortset fra at vicevÃ¦rt/klubvÃ¦relser kan vÃ¦re trukket fra
     *
     * @return self
     */
    public function setIncomeResidentialLeases($income_residential_leases)
    {
        if (is_null($income_residential_leases)) {
            array_push($this->openAPINullablesSetToNull, 'income_residential_leases');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('income_residential_leases', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['income_residential_leases'] = $income_residential_leases;

        return $this;
    }

    /**
     * Gets income_commercial_share_charges
     *
     * @return mixed|null
     */
    public function getIncomeCommercialShareCharges()
    {
        return $this->container['income_commercial_share_charges'];
    }

    /**
     * Sets income_commercial_share_charges
     *
     * @param mixed|null $income_commercial_share_charges Erhvervafgift. Erhvervsandele. IndtÃ¦gt svarende til B2-enhederne
     *
     * @return self
     */
    public function setIncomeCommercialShareCharges($income_commercial_share_charges)
    {
        if (is_null($income_commercial_share_charges)) {
            array_push($this->openAPINullablesSetToNull, 'income_commercial_share_charges');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('income_commercial_share_charges', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['income_commercial_share_charges'] = $income_commercial_share_charges;

        return $this;
    }

    /**
     * Gets sidewalk_clearing
     *
     * @return mixed|null
     */
    public function getSidewalkClearing()
    {
        return $this->container['sidewalk_clearing'];
    }

    /**
     * Sets sidewalk_clearing
     *
     * @param mixed|null $sidewalk_clearing Renholdelse af fortov nÃ¥r der skal betales til det offentlige for det.
     *
     * @return self
     */
    public function setSidewalkClearing($sidewalk_clearing)
    {
        if (is_null($sidewalk_clearing)) {
            array_push($this->openAPINullablesSetToNull, 'sidewalk_clearing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sidewalk_clearing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sidewalk_clearing'] = $sidewalk_clearing;

        return $this;
    }

    /**
     * Gets electrolysis
     *
     * @return mixed|null
     */
    public function getElectrolysis()
    {
        return $this->container['electrolysis'];
    }

    /**
     * Sets electrolysis
     *
     * @param mixed|null $electrolysis Elektrolyse
     *
     * @return self
     */
    public function setElectrolysis($electrolysis)
    {
        if (is_null($electrolysis)) {
            array_push($this->openAPINullablesSetToNull, 'electrolysis');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('electrolysis', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['electrolysis'] = $electrolysis;

        return $this;
    }

    /**
     * Gets income_cellular_antennas
     *
     * @return mixed|null
     */
    public function getIncomeCellularAntennas()
    {
        return $this->container['income_cellular_antennas'];
    }

    /**
     * Sets income_cellular_antennas
     *
     * @param mixed|null $income_cellular_antennas IndtÃ¦gter fra mobilantenner
     *
     * @return self
     */
    public function setIncomeCellularAntennas($income_cellular_antennas)
    {
        if (is_null($income_cellular_antennas)) {
            array_push($this->openAPINullablesSetToNull, 'income_cellular_antennas');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('income_cellular_antennas', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['income_cellular_antennas'] = $income_cellular_antennas;

        return $this;
    }

    /**
     * Gets income_total_charges
     *
     * @return mixed|null
     */
    public function getIncomeTotalCharges()
    {
        return $this->container['income_total_charges'];
    }

    /**
     * Sets income_total_charges
     *
     * @param mixed|null $income_total_charges Bolig- og erhvervsafgift
     *
     * @return self
     */
    public function setIncomeTotalCharges($income_total_charges)
    {
        if (is_null($income_total_charges)) {
            array_push($this->openAPINullablesSetToNull, 'income_total_charges');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('income_total_charges', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['income_total_charges'] = $income_total_charges;

        return $this;
    }

    /**
     * Gets total_administration_and_audit_expenses
     *
     * @return mixed|null
     */
    public function getTotalAdministrationAndAuditExpenses()
    {
        return $this->container['total_administration_and_audit_expenses'];
    }

    /**
     * Sets total_administration_and_audit_expenses
     *
     * @param mixed|null $total_administration_and_audit_expenses Administration og revision i alt
     *
     * @return self
     */
    public function setTotalAdministrationAndAuditExpenses($total_administration_and_audit_expenses)
    {
        if (is_null($total_administration_and_audit_expenses)) {
            array_push($this->openAPINullablesSetToNull, 'total_administration_and_audit_expenses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_administration_and_audit_expenses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_administration_and_audit_expenses'] = $total_administration_and_audit_expenses;

        return $this;
    }

    /**
     * Gets total_janitor_and_cleaning_expenses
     *
     * @return mixed|null
     */
    public function getTotalJanitorAndCleaningExpenses()
    {
        return $this->container['total_janitor_and_cleaning_expenses'];
    }

    /**
     * Sets total_janitor_and_cleaning_expenses
     *
     * @param mixed|null $total_janitor_and_cleaning_expenses VicevÃ¦rt og rengÃ¸ring mm. i alt
     *
     * @return self
     */
    public function setTotalJanitorAndCleaningExpenses($total_janitor_and_cleaning_expenses)
    {
        if (is_null($total_janitor_and_cleaning_expenses)) {
            array_push($this->openAPINullablesSetToNull, 'total_janitor_and_cleaning_expenses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_janitor_and_cleaning_expenses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_janitor_and_cleaning_expenses'] = $total_janitor_and_cleaning_expenses;

        return $this;
    }

    /**
     * Gets total_miscellaneous_expenses
     *
     * @return mixed|null
     */
    public function getTotalMiscellaneousExpenses()
    {
        return $this->container['total_miscellaneous_expenses'];
    }

    /**
     * Sets total_miscellaneous_expenses
     *
     * @param mixed|null $total_miscellaneous_expenses Diverse udgifter i alt
     *
     * @return self
     */
    public function setTotalMiscellaneousExpenses($total_miscellaneous_expenses)
    {
        if (is_null($total_miscellaneous_expenses)) {
            array_push($this->openAPINullablesSetToNull, 'total_miscellaneous_expenses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_miscellaneous_expenses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_miscellaneous_expenses'] = $total_miscellaneous_expenses;

        return $this;
    }

    /**
     * Gets income_club_rooms
     *
     * @return mixed|null
     */
    public function getIncomeClubRooms()
    {
        return $this->container['income_club_rooms'];
    }

    /**
     * Sets income_club_rooms
     *
     * @param mixed|null $income_club_rooms LejeindtÃ¦gter fra klubvÃ¦relser
     *
     * @return self
     */
    public function setIncomeClubRooms($income_club_rooms)
    {
        if (is_null($income_club_rooms)) {
            array_push($this->openAPINullablesSetToNull, 'income_club_rooms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('income_club_rooms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['income_club_rooms'] = $income_club_rooms;

        return $this;
    }

    /**
     * Gets income_banners
     *
     * @return mixed|null
     */
    public function getIncomeBanners()
    {
        return $this->container['income_banners'];
    }

    /**
     * Sets income_banners
     *
     * @param mixed|null $income_banners IndtÃ¦gter fra gavlreklamer, tagreklamer ol. fastinstallerede reklamer
     *
     * @return self
     */
    public function setIncomeBanners($income_banners)
    {
        if (is_null($income_banners)) {
            array_push($this->openAPINullablesSetToNull, 'income_banners');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('income_banners', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['income_banners'] = $income_banners;

        return $this;
    }

    /**
     * Gets income_janitor
     *
     * @return mixed|null
     */
    public function getIncomeJanitor()
    {
        return $this->container['income_janitor'];
    }

    /**
     * Sets income_janitor
     *
     * @param mixed|null $income_janitor LejeindtÃ¦gter fra vicevÃ¦rtbolig
     *
     * @return self
     */
    public function setIncomeJanitor($income_janitor)
    {
        if (is_null($income_janitor)) {
            array_push($this->openAPINullablesSetToNull, 'income_janitor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('income_janitor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['income_janitor'] = $income_janitor;

        return $this;
    }

    /**
     * Gets fire_alarm
     *
     * @return mixed|null
     */
    public function getFireAlarm()
    {
        return $this->container['fire_alarm'];
    }

    /**
     * Sets fire_alarm
     *
     * @param mixed|null $fire_alarm BrandmeldeanlÃ¦g
     *
     * @return self
     */
    public function setFireAlarm($fire_alarm)
    {
        if (is_null($fire_alarm)) {
            array_push($this->openAPINullablesSetToNull, 'fire_alarm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fire_alarm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fire_alarm'] = $fire_alarm;

        return $this;
    }

    /**
     * Gets dredging
     *
     * @return mixed|null
     */
    public function getDredging()
    {
        return $this->container['dredging'];
    }

    /**
     * Sets dredging
     *
     * @param mixed|null $dredging Slamsugning
     *
     * @return self
     */
    public function setDredging($dredging)
    {
        if (is_null($dredging)) {
            array_push($this->openAPINullablesSetToNull, 'dredging');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dredging', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dredging'] = $dredging;

        return $this;
    }

    /**
     * Gets ventilation
     *
     * @return mixed|null
     */
    public function getVentilation()
    {
        return $this->container['ventilation'];
    }

    /**
     * Sets ventilation
     *
     * @param mixed|null $ventilation Ventilation
     *
     * @return self
     */
    public function setVentilation($ventilation)
    {
        if (is_null($ventilation)) {
            array_push($this->openAPINullablesSetToNull, 'ventilation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ventilation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ventilation'] = $ventilation;

        return $this;
    }

    /**
     * Gets total_taxes
     *
     * @return mixed|null
     */
    public function getTotalTaxes()
    {
        return $this->container['total_taxes'];
    }

    /**
     * Sets total_taxes
     *
     * @param mixed|null $total_taxes Skatter og afgifter i alt
     *
     * @return self
     */
    public function setTotalTaxes($total_taxes)
    {
        if (is_null($total_taxes)) {
            array_push($this->openAPINullablesSetToNull, 'total_taxes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_taxes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_taxes'] = $total_taxes;

        return $this;
    }

    /**
     * Gets elevator
     *
     * @return mixed|null
     */
    public function getElevator()
    {
        return $this->container['elevator'];
    }

    /**
     * Sets elevator
     *
     * @param mixed|null $elevator Elevator
     *
     * @return self
     */
    public function setElevator($elevator)
    {
        if (is_null($elevator)) {
            array_push($this->openAPINullablesSetToNull, 'elevator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('elevator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['elevator'] = $elevator;

        return $this;
    }

    /**
     * Gets public_allowed
     *
     * @return mixed|null
     */
    public function getPublicAllowed()
    {
        return $this->container['public_allowed'];
    }

    /**
     * Sets public_allowed
     *
     * @param mixed|null $public_allowed Determine if this budget is allowed to be published openly.
     *
     * @return self
     */
    public function setPublicAllowed($public_allowed)
    {
        if (is_null($public_allowed)) {
            array_push($this->openAPINullablesSetToNull, 'public_allowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('public_allowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['public_allowed'] = $public_allowed;

        return $this;
    }

    /**
     * Gets published_date
     *
     * @return mixed|null
     */
    public function getPublishedDate()
    {
        return $this->container['published_date'];
    }

    /**
     * Sets published_date
     *
     * @param mixed|null $published_date Publiceringsdato
     *
     * @return self
     */
    public function setPublishedDate($published_date)
    {
        if (is_null($published_date)) {
            array_push($this->openAPINullablesSetToNull, 'published_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('published_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['published_date'] = $published_date;

        return $this;
    }

    /**
     * Gets report_standard_name
     *
     * @return mixed|null
     */
    public function getReportStandardName()
    {
        return $this->container['report_standard_name'];
    }

    /**
     * Sets report_standard_name
     *
     * @param mixed|null $report_standard_name Regnskabsstandards forklaring
     *
     * @return self
     */
    public function setReportStandardName($report_standard_name)
    {
        if (is_null($report_standard_name)) {
            array_push($this->openAPINullablesSetToNull, 'report_standard_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_standard_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['report_standard_name'] = $report_standard_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


