<?php
/**
 * TinglysningObjektIdentifikatorModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TinglysningObjektIdentifikatorModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TinglysningObjektIdentifikatorModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TinglysningObjektIdentifikatorModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dokument_id' => 'mixed',
        'dokument_revision_nummer' => 'mixed',
        'rettighed_id' => 'mixed',
        'ejendom_identifikator' => '\OpenAPI\Client\Model\EjendomIdentifikatorModel',
        'bil_identifikator' => '\OpenAPI\Client\Model\BilIdentifikatorModel',
        'andel_identifikator' => '\OpenAPI\Client\Model\AndelIdentifikatorModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dokument_id' => null,
        'dokument_revision_nummer' => null,
        'rettighed_id' => null,
        'ejendom_identifikator' => null,
        'bil_identifikator' => null,
        'andel_identifikator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dokument_id' => true,
		'dokument_revision_nummer' => true,
		'rettighed_id' => true,
		'ejendom_identifikator' => false,
		'bil_identifikator' => false,
		'andel_identifikator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dokument_id' => 'DokumentId',
        'dokument_revision_nummer' => 'DokumentRevisionNummer',
        'rettighed_id' => 'RettighedId',
        'ejendom_identifikator' => 'EjendomIdentifikator',
        'bil_identifikator' => 'BilIdentifikator',
        'andel_identifikator' => 'AndelIdentifikator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dokument_id' => 'setDokumentId',
        'dokument_revision_nummer' => 'setDokumentRevisionNummer',
        'rettighed_id' => 'setRettighedId',
        'ejendom_identifikator' => 'setEjendomIdentifikator',
        'bil_identifikator' => 'setBilIdentifikator',
        'andel_identifikator' => 'setAndelIdentifikator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dokument_id' => 'getDokumentId',
        'dokument_revision_nummer' => 'getDokumentRevisionNummer',
        'rettighed_id' => 'getRettighedId',
        'ejendom_identifikator' => 'getEjendomIdentifikator',
        'bil_identifikator' => 'getBilIdentifikator',
        'andel_identifikator' => 'getAndelIdentifikator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('dokument_id', $data ?? [], null);
        $this->setIfExists('dokument_revision_nummer', $data ?? [], null);
        $this->setIfExists('rettighed_id', $data ?? [], null);
        $this->setIfExists('ejendom_identifikator', $data ?? [], null);
        $this->setIfExists('bil_identifikator', $data ?? [], null);
        $this->setIfExists('andel_identifikator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dokument_id
     *
     * @return mixed|null
     */
    public function getDokumentId()
    {
        return $this->container['dokument_id'];
    }

    /**
     * Sets dokument_id
     *
     * @param mixed|null $dokument_id Identifikation af et dokument, som kan vÃ¦re et adkomst-, hÃ¦ftelses- eller servitutdokument. Kunne ogsÃ¥ kaldes en sagsreference
     *
     * @return self
     */
    public function setDokumentId($dokument_id)
    {
        if (is_null($dokument_id)) {
            array_push($this->openAPINullablesSetToNull, 'dokument_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dokument_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dokument_id'] = $dokument_id;

        return $this;
    }

    /**
     * Gets dokument_revision_nummer
     *
     * @return mixed|null
     */
    public function getDokumentRevisionNummer()
    {
        return $this->container['dokument_revision_nummer'];
    }

    /**
     * Sets dokument_revision_nummer
     *
     * @param mixed|null $dokument_revision_nummer Revisionsnummer for rettighedsdokument.
     *
     * @return self
     */
    public function setDokumentRevisionNummer($dokument_revision_nummer)
    {
        if (is_null($dokument_revision_nummer)) {
            array_push($this->openAPINullablesSetToNull, 'dokument_revision_nummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dokument_revision_nummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dokument_revision_nummer'] = $dokument_revision_nummer;

        return $this;
    }

    /**
     * Gets rettighed_id
     *
     * @return mixed|null
     */
    public function getRettighedId()
    {
        return $this->container['rettighed_id'];
    }

    /**
     * Sets rettighed_id
     *
     * @param mixed|null $rettighed_id Identifikation af en rettighed. Betegnelsen rettighed dÃ¦kker alle de former for sammenkoblinger som et rettighedsdokument (DokumentIdentifikator) kan registrere i forhold til et tinglysningsobjekt.
     *
     * @return self
     */
    public function setRettighedId($rettighed_id)
    {
        if (is_null($rettighed_id)) {
            array_push($this->openAPINullablesSetToNull, 'rettighed_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rettighed_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rettighed_id'] = $rettighed_id;

        return $this;
    }

    /**
     * Gets ejendom_identifikator
     *
     * @return \OpenAPI\Client\Model\EjendomIdentifikatorModel|null
     */
    public function getEjendomIdentifikator()
    {
        return $this->container['ejendom_identifikator'];
    }

    /**
     * Sets ejendom_identifikator
     *
     * @param \OpenAPI\Client\Model\EjendomIdentifikatorModel|null $ejendom_identifikator ejendom_identifikator
     *
     * @return self
     */
    public function setEjendomIdentifikator($ejendom_identifikator)
    {
        if (is_null($ejendom_identifikator)) {
            throw new \InvalidArgumentException('non-nullable ejendom_identifikator cannot be null');
        }
        $this->container['ejendom_identifikator'] = $ejendom_identifikator;

        return $this;
    }

    /**
     * Gets bil_identifikator
     *
     * @return \OpenAPI\Client\Model\BilIdentifikatorModel|null
     */
    public function getBilIdentifikator()
    {
        return $this->container['bil_identifikator'];
    }

    /**
     * Sets bil_identifikator
     *
     * @param \OpenAPI\Client\Model\BilIdentifikatorModel|null $bil_identifikator bil_identifikator
     *
     * @return self
     */
    public function setBilIdentifikator($bil_identifikator)
    {
        if (is_null($bil_identifikator)) {
            throw new \InvalidArgumentException('non-nullable bil_identifikator cannot be null');
        }
        $this->container['bil_identifikator'] = $bil_identifikator;

        return $this;
    }

    /**
     * Gets andel_identifikator
     *
     * @return \OpenAPI\Client\Model\AndelIdentifikatorModel|null
     */
    public function getAndelIdentifikator()
    {
        return $this->container['andel_identifikator'];
    }

    /**
     * Sets andel_identifikator
     *
     * @param \OpenAPI\Client\Model\AndelIdentifikatorModel|null $andel_identifikator andel_identifikator
     *
     * @return self
     */
    public function setAndelIdentifikator($andel_identifikator)
    {
        if (is_null($andel_identifikator)) {
            throw new \InvalidArgumentException('non-nullable andel_identifikator cannot be null');
        }
        $this->container['andel_identifikator'] = $andel_identifikator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


