<?php
/**
 * EJFTradeResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EJFTradeResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EJFTradeResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EJFTradeResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'namespace' => 'mixed',
        'status' => '\OpenAPI\Client\Model\EJFStatusEnum',
        'business_process' => '\OpenAPI\Client\Model\EJFBusinessProcessEnum',
        'business_area' => '\OpenAPI\Client\Model\EJFBusinessAreaEnum',
        'business_event' => '\OpenAPI\Client\Model\EJFBusinessEventEnum',
        'registration_from' => 'mixed',
        'registration_to' => 'mixed',
        'registration_actor' => 'mixed',
        'effect_from' => 'mixed',
        'effect_to' => 'mixed',
        'effect_actor' => 'mixed',
        'case_id' => 'mixed',
        'sales_date' => 'mixed',
        'purchase_price_total' => 'mixed',
        'purchase_price_cash' => 'mixed',
        'purchase_agreement_date' => 'mixed',
        'currency' => '\OpenAPI\Client\Model\CurrencyEnum',
        'contract_sum' => 'mixed',
        'livestock_value' => 'mixed',
        'movables_value' => 'mixed',
        'payment_obligation_date' => 'mixed',
        'deed_text' => 'mixed',
        'buildings_included' => '\OpenAPI\Client\Model\BuildingsIncludedEnum',
        'owner_changes' => 'mixed',
        'overview' => '\OpenAPI\Client\Model\LatestTradeResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'namespace' => null,
        'status' => null,
        'business_process' => null,
        'business_area' => null,
        'business_event' => null,
        'registration_from' => 'date-time',
        'registration_to' => 'date-time',
        'registration_actor' => null,
        'effect_from' => 'date-time',
        'effect_to' => 'date-time',
        'effect_actor' => null,
        'case_id' => 'uuid',
        'sales_date' => 'date-time',
        'purchase_price_total' => null,
        'purchase_price_cash' => null,
        'purchase_agreement_date' => 'date-time',
        'currency' => null,
        'contract_sum' => null,
        'livestock_value' => null,
        'movables_value' => null,
        'payment_obligation_date' => 'date-time',
        'deed_text' => null,
        'buildings_included' => null,
        'owner_changes' => null,
        'overview' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'namespace' => true,
		'status' => false,
		'business_process' => false,
		'business_area' => false,
		'business_event' => false,
		'registration_from' => true,
		'registration_to' => true,
		'registration_actor' => true,
		'effect_from' => true,
		'effect_to' => true,
		'effect_actor' => true,
		'case_id' => true,
		'sales_date' => true,
		'purchase_price_total' => true,
		'purchase_price_cash' => true,
		'purchase_agreement_date' => true,
		'currency' => false,
		'contract_sum' => true,
		'livestock_value' => true,
		'movables_value' => true,
		'payment_obligation_date' => true,
		'deed_text' => true,
		'buildings_included' => false,
		'owner_changes' => true,
		'overview' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'namespace' => 'namespace',
        'status' => 'status',
        'business_process' => 'business_process',
        'business_area' => 'business_area',
        'business_event' => 'business_event',
        'registration_from' => 'registration_from',
        'registration_to' => 'registration_to',
        'registration_actor' => 'registration_actor',
        'effect_from' => 'effect_from',
        'effect_to' => 'effect_to',
        'effect_actor' => 'effect_actor',
        'case_id' => 'case_id',
        'sales_date' => 'sales_date',
        'purchase_price_total' => 'purchase_price_total',
        'purchase_price_cash' => 'purchase_price_cash',
        'purchase_agreement_date' => 'purchase_agreement_date',
        'currency' => 'currency',
        'contract_sum' => 'contract_sum',
        'livestock_value' => 'livestock_value',
        'movables_value' => 'movables_value',
        'payment_obligation_date' => 'payment_obligation_date',
        'deed_text' => 'deed_text',
        'buildings_included' => 'buildings_included',
        'owner_changes' => 'owner_changes',
        'overview' => 'overview'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'namespace' => 'setNamespace',
        'status' => 'setStatus',
        'business_process' => 'setBusinessProcess',
        'business_area' => 'setBusinessArea',
        'business_event' => 'setBusinessEvent',
        'registration_from' => 'setRegistrationFrom',
        'registration_to' => 'setRegistrationTo',
        'registration_actor' => 'setRegistrationActor',
        'effect_from' => 'setEffectFrom',
        'effect_to' => 'setEffectTo',
        'effect_actor' => 'setEffectActor',
        'case_id' => 'setCaseId',
        'sales_date' => 'setSalesDate',
        'purchase_price_total' => 'setPurchasePriceTotal',
        'purchase_price_cash' => 'setPurchasePriceCash',
        'purchase_agreement_date' => 'setPurchaseAgreementDate',
        'currency' => 'setCurrency',
        'contract_sum' => 'setContractSum',
        'livestock_value' => 'setLivestockValue',
        'movables_value' => 'setMovablesValue',
        'payment_obligation_date' => 'setPaymentObligationDate',
        'deed_text' => 'setDeedText',
        'buildings_included' => 'setBuildingsIncluded',
        'owner_changes' => 'setOwnerChanges',
        'overview' => 'setOverview'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'namespace' => 'getNamespace',
        'status' => 'getStatus',
        'business_process' => 'getBusinessProcess',
        'business_area' => 'getBusinessArea',
        'business_event' => 'getBusinessEvent',
        'registration_from' => 'getRegistrationFrom',
        'registration_to' => 'getRegistrationTo',
        'registration_actor' => 'getRegistrationActor',
        'effect_from' => 'getEffectFrom',
        'effect_to' => 'getEffectTo',
        'effect_actor' => 'getEffectActor',
        'case_id' => 'getCaseId',
        'sales_date' => 'getSalesDate',
        'purchase_price_total' => 'getPurchasePriceTotal',
        'purchase_price_cash' => 'getPurchasePriceCash',
        'purchase_agreement_date' => 'getPurchaseAgreementDate',
        'currency' => 'getCurrency',
        'contract_sum' => 'getContractSum',
        'livestock_value' => 'getLivestockValue',
        'movables_value' => 'getMovablesValue',
        'payment_obligation_date' => 'getPaymentObligationDate',
        'deed_text' => 'getDeedText',
        'buildings_included' => 'getBuildingsIncluded',
        'owner_changes' => 'getOwnerChanges',
        'overview' => 'getOverview'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('namespace', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('business_process', $data ?? [], null);
        $this->setIfExists('business_area', $data ?? [], null);
        $this->setIfExists('business_event', $data ?? [], null);
        $this->setIfExists('registration_from', $data ?? [], null);
        $this->setIfExists('registration_to', $data ?? [], null);
        $this->setIfExists('registration_actor', $data ?? [], null);
        $this->setIfExists('effect_from', $data ?? [], null);
        $this->setIfExists('effect_to', $data ?? [], null);
        $this->setIfExists('effect_actor', $data ?? [], null);
        $this->setIfExists('case_id', $data ?? [], null);
        $this->setIfExists('sales_date', $data ?? [], null);
        $this->setIfExists('purchase_price_total', $data ?? [], null);
        $this->setIfExists('purchase_price_cash', $data ?? [], null);
        $this->setIfExists('purchase_agreement_date', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('contract_sum', $data ?? [], null);
        $this->setIfExists('livestock_value', $data ?? [], null);
        $this->setIfExists('movables_value', $data ?? [], null);
        $this->setIfExists('payment_obligation_date', $data ?? [], null);
        $this->setIfExists('deed_text', $data ?? [], null);
        $this->setIfExists('buildings_included', $data ?? [], null);
        $this->setIfExists('owner_changes', $data ?? [], null);
        $this->setIfExists('overview', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['namespace'] === null) {
            $invalidProperties[] = "'namespace' can't be null";
        }
        if ($this->container['registration_from'] === null) {
            $invalidProperties[] = "'registration_from' can't be null";
        }
        if ($this->container['registration_actor'] === null) {
            $invalidProperties[] = "'registration_actor' can't be null";
        }
        if ($this->container['effect_from'] === null) {
            $invalidProperties[] = "'effect_from' can't be null";
        }
        if ($this->container['effect_actor'] === null) {
            $invalidProperties[] = "'effect_actor' can't be null";
        }
        if ($this->container['case_id'] === null) {
            $invalidProperties[] = "'case_id' can't be null";
        }
        if ($this->container['owner_changes'] === null) {
            $invalidProperties[] = "'owner_changes' can't be null";
        }
        if ($this->container['overview'] === null) {
            $invalidProperties[] = "'overview' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id Persistent unik nÃ¸gle.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return mixed
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param mixed $namespace namespace
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        if (is_null($namespace)) {
            array_push($this->openAPINullablesSetToNull, 'namespace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('namespace', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\EJFStatusEnum|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\EJFStatusEnum|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets business_process
     *
     * @return \OpenAPI\Client\Model\EJFBusinessProcessEnum|null
     */
    public function getBusinessProcess()
    {
        return $this->container['business_process'];
    }

    /**
     * Sets business_process
     *
     * @param \OpenAPI\Client\Model\EJFBusinessProcessEnum|null $business_process business_process
     *
     * @return self
     */
    public function setBusinessProcess($business_process)
    {
        if (is_null($business_process)) {
            throw new \InvalidArgumentException('non-nullable business_process cannot be null');
        }
        $this->container['business_process'] = $business_process;

        return $this;
    }

    /**
     * Gets business_area
     *
     * @return \OpenAPI\Client\Model\EJFBusinessAreaEnum|null
     */
    public function getBusinessArea()
    {
        return $this->container['business_area'];
    }

    /**
     * Sets business_area
     *
     * @param \OpenAPI\Client\Model\EJFBusinessAreaEnum|null $business_area business_area
     *
     * @return self
     */
    public function setBusinessArea($business_area)
    {
        if (is_null($business_area)) {
            throw new \InvalidArgumentException('non-nullable business_area cannot be null');
        }
        $this->container['business_area'] = $business_area;

        return $this;
    }

    /**
     * Gets business_event
     *
     * @return \OpenAPI\Client\Model\EJFBusinessEventEnum|null
     */
    public function getBusinessEvent()
    {
        return $this->container['business_event'];
    }

    /**
     * Sets business_event
     *
     * @param \OpenAPI\Client\Model\EJFBusinessEventEnum|null $business_event business_event
     *
     * @return self
     */
    public function setBusinessEvent($business_event)
    {
        if (is_null($business_event)) {
            throw new \InvalidArgumentException('non-nullable business_event cannot be null');
        }
        $this->container['business_event'] = $business_event;

        return $this;
    }

    /**
     * Gets registration_from
     *
     * @return mixed
     */
    public function getRegistrationFrom()
    {
        return $this->container['registration_from'];
    }

    /**
     * Sets registration_from
     *
     * @param mixed $registration_from Tidspunktet hvor registreringen er foretaget.
     *
     * @return self
     */
    public function setRegistrationFrom($registration_from)
    {
        if (is_null($registration_from)) {
            array_push($this->openAPINullablesSetToNull, 'registration_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_from'] = $registration_from;

        return $this;
    }

    /**
     * Gets registration_to
     *
     * @return mixed|null
     */
    public function getRegistrationTo()
    {
        return $this->container['registration_to'];
    }

    /**
     * Sets registration_to
     *
     * @param mixed|null $registration_to Tidspunktet hvor en ny registrering er foretaget pÃ¥ objektet, og hvor denne version sÃ¥ledes ikke lÃ¦ngere er den seneste.
     *
     * @return self
     */
    public function setRegistrationTo($registration_to)
    {
        if (is_null($registration_to)) {
            array_push($this->openAPINullablesSetToNull, 'registration_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_to'] = $registration_to;

        return $this;
    }

    /**
     * Gets registration_actor
     *
     * @return mixed
     */
    public function getRegistrationActor()
    {
        return $this->container['registration_actor'];
    }

    /**
     * Sets registration_actor
     *
     * @param mixed $registration_actor Den aktÃ¸r der har foretaget registreringen.
     *
     * @return self
     */
    public function setRegistrationActor($registration_actor)
    {
        if (is_null($registration_actor)) {
            array_push($this->openAPINullablesSetToNull, 'registration_actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_actor'] = $registration_actor;

        return $this;
    }

    /**
     * Gets effect_from
     *
     * @return mixed
     */
    public function getEffectFrom()
    {
        return $this->container['effect_from'];
    }

    /**
     * Sets effect_from
     *
     * @param mixed $effect_from Tidspunktet hvorfra objektet har virkning.
     *
     * @return self
     */
    public function setEffectFrom($effect_from)
    {
        if (is_null($effect_from)) {
            array_push($this->openAPINullablesSetToNull, 'effect_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_from'] = $effect_from;

        return $this;
    }

    /**
     * Gets effect_to
     *
     * @return mixed|null
     */
    public function getEffectTo()
    {
        return $this->container['effect_to'];
    }

    /**
     * Sets effect_to
     *
     * @param mixed|null $effect_to Tidspunktet hvor objektets virkning ophÃ¸rer.
     *
     * @return self
     */
    public function setEffectTo($effect_to)
    {
        if (is_null($effect_to)) {
            array_push($this->openAPINullablesSetToNull, 'effect_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_to'] = $effect_to;

        return $this;
    }

    /**
     * Gets effect_actor
     *
     * @return mixed
     */
    public function getEffectActor()
    {
        return $this->container['effect_actor'];
    }

    /**
     * Sets effect_actor
     *
     * @param mixed $effect_actor Den aktÃ¸r der har afstedkommet objektets virkning.
     *
     * @return self
     */
    public function setEffectActor($effect_actor)
    {
        if (is_null($effect_actor)) {
            array_push($this->openAPINullablesSetToNull, 'effect_actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_actor'] = $effect_actor;

        return $this;
    }

    /**
     * Gets case_id
     *
     * @return mixed
     */
    public function getCaseId()
    {
        return $this->container['case_id'];
    }

    /**
     * Sets case_id
     *
     * @param mixed $case_id Persistent unik nÃ¸gle for den EjerskabshÃ¦ndelse behandling eller Person/VirksomhedshÃ¦ndelse behandling, som objektet senest er Ã¦ndret ved.
     *
     * @return self
     */
    public function setCaseId($case_id)
    {
        if (is_null($case_id)) {
            array_push($this->openAPINullablesSetToNull, 'case_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('case_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['case_id'] = $case_id;

        return $this;
    }

    /**
     * Gets sales_date
     *
     * @return mixed|null
     */
    public function getSalesDate()
    {
        return $this->container['sales_date'];
    }

    /**
     * Sets sales_date
     *
     * @param mixed|null $sales_date Dato for ejerens afstÃ¥else af ejendommen
     *
     * @return self
     */
    public function setSalesDate($sales_date)
    {
        if (is_null($sales_date)) {
            array_push($this->openAPINullablesSetToNull, 'sales_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sales_date'] = $sales_date;

        return $this;
    }

    /**
     * Gets purchase_price_total
     *
     * @return mixed|null
     */
    public function getPurchasePriceTotal()
    {
        return $this->container['purchase_price_total'];
    }

    /**
     * Sets purchase_price_total
     *
     * @param mixed|null $purchase_price_total Det samlede belÃ¸b, som den eller de ejerskiftede ejendomme er blevet kÃ¸bt for.
     *
     * @return self
     */
    public function setPurchasePriceTotal($purchase_price_total)
    {
        if (is_null($purchase_price_total)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_price_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_price_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchase_price_total'] = $purchase_price_total;

        return $this;
    }

    /**
     * Gets purchase_price_cash
     *
     * @return mixed|null
     */
    public function getPurchasePriceCash()
    {
        return $this->container['purchase_price_cash'];
    }

    /**
     * Sets purchase_price_cash
     *
     * @param mixed|null $purchase_price_cash Den pris i rede penge, der skal betales ved kÃ¸b af en fast ejendom.
     *
     * @return self
     */
    public function setPurchasePriceCash($purchase_price_cash)
    {
        if (is_null($purchase_price_cash)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_price_cash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_price_cash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchase_price_cash'] = $purchase_price_cash;

        return $this;
    }

    /**
     * Gets purchase_agreement_date
     *
     * @return mixed|null
     */
    public function getPurchaseAgreementDate()
    {
        return $this->container['purchase_agreement_date'];
    }

    /**
     * Sets purchase_agreement_date
     *
     * @param mixed|null $purchase_agreement_date Dato for underskrift af kÃ¸bsaftale (kaldes ogsÃ¥ for slutseddel).
     *
     * @return self
     */
    public function setPurchaseAgreementDate($purchase_agreement_date)
    {
        if (is_null($purchase_agreement_date)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_agreement_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_agreement_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchase_agreement_date'] = $purchase_agreement_date;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\CurrencyEnum|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\CurrencyEnum|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets contract_sum
     *
     * @return mixed|null
     */
    public function getContractSum()
    {
        return $this->container['contract_sum'];
    }

    /**
     * Sets contract_sum
     *
     * @param mixed|null $contract_sum Angiver belÃ¸bet for en entreprise.
     *
     * @return self
     */
    public function setContractSum($contract_sum)
    {
        if (is_null($contract_sum)) {
            array_push($this->openAPINullablesSetToNull, 'contract_sum');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contract_sum', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contract_sum'] = $contract_sum;

        return $this;
    }

    /**
     * Gets livestock_value
     *
     * @return mixed|null
     */
    public function getLivestockValue()
    {
        return $this->container['livestock_value'];
    }

    /**
     * Sets livestock_value
     *
     * @param mixed|null $livestock_value VÃ¦rdi af husdyr som indgÃ¥r i handlen.
     *
     * @return self
     */
    public function setLivestockValue($livestock_value)
    {
        if (is_null($livestock_value)) {
            array_push($this->openAPINullablesSetToNull, 'livestock_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('livestock_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['livestock_value'] = $livestock_value;

        return $this;
    }

    /**
     * Gets movables_value
     *
     * @return mixed|null
     */
    public function getMovablesValue()
    {
        return $this->container['movables_value'];
    }

    /**
     * Sets movables_value
     *
     * @param mixed|null $movables_value Aktiver, der overtages udenfor kÃ¸besummen.
     *
     * @return self
     */
    public function setMovablesValue($movables_value)
    {
        if (is_null($movables_value)) {
            array_push($this->openAPINullablesSetToNull, 'movables_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('movables_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['movables_value'] = $movables_value;

        return $this;
    }

    /**
     * Gets payment_obligation_date
     *
     * @return mixed|null
     */
    public function getPaymentObligationDate()
    {
        return $this->container['payment_obligation_date'];
    }

    /**
     * Sets payment_obligation_date
     *
     * @param mixed|null $payment_obligation_date Dato for ny ejers overtagelse af betalingsforpligtigelser
     *
     * @return self
     */
    public function setPaymentObligationDate($payment_obligation_date)
    {
        if (is_null($payment_obligation_date)) {
            array_push($this->openAPINullablesSetToNull, 'payment_obligation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_obligation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_obligation_date'] = $payment_obligation_date;

        return $this;
    }

    /**
     * Gets deed_text
     *
     * @return mixed|null
     */
    public function getDeedText()
    {
        return $this->container['deed_text'];
    }

    /**
     * Sets deed_text
     *
     * @param mixed|null $deed_text Fri tekst, der kan fÃ¸lge med anmeldelsen
     *
     * @return self
     */
    public function setDeedText($deed_text)
    {
        if (is_null($deed_text)) {
            array_push($this->openAPINullablesSetToNull, 'deed_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deed_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deed_text'] = $deed_text;

        return $this;
    }

    /**
     * Gets buildings_included
     *
     * @return \OpenAPI\Client\Model\BuildingsIncludedEnum|null
     */
    public function getBuildingsIncluded()
    {
        return $this->container['buildings_included'];
    }

    /**
     * Sets buildings_included
     *
     * @param \OpenAPI\Client\Model\BuildingsIncludedEnum|null $buildings_included buildings_included
     *
     * @return self
     */
    public function setBuildingsIncluded($buildings_included)
    {
        if (is_null($buildings_included)) {
            throw new \InvalidArgumentException('non-nullable buildings_included cannot be null');
        }
        $this->container['buildings_included'] = $buildings_included;

        return $this;
    }

    /**
     * Gets owner_changes
     *
     * @return mixed
     */
    public function getOwnerChanges()
    {
        return $this->container['owner_changes'];
    }

    /**
     * Sets owner_changes
     *
     * @param mixed $owner_changes owner_changes
     *
     * @return self
     */
    public function setOwnerChanges($owner_changes)
    {
        if (is_null($owner_changes)) {
            array_push($this->openAPINullablesSetToNull, 'owner_changes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('owner_changes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['owner_changes'] = $owner_changes;

        return $this;
    }

    /**
     * Gets overview
     *
     * @return \OpenAPI\Client\Model\LatestTradeResponse
     */
    public function getOverview()
    {
        return $this->container['overview'];
    }

    /**
     * Sets overview
     *
     * @param \OpenAPI\Client\Model\LatestTradeResponse $overview overview
     *
     * @return self
     */
    public function setOverview($overview)
    {
        if (is_null($overview)) {
            throw new \InvalidArgumentException('non-nullable overview cannot be null');
        }
        $this->container['overview'] = $overview;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


