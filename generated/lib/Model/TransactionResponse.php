<?php
/**
 * TransactionResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'type' => '\OpenAPI\Client\Model\TransactionTypeEnum',
        'trade_type' => '\OpenAPI\Client\Model\TransactionTradeTypeEnum',
        'title' => 'mixed',
        'trade_date' => 'mixed',
        'trade_method' => '\OpenAPI\Client\Model\AcquisitionMethodEnum',
        'asset_type' => '\OpenAPI\Client\Model\TransactionAssetTypeEnum',
        'asset_stage' => '\OpenAPI\Client\Model\TransactionAssetStageEnum',
        'buyers' => 'mixed',
        'sellers' => 'mixed',
        'municipality_code' => 'mixed',
        'municipality_codes' => 'mixed',
        'zip_code' => 'mixed',
        'zip_codes' => 'mixed',
        'street_code' => 'mixed',
        'street_codes' => 'mixed',
        'price' => '\OpenAPI\Client\Model\TransactionMeasurePriceResponse',
        'area' => '\OpenAPI\Client\Model\TransactionMeasureResponse',
        'sqm_price' => '\OpenAPI\Client\Model\TransactionMeasureSqmResponse',
        'cap_rate' => '\OpenAPI\Client\Model\TransactionMeasureCapRateResponse',
        'enriched' => 'mixed',
        'centroid' => 'mixed',
        'comment' => 'mixed',
        'advisors' => 'mixed',
        'properties' => 'mixed',
        'sources' => 'mixed',
        'economy' => '\OpenAPI\Client\Model\TransactionProspectusESModel',
        'stats' => '\OpenAPI\Client\Model\TransactionStatsResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'type' => null,
        'trade_type' => null,
        'title' => null,
        'trade_date' => 'date',
        'trade_method' => null,
        'asset_type' => null,
        'asset_stage' => null,
        'buyers' => null,
        'sellers' => null,
        'municipality_code' => null,
        'municipality_codes' => null,
        'zip_code' => null,
        'zip_codes' => null,
        'street_code' => null,
        'street_codes' => null,
        'price' => null,
        'area' => null,
        'sqm_price' => null,
        'cap_rate' => null,
        'enriched' => null,
        'centroid' => null,
        'comment' => null,
        'advisors' => null,
        'properties' => null,
        'sources' => null,
        'economy' => null,
        'stats' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'type' => false,
		'trade_type' => false,
		'title' => true,
		'trade_date' => true,
		'trade_method' => false,
		'asset_type' => false,
		'asset_stage' => false,
		'buyers' => true,
		'sellers' => true,
		'municipality_code' => true,
		'municipality_codes' => true,
		'zip_code' => true,
		'zip_codes' => true,
		'street_code' => true,
		'street_codes' => true,
		'price' => false,
		'area' => false,
		'sqm_price' => false,
		'cap_rate' => false,
		'enriched' => true,
		'centroid' => true,
		'comment' => true,
		'advisors' => true,
		'properties' => true,
		'sources' => true,
		'economy' => false,
		'stats' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'trade_type' => 'trade_type',
        'title' => 'title',
        'trade_date' => 'trade_date',
        'trade_method' => 'trade_method',
        'asset_type' => 'asset_type',
        'asset_stage' => 'asset_stage',
        'buyers' => 'buyers',
        'sellers' => 'sellers',
        'municipality_code' => 'municipality_code',
        'municipality_codes' => 'municipality_codes',
        'zip_code' => 'zip_code',
        'zip_codes' => 'zip_codes',
        'street_code' => 'street_code',
        'street_codes' => 'street_codes',
        'price' => 'price',
        'area' => 'area',
        'sqm_price' => 'sqm_price',
        'cap_rate' => 'cap_rate',
        'enriched' => 'enriched',
        'centroid' => 'centroid',
        'comment' => 'comment',
        'advisors' => 'advisors',
        'properties' => 'properties',
        'sources' => 'sources',
        'economy' => 'economy',
        'stats' => 'stats'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'trade_type' => 'setTradeType',
        'title' => 'setTitle',
        'trade_date' => 'setTradeDate',
        'trade_method' => 'setTradeMethod',
        'asset_type' => 'setAssetType',
        'asset_stage' => 'setAssetStage',
        'buyers' => 'setBuyers',
        'sellers' => 'setSellers',
        'municipality_code' => 'setMunicipalityCode',
        'municipality_codes' => 'setMunicipalityCodes',
        'zip_code' => 'setZipCode',
        'zip_codes' => 'setZipCodes',
        'street_code' => 'setStreetCode',
        'street_codes' => 'setStreetCodes',
        'price' => 'setPrice',
        'area' => 'setArea',
        'sqm_price' => 'setSqmPrice',
        'cap_rate' => 'setCapRate',
        'enriched' => 'setEnriched',
        'centroid' => 'setCentroid',
        'comment' => 'setComment',
        'advisors' => 'setAdvisors',
        'properties' => 'setProperties',
        'sources' => 'setSources',
        'economy' => 'setEconomy',
        'stats' => 'setStats'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'trade_type' => 'getTradeType',
        'title' => 'getTitle',
        'trade_date' => 'getTradeDate',
        'trade_method' => 'getTradeMethod',
        'asset_type' => 'getAssetType',
        'asset_stage' => 'getAssetStage',
        'buyers' => 'getBuyers',
        'sellers' => 'getSellers',
        'municipality_code' => 'getMunicipalityCode',
        'municipality_codes' => 'getMunicipalityCodes',
        'zip_code' => 'getZipCode',
        'zip_codes' => 'getZipCodes',
        'street_code' => 'getStreetCode',
        'street_codes' => 'getStreetCodes',
        'price' => 'getPrice',
        'area' => 'getArea',
        'sqm_price' => 'getSqmPrice',
        'cap_rate' => 'getCapRate',
        'enriched' => 'getEnriched',
        'centroid' => 'getCentroid',
        'comment' => 'getComment',
        'advisors' => 'getAdvisors',
        'properties' => 'getProperties',
        'sources' => 'getSources',
        'economy' => 'getEconomy',
        'stats' => 'getStats'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('trade_type', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('trade_date', $data ?? [], null);
        $this->setIfExists('trade_method', $data ?? [], null);
        $this->setIfExists('asset_type', $data ?? [], null);
        $this->setIfExists('asset_stage', $data ?? [], null);
        $this->setIfExists('buyers', $data ?? [], null);
        $this->setIfExists('sellers', $data ?? [], null);
        $this->setIfExists('municipality_code', $data ?? [], null);
        $this->setIfExists('municipality_codes', $data ?? [], null);
        $this->setIfExists('zip_code', $data ?? [], null);
        $this->setIfExists('zip_codes', $data ?? [], null);
        $this->setIfExists('street_code', $data ?? [], null);
        $this->setIfExists('street_codes', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('area', $data ?? [], null);
        $this->setIfExists('sqm_price', $data ?? [], null);
        $this->setIfExists('cap_rate', $data ?? [], null);
        $this->setIfExists('enriched', $data ?? [], null);
        $this->setIfExists('centroid', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('advisors', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
        $this->setIfExists('sources', $data ?? [], null);
        $this->setIfExists('economy', $data ?? [], null);
        $this->setIfExists('stats', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['trade_type'] === null) {
            $invalidProperties[] = "'trade_type' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['trade_date'] === null) {
            $invalidProperties[] = "'trade_date' can't be null";
        }
        if ($this->container['asset_type'] === null) {
            $invalidProperties[] = "'asset_type' can't be null";
        }
        if ($this->container['asset_stage'] === null) {
            $invalidProperties[] = "'asset_stage' can't be null";
        }
        if ($this->container['buyers'] === null) {
            $invalidProperties[] = "'buyers' can't be null";
        }
        if ($this->container['sellers'] === null) {
            $invalidProperties[] = "'sellers' can't be null";
        }
        if ($this->container['municipality_codes'] === null) {
            $invalidProperties[] = "'municipality_codes' can't be null";
        }
        if ($this->container['zip_codes'] === null) {
            $invalidProperties[] = "'zip_codes' can't be null";
        }
        if ($this->container['street_codes'] === null) {
            $invalidProperties[] = "'street_codes' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['enriched'] === null) {
            $invalidProperties[] = "'enriched' can't be null";
        }
        if ($this->container['advisors'] === null) {
            $invalidProperties[] = "'advisors' can't be null";
        }
        if ($this->container['properties'] === null) {
            $invalidProperties[] = "'properties' can't be null";
        }
        if ($this->container['sources'] === null) {
            $invalidProperties[] = "'sources' can't be null";
        }
        if ($this->container['stats'] === null) {
            $invalidProperties[] = "'stats' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id Transaction ID from either EJF or internal ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\TransactionTypeEnum
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\TransactionTypeEnum $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets trade_type
     *
     * @return \OpenAPI\Client\Model\TransactionTradeTypeEnum
     */
    public function getTradeType()
    {
        return $this->container['trade_type'];
    }

    /**
     * Sets trade_type
     *
     * @param \OpenAPI\Client\Model\TransactionTradeTypeEnum $trade_type trade_type
     *
     * @return self
     */
    public function setTradeType($trade_type)
    {
        if (is_null($trade_type)) {
            throw new \InvalidArgumentException('non-nullable trade_type cannot be null');
        }
        $this->container['trade_type'] = $trade_type;

        return $this;
    }

    /**
     * Gets title
     *
     * @return mixed
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param mixed $title Transaction title which is taken either automatically based on the address or from manually reported field
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets trade_date
     *
     * @return mixed
     */
    public function getTradeDate()
    {
        return $this->container['trade_date'];
    }

    /**
     * Sets trade_date
     *
     * @param mixed $trade_date We need to make research how to calculate this in the best way
     *
     * @return self
     */
    public function setTradeDate($trade_date)
    {
        if (is_null($trade_date)) {
            array_push($this->openAPINullablesSetToNull, 'trade_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trade_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trade_date'] = $trade_date;

        return $this;
    }

    /**
     * Gets trade_method
     *
     * @return \OpenAPI\Client\Model\AcquisitionMethodEnum|null
     */
    public function getTradeMethod()
    {
        return $this->container['trade_method'];
    }

    /**
     * Sets trade_method
     *
     * @param \OpenAPI\Client\Model\AcquisitionMethodEnum|null $trade_method trade_method
     *
     * @return self
     */
    public function setTradeMethod($trade_method)
    {
        if (is_null($trade_method)) {
            throw new \InvalidArgumentException('non-nullable trade_method cannot be null');
        }
        $this->container['trade_method'] = $trade_method;

        return $this;
    }

    /**
     * Gets asset_type
     *
     * @return \OpenAPI\Client\Model\TransactionAssetTypeEnum
     */
    public function getAssetType()
    {
        return $this->container['asset_type'];
    }

    /**
     * Sets asset_type
     *
     * @param \OpenAPI\Client\Model\TransactionAssetTypeEnum $asset_type asset_type
     *
     * @return self
     */
    public function setAssetType($asset_type)
    {
        if (is_null($asset_type)) {
            throw new \InvalidArgumentException('non-nullable asset_type cannot be null');
        }
        $this->container['asset_type'] = $asset_type;

        return $this;
    }

    /**
     * Gets asset_stage
     *
     * @return \OpenAPI\Client\Model\TransactionAssetStageEnum
     */
    public function getAssetStage()
    {
        return $this->container['asset_stage'];
    }

    /**
     * Sets asset_stage
     *
     * @param \OpenAPI\Client\Model\TransactionAssetStageEnum $asset_stage asset_stage
     *
     * @return self
     */
    public function setAssetStage($asset_stage)
    {
        if (is_null($asset_stage)) {
            throw new \InvalidArgumentException('non-nullable asset_stage cannot be null');
        }
        $this->container['asset_stage'] = $asset_stage;

        return $this;
    }

    /**
     * Gets buyers
     *
     * @return mixed
     */
    public function getBuyers()
    {
        return $this->container['buyers'];
    }

    /**
     * Sets buyers
     *
     * @param mixed $buyers buyers
     *
     * @return self
     */
    public function setBuyers($buyers)
    {
        if (is_null($buyers)) {
            array_push($this->openAPINullablesSetToNull, 'buyers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyers'] = $buyers;

        return $this;
    }

    /**
     * Gets sellers
     *
     * @return mixed
     */
    public function getSellers()
    {
        return $this->container['sellers'];
    }

    /**
     * Sets sellers
     *
     * @param mixed $sellers sellers
     *
     * @return self
     */
    public function setSellers($sellers)
    {
        if (is_null($sellers)) {
            array_push($this->openAPINullablesSetToNull, 'sellers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sellers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sellers'] = $sellers;

        return $this;
    }

    /**
     * Gets municipality_code
     *
     * @return mixed|null
     */
    public function getMunicipalityCode()
    {
        return $this->container['municipality_code'];
    }

    /**
     * Sets municipality_code
     *
     * @param mixed|null $municipality_code municipality_code
     *
     * @return self
     */
    public function setMunicipalityCode($municipality_code)
    {
        if (is_null($municipality_code)) {
            array_push($this->openAPINullablesSetToNull, 'municipality_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('municipality_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['municipality_code'] = $municipality_code;

        return $this;
    }

    /**
     * Gets municipality_codes
     *
     * @return mixed
     */
    public function getMunicipalityCodes()
    {
        return $this->container['municipality_codes'];
    }

    /**
     * Sets municipality_codes
     *
     * @param mixed $municipality_codes municipality_codes
     *
     * @return self
     */
    public function setMunicipalityCodes($municipality_codes)
    {
        if (is_null($municipality_codes)) {
            array_push($this->openAPINullablesSetToNull, 'municipality_codes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('municipality_codes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['municipality_codes'] = $municipality_codes;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return mixed|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param mixed|null $zip_code zip_code
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (is_null($zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets zip_codes
     *
     * @return mixed
     */
    public function getZipCodes()
    {
        return $this->container['zip_codes'];
    }

    /**
     * Sets zip_codes
     *
     * @param mixed $zip_codes zip_codes
     *
     * @return self
     */
    public function setZipCodes($zip_codes)
    {
        if (is_null($zip_codes)) {
            array_push($this->openAPINullablesSetToNull, 'zip_codes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip_codes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zip_codes'] = $zip_codes;

        return $this;
    }

    /**
     * Gets street_code
     *
     * @return mixed|null
     */
    public function getStreetCode()
    {
        return $this->container['street_code'];
    }

    /**
     * Sets street_code
     *
     * @param mixed|null $street_code street_code
     *
     * @return self
     */
    public function setStreetCode($street_code)
    {
        if (is_null($street_code)) {
            array_push($this->openAPINullablesSetToNull, 'street_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_code'] = $street_code;

        return $this;
    }

    /**
     * Gets street_codes
     *
     * @return mixed
     */
    public function getStreetCodes()
    {
        return $this->container['street_codes'];
    }

    /**
     * Sets street_codes
     *
     * @param mixed $street_codes street_codes
     *
     * @return self
     */
    public function setStreetCodes($street_codes)
    {
        if (is_null($street_codes)) {
            array_push($this->openAPINullablesSetToNull, 'street_codes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_codes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_codes'] = $street_codes;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \OpenAPI\Client\Model\TransactionMeasurePriceResponse
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \OpenAPI\Client\Model\TransactionMeasurePriceResponse $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets area
     *
     * @return \OpenAPI\Client\Model\TransactionMeasureResponse|null
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param \OpenAPI\Client\Model\TransactionMeasureResponse|null $area area
     *
     * @return self
     */
    public function setArea($area)
    {
        if (is_null($area)) {
            throw new \InvalidArgumentException('non-nullable area cannot be null');
        }
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets sqm_price
     *
     * @return \OpenAPI\Client\Model\TransactionMeasureSqmResponse|null
     */
    public function getSqmPrice()
    {
        return $this->container['sqm_price'];
    }

    /**
     * Sets sqm_price
     *
     * @param \OpenAPI\Client\Model\TransactionMeasureSqmResponse|null $sqm_price sqm_price
     *
     * @return self
     */
    public function setSqmPrice($sqm_price)
    {
        if (is_null($sqm_price)) {
            throw new \InvalidArgumentException('non-nullable sqm_price cannot be null');
        }
        $this->container['sqm_price'] = $sqm_price;

        return $this;
    }

    /**
     * Gets cap_rate
     *
     * @return \OpenAPI\Client\Model\TransactionMeasureCapRateResponse|null
     */
    public function getCapRate()
    {
        return $this->container['cap_rate'];
    }

    /**
     * Sets cap_rate
     *
     * @param \OpenAPI\Client\Model\TransactionMeasureCapRateResponse|null $cap_rate cap_rate
     *
     * @return self
     */
    public function setCapRate($cap_rate)
    {
        if (is_null($cap_rate)) {
            throw new \InvalidArgumentException('non-nullable cap_rate cannot be null');
        }
        $this->container['cap_rate'] = $cap_rate;

        return $this;
    }

    /**
     * Gets enriched
     *
     * @return mixed
     */
    public function getEnriched()
    {
        return $this->container['enriched'];
    }

    /**
     * Sets enriched
     *
     * @param mixed $enriched Whether this transaction has been enriched by Resights
     *
     * @return self
     */
    public function setEnriched($enriched)
    {
        if (is_null($enriched)) {
            array_push($this->openAPINullablesSetToNull, 'enriched');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enriched', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enriched'] = $enriched;

        return $this;
    }

    /**
     * Gets centroid
     *
     * @return mixed|null
     */
    public function getCentroid()
    {
        return $this->container['centroid'];
    }

    /**
     * Sets centroid
     *
     * @param mixed|null $centroid centroid
     *
     * @return self
     */
    public function setCentroid($centroid)
    {
        if (is_null($centroid)) {
            array_push($this->openAPINullablesSetToNull, 'centroid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('centroid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['centroid'] = $centroid;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return mixed|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param mixed|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets advisors
     *
     * @return mixed
     */
    public function getAdvisors()
    {
        return $this->container['advisors'];
    }

    /**
     * Sets advisors
     *
     * @param mixed $advisors advisors
     *
     * @return self
     */
    public function setAdvisors($advisors)
    {
        if (is_null($advisors)) {
            array_push($this->openAPINullablesSetToNull, 'advisors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('advisors', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['advisors'] = $advisors;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return mixed
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param mixed $properties properties
     *
     * @return self
     */
    public function setProperties($properties)
    {
        if (is_null($properties)) {
            array_push($this->openAPINullablesSetToNull, 'properties');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('properties', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets sources
     *
     * @return mixed
     */
    public function getSources()
    {
        return $this->container['sources'];
    }

    /**
     * Sets sources
     *
     * @param mixed $sources sources
     *
     * @return self
     */
    public function setSources($sources)
    {
        if (is_null($sources)) {
            array_push($this->openAPINullablesSetToNull, 'sources');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sources', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sources'] = $sources;

        return $this;
    }

    /**
     * Gets economy
     *
     * @return \OpenAPI\Client\Model\TransactionProspectusESModel|null
     */
    public function getEconomy()
    {
        return $this->container['economy'];
    }

    /**
     * Sets economy
     *
     * @param \OpenAPI\Client\Model\TransactionProspectusESModel|null $economy economy
     *
     * @return self
     */
    public function setEconomy($economy)
    {
        if (is_null($economy)) {
            throw new \InvalidArgumentException('non-nullable economy cannot be null');
        }
        $this->container['economy'] = $economy;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \OpenAPI\Client\Model\TransactionStatsResponse
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \OpenAPI\Client\Model\TransactionStatsResponse $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        if (is_null($stats)) {
            throw new \InvalidArgumentException('non-nullable stats cannot be null');
        }
        $this->container['stats'] = $stats;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


