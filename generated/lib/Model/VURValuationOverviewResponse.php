<?php
/**
 * VURValuationOverviewResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VURValuationOverviewResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VURValuationOverviewResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VURValuationOverviewResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ice_number' => 'mixed',
        'property_value_old' => 'mixed',
        'land_value_old' => 'mixed',
        'year_old' => 'mixed',
        'property_value_new' => 'mixed',
        'land_value_new' => 'mixed',
        'year_new' => 'mixed',
        'property_value_preliminary' => 'mixed',
        'land_value_preliminary' => 'mixed',
        'year_preliminary' => 'mixed',
        'change_property_value_old_new' => 'mixed',
        'change_land_value_old_new' => 'mixed',
        'change_property_value_old_preliminary' => 'mixed',
        'change_land_value_old_preliminary' => 'mixed',
        'change_property_value_new_preliminary' => 'mixed',
        'change_land_value_new_preliminary' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ice_number' => null,
        'property_value_old' => null,
        'land_value_old' => null,
        'year_old' => null,
        'property_value_new' => null,
        'land_value_new' => null,
        'year_new' => null,
        'property_value_preliminary' => null,
        'land_value_preliminary' => null,
        'year_preliminary' => null,
        'change_property_value_old_new' => null,
        'change_land_value_old_new' => null,
        'change_property_value_old_preliminary' => null,
        'change_land_value_old_preliminary' => null,
        'change_property_value_new_preliminary' => null,
        'change_land_value_new_preliminary' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ice_number' => true,
		'property_value_old' => true,
		'land_value_old' => true,
		'year_old' => true,
		'property_value_new' => true,
		'land_value_new' => true,
		'year_new' => true,
		'property_value_preliminary' => true,
		'land_value_preliminary' => true,
		'year_preliminary' => true,
		'change_property_value_old_new' => true,
		'change_land_value_old_new' => true,
		'change_property_value_old_preliminary' => true,
		'change_land_value_old_preliminary' => true,
		'change_property_value_new_preliminary' => true,
		'change_land_value_new_preliminary' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ice_number' => 'ice_number',
        'property_value_old' => 'property_value_old',
        'land_value_old' => 'land_value_old',
        'year_old' => 'year_old',
        'property_value_new' => 'property_value_new',
        'land_value_new' => 'land_value_new',
        'year_new' => 'year_new',
        'property_value_preliminary' => 'property_value_preliminary',
        'land_value_preliminary' => 'land_value_preliminary',
        'year_preliminary' => 'year_preliminary',
        'change_property_value_old_new' => 'change_property_value_old_new',
        'change_land_value_old_new' => 'change_land_value_old_new',
        'change_property_value_old_preliminary' => 'change_property_value_old_preliminary',
        'change_land_value_old_preliminary' => 'change_land_value_old_preliminary',
        'change_property_value_new_preliminary' => 'change_property_value_new_preliminary',
        'change_land_value_new_preliminary' => 'change_land_value_new_preliminary'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ice_number' => 'setIceNumber',
        'property_value_old' => 'setPropertyValueOld',
        'land_value_old' => 'setLandValueOld',
        'year_old' => 'setYearOld',
        'property_value_new' => 'setPropertyValueNew',
        'land_value_new' => 'setLandValueNew',
        'year_new' => 'setYearNew',
        'property_value_preliminary' => 'setPropertyValuePreliminary',
        'land_value_preliminary' => 'setLandValuePreliminary',
        'year_preliminary' => 'setYearPreliminary',
        'change_property_value_old_new' => 'setChangePropertyValueOldNew',
        'change_land_value_old_new' => 'setChangeLandValueOldNew',
        'change_property_value_old_preliminary' => 'setChangePropertyValueOldPreliminary',
        'change_land_value_old_preliminary' => 'setChangeLandValueOldPreliminary',
        'change_property_value_new_preliminary' => 'setChangePropertyValueNewPreliminary',
        'change_land_value_new_preliminary' => 'setChangeLandValueNewPreliminary'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ice_number' => 'getIceNumber',
        'property_value_old' => 'getPropertyValueOld',
        'land_value_old' => 'getLandValueOld',
        'year_old' => 'getYearOld',
        'property_value_new' => 'getPropertyValueNew',
        'land_value_new' => 'getLandValueNew',
        'year_new' => 'getYearNew',
        'property_value_preliminary' => 'getPropertyValuePreliminary',
        'land_value_preliminary' => 'getLandValuePreliminary',
        'year_preliminary' => 'getYearPreliminary',
        'change_property_value_old_new' => 'getChangePropertyValueOldNew',
        'change_land_value_old_new' => 'getChangeLandValueOldNew',
        'change_property_value_old_preliminary' => 'getChangePropertyValueOldPreliminary',
        'change_land_value_old_preliminary' => 'getChangeLandValueOldPreliminary',
        'change_property_value_new_preliminary' => 'getChangePropertyValueNewPreliminary',
        'change_land_value_new_preliminary' => 'getChangeLandValueNewPreliminary'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ice_number', $data ?? [], null);
        $this->setIfExists('property_value_old', $data ?? [], null);
        $this->setIfExists('land_value_old', $data ?? [], null);
        $this->setIfExists('year_old', $data ?? [], null);
        $this->setIfExists('property_value_new', $data ?? [], null);
        $this->setIfExists('land_value_new', $data ?? [], null);
        $this->setIfExists('year_new', $data ?? [], null);
        $this->setIfExists('property_value_preliminary', $data ?? [], null);
        $this->setIfExists('land_value_preliminary', $data ?? [], null);
        $this->setIfExists('year_preliminary', $data ?? [], null);
        $this->setIfExists('change_property_value_old_new', $data ?? [], null);
        $this->setIfExists('change_land_value_old_new', $data ?? [], null);
        $this->setIfExists('change_property_value_old_preliminary', $data ?? [], null);
        $this->setIfExists('change_land_value_old_preliminary', $data ?? [], null);
        $this->setIfExists('change_property_value_new_preliminary', $data ?? [], null);
        $this->setIfExists('change_land_value_new_preliminary', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ice_number
     *
     * @return mixed|null
     */
    public function getIceNumber()
    {
        return $this->container['ice_number'];
    }

    /**
     * Sets ice_number
     *
     * @param mixed|null $ice_number ice_number
     *
     * @return self
     */
    public function setIceNumber($ice_number)
    {
        if (is_null($ice_number)) {
            array_push($this->openAPINullablesSetToNull, 'ice_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ice_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ice_number'] = $ice_number;

        return $this;
    }

    /**
     * Gets property_value_old
     *
     * @return mixed|null
     */
    public function getPropertyValueOld()
    {
        return $this->container['property_value_old'];
    }

    /**
     * Sets property_value_old
     *
     * @param mixed|null $property_value_old property_value_old
     *
     * @return self
     */
    public function setPropertyValueOld($property_value_old)
    {
        if (is_null($property_value_old)) {
            array_push($this->openAPINullablesSetToNull, 'property_value_old');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_value_old', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_value_old'] = $property_value_old;

        return $this;
    }

    /**
     * Gets land_value_old
     *
     * @return mixed|null
     */
    public function getLandValueOld()
    {
        return $this->container['land_value_old'];
    }

    /**
     * Sets land_value_old
     *
     * @param mixed|null $land_value_old land_value_old
     *
     * @return self
     */
    public function setLandValueOld($land_value_old)
    {
        if (is_null($land_value_old)) {
            array_push($this->openAPINullablesSetToNull, 'land_value_old');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('land_value_old', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['land_value_old'] = $land_value_old;

        return $this;
    }

    /**
     * Gets year_old
     *
     * @return mixed|null
     */
    public function getYearOld()
    {
        return $this->container['year_old'];
    }

    /**
     * Sets year_old
     *
     * @param mixed|null $year_old year_old
     *
     * @return self
     */
    public function setYearOld($year_old)
    {
        if (is_null($year_old)) {
            array_push($this->openAPINullablesSetToNull, 'year_old');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('year_old', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['year_old'] = $year_old;

        return $this;
    }

    /**
     * Gets property_value_new
     *
     * @return mixed|null
     */
    public function getPropertyValueNew()
    {
        return $this->container['property_value_new'];
    }

    /**
     * Sets property_value_new
     *
     * @param mixed|null $property_value_new property_value_new
     *
     * @return self
     */
    public function setPropertyValueNew($property_value_new)
    {
        if (is_null($property_value_new)) {
            array_push($this->openAPINullablesSetToNull, 'property_value_new');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_value_new', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_value_new'] = $property_value_new;

        return $this;
    }

    /**
     * Gets land_value_new
     *
     * @return mixed|null
     */
    public function getLandValueNew()
    {
        return $this->container['land_value_new'];
    }

    /**
     * Sets land_value_new
     *
     * @param mixed|null $land_value_new land_value_new
     *
     * @return self
     */
    public function setLandValueNew($land_value_new)
    {
        if (is_null($land_value_new)) {
            array_push($this->openAPINullablesSetToNull, 'land_value_new');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('land_value_new', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['land_value_new'] = $land_value_new;

        return $this;
    }

    /**
     * Gets year_new
     *
     * @return mixed|null
     */
    public function getYearNew()
    {
        return $this->container['year_new'];
    }

    /**
     * Sets year_new
     *
     * @param mixed|null $year_new year_new
     *
     * @return self
     */
    public function setYearNew($year_new)
    {
        if (is_null($year_new)) {
            array_push($this->openAPINullablesSetToNull, 'year_new');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('year_new', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['year_new'] = $year_new;

        return $this;
    }

    /**
     * Gets property_value_preliminary
     *
     * @return mixed|null
     */
    public function getPropertyValuePreliminary()
    {
        return $this->container['property_value_preliminary'];
    }

    /**
     * Sets property_value_preliminary
     *
     * @param mixed|null $property_value_preliminary property_value_preliminary
     *
     * @return self
     */
    public function setPropertyValuePreliminary($property_value_preliminary)
    {
        if (is_null($property_value_preliminary)) {
            array_push($this->openAPINullablesSetToNull, 'property_value_preliminary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_value_preliminary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_value_preliminary'] = $property_value_preliminary;

        return $this;
    }

    /**
     * Gets land_value_preliminary
     *
     * @return mixed|null
     */
    public function getLandValuePreliminary()
    {
        return $this->container['land_value_preliminary'];
    }

    /**
     * Sets land_value_preliminary
     *
     * @param mixed|null $land_value_preliminary land_value_preliminary
     *
     * @return self
     */
    public function setLandValuePreliminary($land_value_preliminary)
    {
        if (is_null($land_value_preliminary)) {
            array_push($this->openAPINullablesSetToNull, 'land_value_preliminary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('land_value_preliminary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['land_value_preliminary'] = $land_value_preliminary;

        return $this;
    }

    /**
     * Gets year_preliminary
     *
     * @return mixed|null
     */
    public function getYearPreliminary()
    {
        return $this->container['year_preliminary'];
    }

    /**
     * Sets year_preliminary
     *
     * @param mixed|null $year_preliminary year_preliminary
     *
     * @return self
     */
    public function setYearPreliminary($year_preliminary)
    {
        if (is_null($year_preliminary)) {
            array_push($this->openAPINullablesSetToNull, 'year_preliminary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('year_preliminary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['year_preliminary'] = $year_preliminary;

        return $this;
    }

    /**
     * Gets change_property_value_old_new
     *
     * @return mixed|null
     */
    public function getChangePropertyValueOldNew()
    {
        return $this->container['change_property_value_old_new'];
    }

    /**
     * Sets change_property_value_old_new
     *
     * @param mixed|null $change_property_value_old_new Percentage increase of property value from old to new valuation
     *
     * @return self
     */
    public function setChangePropertyValueOldNew($change_property_value_old_new)
    {
        if (is_null($change_property_value_old_new)) {
            array_push($this->openAPINullablesSetToNull, 'change_property_value_old_new');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('change_property_value_old_new', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['change_property_value_old_new'] = $change_property_value_old_new;

        return $this;
    }

    /**
     * Gets change_land_value_old_new
     *
     * @return mixed|null
     */
    public function getChangeLandValueOldNew()
    {
        return $this->container['change_land_value_old_new'];
    }

    /**
     * Sets change_land_value_old_new
     *
     * @param mixed|null $change_land_value_old_new Percentage increase of land value from old to new valuation
     *
     * @return self
     */
    public function setChangeLandValueOldNew($change_land_value_old_new)
    {
        if (is_null($change_land_value_old_new)) {
            array_push($this->openAPINullablesSetToNull, 'change_land_value_old_new');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('change_land_value_old_new', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['change_land_value_old_new'] = $change_land_value_old_new;

        return $this;
    }

    /**
     * Gets change_property_value_old_preliminary
     *
     * @return mixed|null
     */
    public function getChangePropertyValueOldPreliminary()
    {
        return $this->container['change_property_value_old_preliminary'];
    }

    /**
     * Sets change_property_value_old_preliminary
     *
     * @param mixed|null $change_property_value_old_preliminary Percentage increase of property value from old to new preliminary valuation
     *
     * @return self
     */
    public function setChangePropertyValueOldPreliminary($change_property_value_old_preliminary)
    {
        if (is_null($change_property_value_old_preliminary)) {
            array_push($this->openAPINullablesSetToNull, 'change_property_value_old_preliminary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('change_property_value_old_preliminary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['change_property_value_old_preliminary'] = $change_property_value_old_preliminary;

        return $this;
    }

    /**
     * Gets change_land_value_old_preliminary
     *
     * @return mixed|null
     */
    public function getChangeLandValueOldPreliminary()
    {
        return $this->container['change_land_value_old_preliminary'];
    }

    /**
     * Sets change_land_value_old_preliminary
     *
     * @param mixed|null $change_land_value_old_preliminary Percentage increase of land value from old to new preliminary valuation
     *
     * @return self
     */
    public function setChangeLandValueOldPreliminary($change_land_value_old_preliminary)
    {
        if (is_null($change_land_value_old_preliminary)) {
            array_push($this->openAPINullablesSetToNull, 'change_land_value_old_preliminary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('change_land_value_old_preliminary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['change_land_value_old_preliminary'] = $change_land_value_old_preliminary;

        return $this;
    }

    /**
     * Gets change_property_value_new_preliminary
     *
     * @return mixed|null
     */
    public function getChangePropertyValueNewPreliminary()
    {
        return $this->container['change_property_value_new_preliminary'];
    }

    /**
     * Sets change_property_value_new_preliminary
     *
     * @param mixed|null $change_property_value_new_preliminary Percentage increase of property value from new to new preliminary valuation
     *
     * @return self
     */
    public function setChangePropertyValueNewPreliminary($change_property_value_new_preliminary)
    {
        if (is_null($change_property_value_new_preliminary)) {
            array_push($this->openAPINullablesSetToNull, 'change_property_value_new_preliminary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('change_property_value_new_preliminary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['change_property_value_new_preliminary'] = $change_property_value_new_preliminary;

        return $this;
    }

    /**
     * Gets change_land_value_new_preliminary
     *
     * @return mixed|null
     */
    public function getChangeLandValueNewPreliminary()
    {
        return $this->container['change_land_value_new_preliminary'];
    }

    /**
     * Sets change_land_value_new_preliminary
     *
     * @param mixed|null $change_land_value_new_preliminary Percentage increase of land value from new to new preliminary valuation
     *
     * @return self
     */
    public function setChangeLandValueNewPreliminary($change_land_value_new_preliminary)
    {
        if (is_null($change_land_value_new_preliminary)) {
            array_push($this->openAPINullablesSetToNull, 'change_land_value_new_preliminary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('change_land_value_new_preliminary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['change_land_value_new_preliminary'] = $change_land_value_new_preliminary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


