<?php
/**
 * RentalResponseModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RentalResponseModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RentalResponseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RentalResponseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pk' => 'mixed',
        'id' => 'mixed',
        'unit_internal_id' => 'mixed',
        'source' => 'mixed',
        'href' => 'mixed',
        'title' => 'mixed',
        'description' => 'mixed',
        'unit_type' => '\OpenAPI\Client\Model\UnitTypeEnum',
        'unit_category' => '\OpenAPI\Client\Model\UnitCategoryEnum',
        'observation_type' => '\OpenAPI\Client\Model\ObservationTypeEnum',
        'observation_process' => '\OpenAPI\Client\Model\ObservationProcessEnum',
        'rent_category' => '\OpenAPI\Client\Model\RentCategoryEnum',
        'rent_regulation' => 'mixed',
        'rent_regulation_text' => 'mixed',
        'rent_regulation_description' => 'mixed',
        'rooms' => 'mixed',
        'area' => 'mixed',
        'area_category' => 'mixed',
        'rent' => 'mixed',
        'rent_net' => 'mixed',
        'rent_gross' => 'mixed',
        'rent_net_monthly' => 'mixed',
        'rent_gross_monthly' => 'mixed',
        'utilities_estimate' => 'mixed',
        'rent_net_estimate' => 'mixed',
        'rent_gross_estimate' => 'mixed',
        'deposit' => 'mixed',
        'deposit_months' => 'mixed',
        'prepaid_rent' => 'mixed',
        'prepaid_rent_months' => 'mixed',
        'utilities' => 'mixed',
        'utilities_monthly' => 'mixed',
        'heat_monthly' => 'mixed',
        'water_monthly' => 'mixed',
        'power_monthly' => 'mixed',
        'other_utilities_monthly' => 'mixed',
        'address_name' => 'mixed',
        'address' => '\OpenAPI\Client\Model\RentalAddress',
        'unit_id' => 'mixed',
        'building_id' => 'mixed',
        'bfe_number' => 'mixed',
        'unit' => '\OpenAPI\Client\Model\RentalUnit',
        'matches' => 'mixed',
        'number_addresses' => 'mixed',
        'number_units' => 'mixed',
        'active' => 'mixed',
        'available_from' => 'mixed',
        'lease_start_date' => 'mixed',
        'created_at' => 'mixed',
        'updated_at' => 'mixed',
        'deleted_at' => 'mixed',
        'removed_at' => 'mixed',
        'period_from' => 'mixed',
        'period_to' => 'mixed',
        'organisation_id' => 'mixed',
        'contract' => 'mixed',
        'lng' => 'mixed',
        'lat' => 'mixed',
        'coordinate' => '\OpenAPI\Client\Model\ResightsCoreModelsRentalRentalElasticSearchCoordinateModel',
        'coordinate_anonymous' => '\OpenAPI\Client\Model\ResightsCoreModelsRentalRentalElasticSearchCoordinateModel',
        'internal_note' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pk' => null,
        'id' => null,
        'unit_internal_id' => null,
        'source' => null,
        'href' => null,
        'title' => null,
        'description' => null,
        'unit_type' => null,
        'unit_category' => null,
        'observation_type' => null,
        'observation_process' => null,
        'rent_category' => null,
        'rent_regulation' => null,
        'rent_regulation_text' => null,
        'rent_regulation_description' => null,
        'rooms' => null,
        'area' => null,
        'area_category' => null,
        'rent' => null,
        'rent_net' => null,
        'rent_gross' => null,
        'rent_net_monthly' => null,
        'rent_gross_monthly' => null,
        'utilities_estimate' => null,
        'rent_net_estimate' => null,
        'rent_gross_estimate' => null,
        'deposit' => null,
        'deposit_months' => null,
        'prepaid_rent' => null,
        'prepaid_rent_months' => null,
        'utilities' => null,
        'utilities_monthly' => null,
        'heat_monthly' => null,
        'water_monthly' => null,
        'power_monthly' => null,
        'other_utilities_monthly' => null,
        'address_name' => null,
        'address' => null,
        'unit_id' => null,
        'building_id' => null,
        'bfe_number' => null,
        'unit' => null,
        'matches' => null,
        'number_addresses' => null,
        'number_units' => null,
        'active' => null,
        'available_from' => 'date-time',
        'lease_start_date' => 'date-time',
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'deleted_at' => 'date-time',
        'removed_at' => 'date-time',
        'period_from' => 'date-time',
        'period_to' => 'date-time',
        'organisation_id' => null,
        'contract' => null,
        'lng' => null,
        'lat' => null,
        'coordinate' => null,
        'coordinate_anonymous' => null,
        'internal_note' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pk' => true,
		'id' => true,
		'unit_internal_id' => true,
		'source' => true,
		'href' => true,
		'title' => true,
		'description' => true,
		'unit_type' => false,
		'unit_category' => false,
		'observation_type' => false,
		'observation_process' => false,
		'rent_category' => false,
		'rent_regulation' => true,
		'rent_regulation_text' => true,
		'rent_regulation_description' => true,
		'rooms' => true,
		'area' => true,
		'area_category' => true,
		'rent' => true,
		'rent_net' => true,
		'rent_gross' => true,
		'rent_net_monthly' => true,
		'rent_gross_monthly' => true,
		'utilities_estimate' => true,
		'rent_net_estimate' => true,
		'rent_gross_estimate' => true,
		'deposit' => true,
		'deposit_months' => true,
		'prepaid_rent' => true,
		'prepaid_rent_months' => true,
		'utilities' => true,
		'utilities_monthly' => true,
		'heat_monthly' => true,
		'water_monthly' => true,
		'power_monthly' => true,
		'other_utilities_monthly' => true,
		'address_name' => true,
		'address' => false,
		'unit_id' => true,
		'building_id' => true,
		'bfe_number' => true,
		'unit' => false,
		'matches' => true,
		'number_addresses' => true,
		'number_units' => true,
		'active' => true,
		'available_from' => true,
		'lease_start_date' => true,
		'created_at' => true,
		'updated_at' => true,
		'deleted_at' => true,
		'removed_at' => true,
		'period_from' => true,
		'period_to' => true,
		'organisation_id' => true,
		'contract' => true,
		'lng' => true,
		'lat' => true,
		'coordinate' => false,
		'coordinate_anonymous' => false,
		'internal_note' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pk' => 'pk',
        'id' => 'id',
        'unit_internal_id' => 'unit_internal_id',
        'source' => 'source',
        'href' => 'href',
        'title' => 'title',
        'description' => 'description',
        'unit_type' => 'unit_type',
        'unit_category' => 'unit_category',
        'observation_type' => 'observation_type',
        'observation_process' => 'observation_process',
        'rent_category' => 'rent_category',
        'rent_regulation' => 'rent_regulation',
        'rent_regulation_text' => 'rent_regulation_text',
        'rent_regulation_description' => 'rent_regulation_description',
        'rooms' => 'rooms',
        'area' => 'area',
        'area_category' => 'area_category',
        'rent' => 'rent',
        'rent_net' => 'rent_net',
        'rent_gross' => 'rent_gross',
        'rent_net_monthly' => 'rent_net_monthly',
        'rent_gross_monthly' => 'rent_gross_monthly',
        'utilities_estimate' => 'utilities_estimate',
        'rent_net_estimate' => 'rent_net_estimate',
        'rent_gross_estimate' => 'rent_gross_estimate',
        'deposit' => 'deposit',
        'deposit_months' => 'deposit_months',
        'prepaid_rent' => 'prepaid_rent',
        'prepaid_rent_months' => 'prepaid_rent_months',
        'utilities' => 'utilities',
        'utilities_monthly' => 'utilities_monthly',
        'heat_monthly' => 'heat_monthly',
        'water_monthly' => 'water_monthly',
        'power_monthly' => 'power_monthly',
        'other_utilities_monthly' => 'other_utilities_monthly',
        'address_name' => 'address_name',
        'address' => 'address',
        'unit_id' => 'unit_id',
        'building_id' => 'building_id',
        'bfe_number' => 'bfe_number',
        'unit' => 'unit',
        'matches' => 'matches',
        'number_addresses' => 'number_addresses',
        'number_units' => 'number_units',
        'active' => 'active',
        'available_from' => 'available_from',
        'lease_start_date' => 'lease_start_date',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'deleted_at' => 'deleted_at',
        'removed_at' => 'removed_at',
        'period_from' => 'period_from',
        'period_to' => 'period_to',
        'organisation_id' => 'organisation_id',
        'contract' => 'contract',
        'lng' => 'lng',
        'lat' => 'lat',
        'coordinate' => 'coordinate',
        'coordinate_anonymous' => 'coordinate_anonymous',
        'internal_note' => 'internal_note'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pk' => 'setPk',
        'id' => 'setId',
        'unit_internal_id' => 'setUnitInternalId',
        'source' => 'setSource',
        'href' => 'setHref',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'unit_type' => 'setUnitType',
        'unit_category' => 'setUnitCategory',
        'observation_type' => 'setObservationType',
        'observation_process' => 'setObservationProcess',
        'rent_category' => 'setRentCategory',
        'rent_regulation' => 'setRentRegulation',
        'rent_regulation_text' => 'setRentRegulationText',
        'rent_regulation_description' => 'setRentRegulationDescription',
        'rooms' => 'setRooms',
        'area' => 'setArea',
        'area_category' => 'setAreaCategory',
        'rent' => 'setRent',
        'rent_net' => 'setRentNet',
        'rent_gross' => 'setRentGross',
        'rent_net_monthly' => 'setRentNetMonthly',
        'rent_gross_monthly' => 'setRentGrossMonthly',
        'utilities_estimate' => 'setUtilitiesEstimate',
        'rent_net_estimate' => 'setRentNetEstimate',
        'rent_gross_estimate' => 'setRentGrossEstimate',
        'deposit' => 'setDeposit',
        'deposit_months' => 'setDepositMonths',
        'prepaid_rent' => 'setPrepaidRent',
        'prepaid_rent_months' => 'setPrepaidRentMonths',
        'utilities' => 'setUtilities',
        'utilities_monthly' => 'setUtilitiesMonthly',
        'heat_monthly' => 'setHeatMonthly',
        'water_monthly' => 'setWaterMonthly',
        'power_monthly' => 'setPowerMonthly',
        'other_utilities_monthly' => 'setOtherUtilitiesMonthly',
        'address_name' => 'setAddressName',
        'address' => 'setAddress',
        'unit_id' => 'setUnitId',
        'building_id' => 'setBuildingId',
        'bfe_number' => 'setBfeNumber',
        'unit' => 'setUnit',
        'matches' => 'setMatches',
        'number_addresses' => 'setNumberAddresses',
        'number_units' => 'setNumberUnits',
        'active' => 'setActive',
        'available_from' => 'setAvailableFrom',
        'lease_start_date' => 'setLeaseStartDate',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'deleted_at' => 'setDeletedAt',
        'removed_at' => 'setRemovedAt',
        'period_from' => 'setPeriodFrom',
        'period_to' => 'setPeriodTo',
        'organisation_id' => 'setOrganisationId',
        'contract' => 'setContract',
        'lng' => 'setLng',
        'lat' => 'setLat',
        'coordinate' => 'setCoordinate',
        'coordinate_anonymous' => 'setCoordinateAnonymous',
        'internal_note' => 'setInternalNote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pk' => 'getPk',
        'id' => 'getId',
        'unit_internal_id' => 'getUnitInternalId',
        'source' => 'getSource',
        'href' => 'getHref',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'unit_type' => 'getUnitType',
        'unit_category' => 'getUnitCategory',
        'observation_type' => 'getObservationType',
        'observation_process' => 'getObservationProcess',
        'rent_category' => 'getRentCategory',
        'rent_regulation' => 'getRentRegulation',
        'rent_regulation_text' => 'getRentRegulationText',
        'rent_regulation_description' => 'getRentRegulationDescription',
        'rooms' => 'getRooms',
        'area' => 'getArea',
        'area_category' => 'getAreaCategory',
        'rent' => 'getRent',
        'rent_net' => 'getRentNet',
        'rent_gross' => 'getRentGross',
        'rent_net_monthly' => 'getRentNetMonthly',
        'rent_gross_monthly' => 'getRentGrossMonthly',
        'utilities_estimate' => 'getUtilitiesEstimate',
        'rent_net_estimate' => 'getRentNetEstimate',
        'rent_gross_estimate' => 'getRentGrossEstimate',
        'deposit' => 'getDeposit',
        'deposit_months' => 'getDepositMonths',
        'prepaid_rent' => 'getPrepaidRent',
        'prepaid_rent_months' => 'getPrepaidRentMonths',
        'utilities' => 'getUtilities',
        'utilities_monthly' => 'getUtilitiesMonthly',
        'heat_monthly' => 'getHeatMonthly',
        'water_monthly' => 'getWaterMonthly',
        'power_monthly' => 'getPowerMonthly',
        'other_utilities_monthly' => 'getOtherUtilitiesMonthly',
        'address_name' => 'getAddressName',
        'address' => 'getAddress',
        'unit_id' => 'getUnitId',
        'building_id' => 'getBuildingId',
        'bfe_number' => 'getBfeNumber',
        'unit' => 'getUnit',
        'matches' => 'getMatches',
        'number_addresses' => 'getNumberAddresses',
        'number_units' => 'getNumberUnits',
        'active' => 'getActive',
        'available_from' => 'getAvailableFrom',
        'lease_start_date' => 'getLeaseStartDate',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'deleted_at' => 'getDeletedAt',
        'removed_at' => 'getRemovedAt',
        'period_from' => 'getPeriodFrom',
        'period_to' => 'getPeriodTo',
        'organisation_id' => 'getOrganisationId',
        'contract' => 'getContract',
        'lng' => 'getLng',
        'lat' => 'getLat',
        'coordinate' => 'getCoordinate',
        'coordinate_anonymous' => 'getCoordinateAnonymous',
        'internal_note' => 'getInternalNote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pk', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('unit_internal_id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('href', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('unit_type', $data ?? [], null);
        $this->setIfExists('unit_category', $data ?? [], null);
        $this->setIfExists('observation_type', $data ?? [], null);
        $this->setIfExists('observation_process', $data ?? [], null);
        $this->setIfExists('rent_category', $data ?? [], null);
        $this->setIfExists('rent_regulation', $data ?? [], null);
        $this->setIfExists('rent_regulation_text', $data ?? [], null);
        $this->setIfExists('rent_regulation_description', $data ?? [], null);
        $this->setIfExists('rooms', $data ?? [], null);
        $this->setIfExists('area', $data ?? [], null);
        $this->setIfExists('area_category', $data ?? [], null);
        $this->setIfExists('rent', $data ?? [], null);
        $this->setIfExists('rent_net', $data ?? [], null);
        $this->setIfExists('rent_gross', $data ?? [], null);
        $this->setIfExists('rent_net_monthly', $data ?? [], null);
        $this->setIfExists('rent_gross_monthly', $data ?? [], null);
        $this->setIfExists('utilities_estimate', $data ?? [], null);
        $this->setIfExists('rent_net_estimate', $data ?? [], null);
        $this->setIfExists('rent_gross_estimate', $data ?? [], null);
        $this->setIfExists('deposit', $data ?? [], null);
        $this->setIfExists('deposit_months', $data ?? [], null);
        $this->setIfExists('prepaid_rent', $data ?? [], null);
        $this->setIfExists('prepaid_rent_months', $data ?? [], null);
        $this->setIfExists('utilities', $data ?? [], null);
        $this->setIfExists('utilities_monthly', $data ?? [], null);
        $this->setIfExists('heat_monthly', $data ?? [], null);
        $this->setIfExists('water_monthly', $data ?? [], null);
        $this->setIfExists('power_monthly', $data ?? [], null);
        $this->setIfExists('other_utilities_monthly', $data ?? [], null);
        $this->setIfExists('address_name', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('unit_id', $data ?? [], null);
        $this->setIfExists('building_id', $data ?? [], null);
        $this->setIfExists('bfe_number', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('matches', $data ?? [], null);
        $this->setIfExists('number_addresses', $data ?? [], null);
        $this->setIfExists('number_units', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('available_from', $data ?? [], null);
        $this->setIfExists('lease_start_date', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('removed_at', $data ?? [], null);
        $this->setIfExists('period_from', $data ?? [], null);
        $this->setIfExists('period_to', $data ?? [], null);
        $this->setIfExists('organisation_id', $data ?? [], null);
        $this->setIfExists('contract', $data ?? [], null);
        $this->setIfExists('lng', $data ?? [], null);
        $this->setIfExists('lat', $data ?? [], null);
        $this->setIfExists('coordinate', $data ?? [], null);
        $this->setIfExists('coordinate_anonymous', $data ?? [], null);
        $this->setIfExists('internal_note', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pk'] === null) {
            $invalidProperties[] = "'pk' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['unit_internal_id'] === null) {
            $invalidProperties[] = "'unit_internal_id' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['area'] === null) {
            $invalidProperties[] = "'area' can't be null";
        }
        if ($this->container['area_category'] === null) {
            $invalidProperties[] = "'area_category' can't be null";
        }
        if ($this->container['rent'] === null) {
            $invalidProperties[] = "'rent' can't be null";
        }
        if ($this->container['address_name'] === null) {
            $invalidProperties[] = "'address_name' can't be null";
        }
        if ($this->container['matches'] === null) {
            $invalidProperties[] = "'matches' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pk
     *
     * @return mixed
     */
    public function getPk()
    {
        return $this->container['pk'];
    }

    /**
     * Sets pk
     *
     * @param mixed $pk pk
     *
     * @return self
     */
    public function setPk($pk)
    {
        if (is_null($pk)) {
            array_push($this->openAPINullablesSetToNull, 'pk');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pk', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pk'] = $pk;

        return $this;
    }

    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets unit_internal_id
     *
     * @return mixed
     */
    public function getUnitInternalId()
    {
        return $this->container['unit_internal_id'];
    }

    /**
     * Sets unit_internal_id
     *
     * @param mixed $unit_internal_id unit_internal_id
     *
     * @return self
     */
    public function setUnitInternalId($unit_internal_id)
    {
        if (is_null($unit_internal_id)) {
            array_push($this->openAPINullablesSetToNull, 'unit_internal_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_internal_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_internal_id'] = $unit_internal_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return mixed
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param mixed $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            array_push($this->openAPINullablesSetToNull, 'source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets href
     *
     * @return mixed|null
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param mixed|null $href href
     *
     * @return self
     */
    public function setHref($href)
    {
        if (is_null($href)) {
            array_push($this->openAPINullablesSetToNull, 'href');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('href', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets title
     *
     * @return mixed|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param mixed|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return mixed|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param mixed|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return \OpenAPI\Client\Model\UnitTypeEnum|null
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param \OpenAPI\Client\Model\UnitTypeEnum|null $unit_type unit_type
     *
     * @return self
     */
    public function setUnitType($unit_type)
    {
        if (is_null($unit_type)) {
            throw new \InvalidArgumentException('non-nullable unit_type cannot be null');
        }
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets unit_category
     *
     * @return \OpenAPI\Client\Model\UnitCategoryEnum|null
     */
    public function getUnitCategory()
    {
        return $this->container['unit_category'];
    }

    /**
     * Sets unit_category
     *
     * @param \OpenAPI\Client\Model\UnitCategoryEnum|null $unit_category unit_category
     *
     * @return self
     */
    public function setUnitCategory($unit_category)
    {
        if (is_null($unit_category)) {
            throw new \InvalidArgumentException('non-nullable unit_category cannot be null');
        }
        $this->container['unit_category'] = $unit_category;

        return $this;
    }

    /**
     * Gets observation_type
     *
     * @return \OpenAPI\Client\Model\ObservationTypeEnum|null
     */
    public function getObservationType()
    {
        return $this->container['observation_type'];
    }

    /**
     * Sets observation_type
     *
     * @param \OpenAPI\Client\Model\ObservationTypeEnum|null $observation_type observation_type
     *
     * @return self
     */
    public function setObservationType($observation_type)
    {
        if (is_null($observation_type)) {
            throw new \InvalidArgumentException('non-nullable observation_type cannot be null');
        }
        $this->container['observation_type'] = $observation_type;

        return $this;
    }

    /**
     * Gets observation_process
     *
     * @return \OpenAPI\Client\Model\ObservationProcessEnum|null
     */
    public function getObservationProcess()
    {
        return $this->container['observation_process'];
    }

    /**
     * Sets observation_process
     *
     * @param \OpenAPI\Client\Model\ObservationProcessEnum|null $observation_process observation_process
     *
     * @return self
     */
    public function setObservationProcess($observation_process)
    {
        if (is_null($observation_process)) {
            throw new \InvalidArgumentException('non-nullable observation_process cannot be null');
        }
        $this->container['observation_process'] = $observation_process;

        return $this;
    }

    /**
     * Gets rent_category
     *
     * @return \OpenAPI\Client\Model\RentCategoryEnum|null
     */
    public function getRentCategory()
    {
        return $this->container['rent_category'];
    }

    /**
     * Sets rent_category
     *
     * @param \OpenAPI\Client\Model\RentCategoryEnum|null $rent_category rent_category
     *
     * @return self
     */
    public function setRentCategory($rent_category)
    {
        if (is_null($rent_category)) {
            throw new \InvalidArgumentException('non-nullable rent_category cannot be null');
        }
        $this->container['rent_category'] = $rent_category;

        return $this;
    }

    /**
     * Gets rent_regulation
     *
     * @return mixed|null
     */
    public function getRentRegulation()
    {
        return $this->container['rent_regulation'];
    }

    /**
     * Sets rent_regulation
     *
     * @param mixed|null $rent_regulation rent_regulation
     *
     * @return self
     */
    public function setRentRegulation($rent_regulation)
    {
        if (is_null($rent_regulation)) {
            array_push($this->openAPINullablesSetToNull, 'rent_regulation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rent_regulation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rent_regulation'] = $rent_regulation;

        return $this;
    }

    /**
     * Gets rent_regulation_text
     *
     * @return mixed|null
     */
    public function getRentRegulationText()
    {
        return $this->container['rent_regulation_text'];
    }

    /**
     * Sets rent_regulation_text
     *
     * @param mixed|null $rent_regulation_text rent_regulation_text
     *
     * @return self
     */
    public function setRentRegulationText($rent_regulation_text)
    {
        if (is_null($rent_regulation_text)) {
            array_push($this->openAPINullablesSetToNull, 'rent_regulation_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rent_regulation_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rent_regulation_text'] = $rent_regulation_text;

        return $this;
    }

    /**
     * Gets rent_regulation_description
     *
     * @return mixed|null
     */
    public function getRentRegulationDescription()
    {
        return $this->container['rent_regulation_description'];
    }

    /**
     * Sets rent_regulation_description
     *
     * @param mixed|null $rent_regulation_description rent_regulation_description
     *
     * @return self
     */
    public function setRentRegulationDescription($rent_regulation_description)
    {
        if (is_null($rent_regulation_description)) {
            array_push($this->openAPINullablesSetToNull, 'rent_regulation_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rent_regulation_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rent_regulation_description'] = $rent_regulation_description;

        return $this;
    }

    /**
     * Gets rooms
     *
     * @return mixed|null
     */
    public function getRooms()
    {
        return $this->container['rooms'];
    }

    /**
     * Sets rooms
     *
     * @param mixed|null $rooms rooms
     *
     * @return self
     */
    public function setRooms($rooms)
    {
        if (is_null($rooms)) {
            array_push($this->openAPINullablesSetToNull, 'rooms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rooms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rooms'] = $rooms;

        return $this;
    }

    /**
     * Gets area
     *
     * @return mixed
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param mixed $area area
     *
     * @return self
     */
    public function setArea($area)
    {
        if (is_null($area)) {
            array_push($this->openAPINullablesSetToNull, 'area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets area_category
     *
     * @return mixed
     */
    public function getAreaCategory()
    {
        return $this->container['area_category'];
    }

    /**
     * Sets area_category
     *
     * @param mixed $area_category area_category
     *
     * @return self
     */
    public function setAreaCategory($area_category)
    {
        if (is_null($area_category)) {
            array_push($this->openAPINullablesSetToNull, 'area_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('area_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['area_category'] = $area_category;

        return $this;
    }

    /**
     * Gets rent
     *
     * @return mixed
     */
    public function getRent()
    {
        return $this->container['rent'];
    }

    /**
     * Sets rent
     *
     * @param mixed $rent rent
     *
     * @return self
     */
    public function setRent($rent)
    {
        if (is_null($rent)) {
            array_push($this->openAPINullablesSetToNull, 'rent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rent'] = $rent;

        return $this;
    }

    /**
     * Gets rent_net
     *
     * @return mixed|null
     */
    public function getRentNet()
    {
        return $this->container['rent_net'];
    }

    /**
     * Sets rent_net
     *
     * @param mixed|null $rent_net rent_net
     *
     * @return self
     */
    public function setRentNet($rent_net)
    {
        if (is_null($rent_net)) {
            array_push($this->openAPINullablesSetToNull, 'rent_net');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rent_net', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rent_net'] = $rent_net;

        return $this;
    }

    /**
     * Gets rent_gross
     *
     * @return mixed|null
     */
    public function getRentGross()
    {
        return $this->container['rent_gross'];
    }

    /**
     * Sets rent_gross
     *
     * @param mixed|null $rent_gross rent_gross
     *
     * @return self
     */
    public function setRentGross($rent_gross)
    {
        if (is_null($rent_gross)) {
            array_push($this->openAPINullablesSetToNull, 'rent_gross');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rent_gross', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rent_gross'] = $rent_gross;

        return $this;
    }

    /**
     * Gets rent_net_monthly
     *
     * @return mixed|null
     */
    public function getRentNetMonthly()
    {
        return $this->container['rent_net_monthly'];
    }

    /**
     * Sets rent_net_monthly
     *
     * @param mixed|null $rent_net_monthly rent_net_monthly
     *
     * @return self
     */
    public function setRentNetMonthly($rent_net_monthly)
    {
        if (is_null($rent_net_monthly)) {
            array_push($this->openAPINullablesSetToNull, 'rent_net_monthly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rent_net_monthly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rent_net_monthly'] = $rent_net_monthly;

        return $this;
    }

    /**
     * Gets rent_gross_monthly
     *
     * @return mixed|null
     */
    public function getRentGrossMonthly()
    {
        return $this->container['rent_gross_monthly'];
    }

    /**
     * Sets rent_gross_monthly
     *
     * @param mixed|null $rent_gross_monthly rent_gross_monthly
     *
     * @return self
     */
    public function setRentGrossMonthly($rent_gross_monthly)
    {
        if (is_null($rent_gross_monthly)) {
            array_push($this->openAPINullablesSetToNull, 'rent_gross_monthly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rent_gross_monthly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rent_gross_monthly'] = $rent_gross_monthly;

        return $this;
    }

    /**
     * Gets utilities_estimate
     *
     * @return mixed|null
     */
    public function getUtilitiesEstimate()
    {
        return $this->container['utilities_estimate'];
    }

    /**
     * Sets utilities_estimate
     *
     * @param mixed|null $utilities_estimate utilities_estimate
     *
     * @return self
     */
    public function setUtilitiesEstimate($utilities_estimate)
    {
        if (is_null($utilities_estimate)) {
            array_push($this->openAPINullablesSetToNull, 'utilities_estimate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('utilities_estimate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['utilities_estimate'] = $utilities_estimate;

        return $this;
    }

    /**
     * Gets rent_net_estimate
     *
     * @return mixed|null
     */
    public function getRentNetEstimate()
    {
        return $this->container['rent_net_estimate'];
    }

    /**
     * Sets rent_net_estimate
     *
     * @param mixed|null $rent_net_estimate rent_net_estimate
     *
     * @return self
     */
    public function setRentNetEstimate($rent_net_estimate)
    {
        if (is_null($rent_net_estimate)) {
            array_push($this->openAPINullablesSetToNull, 'rent_net_estimate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rent_net_estimate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rent_net_estimate'] = $rent_net_estimate;

        return $this;
    }

    /**
     * Gets rent_gross_estimate
     *
     * @return mixed|null
     */
    public function getRentGrossEstimate()
    {
        return $this->container['rent_gross_estimate'];
    }

    /**
     * Sets rent_gross_estimate
     *
     * @param mixed|null $rent_gross_estimate rent_gross_estimate
     *
     * @return self
     */
    public function setRentGrossEstimate($rent_gross_estimate)
    {
        if (is_null($rent_gross_estimate)) {
            array_push($this->openAPINullablesSetToNull, 'rent_gross_estimate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rent_gross_estimate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rent_gross_estimate'] = $rent_gross_estimate;

        return $this;
    }

    /**
     * Gets deposit
     *
     * @return mixed|null
     */
    public function getDeposit()
    {
        return $this->container['deposit'];
    }

    /**
     * Sets deposit
     *
     * @param mixed|null $deposit deposit
     *
     * @return self
     */
    public function setDeposit($deposit)
    {
        if (is_null($deposit)) {
            array_push($this->openAPINullablesSetToNull, 'deposit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deposit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deposit'] = $deposit;

        return $this;
    }

    /**
     * Gets deposit_months
     *
     * @return mixed|null
     */
    public function getDepositMonths()
    {
        return $this->container['deposit_months'];
    }

    /**
     * Sets deposit_months
     *
     * @param mixed|null $deposit_months deposit_months
     *
     * @return self
     */
    public function setDepositMonths($deposit_months)
    {
        if (is_null($deposit_months)) {
            array_push($this->openAPINullablesSetToNull, 'deposit_months');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deposit_months', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deposit_months'] = $deposit_months;

        return $this;
    }

    /**
     * Gets prepaid_rent
     *
     * @return mixed|null
     */
    public function getPrepaidRent()
    {
        return $this->container['prepaid_rent'];
    }

    /**
     * Sets prepaid_rent
     *
     * @param mixed|null $prepaid_rent prepaid_rent
     *
     * @return self
     */
    public function setPrepaidRent($prepaid_rent)
    {
        if (is_null($prepaid_rent)) {
            array_push($this->openAPINullablesSetToNull, 'prepaid_rent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prepaid_rent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prepaid_rent'] = $prepaid_rent;

        return $this;
    }

    /**
     * Gets prepaid_rent_months
     *
     * @return mixed|null
     */
    public function getPrepaidRentMonths()
    {
        return $this->container['prepaid_rent_months'];
    }

    /**
     * Sets prepaid_rent_months
     *
     * @param mixed|null $prepaid_rent_months prepaid_rent_months
     *
     * @return self
     */
    public function setPrepaidRentMonths($prepaid_rent_months)
    {
        if (is_null($prepaid_rent_months)) {
            array_push($this->openAPINullablesSetToNull, 'prepaid_rent_months');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prepaid_rent_months', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prepaid_rent_months'] = $prepaid_rent_months;

        return $this;
    }

    /**
     * Gets utilities
     *
     * @return mixed|null
     */
    public function getUtilities()
    {
        return $this->container['utilities'];
    }

    /**
     * Sets utilities
     *
     * @param mixed|null $utilities utilities
     *
     * @return self
     */
    public function setUtilities($utilities)
    {
        if (is_null($utilities)) {
            array_push($this->openAPINullablesSetToNull, 'utilities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('utilities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['utilities'] = $utilities;

        return $this;
    }

    /**
     * Gets utilities_monthly
     *
     * @return mixed|null
     */
    public function getUtilitiesMonthly()
    {
        return $this->container['utilities_monthly'];
    }

    /**
     * Sets utilities_monthly
     *
     * @param mixed|null $utilities_monthly utilities_monthly
     *
     * @return self
     */
    public function setUtilitiesMonthly($utilities_monthly)
    {
        if (is_null($utilities_monthly)) {
            array_push($this->openAPINullablesSetToNull, 'utilities_monthly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('utilities_monthly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['utilities_monthly'] = $utilities_monthly;

        return $this;
    }

    /**
     * Gets heat_monthly
     *
     * @return mixed|null
     */
    public function getHeatMonthly()
    {
        return $this->container['heat_monthly'];
    }

    /**
     * Sets heat_monthly
     *
     * @param mixed|null $heat_monthly heat_monthly
     *
     * @return self
     */
    public function setHeatMonthly($heat_monthly)
    {
        if (is_null($heat_monthly)) {
            array_push($this->openAPINullablesSetToNull, 'heat_monthly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('heat_monthly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['heat_monthly'] = $heat_monthly;

        return $this;
    }

    /**
     * Gets water_monthly
     *
     * @return mixed|null
     */
    public function getWaterMonthly()
    {
        return $this->container['water_monthly'];
    }

    /**
     * Sets water_monthly
     *
     * @param mixed|null $water_monthly water_monthly
     *
     * @return self
     */
    public function setWaterMonthly($water_monthly)
    {
        if (is_null($water_monthly)) {
            array_push($this->openAPINullablesSetToNull, 'water_monthly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('water_monthly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['water_monthly'] = $water_monthly;

        return $this;
    }

    /**
     * Gets power_monthly
     *
     * @return mixed|null
     */
    public function getPowerMonthly()
    {
        return $this->container['power_monthly'];
    }

    /**
     * Sets power_monthly
     *
     * @param mixed|null $power_monthly power_monthly
     *
     * @return self
     */
    public function setPowerMonthly($power_monthly)
    {
        if (is_null($power_monthly)) {
            array_push($this->openAPINullablesSetToNull, 'power_monthly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('power_monthly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['power_monthly'] = $power_monthly;

        return $this;
    }

    /**
     * Gets other_utilities_monthly
     *
     * @return mixed|null
     */
    public function getOtherUtilitiesMonthly()
    {
        return $this->container['other_utilities_monthly'];
    }

    /**
     * Sets other_utilities_monthly
     *
     * @param mixed|null $other_utilities_monthly other_utilities_monthly
     *
     * @return self
     */
    public function setOtherUtilitiesMonthly($other_utilities_monthly)
    {
        if (is_null($other_utilities_monthly)) {
            array_push($this->openAPINullablesSetToNull, 'other_utilities_monthly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_utilities_monthly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['other_utilities_monthly'] = $other_utilities_monthly;

        return $this;
    }

    /**
     * Gets address_name
     *
     * @return mixed
     */
    public function getAddressName()
    {
        return $this->container['address_name'];
    }

    /**
     * Sets address_name
     *
     * @param mixed $address_name address_name
     *
     * @return self
     */
    public function setAddressName($address_name)
    {
        if (is_null($address_name)) {
            array_push($this->openAPINullablesSetToNull, 'address_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_name'] = $address_name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\RentalAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\RentalAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return mixed|null
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param mixed|null $unit_id unit_id
     *
     * @return self
     */
    public function setUnitId($unit_id)
    {
        if (is_null($unit_id)) {
            array_push($this->openAPINullablesSetToNull, 'unit_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets building_id
     *
     * @return mixed|null
     */
    public function getBuildingId()
    {
        return $this->container['building_id'];
    }

    /**
     * Sets building_id
     *
     * @param mixed|null $building_id building_id
     *
     * @return self
     */
    public function setBuildingId($building_id)
    {
        if (is_null($building_id)) {
            array_push($this->openAPINullablesSetToNull, 'building_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_id'] = $building_id;

        return $this;
    }

    /**
     * Gets bfe_number
     *
     * @return mixed|null
     */
    public function getBfeNumber()
    {
        return $this->container['bfe_number'];
    }

    /**
     * Sets bfe_number
     *
     * @param mixed|null $bfe_number bfe_number
     *
     * @return self
     */
    public function setBfeNumber($bfe_number)
    {
        if (is_null($bfe_number)) {
            array_push($this->openAPINullablesSetToNull, 'bfe_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bfe_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bfe_number'] = $bfe_number;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return \OpenAPI\Client\Model\RentalUnit|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param \OpenAPI\Client\Model\RentalUnit|null $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            throw new \InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets matches
     *
     * @return mixed
     */
    public function getMatches()
    {
        return $this->container['matches'];
    }

    /**
     * Sets matches
     *
     * @param mixed $matches matches
     *
     * @return self
     */
    public function setMatches($matches)
    {
        if (is_null($matches)) {
            array_push($this->openAPINullablesSetToNull, 'matches');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('matches', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['matches'] = $matches;

        return $this;
    }

    /**
     * Gets number_addresses
     *
     * @return mixed|null
     */
    public function getNumberAddresses()
    {
        return $this->container['number_addresses'];
    }

    /**
     * Sets number_addresses
     *
     * @param mixed|null $number_addresses number_addresses
     *
     * @return self
     */
    public function setNumberAddresses($number_addresses)
    {
        if (is_null($number_addresses)) {
            array_push($this->openAPINullablesSetToNull, 'number_addresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_addresses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_addresses'] = $number_addresses;

        return $this;
    }

    /**
     * Gets number_units
     *
     * @return mixed|null
     */
    public function getNumberUnits()
    {
        return $this->container['number_units'];
    }

    /**
     * Sets number_units
     *
     * @param mixed|null $number_units number_units
     *
     * @return self
     */
    public function setNumberUnits($number_units)
    {
        if (is_null($number_units)) {
            array_push($this->openAPINullablesSetToNull, 'number_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_units', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_units'] = $number_units;

        return $this;
    }

    /**
     * Gets active
     *
     * @return mixed
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param mixed $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            array_push($this->openAPINullablesSetToNull, 'active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets available_from
     *
     * @return mixed|null
     */
    public function getAvailableFrom()
    {
        return $this->container['available_from'];
    }

    /**
     * Sets available_from
     *
     * @param mixed|null $available_from available_from
     *
     * @return self
     */
    public function setAvailableFrom($available_from)
    {
        if (is_null($available_from)) {
            array_push($this->openAPINullablesSetToNull, 'available_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('available_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['available_from'] = $available_from;

        return $this;
    }

    /**
     * Gets lease_start_date
     *
     * @return mixed|null
     */
    public function getLeaseStartDate()
    {
        return $this->container['lease_start_date'];
    }

    /**
     * Sets lease_start_date
     *
     * @param mixed|null $lease_start_date lease_start_date
     *
     * @return self
     */
    public function setLeaseStartDate($lease_start_date)
    {
        if (is_null($lease_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'lease_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lease_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lease_start_date'] = $lease_start_date;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return mixed
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param mixed $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return mixed|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param mixed|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return mixed|null
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param mixed|null $deleted_at deleted_at
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {
        if (is_null($deleted_at)) {
            array_push($this->openAPINullablesSetToNull, 'deleted_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets removed_at
     *
     * @return mixed|null
     */
    public function getRemovedAt()
    {
        return $this->container['removed_at'];
    }

    /**
     * Sets removed_at
     *
     * @param mixed|null $removed_at removed_at
     *
     * @return self
     */
    public function setRemovedAt($removed_at)
    {
        if (is_null($removed_at)) {
            array_push($this->openAPINullablesSetToNull, 'removed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('removed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['removed_at'] = $removed_at;

        return $this;
    }

    /**
     * Gets period_from
     *
     * @return mixed|null
     */
    public function getPeriodFrom()
    {
        return $this->container['period_from'];
    }

    /**
     * Sets period_from
     *
     * @param mixed|null $period_from period_from
     *
     * @return self
     */
    public function setPeriodFrom($period_from)
    {
        if (is_null($period_from)) {
            array_push($this->openAPINullablesSetToNull, 'period_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('period_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['period_from'] = $period_from;

        return $this;
    }

    /**
     * Gets period_to
     *
     * @return mixed|null
     */
    public function getPeriodTo()
    {
        return $this->container['period_to'];
    }

    /**
     * Sets period_to
     *
     * @param mixed|null $period_to period_to
     *
     * @return self
     */
    public function setPeriodTo($period_to)
    {
        if (is_null($period_to)) {
            array_push($this->openAPINullablesSetToNull, 'period_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('period_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['period_to'] = $period_to;

        return $this;
    }

    /**
     * Gets organisation_id
     *
     * @return mixed|null
     */
    public function getOrganisationId()
    {
        return $this->container['organisation_id'];
    }

    /**
     * Sets organisation_id
     *
     * @param mixed|null $organisation_id organisation_id
     *
     * @return self
     */
    public function setOrganisationId($organisation_id)
    {
        if (is_null($organisation_id)) {
            array_push($this->openAPINullablesSetToNull, 'organisation_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organisation_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organisation_id'] = $organisation_id;

        return $this;
    }

    /**
     * Gets contract
     *
     * @return mixed|null
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param mixed|null $contract contract
     *
     * @return self
     */
    public function setContract($contract)
    {
        if (is_null($contract)) {
            array_push($this->openAPINullablesSetToNull, 'contract');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contract', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets lng
     *
     * @return mixed|null
     */
    public function getLng()
    {
        return $this->container['lng'];
    }

    /**
     * Sets lng
     *
     * @param mixed|null $lng lng
     *
     * @return self
     */
    public function setLng($lng)
    {
        if (is_null($lng)) {
            array_push($this->openAPINullablesSetToNull, 'lng');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lng', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lng'] = $lng;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return mixed|null
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param mixed|null $lat lat
     *
     * @return self
     */
    public function setLat($lat)
    {
        if (is_null($lat)) {
            array_push($this->openAPINullablesSetToNull, 'lat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets coordinate
     *
     * @return \OpenAPI\Client\Model\ResightsCoreModelsRentalRentalElasticSearchCoordinateModel|null
     */
    public function getCoordinate()
    {
        return $this->container['coordinate'];
    }

    /**
     * Sets coordinate
     *
     * @param \OpenAPI\Client\Model\ResightsCoreModelsRentalRentalElasticSearchCoordinateModel|null $coordinate coordinate
     *
     * @return self
     */
    public function setCoordinate($coordinate)
    {
        if (is_null($coordinate)) {
            throw new \InvalidArgumentException('non-nullable coordinate cannot be null');
        }
        $this->container['coordinate'] = $coordinate;

        return $this;
    }

    /**
     * Gets coordinate_anonymous
     *
     * @return \OpenAPI\Client\Model\ResightsCoreModelsRentalRentalElasticSearchCoordinateModel|null
     */
    public function getCoordinateAnonymous()
    {
        return $this->container['coordinate_anonymous'];
    }

    /**
     * Sets coordinate_anonymous
     *
     * @param \OpenAPI\Client\Model\ResightsCoreModelsRentalRentalElasticSearchCoordinateModel|null $coordinate_anonymous coordinate_anonymous
     *
     * @return self
     */
    public function setCoordinateAnonymous($coordinate_anonymous)
    {
        if (is_null($coordinate_anonymous)) {
            throw new \InvalidArgumentException('non-nullable coordinate_anonymous cannot be null');
        }
        $this->container['coordinate_anonymous'] = $coordinate_anonymous;

        return $this;
    }

    /**
     * Gets internal_note
     *
     * @return mixed|null
     */
    public function getInternalNote()
    {
        return $this->container['internal_note'];
    }

    /**
     * Sets internal_note
     *
     * @param mixed|null $internal_note internal_note
     *
     * @return self
     */
    public function setInternalNote($internal_note)
    {
        if (is_null($internal_note)) {
            array_push($this->openAPINullablesSetToNull, 'internal_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internal_note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['internal_note'] = $internal_note;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


