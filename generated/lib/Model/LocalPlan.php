<?php
/**
 * LocalPlan
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LocalPlan Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LocalPlan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LocalPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'oid' => 'mixed',
        'plan_id' => 'mixed',
        'municipality_code' => 'mixed',
        'municipality_name' => 'mixed',
        'object_code' => '\OpenAPI\Client\Model\ObjectcodeEnum',
        'plan_type' => '\OpenAPI\Client\Model\PlantypeEnum',
        'plan_number' => 'mixed',
        'plan_name' => 'mixed',
        'plan_status' => '\OpenAPI\Client\Model\PlanStatusEnum',
        'usage' => 'mixed',
        'usage_general' => 'mixed',
        'date_proposal' => 'mixed',
        'date_adopted' => 'mixed',
        'date_cancelled' => 'mixed',
        'date_in_force' => 'mixed',
        'date_start' => 'mixed',
        'date_end' => 'mixed',
        'date_attributes' => 'mixed',
        'date_geometry' => 'mixed',
        'date_created' => 'mixed',
        'date_updated' => 'mixed',
        'link' => 'mixed',
        'district' => 'mixed',
        'zone' => '\OpenAPI\Client\Model\ResightsModelsEnumsPlandataZoneEnum',
        'zone_status' => '\OpenAPI\Client\Model\ZonestatusEnum',
        'constructed_percentage_valid_for' => 'mixed',
        'min_environment_class_allowed' => 'mixed',
        'max_environment_class_allowed' => 'mixed',
        'conservation_description' => 'mixed',
        'construction_share' => 'mixed',
        'min_land' => 'mixed',
        'mega_watt' => 'mixed',
        'contains_vvm' => 'mixed',
        'supplementary_conditions' => 'mixed',
        'zone_status_regulated' => 'mixed',
        'usage_regulated' => 'mixed',
        'scope_regulated' => 'mixed',
        'parcel_size_regulated' => 'mixed',
        'complex' => 'mixed',
        'complex_description' => 'mixed',
        'wind_description' => 'mixed',
        'state_plan' => 'mixed',
        'signs_facade_regulated_1' => '\OpenAPI\Client\Model\AbestemEnum',
        'signs_facade_regulated_2' => '\OpenAPI\Client\Model\AbestemEnum',
        'signs_facade_regulated_3' => '\OpenAPI\Client\Model\AbestemEnum',
        'usage_specific_1' => 'mixed',
        'usage_specific_2' => 'mixed',
        'usage_specific_3' => 'mixed',
        'usage_specific_4' => 'mixed',
        'usage_specific_5' => 'mixed',
        'usage_specific_6' => 'mixed',
        'usage_specific_7' => 'mixed',
        'usage_specific_8' => 'mixed',
        'usage_specific_9' => 'mixed',
        'usage_specific_10' => 'mixed',
        'max_constructed_percentage_area' => 'mixed',
        'max_constructed_percentage_area_1' => 'mixed',
        'max_constructed_percentage_area_2' => 'mixed',
        'max_constructed_percentage_area_3' => 'mixed',
        'max_constructed_percentage_area_4' => 'mixed',
        'max_constructed_percentage_area_5' => 'mixed',
        'max_constructed_percentage_area_6' => 'mixed',
        'max_constructed_percentage_area_7' => 'mixed',
        'max_constructed_percentage_area_8' => 'mixed',
        'max_constructed_percentage_area_9' => 'mixed',
        'max_constructed_percentage_area_10' => 'mixed',
        'max_constructed_share_calculated_from_1' => 'mixed',
        'max_constructed_share_calculated_from_2' => 'mixed',
        'max_constructed_share_calculated_from_3' => 'mixed',
        'max_constructed_share_calculated_from_4' => 'mixed',
        'max_constructed_share_calculated_from_5' => 'mixed',
        'max_constructed_share_calculated_from_6' => 'mixed',
        'max_constructed_share_calculated_from_7' => 'mixed',
        'max_constructed_share_calculated_from_8' => 'mixed',
        'max_constructed_share_calculated_from_9' => 'mixed',
        'max_constructed_share_calculated_from_10' => 'mixed',
        'max_share_land_construction' => 'mixed',
        'max_share_land_construction_1' => 'mixed',
        'max_share_land_construction_2' => 'mixed',
        'max_share_land_construction_3' => 'mixed',
        'max_share_land_construction_4' => 'mixed',
        'max_share_land_construction_5' => 'mixed',
        'max_share_land_construction_6' => 'mixed',
        'max_share_land_construction_7' => 'mixed',
        'max_share_land_construction_8' => 'mixed',
        'max_share_land_construction_9' => 'mixed',
        'max_share_land_construction_10' => 'mixed',
        'max_floors' => 'mixed',
        'max_floors_1' => 'mixed',
        'max_floors_2' => 'mixed',
        'max_floors_3' => 'mixed',
        'max_floors_4' => 'mixed',
        'max_floors_5' => 'mixed',
        'max_floors_6' => 'mixed',
        'max_floors_7' => 'mixed',
        'max_floors_8' => 'mixed',
        'max_floors_9' => 'mixed',
        'max_floors_10' => 'mixed',
        'max_floor_area' => 'mixed',
        'max_floor_area_1' => 'mixed',
        'max_floor_area_2' => 'mixed',
        'max_floor_area_3' => 'mixed',
        'max_floor_area_4' => 'mixed',
        'max_floor_area_5' => 'mixed',
        'max_floor_area_6' => 'mixed',
        'max_floor_area_7' => 'mixed',
        'max_floor_area_8' => 'mixed',
        'max_floor_area_9' => 'mixed',
        'max_floor_area_10' => 'mixed',
        'max_floor_area_valid_for' => 'mixed',
        'max_floor_area_valid_for_1' => 'mixed',
        'max_floor_area_valid_for_2' => 'mixed',
        'max_floor_area_valid_for_3' => 'mixed',
        'max_floor_area_valid_for_4' => 'mixed',
        'max_floor_area_valid_for_5' => 'mixed',
        'max_floor_area_valid_for_6' => 'mixed',
        'max_floor_area_valid_for_7' => 'mixed',
        'max_floor_area_valid_for_8' => 'mixed',
        'max_floor_area_valid_for_9' => 'mixed',
        'max_floor_area_valid_for_10' => 'mixed',
        'max_sqm3_per_sqm2' => 'mixed',
        'max_sqm3_per_sqm2_1' => 'mixed',
        'max_sqm3_per_sqm2_2' => 'mixed',
        'max_sqm3_per_sqm2_3' => 'mixed',
        'max_sqm3_per_sqm2_4' => 'mixed',
        'max_sqm3_per_sqm2_5' => 'mixed',
        'max_sqm3_per_sqm2_6' => 'mixed',
        'max_sqm3_per_sqm2_7' => 'mixed',
        'max_sqm3_per_sqm2_8' => 'mixed',
        'max_sqm3_per_sqm2_9' => 'mixed',
        'max_sqm3_per_sqm2_10' => 'mixed',
        'max_sqm3_per_sqm2_valid_for' => 'mixed',
        'max_sqm3_per_sqm2_valid_for_1' => 'mixed',
        'max_sqm3_per_sqm2_valid_for_2' => 'mixed',
        'max_sqm3_per_sqm2_valid_for_3' => 'mixed',
        'max_sqm3_per_sqm2_valid_for_4' => 'mixed',
        'max_sqm3_per_sqm2_valid_for_5' => 'mixed',
        'max_sqm3_per_sqm2_valid_for_6' => 'mixed',
        'max_sqm3_per_sqm2_valid_for_7' => 'mixed',
        'max_sqm3_per_sqm2_valid_for_8' => 'mixed',
        'max_sqm3_per_sqm2_valid_for_9' => 'mixed',
        'max_sqm3_per_sqm2_valid_for_10' => 'mixed',
        'max_building_height' => 'mixed',
        'max_building_height_1' => 'mixed',
        'max_building_height_2' => 'mixed',
        'max_building_height_3' => 'mixed',
        'max_building_height_4' => 'mixed',
        'max_building_height_5' => 'mixed',
        'max_building_height_6' => 'mixed',
        'max_building_height_7' => 'mixed',
        'max_building_height_8' => 'mixed',
        'max_building_height_9' => 'mixed',
        'max_building_height_10' => 'mixed',
        'min_parcel_size' => 'mixed',
        'min_parcel_size_1' => 'mixed',
        'min_parcel_size_2' => 'mixed',
        'min_parcel_size_3' => 'mixed',
        'min_parcel_size_4' => 'mixed',
        'min_parcel_size_5' => 'mixed',
        'min_parcel_size_6' => 'mixed',
        'min_parcel_size_7' => 'mixed',
        'min_parcel_size_8' => 'mixed',
        'min_parcel_size_9' => 'mixed',
        'min_parcel_size_10' => 'mixed',
        'parcel_subdivision_regulated' => 'mixed',
        'parcel_subdivision_regulated_1' => 'mixed',
        'parcel_subdivision_regulated_2' => 'mixed',
        'parcel_subdivision_regulated_3' => 'mixed',
        'parcel_subdivision_regulated_4' => 'mixed',
        'parcel_subdivision_regulated_5' => 'mixed',
        'parcel_subdivision_regulated_6' => 'mixed',
        'parcel_subdivision_regulated_7' => 'mixed',
        'parcel_subdivision_regulated_8' => 'mixed',
        'parcel_subdivision_regulated_9' => 'mixed',
        'parcel_subdivision_regulated_10' => 'mixed',
        'geom' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'oid' => null,
        'plan_id' => null,
        'municipality_code' => null,
        'municipality_name' => null,
        'object_code' => null,
        'plan_type' => null,
        'plan_number' => null,
        'plan_name' => null,
        'plan_status' => null,
        'usage' => null,
        'usage_general' => null,
        'date_proposal' => 'date',
        'date_adopted' => 'date',
        'date_cancelled' => 'date',
        'date_in_force' => 'date',
        'date_start' => 'date',
        'date_end' => 'date',
        'date_attributes' => 'date',
        'date_geometry' => 'date',
        'date_created' => 'date-time',
        'date_updated' => 'date-time',
        'link' => null,
        'district' => null,
        'zone' => null,
        'zone_status' => null,
        'constructed_percentage_valid_for' => null,
        'min_environment_class_allowed' => null,
        'max_environment_class_allowed' => null,
        'conservation_description' => null,
        'construction_share' => null,
        'min_land' => null,
        'mega_watt' => null,
        'contains_vvm' => null,
        'supplementary_conditions' => null,
        'zone_status_regulated' => null,
        'usage_regulated' => null,
        'scope_regulated' => null,
        'parcel_size_regulated' => null,
        'complex' => null,
        'complex_description' => null,
        'wind_description' => null,
        'state_plan' => null,
        'signs_facade_regulated_1' => null,
        'signs_facade_regulated_2' => null,
        'signs_facade_regulated_3' => null,
        'usage_specific_1' => null,
        'usage_specific_2' => null,
        'usage_specific_3' => null,
        'usage_specific_4' => null,
        'usage_specific_5' => null,
        'usage_specific_6' => null,
        'usage_specific_7' => null,
        'usage_specific_8' => null,
        'usage_specific_9' => null,
        'usage_specific_10' => null,
        'max_constructed_percentage_area' => null,
        'max_constructed_percentage_area_1' => null,
        'max_constructed_percentage_area_2' => null,
        'max_constructed_percentage_area_3' => null,
        'max_constructed_percentage_area_4' => null,
        'max_constructed_percentage_area_5' => null,
        'max_constructed_percentage_area_6' => null,
        'max_constructed_percentage_area_7' => null,
        'max_constructed_percentage_area_8' => null,
        'max_constructed_percentage_area_9' => null,
        'max_constructed_percentage_area_10' => null,
        'max_constructed_share_calculated_from_1' => null,
        'max_constructed_share_calculated_from_2' => null,
        'max_constructed_share_calculated_from_3' => null,
        'max_constructed_share_calculated_from_4' => null,
        'max_constructed_share_calculated_from_5' => null,
        'max_constructed_share_calculated_from_6' => null,
        'max_constructed_share_calculated_from_7' => null,
        'max_constructed_share_calculated_from_8' => null,
        'max_constructed_share_calculated_from_9' => null,
        'max_constructed_share_calculated_from_10' => null,
        'max_share_land_construction' => null,
        'max_share_land_construction_1' => null,
        'max_share_land_construction_2' => null,
        'max_share_land_construction_3' => null,
        'max_share_land_construction_4' => null,
        'max_share_land_construction_5' => null,
        'max_share_land_construction_6' => null,
        'max_share_land_construction_7' => null,
        'max_share_land_construction_8' => null,
        'max_share_land_construction_9' => null,
        'max_share_land_construction_10' => null,
        'max_floors' => null,
        'max_floors_1' => null,
        'max_floors_2' => null,
        'max_floors_3' => null,
        'max_floors_4' => null,
        'max_floors_5' => null,
        'max_floors_6' => null,
        'max_floors_7' => null,
        'max_floors_8' => null,
        'max_floors_9' => null,
        'max_floors_10' => null,
        'max_floor_area' => null,
        'max_floor_area_1' => null,
        'max_floor_area_2' => null,
        'max_floor_area_3' => null,
        'max_floor_area_4' => null,
        'max_floor_area_5' => null,
        'max_floor_area_6' => null,
        'max_floor_area_7' => null,
        'max_floor_area_8' => null,
        'max_floor_area_9' => null,
        'max_floor_area_10' => null,
        'max_floor_area_valid_for' => null,
        'max_floor_area_valid_for_1' => null,
        'max_floor_area_valid_for_2' => null,
        'max_floor_area_valid_for_3' => null,
        'max_floor_area_valid_for_4' => null,
        'max_floor_area_valid_for_5' => null,
        'max_floor_area_valid_for_6' => null,
        'max_floor_area_valid_for_7' => null,
        'max_floor_area_valid_for_8' => null,
        'max_floor_area_valid_for_9' => null,
        'max_floor_area_valid_for_10' => null,
        'max_sqm3_per_sqm2' => null,
        'max_sqm3_per_sqm2_1' => null,
        'max_sqm3_per_sqm2_2' => null,
        'max_sqm3_per_sqm2_3' => null,
        'max_sqm3_per_sqm2_4' => null,
        'max_sqm3_per_sqm2_5' => null,
        'max_sqm3_per_sqm2_6' => null,
        'max_sqm3_per_sqm2_7' => null,
        'max_sqm3_per_sqm2_8' => null,
        'max_sqm3_per_sqm2_9' => null,
        'max_sqm3_per_sqm2_10' => null,
        'max_sqm3_per_sqm2_valid_for' => null,
        'max_sqm3_per_sqm2_valid_for_1' => null,
        'max_sqm3_per_sqm2_valid_for_2' => null,
        'max_sqm3_per_sqm2_valid_for_3' => null,
        'max_sqm3_per_sqm2_valid_for_4' => null,
        'max_sqm3_per_sqm2_valid_for_5' => null,
        'max_sqm3_per_sqm2_valid_for_6' => null,
        'max_sqm3_per_sqm2_valid_for_7' => null,
        'max_sqm3_per_sqm2_valid_for_8' => null,
        'max_sqm3_per_sqm2_valid_for_9' => null,
        'max_sqm3_per_sqm2_valid_for_10' => null,
        'max_building_height' => null,
        'max_building_height_1' => null,
        'max_building_height_2' => null,
        'max_building_height_3' => null,
        'max_building_height_4' => null,
        'max_building_height_5' => null,
        'max_building_height_6' => null,
        'max_building_height_7' => null,
        'max_building_height_8' => null,
        'max_building_height_9' => null,
        'max_building_height_10' => null,
        'min_parcel_size' => null,
        'min_parcel_size_1' => null,
        'min_parcel_size_2' => null,
        'min_parcel_size_3' => null,
        'min_parcel_size_4' => null,
        'min_parcel_size_5' => null,
        'min_parcel_size_6' => null,
        'min_parcel_size_7' => null,
        'min_parcel_size_8' => null,
        'min_parcel_size_9' => null,
        'min_parcel_size_10' => null,
        'parcel_subdivision_regulated' => null,
        'parcel_subdivision_regulated_1' => null,
        'parcel_subdivision_regulated_2' => null,
        'parcel_subdivision_regulated_3' => null,
        'parcel_subdivision_regulated_4' => null,
        'parcel_subdivision_regulated_5' => null,
        'parcel_subdivision_regulated_6' => null,
        'parcel_subdivision_regulated_7' => null,
        'parcel_subdivision_regulated_8' => null,
        'parcel_subdivision_regulated_9' => null,
        'parcel_subdivision_regulated_10' => null,
        'geom' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'oid' => true,
		'plan_id' => true,
		'municipality_code' => true,
		'municipality_name' => true,
		'object_code' => false,
		'plan_type' => false,
		'plan_number' => true,
		'plan_name' => true,
		'plan_status' => false,
		'usage' => true,
		'usage_general' => true,
		'date_proposal' => true,
		'date_adopted' => true,
		'date_cancelled' => true,
		'date_in_force' => true,
		'date_start' => true,
		'date_end' => true,
		'date_attributes' => true,
		'date_geometry' => true,
		'date_created' => true,
		'date_updated' => true,
		'link' => true,
		'district' => true,
		'zone' => false,
		'zone_status' => false,
		'constructed_percentage_valid_for' => true,
		'min_environment_class_allowed' => true,
		'max_environment_class_allowed' => true,
		'conservation_description' => true,
		'construction_share' => true,
		'min_land' => true,
		'mega_watt' => true,
		'contains_vvm' => true,
		'supplementary_conditions' => true,
		'zone_status_regulated' => true,
		'usage_regulated' => true,
		'scope_regulated' => true,
		'parcel_size_regulated' => true,
		'complex' => true,
		'complex_description' => true,
		'wind_description' => true,
		'state_plan' => true,
		'signs_facade_regulated_1' => false,
		'signs_facade_regulated_2' => false,
		'signs_facade_regulated_3' => false,
		'usage_specific_1' => true,
		'usage_specific_2' => true,
		'usage_specific_3' => true,
		'usage_specific_4' => true,
		'usage_specific_5' => true,
		'usage_specific_6' => true,
		'usage_specific_7' => true,
		'usage_specific_8' => true,
		'usage_specific_9' => true,
		'usage_specific_10' => true,
		'max_constructed_percentage_area' => true,
		'max_constructed_percentage_area_1' => true,
		'max_constructed_percentage_area_2' => true,
		'max_constructed_percentage_area_3' => true,
		'max_constructed_percentage_area_4' => true,
		'max_constructed_percentage_area_5' => true,
		'max_constructed_percentage_area_6' => true,
		'max_constructed_percentage_area_7' => true,
		'max_constructed_percentage_area_8' => true,
		'max_constructed_percentage_area_9' => true,
		'max_constructed_percentage_area_10' => true,
		'max_constructed_share_calculated_from_1' => true,
		'max_constructed_share_calculated_from_2' => true,
		'max_constructed_share_calculated_from_3' => true,
		'max_constructed_share_calculated_from_4' => true,
		'max_constructed_share_calculated_from_5' => true,
		'max_constructed_share_calculated_from_6' => true,
		'max_constructed_share_calculated_from_7' => true,
		'max_constructed_share_calculated_from_8' => true,
		'max_constructed_share_calculated_from_9' => true,
		'max_constructed_share_calculated_from_10' => true,
		'max_share_land_construction' => true,
		'max_share_land_construction_1' => true,
		'max_share_land_construction_2' => true,
		'max_share_land_construction_3' => true,
		'max_share_land_construction_4' => true,
		'max_share_land_construction_5' => true,
		'max_share_land_construction_6' => true,
		'max_share_land_construction_7' => true,
		'max_share_land_construction_8' => true,
		'max_share_land_construction_9' => true,
		'max_share_land_construction_10' => true,
		'max_floors' => true,
		'max_floors_1' => true,
		'max_floors_2' => true,
		'max_floors_3' => true,
		'max_floors_4' => true,
		'max_floors_5' => true,
		'max_floors_6' => true,
		'max_floors_7' => true,
		'max_floors_8' => true,
		'max_floors_9' => true,
		'max_floors_10' => true,
		'max_floor_area' => true,
		'max_floor_area_1' => true,
		'max_floor_area_2' => true,
		'max_floor_area_3' => true,
		'max_floor_area_4' => true,
		'max_floor_area_5' => true,
		'max_floor_area_6' => true,
		'max_floor_area_7' => true,
		'max_floor_area_8' => true,
		'max_floor_area_9' => true,
		'max_floor_area_10' => true,
		'max_floor_area_valid_for' => true,
		'max_floor_area_valid_for_1' => true,
		'max_floor_area_valid_for_2' => true,
		'max_floor_area_valid_for_3' => true,
		'max_floor_area_valid_for_4' => true,
		'max_floor_area_valid_for_5' => true,
		'max_floor_area_valid_for_6' => true,
		'max_floor_area_valid_for_7' => true,
		'max_floor_area_valid_for_8' => true,
		'max_floor_area_valid_for_9' => true,
		'max_floor_area_valid_for_10' => true,
		'max_sqm3_per_sqm2' => true,
		'max_sqm3_per_sqm2_1' => true,
		'max_sqm3_per_sqm2_2' => true,
		'max_sqm3_per_sqm2_3' => true,
		'max_sqm3_per_sqm2_4' => true,
		'max_sqm3_per_sqm2_5' => true,
		'max_sqm3_per_sqm2_6' => true,
		'max_sqm3_per_sqm2_7' => true,
		'max_sqm3_per_sqm2_8' => true,
		'max_sqm3_per_sqm2_9' => true,
		'max_sqm3_per_sqm2_10' => true,
		'max_sqm3_per_sqm2_valid_for' => true,
		'max_sqm3_per_sqm2_valid_for_1' => true,
		'max_sqm3_per_sqm2_valid_for_2' => true,
		'max_sqm3_per_sqm2_valid_for_3' => true,
		'max_sqm3_per_sqm2_valid_for_4' => true,
		'max_sqm3_per_sqm2_valid_for_5' => true,
		'max_sqm3_per_sqm2_valid_for_6' => true,
		'max_sqm3_per_sqm2_valid_for_7' => true,
		'max_sqm3_per_sqm2_valid_for_8' => true,
		'max_sqm3_per_sqm2_valid_for_9' => true,
		'max_sqm3_per_sqm2_valid_for_10' => true,
		'max_building_height' => true,
		'max_building_height_1' => true,
		'max_building_height_2' => true,
		'max_building_height_3' => true,
		'max_building_height_4' => true,
		'max_building_height_5' => true,
		'max_building_height_6' => true,
		'max_building_height_7' => true,
		'max_building_height_8' => true,
		'max_building_height_9' => true,
		'max_building_height_10' => true,
		'min_parcel_size' => true,
		'min_parcel_size_1' => true,
		'min_parcel_size_2' => true,
		'min_parcel_size_3' => true,
		'min_parcel_size_4' => true,
		'min_parcel_size_5' => true,
		'min_parcel_size_6' => true,
		'min_parcel_size_7' => true,
		'min_parcel_size_8' => true,
		'min_parcel_size_9' => true,
		'min_parcel_size_10' => true,
		'parcel_subdivision_regulated' => true,
		'parcel_subdivision_regulated_1' => true,
		'parcel_subdivision_regulated_2' => true,
		'parcel_subdivision_regulated_3' => true,
		'parcel_subdivision_regulated_4' => true,
		'parcel_subdivision_regulated_5' => true,
		'parcel_subdivision_regulated_6' => true,
		'parcel_subdivision_regulated_7' => true,
		'parcel_subdivision_regulated_8' => true,
		'parcel_subdivision_regulated_9' => true,
		'parcel_subdivision_regulated_10' => true,
		'geom' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'oid' => 'oid',
        'plan_id' => 'plan_id',
        'municipality_code' => 'municipality_code',
        'municipality_name' => 'municipality_name',
        'object_code' => 'object_code',
        'plan_type' => 'plan_type',
        'plan_number' => 'plan_number',
        'plan_name' => 'plan_name',
        'plan_status' => 'plan_status',
        'usage' => 'usage',
        'usage_general' => 'usage_general',
        'date_proposal' => 'date_proposal',
        'date_adopted' => 'date_adopted',
        'date_cancelled' => 'date_cancelled',
        'date_in_force' => 'date_in_force',
        'date_start' => 'date_start',
        'date_end' => 'date_end',
        'date_attributes' => 'date_attributes',
        'date_geometry' => 'date_geometry',
        'date_created' => 'date_created',
        'date_updated' => 'date_updated',
        'link' => 'link',
        'district' => 'district',
        'zone' => 'zone',
        'zone_status' => 'zone_status',
        'constructed_percentage_valid_for' => 'constructed_percentage_valid_for',
        'min_environment_class_allowed' => 'min_environment_class_allowed',
        'max_environment_class_allowed' => 'max_environment_class_allowed',
        'conservation_description' => 'conservation_description',
        'construction_share' => 'construction_share',
        'min_land' => 'min_land',
        'mega_watt' => 'mega_watt',
        'contains_vvm' => 'contains_vvm',
        'supplementary_conditions' => 'supplementary_conditions',
        'zone_status_regulated' => 'zone_status_regulated',
        'usage_regulated' => 'usage_regulated',
        'scope_regulated' => 'scope_regulated',
        'parcel_size_regulated' => 'parcel_size_regulated',
        'complex' => 'complex',
        'complex_description' => 'complex_description',
        'wind_description' => 'wind_description',
        'state_plan' => 'state_plan',
        'signs_facade_regulated_1' => 'signs_facade_regulated_1',
        'signs_facade_regulated_2' => 'signs_facade_regulated_2',
        'signs_facade_regulated_3' => 'signs_facade_regulated_3',
        'usage_specific_1' => 'usage_specific_1',
        'usage_specific_2' => 'usage_specific_2',
        'usage_specific_3' => 'usage_specific_3',
        'usage_specific_4' => 'usage_specific_4',
        'usage_specific_5' => 'usage_specific_5',
        'usage_specific_6' => 'usage_specific_6',
        'usage_specific_7' => 'usage_specific_7',
        'usage_specific_8' => 'usage_specific_8',
        'usage_specific_9' => 'usage_specific_9',
        'usage_specific_10' => 'usage_specific_10',
        'max_constructed_percentage_area' => 'max_constructed_percentage_area',
        'max_constructed_percentage_area_1' => 'max_constructed_percentage_area_1',
        'max_constructed_percentage_area_2' => 'max_constructed_percentage_area_2',
        'max_constructed_percentage_area_3' => 'max_constructed_percentage_area_3',
        'max_constructed_percentage_area_4' => 'max_constructed_percentage_area_4',
        'max_constructed_percentage_area_5' => 'max_constructed_percentage_area_5',
        'max_constructed_percentage_area_6' => 'max_constructed_percentage_area_6',
        'max_constructed_percentage_area_7' => 'max_constructed_percentage_area_7',
        'max_constructed_percentage_area_8' => 'max_constructed_percentage_area_8',
        'max_constructed_percentage_area_9' => 'max_constructed_percentage_area_9',
        'max_constructed_percentage_area_10' => 'max_constructed_percentage_area_10',
        'max_constructed_share_calculated_from_1' => 'max_constructed_share_calculated_from_1',
        'max_constructed_share_calculated_from_2' => 'max_constructed_share_calculated_from_2',
        'max_constructed_share_calculated_from_3' => 'max_constructed_share_calculated_from_3',
        'max_constructed_share_calculated_from_4' => 'max_constructed_share_calculated_from_4',
        'max_constructed_share_calculated_from_5' => 'max_constructed_share_calculated_from_5',
        'max_constructed_share_calculated_from_6' => 'max_constructed_share_calculated_from_6',
        'max_constructed_share_calculated_from_7' => 'max_constructed_share_calculated_from_7',
        'max_constructed_share_calculated_from_8' => 'max_constructed_share_calculated_from_8',
        'max_constructed_share_calculated_from_9' => 'max_constructed_share_calculated_from_9',
        'max_constructed_share_calculated_from_10' => 'max_constructed_share_calculated_from_10',
        'max_share_land_construction' => 'max_share_land_construction',
        'max_share_land_construction_1' => 'max_share_land_construction_1',
        'max_share_land_construction_2' => 'max_share_land_construction_2',
        'max_share_land_construction_3' => 'max_share_land_construction_3',
        'max_share_land_construction_4' => 'max_share_land_construction_4',
        'max_share_land_construction_5' => 'max_share_land_construction_5',
        'max_share_land_construction_6' => 'max_share_land_construction_6',
        'max_share_land_construction_7' => 'max_share_land_construction_7',
        'max_share_land_construction_8' => 'max_share_land_construction_8',
        'max_share_land_construction_9' => 'max_share_land_construction_9',
        'max_share_land_construction_10' => 'max_share_land_construction_10',
        'max_floors' => 'max_floors',
        'max_floors_1' => 'max_floors_1',
        'max_floors_2' => 'max_floors_2',
        'max_floors_3' => 'max_floors_3',
        'max_floors_4' => 'max_floors_4',
        'max_floors_5' => 'max_floors_5',
        'max_floors_6' => 'max_floors_6',
        'max_floors_7' => 'max_floors_7',
        'max_floors_8' => 'max_floors_8',
        'max_floors_9' => 'max_floors_9',
        'max_floors_10' => 'max_floors_10',
        'max_floor_area' => 'max_floor_area',
        'max_floor_area_1' => 'max_floor_area_1',
        'max_floor_area_2' => 'max_floor_area_2',
        'max_floor_area_3' => 'max_floor_area_3',
        'max_floor_area_4' => 'max_floor_area_4',
        'max_floor_area_5' => 'max_floor_area_5',
        'max_floor_area_6' => 'max_floor_area_6',
        'max_floor_area_7' => 'max_floor_area_7',
        'max_floor_area_8' => 'max_floor_area_8',
        'max_floor_area_9' => 'max_floor_area_9',
        'max_floor_area_10' => 'max_floor_area_10',
        'max_floor_area_valid_for' => 'max_floor_area_valid_for',
        'max_floor_area_valid_for_1' => 'max_floor_area_valid_for_1',
        'max_floor_area_valid_for_2' => 'max_floor_area_valid_for_2',
        'max_floor_area_valid_for_3' => 'max_floor_area_valid_for_3',
        'max_floor_area_valid_for_4' => 'max_floor_area_valid_for_4',
        'max_floor_area_valid_for_5' => 'max_floor_area_valid_for_5',
        'max_floor_area_valid_for_6' => 'max_floor_area_valid_for_6',
        'max_floor_area_valid_for_7' => 'max_floor_area_valid_for_7',
        'max_floor_area_valid_for_8' => 'max_floor_area_valid_for_8',
        'max_floor_area_valid_for_9' => 'max_floor_area_valid_for_9',
        'max_floor_area_valid_for_10' => 'max_floor_area_valid_for_10',
        'max_sqm3_per_sqm2' => 'max_sqm3_per_sqm2',
        'max_sqm3_per_sqm2_1' => 'max_sqm3_per_sqm2_1',
        'max_sqm3_per_sqm2_2' => 'max_sqm3_per_sqm2_2',
        'max_sqm3_per_sqm2_3' => 'max_sqm3_per_sqm2_3',
        'max_sqm3_per_sqm2_4' => 'max_sqm3_per_sqm2_4',
        'max_sqm3_per_sqm2_5' => 'max_sqm3_per_sqm2_5',
        'max_sqm3_per_sqm2_6' => 'max_sqm3_per_sqm2_6',
        'max_sqm3_per_sqm2_7' => 'max_sqm3_per_sqm2_7',
        'max_sqm3_per_sqm2_8' => 'max_sqm3_per_sqm2_8',
        'max_sqm3_per_sqm2_9' => 'max_sqm3_per_sqm2_9',
        'max_sqm3_per_sqm2_10' => 'max_sqm3_per_sqm2_10',
        'max_sqm3_per_sqm2_valid_for' => 'max_sqm3_per_sqm2_valid_for',
        'max_sqm3_per_sqm2_valid_for_1' => 'max_sqm3_per_sqm2_valid_for_1',
        'max_sqm3_per_sqm2_valid_for_2' => 'max_sqm3_per_sqm2_valid_for_2',
        'max_sqm3_per_sqm2_valid_for_3' => 'max_sqm3_per_sqm2_valid_for_3',
        'max_sqm3_per_sqm2_valid_for_4' => 'max_sqm3_per_sqm2_valid_for_4',
        'max_sqm3_per_sqm2_valid_for_5' => 'max_sqm3_per_sqm2_valid_for_5',
        'max_sqm3_per_sqm2_valid_for_6' => 'max_sqm3_per_sqm2_valid_for_6',
        'max_sqm3_per_sqm2_valid_for_7' => 'max_sqm3_per_sqm2_valid_for_7',
        'max_sqm3_per_sqm2_valid_for_8' => 'max_sqm3_per_sqm2_valid_for_8',
        'max_sqm3_per_sqm2_valid_for_9' => 'max_sqm3_per_sqm2_valid_for_9',
        'max_sqm3_per_sqm2_valid_for_10' => 'max_sqm3_per_sqm2_valid_for_10',
        'max_building_height' => 'max_building_height',
        'max_building_height_1' => 'max_building_height_1',
        'max_building_height_2' => 'max_building_height_2',
        'max_building_height_3' => 'max_building_height_3',
        'max_building_height_4' => 'max_building_height_4',
        'max_building_height_5' => 'max_building_height_5',
        'max_building_height_6' => 'max_building_height_6',
        'max_building_height_7' => 'max_building_height_7',
        'max_building_height_8' => 'max_building_height_8',
        'max_building_height_9' => 'max_building_height_9',
        'max_building_height_10' => 'max_building_height_10',
        'min_parcel_size' => 'min_parcel_size',
        'min_parcel_size_1' => 'min_parcel_size_1',
        'min_parcel_size_2' => 'min_parcel_size_2',
        'min_parcel_size_3' => 'min_parcel_size_3',
        'min_parcel_size_4' => 'min_parcel_size_4',
        'min_parcel_size_5' => 'min_parcel_size_5',
        'min_parcel_size_6' => 'min_parcel_size_6',
        'min_parcel_size_7' => 'min_parcel_size_7',
        'min_parcel_size_8' => 'min_parcel_size_8',
        'min_parcel_size_9' => 'min_parcel_size_9',
        'min_parcel_size_10' => 'min_parcel_size_10',
        'parcel_subdivision_regulated' => 'parcel_subdivision_regulated',
        'parcel_subdivision_regulated_1' => 'parcel_subdivision_regulated_1',
        'parcel_subdivision_regulated_2' => 'parcel_subdivision_regulated_2',
        'parcel_subdivision_regulated_3' => 'parcel_subdivision_regulated_3',
        'parcel_subdivision_regulated_4' => 'parcel_subdivision_regulated_4',
        'parcel_subdivision_regulated_5' => 'parcel_subdivision_regulated_5',
        'parcel_subdivision_regulated_6' => 'parcel_subdivision_regulated_6',
        'parcel_subdivision_regulated_7' => 'parcel_subdivision_regulated_7',
        'parcel_subdivision_regulated_8' => 'parcel_subdivision_regulated_8',
        'parcel_subdivision_regulated_9' => 'parcel_subdivision_regulated_9',
        'parcel_subdivision_regulated_10' => 'parcel_subdivision_regulated_10',
        'geom' => 'geom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'oid' => 'setOid',
        'plan_id' => 'setPlanId',
        'municipality_code' => 'setMunicipalityCode',
        'municipality_name' => 'setMunicipalityName',
        'object_code' => 'setObjectCode',
        'plan_type' => 'setPlanType',
        'plan_number' => 'setPlanNumber',
        'plan_name' => 'setPlanName',
        'plan_status' => 'setPlanStatus',
        'usage' => 'setUsage',
        'usage_general' => 'setUsageGeneral',
        'date_proposal' => 'setDateProposal',
        'date_adopted' => 'setDateAdopted',
        'date_cancelled' => 'setDateCancelled',
        'date_in_force' => 'setDateInForce',
        'date_start' => 'setDateStart',
        'date_end' => 'setDateEnd',
        'date_attributes' => 'setDateAttributes',
        'date_geometry' => 'setDateGeometry',
        'date_created' => 'setDateCreated',
        'date_updated' => 'setDateUpdated',
        'link' => 'setLink',
        'district' => 'setDistrict',
        'zone' => 'setZone',
        'zone_status' => 'setZoneStatus',
        'constructed_percentage_valid_for' => 'setConstructedPercentageValidFor',
        'min_environment_class_allowed' => 'setMinEnvironmentClassAllowed',
        'max_environment_class_allowed' => 'setMaxEnvironmentClassAllowed',
        'conservation_description' => 'setConservationDescription',
        'construction_share' => 'setConstructionShare',
        'min_land' => 'setMinLand',
        'mega_watt' => 'setMegaWatt',
        'contains_vvm' => 'setContainsVvm',
        'supplementary_conditions' => 'setSupplementaryConditions',
        'zone_status_regulated' => 'setZoneStatusRegulated',
        'usage_regulated' => 'setUsageRegulated',
        'scope_regulated' => 'setScopeRegulated',
        'parcel_size_regulated' => 'setParcelSizeRegulated',
        'complex' => 'setComplex',
        'complex_description' => 'setComplexDescription',
        'wind_description' => 'setWindDescription',
        'state_plan' => 'setStatePlan',
        'signs_facade_regulated_1' => 'setSignsFacadeRegulated1',
        'signs_facade_regulated_2' => 'setSignsFacadeRegulated2',
        'signs_facade_regulated_3' => 'setSignsFacadeRegulated3',
        'usage_specific_1' => 'setUsageSpecific1',
        'usage_specific_2' => 'setUsageSpecific2',
        'usage_specific_3' => 'setUsageSpecific3',
        'usage_specific_4' => 'setUsageSpecific4',
        'usage_specific_5' => 'setUsageSpecific5',
        'usage_specific_6' => 'setUsageSpecific6',
        'usage_specific_7' => 'setUsageSpecific7',
        'usage_specific_8' => 'setUsageSpecific8',
        'usage_specific_9' => 'setUsageSpecific9',
        'usage_specific_10' => 'setUsageSpecific10',
        'max_constructed_percentage_area' => 'setMaxConstructedPercentageArea',
        'max_constructed_percentage_area_1' => 'setMaxConstructedPercentageArea1',
        'max_constructed_percentage_area_2' => 'setMaxConstructedPercentageArea2',
        'max_constructed_percentage_area_3' => 'setMaxConstructedPercentageArea3',
        'max_constructed_percentage_area_4' => 'setMaxConstructedPercentageArea4',
        'max_constructed_percentage_area_5' => 'setMaxConstructedPercentageArea5',
        'max_constructed_percentage_area_6' => 'setMaxConstructedPercentageArea6',
        'max_constructed_percentage_area_7' => 'setMaxConstructedPercentageArea7',
        'max_constructed_percentage_area_8' => 'setMaxConstructedPercentageArea8',
        'max_constructed_percentage_area_9' => 'setMaxConstructedPercentageArea9',
        'max_constructed_percentage_area_10' => 'setMaxConstructedPercentageArea10',
        'max_constructed_share_calculated_from_1' => 'setMaxConstructedShareCalculatedFrom1',
        'max_constructed_share_calculated_from_2' => 'setMaxConstructedShareCalculatedFrom2',
        'max_constructed_share_calculated_from_3' => 'setMaxConstructedShareCalculatedFrom3',
        'max_constructed_share_calculated_from_4' => 'setMaxConstructedShareCalculatedFrom4',
        'max_constructed_share_calculated_from_5' => 'setMaxConstructedShareCalculatedFrom5',
        'max_constructed_share_calculated_from_6' => 'setMaxConstructedShareCalculatedFrom6',
        'max_constructed_share_calculated_from_7' => 'setMaxConstructedShareCalculatedFrom7',
        'max_constructed_share_calculated_from_8' => 'setMaxConstructedShareCalculatedFrom8',
        'max_constructed_share_calculated_from_9' => 'setMaxConstructedShareCalculatedFrom9',
        'max_constructed_share_calculated_from_10' => 'setMaxConstructedShareCalculatedFrom10',
        'max_share_land_construction' => 'setMaxShareLandConstruction',
        'max_share_land_construction_1' => 'setMaxShareLandConstruction1',
        'max_share_land_construction_2' => 'setMaxShareLandConstruction2',
        'max_share_land_construction_3' => 'setMaxShareLandConstruction3',
        'max_share_land_construction_4' => 'setMaxShareLandConstruction4',
        'max_share_land_construction_5' => 'setMaxShareLandConstruction5',
        'max_share_land_construction_6' => 'setMaxShareLandConstruction6',
        'max_share_land_construction_7' => 'setMaxShareLandConstruction7',
        'max_share_land_construction_8' => 'setMaxShareLandConstruction8',
        'max_share_land_construction_9' => 'setMaxShareLandConstruction9',
        'max_share_land_construction_10' => 'setMaxShareLandConstruction10',
        'max_floors' => 'setMaxFloors',
        'max_floors_1' => 'setMaxFloors1',
        'max_floors_2' => 'setMaxFloors2',
        'max_floors_3' => 'setMaxFloors3',
        'max_floors_4' => 'setMaxFloors4',
        'max_floors_5' => 'setMaxFloors5',
        'max_floors_6' => 'setMaxFloors6',
        'max_floors_7' => 'setMaxFloors7',
        'max_floors_8' => 'setMaxFloors8',
        'max_floors_9' => 'setMaxFloors9',
        'max_floors_10' => 'setMaxFloors10',
        'max_floor_area' => 'setMaxFloorArea',
        'max_floor_area_1' => 'setMaxFloorArea1',
        'max_floor_area_2' => 'setMaxFloorArea2',
        'max_floor_area_3' => 'setMaxFloorArea3',
        'max_floor_area_4' => 'setMaxFloorArea4',
        'max_floor_area_5' => 'setMaxFloorArea5',
        'max_floor_area_6' => 'setMaxFloorArea6',
        'max_floor_area_7' => 'setMaxFloorArea7',
        'max_floor_area_8' => 'setMaxFloorArea8',
        'max_floor_area_9' => 'setMaxFloorArea9',
        'max_floor_area_10' => 'setMaxFloorArea10',
        'max_floor_area_valid_for' => 'setMaxFloorAreaValidFor',
        'max_floor_area_valid_for_1' => 'setMaxFloorAreaValidFor1',
        'max_floor_area_valid_for_2' => 'setMaxFloorAreaValidFor2',
        'max_floor_area_valid_for_3' => 'setMaxFloorAreaValidFor3',
        'max_floor_area_valid_for_4' => 'setMaxFloorAreaValidFor4',
        'max_floor_area_valid_for_5' => 'setMaxFloorAreaValidFor5',
        'max_floor_area_valid_for_6' => 'setMaxFloorAreaValidFor6',
        'max_floor_area_valid_for_7' => 'setMaxFloorAreaValidFor7',
        'max_floor_area_valid_for_8' => 'setMaxFloorAreaValidFor8',
        'max_floor_area_valid_for_9' => 'setMaxFloorAreaValidFor9',
        'max_floor_area_valid_for_10' => 'setMaxFloorAreaValidFor10',
        'max_sqm3_per_sqm2' => 'setMaxSqm3PerSqm2',
        'max_sqm3_per_sqm2_1' => 'setMaxSqm3PerSqm21',
        'max_sqm3_per_sqm2_2' => 'setMaxSqm3PerSqm22',
        'max_sqm3_per_sqm2_3' => 'setMaxSqm3PerSqm23',
        'max_sqm3_per_sqm2_4' => 'setMaxSqm3PerSqm24',
        'max_sqm3_per_sqm2_5' => 'setMaxSqm3PerSqm25',
        'max_sqm3_per_sqm2_6' => 'setMaxSqm3PerSqm26',
        'max_sqm3_per_sqm2_7' => 'setMaxSqm3PerSqm27',
        'max_sqm3_per_sqm2_8' => 'setMaxSqm3PerSqm28',
        'max_sqm3_per_sqm2_9' => 'setMaxSqm3PerSqm29',
        'max_sqm3_per_sqm2_10' => 'setMaxSqm3PerSqm210',
        'max_sqm3_per_sqm2_valid_for' => 'setMaxSqm3PerSqm2ValidFor',
        'max_sqm3_per_sqm2_valid_for_1' => 'setMaxSqm3PerSqm2ValidFor1',
        'max_sqm3_per_sqm2_valid_for_2' => 'setMaxSqm3PerSqm2ValidFor2',
        'max_sqm3_per_sqm2_valid_for_3' => 'setMaxSqm3PerSqm2ValidFor3',
        'max_sqm3_per_sqm2_valid_for_4' => 'setMaxSqm3PerSqm2ValidFor4',
        'max_sqm3_per_sqm2_valid_for_5' => 'setMaxSqm3PerSqm2ValidFor5',
        'max_sqm3_per_sqm2_valid_for_6' => 'setMaxSqm3PerSqm2ValidFor6',
        'max_sqm3_per_sqm2_valid_for_7' => 'setMaxSqm3PerSqm2ValidFor7',
        'max_sqm3_per_sqm2_valid_for_8' => 'setMaxSqm3PerSqm2ValidFor8',
        'max_sqm3_per_sqm2_valid_for_9' => 'setMaxSqm3PerSqm2ValidFor9',
        'max_sqm3_per_sqm2_valid_for_10' => 'setMaxSqm3PerSqm2ValidFor10',
        'max_building_height' => 'setMaxBuildingHeight',
        'max_building_height_1' => 'setMaxBuildingHeight1',
        'max_building_height_2' => 'setMaxBuildingHeight2',
        'max_building_height_3' => 'setMaxBuildingHeight3',
        'max_building_height_4' => 'setMaxBuildingHeight4',
        'max_building_height_5' => 'setMaxBuildingHeight5',
        'max_building_height_6' => 'setMaxBuildingHeight6',
        'max_building_height_7' => 'setMaxBuildingHeight7',
        'max_building_height_8' => 'setMaxBuildingHeight8',
        'max_building_height_9' => 'setMaxBuildingHeight9',
        'max_building_height_10' => 'setMaxBuildingHeight10',
        'min_parcel_size' => 'setMinParcelSize',
        'min_parcel_size_1' => 'setMinParcelSize1',
        'min_parcel_size_2' => 'setMinParcelSize2',
        'min_parcel_size_3' => 'setMinParcelSize3',
        'min_parcel_size_4' => 'setMinParcelSize4',
        'min_parcel_size_5' => 'setMinParcelSize5',
        'min_parcel_size_6' => 'setMinParcelSize6',
        'min_parcel_size_7' => 'setMinParcelSize7',
        'min_parcel_size_8' => 'setMinParcelSize8',
        'min_parcel_size_9' => 'setMinParcelSize9',
        'min_parcel_size_10' => 'setMinParcelSize10',
        'parcel_subdivision_regulated' => 'setParcelSubdivisionRegulated',
        'parcel_subdivision_regulated_1' => 'setParcelSubdivisionRegulated1',
        'parcel_subdivision_regulated_2' => 'setParcelSubdivisionRegulated2',
        'parcel_subdivision_regulated_3' => 'setParcelSubdivisionRegulated3',
        'parcel_subdivision_regulated_4' => 'setParcelSubdivisionRegulated4',
        'parcel_subdivision_regulated_5' => 'setParcelSubdivisionRegulated5',
        'parcel_subdivision_regulated_6' => 'setParcelSubdivisionRegulated6',
        'parcel_subdivision_regulated_7' => 'setParcelSubdivisionRegulated7',
        'parcel_subdivision_regulated_8' => 'setParcelSubdivisionRegulated8',
        'parcel_subdivision_regulated_9' => 'setParcelSubdivisionRegulated9',
        'parcel_subdivision_regulated_10' => 'setParcelSubdivisionRegulated10',
        'geom' => 'setGeom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'oid' => 'getOid',
        'plan_id' => 'getPlanId',
        'municipality_code' => 'getMunicipalityCode',
        'municipality_name' => 'getMunicipalityName',
        'object_code' => 'getObjectCode',
        'plan_type' => 'getPlanType',
        'plan_number' => 'getPlanNumber',
        'plan_name' => 'getPlanName',
        'plan_status' => 'getPlanStatus',
        'usage' => 'getUsage',
        'usage_general' => 'getUsageGeneral',
        'date_proposal' => 'getDateProposal',
        'date_adopted' => 'getDateAdopted',
        'date_cancelled' => 'getDateCancelled',
        'date_in_force' => 'getDateInForce',
        'date_start' => 'getDateStart',
        'date_end' => 'getDateEnd',
        'date_attributes' => 'getDateAttributes',
        'date_geometry' => 'getDateGeometry',
        'date_created' => 'getDateCreated',
        'date_updated' => 'getDateUpdated',
        'link' => 'getLink',
        'district' => 'getDistrict',
        'zone' => 'getZone',
        'zone_status' => 'getZoneStatus',
        'constructed_percentage_valid_for' => 'getConstructedPercentageValidFor',
        'min_environment_class_allowed' => 'getMinEnvironmentClassAllowed',
        'max_environment_class_allowed' => 'getMaxEnvironmentClassAllowed',
        'conservation_description' => 'getConservationDescription',
        'construction_share' => 'getConstructionShare',
        'min_land' => 'getMinLand',
        'mega_watt' => 'getMegaWatt',
        'contains_vvm' => 'getContainsVvm',
        'supplementary_conditions' => 'getSupplementaryConditions',
        'zone_status_regulated' => 'getZoneStatusRegulated',
        'usage_regulated' => 'getUsageRegulated',
        'scope_regulated' => 'getScopeRegulated',
        'parcel_size_regulated' => 'getParcelSizeRegulated',
        'complex' => 'getComplex',
        'complex_description' => 'getComplexDescription',
        'wind_description' => 'getWindDescription',
        'state_plan' => 'getStatePlan',
        'signs_facade_regulated_1' => 'getSignsFacadeRegulated1',
        'signs_facade_regulated_2' => 'getSignsFacadeRegulated2',
        'signs_facade_regulated_3' => 'getSignsFacadeRegulated3',
        'usage_specific_1' => 'getUsageSpecific1',
        'usage_specific_2' => 'getUsageSpecific2',
        'usage_specific_3' => 'getUsageSpecific3',
        'usage_specific_4' => 'getUsageSpecific4',
        'usage_specific_5' => 'getUsageSpecific5',
        'usage_specific_6' => 'getUsageSpecific6',
        'usage_specific_7' => 'getUsageSpecific7',
        'usage_specific_8' => 'getUsageSpecific8',
        'usage_specific_9' => 'getUsageSpecific9',
        'usage_specific_10' => 'getUsageSpecific10',
        'max_constructed_percentage_area' => 'getMaxConstructedPercentageArea',
        'max_constructed_percentage_area_1' => 'getMaxConstructedPercentageArea1',
        'max_constructed_percentage_area_2' => 'getMaxConstructedPercentageArea2',
        'max_constructed_percentage_area_3' => 'getMaxConstructedPercentageArea3',
        'max_constructed_percentage_area_4' => 'getMaxConstructedPercentageArea4',
        'max_constructed_percentage_area_5' => 'getMaxConstructedPercentageArea5',
        'max_constructed_percentage_area_6' => 'getMaxConstructedPercentageArea6',
        'max_constructed_percentage_area_7' => 'getMaxConstructedPercentageArea7',
        'max_constructed_percentage_area_8' => 'getMaxConstructedPercentageArea8',
        'max_constructed_percentage_area_9' => 'getMaxConstructedPercentageArea9',
        'max_constructed_percentage_area_10' => 'getMaxConstructedPercentageArea10',
        'max_constructed_share_calculated_from_1' => 'getMaxConstructedShareCalculatedFrom1',
        'max_constructed_share_calculated_from_2' => 'getMaxConstructedShareCalculatedFrom2',
        'max_constructed_share_calculated_from_3' => 'getMaxConstructedShareCalculatedFrom3',
        'max_constructed_share_calculated_from_4' => 'getMaxConstructedShareCalculatedFrom4',
        'max_constructed_share_calculated_from_5' => 'getMaxConstructedShareCalculatedFrom5',
        'max_constructed_share_calculated_from_6' => 'getMaxConstructedShareCalculatedFrom6',
        'max_constructed_share_calculated_from_7' => 'getMaxConstructedShareCalculatedFrom7',
        'max_constructed_share_calculated_from_8' => 'getMaxConstructedShareCalculatedFrom8',
        'max_constructed_share_calculated_from_9' => 'getMaxConstructedShareCalculatedFrom9',
        'max_constructed_share_calculated_from_10' => 'getMaxConstructedShareCalculatedFrom10',
        'max_share_land_construction' => 'getMaxShareLandConstruction',
        'max_share_land_construction_1' => 'getMaxShareLandConstruction1',
        'max_share_land_construction_2' => 'getMaxShareLandConstruction2',
        'max_share_land_construction_3' => 'getMaxShareLandConstruction3',
        'max_share_land_construction_4' => 'getMaxShareLandConstruction4',
        'max_share_land_construction_5' => 'getMaxShareLandConstruction5',
        'max_share_land_construction_6' => 'getMaxShareLandConstruction6',
        'max_share_land_construction_7' => 'getMaxShareLandConstruction7',
        'max_share_land_construction_8' => 'getMaxShareLandConstruction8',
        'max_share_land_construction_9' => 'getMaxShareLandConstruction9',
        'max_share_land_construction_10' => 'getMaxShareLandConstruction10',
        'max_floors' => 'getMaxFloors',
        'max_floors_1' => 'getMaxFloors1',
        'max_floors_2' => 'getMaxFloors2',
        'max_floors_3' => 'getMaxFloors3',
        'max_floors_4' => 'getMaxFloors4',
        'max_floors_5' => 'getMaxFloors5',
        'max_floors_6' => 'getMaxFloors6',
        'max_floors_7' => 'getMaxFloors7',
        'max_floors_8' => 'getMaxFloors8',
        'max_floors_9' => 'getMaxFloors9',
        'max_floors_10' => 'getMaxFloors10',
        'max_floor_area' => 'getMaxFloorArea',
        'max_floor_area_1' => 'getMaxFloorArea1',
        'max_floor_area_2' => 'getMaxFloorArea2',
        'max_floor_area_3' => 'getMaxFloorArea3',
        'max_floor_area_4' => 'getMaxFloorArea4',
        'max_floor_area_5' => 'getMaxFloorArea5',
        'max_floor_area_6' => 'getMaxFloorArea6',
        'max_floor_area_7' => 'getMaxFloorArea7',
        'max_floor_area_8' => 'getMaxFloorArea8',
        'max_floor_area_9' => 'getMaxFloorArea9',
        'max_floor_area_10' => 'getMaxFloorArea10',
        'max_floor_area_valid_for' => 'getMaxFloorAreaValidFor',
        'max_floor_area_valid_for_1' => 'getMaxFloorAreaValidFor1',
        'max_floor_area_valid_for_2' => 'getMaxFloorAreaValidFor2',
        'max_floor_area_valid_for_3' => 'getMaxFloorAreaValidFor3',
        'max_floor_area_valid_for_4' => 'getMaxFloorAreaValidFor4',
        'max_floor_area_valid_for_5' => 'getMaxFloorAreaValidFor5',
        'max_floor_area_valid_for_6' => 'getMaxFloorAreaValidFor6',
        'max_floor_area_valid_for_7' => 'getMaxFloorAreaValidFor7',
        'max_floor_area_valid_for_8' => 'getMaxFloorAreaValidFor8',
        'max_floor_area_valid_for_9' => 'getMaxFloorAreaValidFor9',
        'max_floor_area_valid_for_10' => 'getMaxFloorAreaValidFor10',
        'max_sqm3_per_sqm2' => 'getMaxSqm3PerSqm2',
        'max_sqm3_per_sqm2_1' => 'getMaxSqm3PerSqm21',
        'max_sqm3_per_sqm2_2' => 'getMaxSqm3PerSqm22',
        'max_sqm3_per_sqm2_3' => 'getMaxSqm3PerSqm23',
        'max_sqm3_per_sqm2_4' => 'getMaxSqm3PerSqm24',
        'max_sqm3_per_sqm2_5' => 'getMaxSqm3PerSqm25',
        'max_sqm3_per_sqm2_6' => 'getMaxSqm3PerSqm26',
        'max_sqm3_per_sqm2_7' => 'getMaxSqm3PerSqm27',
        'max_sqm3_per_sqm2_8' => 'getMaxSqm3PerSqm28',
        'max_sqm3_per_sqm2_9' => 'getMaxSqm3PerSqm29',
        'max_sqm3_per_sqm2_10' => 'getMaxSqm3PerSqm210',
        'max_sqm3_per_sqm2_valid_for' => 'getMaxSqm3PerSqm2ValidFor',
        'max_sqm3_per_sqm2_valid_for_1' => 'getMaxSqm3PerSqm2ValidFor1',
        'max_sqm3_per_sqm2_valid_for_2' => 'getMaxSqm3PerSqm2ValidFor2',
        'max_sqm3_per_sqm2_valid_for_3' => 'getMaxSqm3PerSqm2ValidFor3',
        'max_sqm3_per_sqm2_valid_for_4' => 'getMaxSqm3PerSqm2ValidFor4',
        'max_sqm3_per_sqm2_valid_for_5' => 'getMaxSqm3PerSqm2ValidFor5',
        'max_sqm3_per_sqm2_valid_for_6' => 'getMaxSqm3PerSqm2ValidFor6',
        'max_sqm3_per_sqm2_valid_for_7' => 'getMaxSqm3PerSqm2ValidFor7',
        'max_sqm3_per_sqm2_valid_for_8' => 'getMaxSqm3PerSqm2ValidFor8',
        'max_sqm3_per_sqm2_valid_for_9' => 'getMaxSqm3PerSqm2ValidFor9',
        'max_sqm3_per_sqm2_valid_for_10' => 'getMaxSqm3PerSqm2ValidFor10',
        'max_building_height' => 'getMaxBuildingHeight',
        'max_building_height_1' => 'getMaxBuildingHeight1',
        'max_building_height_2' => 'getMaxBuildingHeight2',
        'max_building_height_3' => 'getMaxBuildingHeight3',
        'max_building_height_4' => 'getMaxBuildingHeight4',
        'max_building_height_5' => 'getMaxBuildingHeight5',
        'max_building_height_6' => 'getMaxBuildingHeight6',
        'max_building_height_7' => 'getMaxBuildingHeight7',
        'max_building_height_8' => 'getMaxBuildingHeight8',
        'max_building_height_9' => 'getMaxBuildingHeight9',
        'max_building_height_10' => 'getMaxBuildingHeight10',
        'min_parcel_size' => 'getMinParcelSize',
        'min_parcel_size_1' => 'getMinParcelSize1',
        'min_parcel_size_2' => 'getMinParcelSize2',
        'min_parcel_size_3' => 'getMinParcelSize3',
        'min_parcel_size_4' => 'getMinParcelSize4',
        'min_parcel_size_5' => 'getMinParcelSize5',
        'min_parcel_size_6' => 'getMinParcelSize6',
        'min_parcel_size_7' => 'getMinParcelSize7',
        'min_parcel_size_8' => 'getMinParcelSize8',
        'min_parcel_size_9' => 'getMinParcelSize9',
        'min_parcel_size_10' => 'getMinParcelSize10',
        'parcel_subdivision_regulated' => 'getParcelSubdivisionRegulated',
        'parcel_subdivision_regulated_1' => 'getParcelSubdivisionRegulated1',
        'parcel_subdivision_regulated_2' => 'getParcelSubdivisionRegulated2',
        'parcel_subdivision_regulated_3' => 'getParcelSubdivisionRegulated3',
        'parcel_subdivision_regulated_4' => 'getParcelSubdivisionRegulated4',
        'parcel_subdivision_regulated_5' => 'getParcelSubdivisionRegulated5',
        'parcel_subdivision_regulated_6' => 'getParcelSubdivisionRegulated6',
        'parcel_subdivision_regulated_7' => 'getParcelSubdivisionRegulated7',
        'parcel_subdivision_regulated_8' => 'getParcelSubdivisionRegulated8',
        'parcel_subdivision_regulated_9' => 'getParcelSubdivisionRegulated9',
        'parcel_subdivision_regulated_10' => 'getParcelSubdivisionRegulated10',
        'geom' => 'getGeom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('oid', $data ?? [], null);
        $this->setIfExists('plan_id', $data ?? [], null);
        $this->setIfExists('municipality_code', $data ?? [], null);
        $this->setIfExists('municipality_name', $data ?? [], null);
        $this->setIfExists('object_code', $data ?? [], null);
        $this->setIfExists('plan_type', $data ?? [], null);
        $this->setIfExists('plan_number', $data ?? [], null);
        $this->setIfExists('plan_name', $data ?? [], null);
        $this->setIfExists('plan_status', $data ?? [], null);
        $this->setIfExists('usage', $data ?? [], null);
        $this->setIfExists('usage_general', $data ?? [], null);
        $this->setIfExists('date_proposal', $data ?? [], null);
        $this->setIfExists('date_adopted', $data ?? [], null);
        $this->setIfExists('date_cancelled', $data ?? [], null);
        $this->setIfExists('date_in_force', $data ?? [], null);
        $this->setIfExists('date_start', $data ?? [], null);
        $this->setIfExists('date_end', $data ?? [], null);
        $this->setIfExists('date_attributes', $data ?? [], null);
        $this->setIfExists('date_geometry', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('date_updated', $data ?? [], null);
        $this->setIfExists('link', $data ?? [], null);
        $this->setIfExists('district', $data ?? [], null);
        $this->setIfExists('zone', $data ?? [], null);
        $this->setIfExists('zone_status', $data ?? [], null);
        $this->setIfExists('constructed_percentage_valid_for', $data ?? [], null);
        $this->setIfExists('min_environment_class_allowed', $data ?? [], null);
        $this->setIfExists('max_environment_class_allowed', $data ?? [], null);
        $this->setIfExists('conservation_description', $data ?? [], null);
        $this->setIfExists('construction_share', $data ?? [], null);
        $this->setIfExists('min_land', $data ?? [], null);
        $this->setIfExists('mega_watt', $data ?? [], null);
        $this->setIfExists('contains_vvm', $data ?? [], null);
        $this->setIfExists('supplementary_conditions', $data ?? [], null);
        $this->setIfExists('zone_status_regulated', $data ?? [], null);
        $this->setIfExists('usage_regulated', $data ?? [], null);
        $this->setIfExists('scope_regulated', $data ?? [], null);
        $this->setIfExists('parcel_size_regulated', $data ?? [], null);
        $this->setIfExists('complex', $data ?? [], null);
        $this->setIfExists('complex_description', $data ?? [], null);
        $this->setIfExists('wind_description', $data ?? [], null);
        $this->setIfExists('state_plan', $data ?? [], null);
        $this->setIfExists('signs_facade_regulated_1', $data ?? [], null);
        $this->setIfExists('signs_facade_regulated_2', $data ?? [], null);
        $this->setIfExists('signs_facade_regulated_3', $data ?? [], null);
        $this->setIfExists('usage_specific_1', $data ?? [], null);
        $this->setIfExists('usage_specific_2', $data ?? [], null);
        $this->setIfExists('usage_specific_3', $data ?? [], null);
        $this->setIfExists('usage_specific_4', $data ?? [], null);
        $this->setIfExists('usage_specific_5', $data ?? [], null);
        $this->setIfExists('usage_specific_6', $data ?? [], null);
        $this->setIfExists('usage_specific_7', $data ?? [], null);
        $this->setIfExists('usage_specific_8', $data ?? [], null);
        $this->setIfExists('usage_specific_9', $data ?? [], null);
        $this->setIfExists('usage_specific_10', $data ?? [], null);
        $this->setIfExists('max_constructed_percentage_area', $data ?? [], null);
        $this->setIfExists('max_constructed_percentage_area_1', $data ?? [], null);
        $this->setIfExists('max_constructed_percentage_area_2', $data ?? [], null);
        $this->setIfExists('max_constructed_percentage_area_3', $data ?? [], null);
        $this->setIfExists('max_constructed_percentage_area_4', $data ?? [], null);
        $this->setIfExists('max_constructed_percentage_area_5', $data ?? [], null);
        $this->setIfExists('max_constructed_percentage_area_6', $data ?? [], null);
        $this->setIfExists('max_constructed_percentage_area_7', $data ?? [], null);
        $this->setIfExists('max_constructed_percentage_area_8', $data ?? [], null);
        $this->setIfExists('max_constructed_percentage_area_9', $data ?? [], null);
        $this->setIfExists('max_constructed_percentage_area_10', $data ?? [], null);
        $this->setIfExists('max_constructed_share_calculated_from_1', $data ?? [], null);
        $this->setIfExists('max_constructed_share_calculated_from_2', $data ?? [], null);
        $this->setIfExists('max_constructed_share_calculated_from_3', $data ?? [], null);
        $this->setIfExists('max_constructed_share_calculated_from_4', $data ?? [], null);
        $this->setIfExists('max_constructed_share_calculated_from_5', $data ?? [], null);
        $this->setIfExists('max_constructed_share_calculated_from_6', $data ?? [], null);
        $this->setIfExists('max_constructed_share_calculated_from_7', $data ?? [], null);
        $this->setIfExists('max_constructed_share_calculated_from_8', $data ?? [], null);
        $this->setIfExists('max_constructed_share_calculated_from_9', $data ?? [], null);
        $this->setIfExists('max_constructed_share_calculated_from_10', $data ?? [], null);
        $this->setIfExists('max_share_land_construction', $data ?? [], null);
        $this->setIfExists('max_share_land_construction_1', $data ?? [], null);
        $this->setIfExists('max_share_land_construction_2', $data ?? [], null);
        $this->setIfExists('max_share_land_construction_3', $data ?? [], null);
        $this->setIfExists('max_share_land_construction_4', $data ?? [], null);
        $this->setIfExists('max_share_land_construction_5', $data ?? [], null);
        $this->setIfExists('max_share_land_construction_6', $data ?? [], null);
        $this->setIfExists('max_share_land_construction_7', $data ?? [], null);
        $this->setIfExists('max_share_land_construction_8', $data ?? [], null);
        $this->setIfExists('max_share_land_construction_9', $data ?? [], null);
        $this->setIfExists('max_share_land_construction_10', $data ?? [], null);
        $this->setIfExists('max_floors', $data ?? [], null);
        $this->setIfExists('max_floors_1', $data ?? [], null);
        $this->setIfExists('max_floors_2', $data ?? [], null);
        $this->setIfExists('max_floors_3', $data ?? [], null);
        $this->setIfExists('max_floors_4', $data ?? [], null);
        $this->setIfExists('max_floors_5', $data ?? [], null);
        $this->setIfExists('max_floors_6', $data ?? [], null);
        $this->setIfExists('max_floors_7', $data ?? [], null);
        $this->setIfExists('max_floors_8', $data ?? [], null);
        $this->setIfExists('max_floors_9', $data ?? [], null);
        $this->setIfExists('max_floors_10', $data ?? [], null);
        $this->setIfExists('max_floor_area', $data ?? [], null);
        $this->setIfExists('max_floor_area_1', $data ?? [], null);
        $this->setIfExists('max_floor_area_2', $data ?? [], null);
        $this->setIfExists('max_floor_area_3', $data ?? [], null);
        $this->setIfExists('max_floor_area_4', $data ?? [], null);
        $this->setIfExists('max_floor_area_5', $data ?? [], null);
        $this->setIfExists('max_floor_area_6', $data ?? [], null);
        $this->setIfExists('max_floor_area_7', $data ?? [], null);
        $this->setIfExists('max_floor_area_8', $data ?? [], null);
        $this->setIfExists('max_floor_area_9', $data ?? [], null);
        $this->setIfExists('max_floor_area_10', $data ?? [], null);
        $this->setIfExists('max_floor_area_valid_for', $data ?? [], null);
        $this->setIfExists('max_floor_area_valid_for_1', $data ?? [], null);
        $this->setIfExists('max_floor_area_valid_for_2', $data ?? [], null);
        $this->setIfExists('max_floor_area_valid_for_3', $data ?? [], null);
        $this->setIfExists('max_floor_area_valid_for_4', $data ?? [], null);
        $this->setIfExists('max_floor_area_valid_for_5', $data ?? [], null);
        $this->setIfExists('max_floor_area_valid_for_6', $data ?? [], null);
        $this->setIfExists('max_floor_area_valid_for_7', $data ?? [], null);
        $this->setIfExists('max_floor_area_valid_for_8', $data ?? [], null);
        $this->setIfExists('max_floor_area_valid_for_9', $data ?? [], null);
        $this->setIfExists('max_floor_area_valid_for_10', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_1', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_2', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_3', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_4', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_5', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_6', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_7', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_8', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_9', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_10', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_valid_for', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_valid_for_1', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_valid_for_2', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_valid_for_3', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_valid_for_4', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_valid_for_5', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_valid_for_6', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_valid_for_7', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_valid_for_8', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_valid_for_9', $data ?? [], null);
        $this->setIfExists('max_sqm3_per_sqm2_valid_for_10', $data ?? [], null);
        $this->setIfExists('max_building_height', $data ?? [], null);
        $this->setIfExists('max_building_height_1', $data ?? [], null);
        $this->setIfExists('max_building_height_2', $data ?? [], null);
        $this->setIfExists('max_building_height_3', $data ?? [], null);
        $this->setIfExists('max_building_height_4', $data ?? [], null);
        $this->setIfExists('max_building_height_5', $data ?? [], null);
        $this->setIfExists('max_building_height_6', $data ?? [], null);
        $this->setIfExists('max_building_height_7', $data ?? [], null);
        $this->setIfExists('max_building_height_8', $data ?? [], null);
        $this->setIfExists('max_building_height_9', $data ?? [], null);
        $this->setIfExists('max_building_height_10', $data ?? [], null);
        $this->setIfExists('min_parcel_size', $data ?? [], null);
        $this->setIfExists('min_parcel_size_1', $data ?? [], null);
        $this->setIfExists('min_parcel_size_2', $data ?? [], null);
        $this->setIfExists('min_parcel_size_3', $data ?? [], null);
        $this->setIfExists('min_parcel_size_4', $data ?? [], null);
        $this->setIfExists('min_parcel_size_5', $data ?? [], null);
        $this->setIfExists('min_parcel_size_6', $data ?? [], null);
        $this->setIfExists('min_parcel_size_7', $data ?? [], null);
        $this->setIfExists('min_parcel_size_8', $data ?? [], null);
        $this->setIfExists('min_parcel_size_9', $data ?? [], null);
        $this->setIfExists('min_parcel_size_10', $data ?? [], null);
        $this->setIfExists('parcel_subdivision_regulated', $data ?? [], null);
        $this->setIfExists('parcel_subdivision_regulated_1', $data ?? [], null);
        $this->setIfExists('parcel_subdivision_regulated_2', $data ?? [], null);
        $this->setIfExists('parcel_subdivision_regulated_3', $data ?? [], null);
        $this->setIfExists('parcel_subdivision_regulated_4', $data ?? [], null);
        $this->setIfExists('parcel_subdivision_regulated_5', $data ?? [], null);
        $this->setIfExists('parcel_subdivision_regulated_6', $data ?? [], null);
        $this->setIfExists('parcel_subdivision_regulated_7', $data ?? [], null);
        $this->setIfExists('parcel_subdivision_regulated_8', $data ?? [], null);
        $this->setIfExists('parcel_subdivision_regulated_9', $data ?? [], null);
        $this->setIfExists('parcel_subdivision_regulated_10', $data ?? [], null);
        $this->setIfExists('geom', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['oid'] === null) {
            $invalidProperties[] = "'oid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets oid
     *
     * @return mixed
     */
    public function getOid()
    {
        return $this->container['oid'];
    }

    /**
     * Sets oid
     *
     * @param mixed $oid oid
     *
     * @return self
     */
    public function setOid($oid)
    {
        if (is_null($oid)) {
            array_push($this->openAPINullablesSetToNull, 'oid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('oid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['oid'] = $oid;

        return $this;
    }

    /**
     * Gets plan_id
     *
     * @return mixed|null
     */
    public function getPlanId()
    {
        return $this->container['plan_id'];
    }

    /**
     * Sets plan_id
     *
     * @param mixed|null $plan_id Planens unikke identifikator. Genereres af Plandata.dk.
     *
     * @return self
     */
    public function setPlanId($plan_id)
    {
        if (is_null($plan_id)) {
            array_push($this->openAPINullablesSetToNull, 'plan_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plan_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['plan_id'] = $plan_id;

        return $this;
    }

    /**
     * Gets municipality_code
     *
     * @return mixed|null
     */
    public function getMunicipalityCode()
    {
        return $this->container['municipality_code'];
    }

    /**
     * Sets municipality_code
     *
     * @param mixed|null $municipality_code Det trecifrede kommunenummer for den kommune som planen findes i.
     *
     * @return self
     */
    public function setMunicipalityCode($municipality_code)
    {
        if (is_null($municipality_code)) {
            array_push($this->openAPINullablesSetToNull, 'municipality_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('municipality_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['municipality_code'] = $municipality_code;

        return $this;
    }

    /**
     * Gets municipality_name
     *
     * @return mixed|null
     */
    public function getMunicipalityName()
    {
        return $this->container['municipality_name'];
    }

    /**
     * Sets municipality_name
     *
     * @param mixed|null $municipality_name municipality_name
     *
     * @return self
     */
    public function setMunicipalityName($municipality_name)
    {
        if (is_null($municipality_name)) {
            array_push($this->openAPINullablesSetToNull, 'municipality_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('municipality_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['municipality_name'] = $municipality_name;

        return $this;
    }

    /**
     * Gets object_code
     *
     * @return \OpenAPI\Client\Model\ObjectcodeEnum|null
     */
    public function getObjectCode()
    {
        return $this->container['object_code'];
    }

    /**
     * Sets object_code
     *
     * @param \OpenAPI\Client\Model\ObjectcodeEnum|null $object_code object_code
     *
     * @return self
     */
    public function setObjectCode($object_code)
    {
        if (is_null($object_code)) {
            throw new \InvalidArgumentException('non-nullable object_code cannot be null');
        }
        $this->container['object_code'] = $object_code;

        return $this;
    }

    /**
     * Gets plan_type
     *
     * @return \OpenAPI\Client\Model\PlantypeEnum|null
     */
    public function getPlanType()
    {
        return $this->container['plan_type'];
    }

    /**
     * Sets plan_type
     *
     * @param \OpenAPI\Client\Model\PlantypeEnum|null $plan_type plan_type
     *
     * @return self
     */
    public function setPlanType($plan_type)
    {
        if (is_null($plan_type)) {
            throw new \InvalidArgumentException('non-nullable plan_type cannot be null');
        }
        $this->container['plan_type'] = $plan_type;

        return $this;
    }

    /**
     * Gets plan_number
     *
     * @return mixed|null
     */
    public function getPlanNumber()
    {
        return $this->container['plan_number'];
    }

    /**
     * Sets plan_number
     *
     * @param mixed|null $plan_number Planens plannummer. Hvis der uploades til en plan, og det eksisterende plannr skal bevares, kan feltet udelades.Â¤
     *
     * @return self
     */
    public function setPlanNumber($plan_number)
    {
        if (is_null($plan_number)) {
            array_push($this->openAPINullablesSetToNull, 'plan_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plan_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['plan_number'] = $plan_number;

        return $this;
    }

    /**
     * Gets plan_name
     *
     * @return mixed|null
     */
    public function getPlanName()
    {
        return $this->container['plan_name'];
    }

    /**
     * Sets plan_name
     *
     * @param mixed|null $plan_name Planens navn. Hvis der uploades til en plan, og det eksisterende plannavn skal bevares, kan feltet udelades.Â¤
     *
     * @return self
     */
    public function setPlanName($plan_name)
    {
        if (is_null($plan_name)) {
            array_push($this->openAPINullablesSetToNull, 'plan_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plan_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['plan_name'] = $plan_name;

        return $this;
    }

    /**
     * Gets plan_status
     *
     * @return \OpenAPI\Client\Model\PlanStatusEnum|null
     */
    public function getPlanStatus()
    {
        return $this->container['plan_status'];
    }

    /**
     * Sets plan_status
     *
     * @param \OpenAPI\Client\Model\PlanStatusEnum|null $plan_status plan_status
     *
     * @return self
     */
    public function setPlanStatus($plan_status)
    {
        if (is_null($plan_status)) {
            throw new \InvalidArgumentException('non-nullable plan_status cannot be null');
        }
        $this->container['plan_status'] = $plan_status;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return mixed|null
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param mixed|null $usage Kode for planens generelle anvendelse.
     *
     * @return self
     */
    public function setUsage($usage)
    {
        if (is_null($usage)) {
            array_push($this->openAPINullablesSetToNull, 'usage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage'] = $usage;

        return $this;
    }

    /**
     * Gets usage_general
     *
     * @return mixed|null
     */
    public function getUsageGeneral()
    {
        return $this->container['usage_general'];
    }

    /**
     * Sets usage_general
     *
     * @param mixed|null $usage_general usage_general
     *
     * @return self
     */
    public function setUsageGeneral($usage_general)
    {
        if (is_null($usage_general)) {
            array_push($this->openAPINullablesSetToNull, 'usage_general');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_general', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage_general'] = $usage_general;

        return $this;
    }

    /**
     * Gets date_proposal
     *
     * @return mixed|null
     */
    public function getDateProposal()
    {
        return $this->container['date_proposal'];
    }

    /**
     * Sets date_proposal
     *
     * @param mixed|null $date_proposal Datoen hvor kommunalbestyrelsen vedtog forslagets udformning.
     *
     * @return self
     */
    public function setDateProposal($date_proposal)
    {
        if (is_null($date_proposal)) {
            array_push($this->openAPINullablesSetToNull, 'date_proposal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_proposal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_proposal'] = $date_proposal;

        return $this;
    }

    /**
     * Gets date_adopted
     *
     * @return mixed|null
     */
    public function getDateAdopted()
    {
        return $this->container['date_adopted'];
    }

    /**
     * Sets date_adopted
     *
     * @param mixed|null $date_adopted Vedtagelsesdato for planen.
     *
     * @return self
     */
    public function setDateAdopted($date_adopted)
    {
        if (is_null($date_adopted)) {
            array_push($this->openAPINullablesSetToNull, 'date_adopted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_adopted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_adopted'] = $date_adopted;

        return $this;
    }

    /**
     * Gets date_cancelled
     *
     * @return mixed|null
     */
    public function getDateCancelled()
    {
        return $this->container['date_cancelled'];
    }

    /**
     * Sets date_cancelled
     *
     * @param mixed|null $date_cancelled Dato for aflysning af planen.
     *
     * @return self
     */
    public function setDateCancelled($date_cancelled)
    {
        if (is_null($date_cancelled)) {
            array_push($this->openAPINullablesSetToNull, 'date_cancelled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_cancelled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_cancelled'] = $date_cancelled;

        return $this;
    }

    /**
     * Gets date_in_force
     *
     * @return mixed|null
     */
    public function getDateInForce()
    {
        return $this->container['date_in_force'];
    }

    /**
     * Sets date_in_force
     *
     * @param mixed|null $date_in_force Dato for planens ikrafttrÃ¦delse.
     *
     * @return self
     */
    public function setDateInForce($date_in_force)
    {
        if (is_null($date_in_force)) {
            array_push($this->openAPINullablesSetToNull, 'date_in_force');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_in_force', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_in_force'] = $date_in_force;

        return $this;
    }

    /**
     * Gets date_start
     *
     * @return mixed|null
     */
    public function getDateStart()
    {
        return $this->container['date_start'];
    }

    /**
     * Sets date_start
     *
     * @param mixed|null $date_start Startdatoen for gyldighedsperioden for den aktuelle version af planen.
     *
     * @return self
     */
    public function setDateStart($date_start)
    {
        if (is_null($date_start)) {
            array_push($this->openAPINullablesSetToNull, 'date_start');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_start', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_start'] = $date_start;

        return $this;
    }

    /**
     * Gets date_end
     *
     * @return mixed|null
     */
    public function getDateEnd()
    {
        return $this->container['date_end'];
    }

    /**
     * Sets date_end
     *
     * @param mixed|null $date_end Slutdatoen for gyldighedsperioden for den aktuelle version af planen.
     *
     * @return self
     */
    public function setDateEnd($date_end)
    {
        if (is_null($date_end)) {
            array_push($this->openAPINullablesSetToNull, 'date_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_end'] = $date_end;

        return $this;
    }

    /**
     * Gets date_attributes
     *
     * @return mixed|null
     */
    public function getDateAttributes()
    {
        return $this->container['date_attributes'];
    }

    /**
     * Sets date_attributes
     *
     * @param mixed|null $date_attributes date_attributes
     *
     * @return self
     */
    public function setDateAttributes($date_attributes)
    {
        if (is_null($date_attributes)) {
            array_push($this->openAPINullablesSetToNull, 'date_attributes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_attributes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_attributes'] = $date_attributes;

        return $this;
    }

    /**
     * Gets date_geometry
     *
     * @return mixed|null
     */
    public function getDateGeometry()
    {
        return $this->container['date_geometry'];
    }

    /**
     * Sets date_geometry
     *
     * @param mixed|null $date_geometry date_geometry
     *
     * @return self
     */
    public function setDateGeometry($date_geometry)
    {
        if (is_null($date_geometry)) {
            array_push($this->openAPINullablesSetToNull, 'date_geometry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_geometry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_geometry'] = $date_geometry;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return mixed|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param mixed|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            array_push($this->openAPINullablesSetToNull, 'date_created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_created', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_updated
     *
     * @return mixed|null
     */
    public function getDateUpdated()
    {
        return $this->container['date_updated'];
    }

    /**
     * Sets date_updated
     *
     * @param mixed|null $date_updated date_updated
     *
     * @return self
     */
    public function setDateUpdated($date_updated)
    {
        if (is_null($date_updated)) {
            array_push($this->openAPINullablesSetToNull, 'date_updated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_updated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_updated'] = $date_updated;

        return $this;
    }

    /**
     * Gets link
     *
     * @return mixed|null
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param mixed|null $link Link til plandokumentet. Kan ikke indberettes gennem upload
     *
     * @return self
     */
    public function setLink($link)
    {
        if (is_null($link)) {
            array_push($this->openAPINullablesSetToNull, 'link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets district
     *
     * @return mixed|null
     */
    public function getDistrict()
    {
        return $this->container['district'];
    }

    /**
     * Sets district
     *
     * @param mixed|null $district Plandistirktets navn.
     *
     * @return self
     */
    public function setDistrict($district)
    {
        if (is_null($district)) {
            array_push($this->openAPINullablesSetToNull, 'district');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('district', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['district'] = $district;

        return $this;
    }

    /**
     * Gets zone
     *
     * @return \OpenAPI\Client\Model\ResightsModelsEnumsPlandataZoneEnum|null
     */
    public function getZone()
    {
        return $this->container['zone'];
    }

    /**
     * Sets zone
     *
     * @param \OpenAPI\Client\Model\ResightsModelsEnumsPlandataZoneEnum|null $zone zone
     *
     * @return self
     */
    public function setZone($zone)
    {
        if (is_null($zone)) {
            throw new \InvalidArgumentException('non-nullable zone cannot be null');
        }
        $this->container['zone'] = $zone;

        return $this;
    }

    /**
     * Gets zone_status
     *
     * @return \OpenAPI\Client\Model\ZonestatusEnum|null
     */
    public function getZoneStatus()
    {
        return $this->container['zone_status'];
    }

    /**
     * Sets zone_status
     *
     * @param \OpenAPI\Client\Model\ZonestatusEnum|null $zone_status zone_status
     *
     * @return self
     */
    public function setZoneStatus($zone_status)
    {
        if (is_null($zone_status)) {
            throw new \InvalidArgumentException('non-nullable zone_status cannot be null');
        }
        $this->container['zone_status'] = $zone_status;

        return $this;
    }

    /**
     * Gets constructed_percentage_valid_for
     *
     * @return mixed|null
     */
    public function getConstructedPercentageValidFor()
    {
        return $this->container['constructed_percentage_valid_for'];
    }

    /**
     * Sets constructed_percentage_valid_for
     *
     * @param mixed|null $constructed_percentage_valid_for Arealenheden som Bebygpct beregnes ud fra.
     *
     * @return self
     */
    public function setConstructedPercentageValidFor($constructed_percentage_valid_for)
    {
        if (is_null($constructed_percentage_valid_for)) {
            array_push($this->openAPINullablesSetToNull, 'constructed_percentage_valid_for');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('constructed_percentage_valid_for', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['constructed_percentage_valid_for'] = $constructed_percentage_valid_for;

        return $this;
    }

    /**
     * Gets min_environment_class_allowed
     *
     * @return mixed|null
     */
    public function getMinEnvironmentClassAllowed()
    {
        return $this->container['min_environment_class_allowed'];
    }

    /**
     * Sets min_environment_class_allowed
     *
     * @param mixed|null $min_environment_class_allowed Mindste tilladte miljÃ¸klasse (talvÃ¦rdi fra 1-7).
     *
     * @return self
     */
    public function setMinEnvironmentClassAllowed($min_environment_class_allowed)
    {
        if (is_null($min_environment_class_allowed)) {
            array_push($this->openAPINullablesSetToNull, 'min_environment_class_allowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_environment_class_allowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_environment_class_allowed'] = $min_environment_class_allowed;

        return $this;
    }

    /**
     * Gets max_environment_class_allowed
     *
     * @return mixed|null
     */
    public function getMaxEnvironmentClassAllowed()
    {
        return $this->container['max_environment_class_allowed'];
    }

    /**
     * Sets max_environment_class_allowed
     *
     * @param mixed|null $max_environment_class_allowed HÃ¸jeste tilladte miljÃ¸klasse (talvÃ¦rdi fra 1-7).
     *
     * @return self
     */
    public function setMaxEnvironmentClassAllowed($max_environment_class_allowed)
    {
        if (is_null($max_environment_class_allowed)) {
            array_push($this->openAPINullablesSetToNull, 'max_environment_class_allowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_environment_class_allowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_environment_class_allowed'] = $max_environment_class_allowed;

        return $this;
    }

    /**
     * Gets conservation_description
     *
     * @return mixed|null
     */
    public function getConservationDescription()
    {
        return $this->container['conservation_description'];
    }

    /**
     * Sets conservation_description
     *
     * @param mixed|null $conservation_description Kort valgfri beskrivelse af bevaringsbestemmelserne i planen.
     *
     * @return self
     */
    public function setConservationDescription($conservation_description)
    {
        if (is_null($conservation_description)) {
            array_push($this->openAPINullablesSetToNull, 'conservation_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conservation_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['conservation_description'] = $conservation_description;

        return $this;
    }

    /**
     * Gets construction_share
     *
     * @return mixed|null
     */
    public function getConstructionShare()
    {
        return $this->container['construction_share'];
    }

    /**
     * Sets construction_share
     *
     * @param mixed|null $construction_share construction_share
     *
     * @return self
     */
    public function setConstructionShare($construction_share)
    {
        if (is_null($construction_share)) {
            array_push($this->openAPINullablesSetToNull, 'construction_share');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('construction_share', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['construction_share'] = $construction_share;

        return $this;
    }

    /**
     * Gets min_land
     *
     * @return mixed|null
     */
    public function getMinLand()
    {
        return $this->container['min_land'];
    }

    /**
     * Sets min_land
     *
     * @param mixed|null $min_land min_land
     *
     * @return self
     */
    public function setMinLand($min_land)
    {
        if (is_null($min_land)) {
            array_push($this->openAPINullablesSetToNull, 'min_land');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_land', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_land'] = $min_land;

        return $this;
    }

    /**
     * Gets mega_watt
     *
     * @return mixed|null
     */
    public function getMegaWatt()
    {
        return $this->container['mega_watt'];
    }

    /**
     * Sets mega_watt
     *
     * @param mixed|null $mega_watt Angivelse af hvor hvor stor effekt i MW det er planlagt for i en lokalplan der omhandler vindmÃ¸ller.
     *
     * @return self
     */
    public function setMegaWatt($mega_watt)
    {
        if (is_null($mega_watt)) {
            array_push($this->openAPINullablesSetToNull, 'mega_watt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mega_watt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mega_watt'] = $mega_watt;

        return $this;
    }

    /**
     * Gets contains_vvm
     *
     * @return mixed|null
     */
    public function getContainsVvm()
    {
        return $this->container['contains_vvm'];
    }

    /**
     * Sets contains_vvm
     *
     * @param mixed|null $contains_vvm contains_vvm
     *
     * @return self
     */
    public function setContainsVvm($contains_vvm)
    {
        if (is_null($contains_vvm)) {
            array_push($this->openAPINullablesSetToNull, 'contains_vvm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contains_vvm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contains_vvm'] = $contains_vvm;

        return $this;
    }

    /**
     * Gets supplementary_conditions
     *
     * @return mixed|null
     */
    public function getSupplementaryConditions()
    {
        return $this->container['supplementary_conditions'];
    }

    /**
     * Sets supplementary_conditions
     *
     * @param mixed|null $supplementary_conditions Angivelse af 'sÃ¦rlige forhold' i planen. SÃ¦rlige forhold i Plandata.dk er beskrevet i vejledningen til indberetning af lokalplaner.
     *
     * @return self
     */
    public function setSupplementaryConditions($supplementary_conditions)
    {
        if (is_null($supplementary_conditions)) {
            array_push($this->openAPINullablesSetToNull, 'supplementary_conditions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplementary_conditions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplementary_conditions'] = $supplementary_conditions;

        return $this;
    }

    /**
     * Gets zone_status_regulated
     *
     * @return mixed|null
     */
    public function getZoneStatusRegulated()
    {
        return $this->container['zone_status_regulated'];
    }

    /**
     * Sets zone_status_regulated
     *
     * @param mixed|null $zone_status_regulated Markering af at zonestatus for planomrÃ¥det ikke reguleres entydigt som enten 'byzone' eller 'sommerhusomrÃ¥de'.
     *
     * @return self
     */
    public function setZoneStatusRegulated($zone_status_regulated)
    {
        if (is_null($zone_status_regulated)) {
            array_push($this->openAPINullablesSetToNull, 'zone_status_regulated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zone_status_regulated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zone_status_regulated'] = $zone_status_regulated;

        return $this;
    }

    /**
     * Gets usage_regulated
     *
     * @return mixed|null
     */
    public function getUsageRegulated()
    {
        return $this->container['usage_regulated'];
    }

    /**
     * Sets usage_regulated
     *
     * @param mixed|null $usage_regulated Angiver om planen ikke regulerer anvendelse. SÃ¦ttes per default til 'false'.
     *
     * @return self
     */
    public function setUsageRegulated($usage_regulated)
    {
        if (is_null($usage_regulated)) {
            array_push($this->openAPINullablesSetToNull, 'usage_regulated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_regulated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage_regulated'] = $usage_regulated;

        return $this;
    }

    /**
     * Gets scope_regulated
     *
     * @return mixed|null
     */
    public function getScopeRegulated()
    {
        return $this->container['scope_regulated'];
    }

    /**
     * Sets scope_regulated
     *
     * @param mixed|null $scope_regulated Angiver om planen ikke regulerer omfang. SÃ¦ttes per default til 'false'.
     *
     * @return self
     */
    public function setScopeRegulated($scope_regulated)
    {
        if (is_null($scope_regulated)) {
            array_push($this->openAPINullablesSetToNull, 'scope_regulated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scope_regulated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scope_regulated'] = $scope_regulated;

        return $this;
    }

    /**
     * Gets parcel_size_regulated
     *
     * @return mixed|null
     */
    public function getParcelSizeRegulated()
    {
        return $this->container['parcel_size_regulated'];
    }

    /**
     * Sets parcel_size_regulated
     *
     * @param mixed|null $parcel_size_regulated parcel_size_regulated
     *
     * @return self
     */
    public function setParcelSizeRegulated($parcel_size_regulated)
    {
        if (is_null($parcel_size_regulated)) {
            array_push($this->openAPINullablesSetToNull, 'parcel_size_regulated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parcel_size_regulated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parcel_size_regulated'] = $parcel_size_regulated;

        return $this;
    }

    /**
     * Gets complex
     *
     * @return mixed|null
     */
    public function getComplex()
    {
        return $this->container['complex'];
    }

    /**
     * Sets complex
     *
     * @param mixed|null $complex Angives hvis delomrÃ¥det er sÃ¥ kompleks, at det ikke kan registreres i Plandata.dk. SÃ¦ttes per default til 'false'.
     *
     * @return self
     */
    public function setComplex($complex)
    {
        if (is_null($complex)) {
            array_push($this->openAPINullablesSetToNull, 'complex');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('complex', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['complex'] = $complex;

        return $this;
    }

    /**
     * Gets complex_description
     *
     * @return mixed|null
     */
    public function getComplexDescription()
    {
        return $this->container['complex_description'];
    }

    /**
     * Sets complex_description
     *
     * @param mixed|null $complex_description Beskrivelse af hvorfor delomrÃ¥det er komplekst
     *
     * @return self
     */
    public function setComplexDescription($complex_description)
    {
        if (is_null($complex_description)) {
            array_push($this->openAPINullablesSetToNull, 'complex_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('complex_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['complex_description'] = $complex_description;

        return $this;
    }

    /**
     * Gets wind_description
     *
     * @return mixed|null
     */
    public function getWindDescription()
    {
        return $this->container['wind_description'];
    }

    /**
     * Sets wind_description
     *
     * @param mixed|null $wind_description wind_description
     *
     * @return self
     */
    public function setWindDescription($wind_description)
    {
        if (is_null($wind_description)) {
            array_push($this->openAPINullablesSetToNull, 'wind_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wind_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['wind_description'] = $wind_description;

        return $this;
    }

    /**
     * Gets state_plan
     *
     * @return mixed|null
     */
    public function getStatePlan()
    {
        return $this->container['state_plan'];
    }

    /**
     * Sets state_plan
     *
     * @param mixed|null $state_plan state_plan
     *
     * @return self
     */
    public function setStatePlan($state_plan)
    {
        if (is_null($state_plan)) {
            array_push($this->openAPINullablesSetToNull, 'state_plan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_plan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state_plan'] = $state_plan;

        return $this;
    }

    /**
     * Gets signs_facade_regulated_1
     *
     * @return \OpenAPI\Client\Model\AbestemEnum|null
     */
    public function getSignsFacadeRegulated1()
    {
        return $this->container['signs_facade_regulated_1'];
    }

    /**
     * Sets signs_facade_regulated_1
     *
     * @param \OpenAPI\Client\Model\AbestemEnum|null $signs_facade_regulated_1 signs_facade_regulated_1
     *
     * @return self
     */
    public function setSignsFacadeRegulated1($signs_facade_regulated_1)
    {
        if (is_null($signs_facade_regulated_1)) {
            throw new \InvalidArgumentException('non-nullable signs_facade_regulated_1 cannot be null');
        }
        $this->container['signs_facade_regulated_1'] = $signs_facade_regulated_1;

        return $this;
    }

    /**
     * Gets signs_facade_regulated_2
     *
     * @return \OpenAPI\Client\Model\AbestemEnum|null
     */
    public function getSignsFacadeRegulated2()
    {
        return $this->container['signs_facade_regulated_2'];
    }

    /**
     * Sets signs_facade_regulated_2
     *
     * @param \OpenAPI\Client\Model\AbestemEnum|null $signs_facade_regulated_2 signs_facade_regulated_2
     *
     * @return self
     */
    public function setSignsFacadeRegulated2($signs_facade_regulated_2)
    {
        if (is_null($signs_facade_regulated_2)) {
            throw new \InvalidArgumentException('non-nullable signs_facade_regulated_2 cannot be null');
        }
        $this->container['signs_facade_regulated_2'] = $signs_facade_regulated_2;

        return $this;
    }

    /**
     * Gets signs_facade_regulated_3
     *
     * @return \OpenAPI\Client\Model\AbestemEnum|null
     */
    public function getSignsFacadeRegulated3()
    {
        return $this->container['signs_facade_regulated_3'];
    }

    /**
     * Sets signs_facade_regulated_3
     *
     * @param \OpenAPI\Client\Model\AbestemEnum|null $signs_facade_regulated_3 signs_facade_regulated_3
     *
     * @return self
     */
    public function setSignsFacadeRegulated3($signs_facade_regulated_3)
    {
        if (is_null($signs_facade_regulated_3)) {
            throw new \InvalidArgumentException('non-nullable signs_facade_regulated_3 cannot be null');
        }
        $this->container['signs_facade_regulated_3'] = $signs_facade_regulated_3;

        return $this;
    }

    /**
     * Gets usage_specific_1
     *
     * @return mixed|null
     */
    public function getUsageSpecific1()
    {
        return $this->container['usage_specific_1'];
    }

    /**
     * Sets usage_specific_1
     *
     * @param mixed|null $usage_specific_1 Angivelse af specifik anvendelse. Der kan angives op til 10 specifikke anvendelser gennem uplaodmodulet. Disse angives hver isÃ¦r i felterne 'Anvspec1', 'Anvspec2' ... 'Anvspec10'.
     *
     * @return self
     */
    public function setUsageSpecific1($usage_specific_1)
    {
        if (is_null($usage_specific_1)) {
            array_push($this->openAPINullablesSetToNull, 'usage_specific_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_specific_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage_specific_1'] = $usage_specific_1;

        return $this;
    }

    /**
     * Gets usage_specific_2
     *
     * @return mixed|null
     */
    public function getUsageSpecific2()
    {
        return $this->container['usage_specific_2'];
    }

    /**
     * Sets usage_specific_2
     *
     * @param mixed|null $usage_specific_2 usage_specific_2
     *
     * @return self
     */
    public function setUsageSpecific2($usage_specific_2)
    {
        if (is_null($usage_specific_2)) {
            array_push($this->openAPINullablesSetToNull, 'usage_specific_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_specific_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage_specific_2'] = $usage_specific_2;

        return $this;
    }

    /**
     * Gets usage_specific_3
     *
     * @return mixed|null
     */
    public function getUsageSpecific3()
    {
        return $this->container['usage_specific_3'];
    }

    /**
     * Sets usage_specific_3
     *
     * @param mixed|null $usage_specific_3 usage_specific_3
     *
     * @return self
     */
    public function setUsageSpecific3($usage_specific_3)
    {
        if (is_null($usage_specific_3)) {
            array_push($this->openAPINullablesSetToNull, 'usage_specific_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_specific_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage_specific_3'] = $usage_specific_3;

        return $this;
    }

    /**
     * Gets usage_specific_4
     *
     * @return mixed|null
     */
    public function getUsageSpecific4()
    {
        return $this->container['usage_specific_4'];
    }

    /**
     * Sets usage_specific_4
     *
     * @param mixed|null $usage_specific_4 usage_specific_4
     *
     * @return self
     */
    public function setUsageSpecific4($usage_specific_4)
    {
        if (is_null($usage_specific_4)) {
            array_push($this->openAPINullablesSetToNull, 'usage_specific_4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_specific_4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage_specific_4'] = $usage_specific_4;

        return $this;
    }

    /**
     * Gets usage_specific_5
     *
     * @return mixed|null
     */
    public function getUsageSpecific5()
    {
        return $this->container['usage_specific_5'];
    }

    /**
     * Sets usage_specific_5
     *
     * @param mixed|null $usage_specific_5 usage_specific_5
     *
     * @return self
     */
    public function setUsageSpecific5($usage_specific_5)
    {
        if (is_null($usage_specific_5)) {
            array_push($this->openAPINullablesSetToNull, 'usage_specific_5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_specific_5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage_specific_5'] = $usage_specific_5;

        return $this;
    }

    /**
     * Gets usage_specific_6
     *
     * @return mixed|null
     */
    public function getUsageSpecific6()
    {
        return $this->container['usage_specific_6'];
    }

    /**
     * Sets usage_specific_6
     *
     * @param mixed|null $usage_specific_6 usage_specific_6
     *
     * @return self
     */
    public function setUsageSpecific6($usage_specific_6)
    {
        if (is_null($usage_specific_6)) {
            array_push($this->openAPINullablesSetToNull, 'usage_specific_6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_specific_6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage_specific_6'] = $usage_specific_6;

        return $this;
    }

    /**
     * Gets usage_specific_7
     *
     * @return mixed|null
     */
    public function getUsageSpecific7()
    {
        return $this->container['usage_specific_7'];
    }

    /**
     * Sets usage_specific_7
     *
     * @param mixed|null $usage_specific_7 usage_specific_7
     *
     * @return self
     */
    public function setUsageSpecific7($usage_specific_7)
    {
        if (is_null($usage_specific_7)) {
            array_push($this->openAPINullablesSetToNull, 'usage_specific_7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_specific_7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage_specific_7'] = $usage_specific_7;

        return $this;
    }

    /**
     * Gets usage_specific_8
     *
     * @return mixed|null
     */
    public function getUsageSpecific8()
    {
        return $this->container['usage_specific_8'];
    }

    /**
     * Sets usage_specific_8
     *
     * @param mixed|null $usage_specific_8 usage_specific_8
     *
     * @return self
     */
    public function setUsageSpecific8($usage_specific_8)
    {
        if (is_null($usage_specific_8)) {
            array_push($this->openAPINullablesSetToNull, 'usage_specific_8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_specific_8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage_specific_8'] = $usage_specific_8;

        return $this;
    }

    /**
     * Gets usage_specific_9
     *
     * @return mixed|null
     */
    public function getUsageSpecific9()
    {
        return $this->container['usage_specific_9'];
    }

    /**
     * Sets usage_specific_9
     *
     * @param mixed|null $usage_specific_9 usage_specific_9
     *
     * @return self
     */
    public function setUsageSpecific9($usage_specific_9)
    {
        if (is_null($usage_specific_9)) {
            array_push($this->openAPINullablesSetToNull, 'usage_specific_9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_specific_9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage_specific_9'] = $usage_specific_9;

        return $this;
    }

    /**
     * Gets usage_specific_10
     *
     * @return mixed|null
     */
    public function getUsageSpecific10()
    {
        return $this->container['usage_specific_10'];
    }

    /**
     * Sets usage_specific_10
     *
     * @param mixed|null $usage_specific_10 usage_specific_10
     *
     * @return self
     */
    public function setUsageSpecific10($usage_specific_10)
    {
        if (is_null($usage_specific_10)) {
            array_push($this->openAPINullablesSetToNull, 'usage_specific_10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_specific_10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage_specific_10'] = $usage_specific_10;

        return $this;
    }

    /**
     * Gets max_constructed_percentage_area
     *
     * @return mixed|null
     */
    public function getMaxConstructedPercentageArea()
    {
        return $this->container['max_constructed_percentage_area'];
    }

    /**
     * Sets max_constructed_percentage_area
     *
     * @param mixed|null $max_constructed_percentage_area Den hÃ¸jeste tilladte bebyggelsesprocent i planomrÃ¥det.
     *
     * @return self
     */
    public function setMaxConstructedPercentageArea($max_constructed_percentage_area)
    {
        if (is_null($max_constructed_percentage_area)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_percentage_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_percentage_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_percentage_area'] = $max_constructed_percentage_area;

        return $this;
    }

    /**
     * Gets max_constructed_percentage_area_1
     *
     * @return mixed|null
     */
    public function getMaxConstructedPercentageArea1()
    {
        return $this->container['max_constructed_percentage_area_1'];
    }

    /**
     * Sets max_constructed_percentage_area_1
     *
     * @param mixed|null $max_constructed_percentage_area_1 Bebyggelsesprocent tilknyttet en specifik anvendelse.
     *
     * @return self
     */
    public function setMaxConstructedPercentageArea1($max_constructed_percentage_area_1)
    {
        if (is_null($max_constructed_percentage_area_1)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_percentage_area_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_percentage_area_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_percentage_area_1'] = $max_constructed_percentage_area_1;

        return $this;
    }

    /**
     * Gets max_constructed_percentage_area_2
     *
     * @return mixed|null
     */
    public function getMaxConstructedPercentageArea2()
    {
        return $this->container['max_constructed_percentage_area_2'];
    }

    /**
     * Sets max_constructed_percentage_area_2
     *
     * @param mixed|null $max_constructed_percentage_area_2 max_constructed_percentage_area_2
     *
     * @return self
     */
    public function setMaxConstructedPercentageArea2($max_constructed_percentage_area_2)
    {
        if (is_null($max_constructed_percentage_area_2)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_percentage_area_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_percentage_area_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_percentage_area_2'] = $max_constructed_percentage_area_2;

        return $this;
    }

    /**
     * Gets max_constructed_percentage_area_3
     *
     * @return mixed|null
     */
    public function getMaxConstructedPercentageArea3()
    {
        return $this->container['max_constructed_percentage_area_3'];
    }

    /**
     * Sets max_constructed_percentage_area_3
     *
     * @param mixed|null $max_constructed_percentage_area_3 max_constructed_percentage_area_3
     *
     * @return self
     */
    public function setMaxConstructedPercentageArea3($max_constructed_percentage_area_3)
    {
        if (is_null($max_constructed_percentage_area_3)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_percentage_area_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_percentage_area_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_percentage_area_3'] = $max_constructed_percentage_area_3;

        return $this;
    }

    /**
     * Gets max_constructed_percentage_area_4
     *
     * @return mixed|null
     */
    public function getMaxConstructedPercentageArea4()
    {
        return $this->container['max_constructed_percentage_area_4'];
    }

    /**
     * Sets max_constructed_percentage_area_4
     *
     * @param mixed|null $max_constructed_percentage_area_4 max_constructed_percentage_area_4
     *
     * @return self
     */
    public function setMaxConstructedPercentageArea4($max_constructed_percentage_area_4)
    {
        if (is_null($max_constructed_percentage_area_4)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_percentage_area_4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_percentage_area_4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_percentage_area_4'] = $max_constructed_percentage_area_4;

        return $this;
    }

    /**
     * Gets max_constructed_percentage_area_5
     *
     * @return mixed|null
     */
    public function getMaxConstructedPercentageArea5()
    {
        return $this->container['max_constructed_percentage_area_5'];
    }

    /**
     * Sets max_constructed_percentage_area_5
     *
     * @param mixed|null $max_constructed_percentage_area_5 max_constructed_percentage_area_5
     *
     * @return self
     */
    public function setMaxConstructedPercentageArea5($max_constructed_percentage_area_5)
    {
        if (is_null($max_constructed_percentage_area_5)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_percentage_area_5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_percentage_area_5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_percentage_area_5'] = $max_constructed_percentage_area_5;

        return $this;
    }

    /**
     * Gets max_constructed_percentage_area_6
     *
     * @return mixed|null
     */
    public function getMaxConstructedPercentageArea6()
    {
        return $this->container['max_constructed_percentage_area_6'];
    }

    /**
     * Sets max_constructed_percentage_area_6
     *
     * @param mixed|null $max_constructed_percentage_area_6 max_constructed_percentage_area_6
     *
     * @return self
     */
    public function setMaxConstructedPercentageArea6($max_constructed_percentage_area_6)
    {
        if (is_null($max_constructed_percentage_area_6)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_percentage_area_6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_percentage_area_6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_percentage_area_6'] = $max_constructed_percentage_area_6;

        return $this;
    }

    /**
     * Gets max_constructed_percentage_area_7
     *
     * @return mixed|null
     */
    public function getMaxConstructedPercentageArea7()
    {
        return $this->container['max_constructed_percentage_area_7'];
    }

    /**
     * Sets max_constructed_percentage_area_7
     *
     * @param mixed|null $max_constructed_percentage_area_7 max_constructed_percentage_area_7
     *
     * @return self
     */
    public function setMaxConstructedPercentageArea7($max_constructed_percentage_area_7)
    {
        if (is_null($max_constructed_percentage_area_7)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_percentage_area_7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_percentage_area_7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_percentage_area_7'] = $max_constructed_percentage_area_7;

        return $this;
    }

    /**
     * Gets max_constructed_percentage_area_8
     *
     * @return mixed|null
     */
    public function getMaxConstructedPercentageArea8()
    {
        return $this->container['max_constructed_percentage_area_8'];
    }

    /**
     * Sets max_constructed_percentage_area_8
     *
     * @param mixed|null $max_constructed_percentage_area_8 max_constructed_percentage_area_8
     *
     * @return self
     */
    public function setMaxConstructedPercentageArea8($max_constructed_percentage_area_8)
    {
        if (is_null($max_constructed_percentage_area_8)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_percentage_area_8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_percentage_area_8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_percentage_area_8'] = $max_constructed_percentage_area_8;

        return $this;
    }

    /**
     * Gets max_constructed_percentage_area_9
     *
     * @return mixed|null
     */
    public function getMaxConstructedPercentageArea9()
    {
        return $this->container['max_constructed_percentage_area_9'];
    }

    /**
     * Sets max_constructed_percentage_area_9
     *
     * @param mixed|null $max_constructed_percentage_area_9 max_constructed_percentage_area_9
     *
     * @return self
     */
    public function setMaxConstructedPercentageArea9($max_constructed_percentage_area_9)
    {
        if (is_null($max_constructed_percentage_area_9)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_percentage_area_9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_percentage_area_9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_percentage_area_9'] = $max_constructed_percentage_area_9;

        return $this;
    }

    /**
     * Gets max_constructed_percentage_area_10
     *
     * @return mixed|null
     */
    public function getMaxConstructedPercentageArea10()
    {
        return $this->container['max_constructed_percentage_area_10'];
    }

    /**
     * Sets max_constructed_percentage_area_10
     *
     * @param mixed|null $max_constructed_percentage_area_10 max_constructed_percentage_area_10
     *
     * @return self
     */
    public function setMaxConstructedPercentageArea10($max_constructed_percentage_area_10)
    {
        if (is_null($max_constructed_percentage_area_10)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_percentage_area_10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_percentage_area_10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_percentage_area_10'] = $max_constructed_percentage_area_10;

        return $this;
    }

    /**
     * Gets max_constructed_share_calculated_from_1
     *
     * @return mixed|null
     */
    public function getMaxConstructedShareCalculatedFrom1()
    {
        return $this->container['max_constructed_share_calculated_from_1'];
    }

    /**
     * Sets max_constructed_share_calculated_from_1
     *
     * @param mixed|null $max_constructed_share_calculated_from_1 Arealenheden som Bebygpct beregnes ud fra tilknyttet en specifik anvendelse.
     *
     * @return self
     */
    public function setMaxConstructedShareCalculatedFrom1($max_constructed_share_calculated_from_1)
    {
        if (is_null($max_constructed_share_calculated_from_1)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_share_calculated_from_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_share_calculated_from_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_share_calculated_from_1'] = $max_constructed_share_calculated_from_1;

        return $this;
    }

    /**
     * Gets max_constructed_share_calculated_from_2
     *
     * @return mixed|null
     */
    public function getMaxConstructedShareCalculatedFrom2()
    {
        return $this->container['max_constructed_share_calculated_from_2'];
    }

    /**
     * Sets max_constructed_share_calculated_from_2
     *
     * @param mixed|null $max_constructed_share_calculated_from_2 max_constructed_share_calculated_from_2
     *
     * @return self
     */
    public function setMaxConstructedShareCalculatedFrom2($max_constructed_share_calculated_from_2)
    {
        if (is_null($max_constructed_share_calculated_from_2)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_share_calculated_from_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_share_calculated_from_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_share_calculated_from_2'] = $max_constructed_share_calculated_from_2;

        return $this;
    }

    /**
     * Gets max_constructed_share_calculated_from_3
     *
     * @return mixed|null
     */
    public function getMaxConstructedShareCalculatedFrom3()
    {
        return $this->container['max_constructed_share_calculated_from_3'];
    }

    /**
     * Sets max_constructed_share_calculated_from_3
     *
     * @param mixed|null $max_constructed_share_calculated_from_3 max_constructed_share_calculated_from_3
     *
     * @return self
     */
    public function setMaxConstructedShareCalculatedFrom3($max_constructed_share_calculated_from_3)
    {
        if (is_null($max_constructed_share_calculated_from_3)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_share_calculated_from_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_share_calculated_from_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_share_calculated_from_3'] = $max_constructed_share_calculated_from_3;

        return $this;
    }

    /**
     * Gets max_constructed_share_calculated_from_4
     *
     * @return mixed|null
     */
    public function getMaxConstructedShareCalculatedFrom4()
    {
        return $this->container['max_constructed_share_calculated_from_4'];
    }

    /**
     * Sets max_constructed_share_calculated_from_4
     *
     * @param mixed|null $max_constructed_share_calculated_from_4 max_constructed_share_calculated_from_4
     *
     * @return self
     */
    public function setMaxConstructedShareCalculatedFrom4($max_constructed_share_calculated_from_4)
    {
        if (is_null($max_constructed_share_calculated_from_4)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_share_calculated_from_4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_share_calculated_from_4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_share_calculated_from_4'] = $max_constructed_share_calculated_from_4;

        return $this;
    }

    /**
     * Gets max_constructed_share_calculated_from_5
     *
     * @return mixed|null
     */
    public function getMaxConstructedShareCalculatedFrom5()
    {
        return $this->container['max_constructed_share_calculated_from_5'];
    }

    /**
     * Sets max_constructed_share_calculated_from_5
     *
     * @param mixed|null $max_constructed_share_calculated_from_5 max_constructed_share_calculated_from_5
     *
     * @return self
     */
    public function setMaxConstructedShareCalculatedFrom5($max_constructed_share_calculated_from_5)
    {
        if (is_null($max_constructed_share_calculated_from_5)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_share_calculated_from_5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_share_calculated_from_5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_share_calculated_from_5'] = $max_constructed_share_calculated_from_5;

        return $this;
    }

    /**
     * Gets max_constructed_share_calculated_from_6
     *
     * @return mixed|null
     */
    public function getMaxConstructedShareCalculatedFrom6()
    {
        return $this->container['max_constructed_share_calculated_from_6'];
    }

    /**
     * Sets max_constructed_share_calculated_from_6
     *
     * @param mixed|null $max_constructed_share_calculated_from_6 max_constructed_share_calculated_from_6
     *
     * @return self
     */
    public function setMaxConstructedShareCalculatedFrom6($max_constructed_share_calculated_from_6)
    {
        if (is_null($max_constructed_share_calculated_from_6)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_share_calculated_from_6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_share_calculated_from_6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_share_calculated_from_6'] = $max_constructed_share_calculated_from_6;

        return $this;
    }

    /**
     * Gets max_constructed_share_calculated_from_7
     *
     * @return mixed|null
     */
    public function getMaxConstructedShareCalculatedFrom7()
    {
        return $this->container['max_constructed_share_calculated_from_7'];
    }

    /**
     * Sets max_constructed_share_calculated_from_7
     *
     * @param mixed|null $max_constructed_share_calculated_from_7 max_constructed_share_calculated_from_7
     *
     * @return self
     */
    public function setMaxConstructedShareCalculatedFrom7($max_constructed_share_calculated_from_7)
    {
        if (is_null($max_constructed_share_calculated_from_7)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_share_calculated_from_7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_share_calculated_from_7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_share_calculated_from_7'] = $max_constructed_share_calculated_from_7;

        return $this;
    }

    /**
     * Gets max_constructed_share_calculated_from_8
     *
     * @return mixed|null
     */
    public function getMaxConstructedShareCalculatedFrom8()
    {
        return $this->container['max_constructed_share_calculated_from_8'];
    }

    /**
     * Sets max_constructed_share_calculated_from_8
     *
     * @param mixed|null $max_constructed_share_calculated_from_8 max_constructed_share_calculated_from_8
     *
     * @return self
     */
    public function setMaxConstructedShareCalculatedFrom8($max_constructed_share_calculated_from_8)
    {
        if (is_null($max_constructed_share_calculated_from_8)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_share_calculated_from_8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_share_calculated_from_8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_share_calculated_from_8'] = $max_constructed_share_calculated_from_8;

        return $this;
    }

    /**
     * Gets max_constructed_share_calculated_from_9
     *
     * @return mixed|null
     */
    public function getMaxConstructedShareCalculatedFrom9()
    {
        return $this->container['max_constructed_share_calculated_from_9'];
    }

    /**
     * Sets max_constructed_share_calculated_from_9
     *
     * @param mixed|null $max_constructed_share_calculated_from_9 max_constructed_share_calculated_from_9
     *
     * @return self
     */
    public function setMaxConstructedShareCalculatedFrom9($max_constructed_share_calculated_from_9)
    {
        if (is_null($max_constructed_share_calculated_from_9)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_share_calculated_from_9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_share_calculated_from_9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_share_calculated_from_9'] = $max_constructed_share_calculated_from_9;

        return $this;
    }

    /**
     * Gets max_constructed_share_calculated_from_10
     *
     * @return mixed|null
     */
    public function getMaxConstructedShareCalculatedFrom10()
    {
        return $this->container['max_constructed_share_calculated_from_10'];
    }

    /**
     * Sets max_constructed_share_calculated_from_10
     *
     * @param mixed|null $max_constructed_share_calculated_from_10 max_constructed_share_calculated_from_10
     *
     * @return self
     */
    public function setMaxConstructedShareCalculatedFrom10($max_constructed_share_calculated_from_10)
    {
        if (is_null($max_constructed_share_calculated_from_10)) {
            array_push($this->openAPINullablesSetToNull, 'max_constructed_share_calculated_from_10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_constructed_share_calculated_from_10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_constructed_share_calculated_from_10'] = $max_constructed_share_calculated_from_10;

        return $this;
    }

    /**
     * Gets max_share_land_construction
     *
     * @return mixed|null
     */
    public function getMaxShareLandConstruction()
    {
        return $this->container['max_share_land_construction'];
    }

    /**
     * Sets max_share_land_construction
     *
     * @param mixed|null $max_share_land_construction Den hÃ¸jeste andel (%) af grundarealet som mÃ¥ bebygges.
     *
     * @return self
     */
    public function setMaxShareLandConstruction($max_share_land_construction)
    {
        if (is_null($max_share_land_construction)) {
            array_push($this->openAPINullablesSetToNull, 'max_share_land_construction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_share_land_construction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_share_land_construction'] = $max_share_land_construction;

        return $this;
    }

    /**
     * Gets max_share_land_construction_1
     *
     * @return mixed|null
     */
    public function getMaxShareLandConstruction1()
    {
        return $this->container['max_share_land_construction_1'];
    }

    /**
     * Sets max_share_land_construction_1
     *
     * @param mixed|null $max_share_land_construction_1 Det stÃ¸rste tilladte etageareal i omrÃ¥det angivet i etagekvadratmetre tilknyttet en specifik anvendelse.
     *
     * @return self
     */
    public function setMaxShareLandConstruction1($max_share_land_construction_1)
    {
        if (is_null($max_share_land_construction_1)) {
            array_push($this->openAPINullablesSetToNull, 'max_share_land_construction_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_share_land_construction_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_share_land_construction_1'] = $max_share_land_construction_1;

        return $this;
    }

    /**
     * Gets max_share_land_construction_2
     *
     * @return mixed|null
     */
    public function getMaxShareLandConstruction2()
    {
        return $this->container['max_share_land_construction_2'];
    }

    /**
     * Sets max_share_land_construction_2
     *
     * @param mixed|null $max_share_land_construction_2 max_share_land_construction_2
     *
     * @return self
     */
    public function setMaxShareLandConstruction2($max_share_land_construction_2)
    {
        if (is_null($max_share_land_construction_2)) {
            array_push($this->openAPINullablesSetToNull, 'max_share_land_construction_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_share_land_construction_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_share_land_construction_2'] = $max_share_land_construction_2;

        return $this;
    }

    /**
     * Gets max_share_land_construction_3
     *
     * @return mixed|null
     */
    public function getMaxShareLandConstruction3()
    {
        return $this->container['max_share_land_construction_3'];
    }

    /**
     * Sets max_share_land_construction_3
     *
     * @param mixed|null $max_share_land_construction_3 max_share_land_construction_3
     *
     * @return self
     */
    public function setMaxShareLandConstruction3($max_share_land_construction_3)
    {
        if (is_null($max_share_land_construction_3)) {
            array_push($this->openAPINullablesSetToNull, 'max_share_land_construction_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_share_land_construction_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_share_land_construction_3'] = $max_share_land_construction_3;

        return $this;
    }

    /**
     * Gets max_share_land_construction_4
     *
     * @return mixed|null
     */
    public function getMaxShareLandConstruction4()
    {
        return $this->container['max_share_land_construction_4'];
    }

    /**
     * Sets max_share_land_construction_4
     *
     * @param mixed|null $max_share_land_construction_4 max_share_land_construction_4
     *
     * @return self
     */
    public function setMaxShareLandConstruction4($max_share_land_construction_4)
    {
        if (is_null($max_share_land_construction_4)) {
            array_push($this->openAPINullablesSetToNull, 'max_share_land_construction_4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_share_land_construction_4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_share_land_construction_4'] = $max_share_land_construction_4;

        return $this;
    }

    /**
     * Gets max_share_land_construction_5
     *
     * @return mixed|null
     */
    public function getMaxShareLandConstruction5()
    {
        return $this->container['max_share_land_construction_5'];
    }

    /**
     * Sets max_share_land_construction_5
     *
     * @param mixed|null $max_share_land_construction_5 max_share_land_construction_5
     *
     * @return self
     */
    public function setMaxShareLandConstruction5($max_share_land_construction_5)
    {
        if (is_null($max_share_land_construction_5)) {
            array_push($this->openAPINullablesSetToNull, 'max_share_land_construction_5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_share_land_construction_5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_share_land_construction_5'] = $max_share_land_construction_5;

        return $this;
    }

    /**
     * Gets max_share_land_construction_6
     *
     * @return mixed|null
     */
    public function getMaxShareLandConstruction6()
    {
        return $this->container['max_share_land_construction_6'];
    }

    /**
     * Sets max_share_land_construction_6
     *
     * @param mixed|null $max_share_land_construction_6 max_share_land_construction_6
     *
     * @return self
     */
    public function setMaxShareLandConstruction6($max_share_land_construction_6)
    {
        if (is_null($max_share_land_construction_6)) {
            array_push($this->openAPINullablesSetToNull, 'max_share_land_construction_6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_share_land_construction_6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_share_land_construction_6'] = $max_share_land_construction_6;

        return $this;
    }

    /**
     * Gets max_share_land_construction_7
     *
     * @return mixed|null
     */
    public function getMaxShareLandConstruction7()
    {
        return $this->container['max_share_land_construction_7'];
    }

    /**
     * Sets max_share_land_construction_7
     *
     * @param mixed|null $max_share_land_construction_7 max_share_land_construction_7
     *
     * @return self
     */
    public function setMaxShareLandConstruction7($max_share_land_construction_7)
    {
        if (is_null($max_share_land_construction_7)) {
            array_push($this->openAPINullablesSetToNull, 'max_share_land_construction_7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_share_land_construction_7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_share_land_construction_7'] = $max_share_land_construction_7;

        return $this;
    }

    /**
     * Gets max_share_land_construction_8
     *
     * @return mixed|null
     */
    public function getMaxShareLandConstruction8()
    {
        return $this->container['max_share_land_construction_8'];
    }

    /**
     * Sets max_share_land_construction_8
     *
     * @param mixed|null $max_share_land_construction_8 max_share_land_construction_8
     *
     * @return self
     */
    public function setMaxShareLandConstruction8($max_share_land_construction_8)
    {
        if (is_null($max_share_land_construction_8)) {
            array_push($this->openAPINullablesSetToNull, 'max_share_land_construction_8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_share_land_construction_8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_share_land_construction_8'] = $max_share_land_construction_8;

        return $this;
    }

    /**
     * Gets max_share_land_construction_9
     *
     * @return mixed|null
     */
    public function getMaxShareLandConstruction9()
    {
        return $this->container['max_share_land_construction_9'];
    }

    /**
     * Sets max_share_land_construction_9
     *
     * @param mixed|null $max_share_land_construction_9 max_share_land_construction_9
     *
     * @return self
     */
    public function setMaxShareLandConstruction9($max_share_land_construction_9)
    {
        if (is_null($max_share_land_construction_9)) {
            array_push($this->openAPINullablesSetToNull, 'max_share_land_construction_9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_share_land_construction_9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_share_land_construction_9'] = $max_share_land_construction_9;

        return $this;
    }

    /**
     * Gets max_share_land_construction_10
     *
     * @return mixed|null
     */
    public function getMaxShareLandConstruction10()
    {
        return $this->container['max_share_land_construction_10'];
    }

    /**
     * Sets max_share_land_construction_10
     *
     * @param mixed|null $max_share_land_construction_10 max_share_land_construction_10
     *
     * @return self
     */
    public function setMaxShareLandConstruction10($max_share_land_construction_10)
    {
        if (is_null($max_share_land_construction_10)) {
            array_push($this->openAPINullablesSetToNull, 'max_share_land_construction_10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_share_land_construction_10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_share_land_construction_10'] = $max_share_land_construction_10;

        return $this;
    }

    /**
     * Gets max_floors
     *
     * @return mixed|null
     */
    public function getMaxFloors()
    {
        return $this->container['max_floors'];
    }

    /**
     * Sets max_floors
     *
     * @param mixed|null $max_floors Det hÃ¸jeste tilladte antal etager. Udnyttet tagetage angives som en halv etage.
     *
     * @return self
     */
    public function setMaxFloors($max_floors)
    {
        if (is_null($max_floors)) {
            array_push($this->openAPINullablesSetToNull, 'max_floors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floors', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floors'] = $max_floors;

        return $this;
    }

    /**
     * Gets max_floors_1
     *
     * @return mixed|null
     */
    public function getMaxFloors1()
    {
        return $this->container['max_floors_1'];
    }

    /**
     * Sets max_floors_1
     *
     * @param mixed|null $max_floors_1 Det hÃ¸jeste tilladte antal etager. Udnyttet tagetage angives som en halv etage tilknyttet en specifik anvendelse.
     *
     * @return self
     */
    public function setMaxFloors1($max_floors_1)
    {
        if (is_null($max_floors_1)) {
            array_push($this->openAPINullablesSetToNull, 'max_floors_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floors_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floors_1'] = $max_floors_1;

        return $this;
    }

    /**
     * Gets max_floors_2
     *
     * @return mixed|null
     */
    public function getMaxFloors2()
    {
        return $this->container['max_floors_2'];
    }

    /**
     * Sets max_floors_2
     *
     * @param mixed|null $max_floors_2 max_floors_2
     *
     * @return self
     */
    public function setMaxFloors2($max_floors_2)
    {
        if (is_null($max_floors_2)) {
            array_push($this->openAPINullablesSetToNull, 'max_floors_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floors_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floors_2'] = $max_floors_2;

        return $this;
    }

    /**
     * Gets max_floors_3
     *
     * @return mixed|null
     */
    public function getMaxFloors3()
    {
        return $this->container['max_floors_3'];
    }

    /**
     * Sets max_floors_3
     *
     * @param mixed|null $max_floors_3 max_floors_3
     *
     * @return self
     */
    public function setMaxFloors3($max_floors_3)
    {
        if (is_null($max_floors_3)) {
            array_push($this->openAPINullablesSetToNull, 'max_floors_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floors_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floors_3'] = $max_floors_3;

        return $this;
    }

    /**
     * Gets max_floors_4
     *
     * @return mixed|null
     */
    public function getMaxFloors4()
    {
        return $this->container['max_floors_4'];
    }

    /**
     * Sets max_floors_4
     *
     * @param mixed|null $max_floors_4 max_floors_4
     *
     * @return self
     */
    public function setMaxFloors4($max_floors_4)
    {
        if (is_null($max_floors_4)) {
            array_push($this->openAPINullablesSetToNull, 'max_floors_4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floors_4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floors_4'] = $max_floors_4;

        return $this;
    }

    /**
     * Gets max_floors_5
     *
     * @return mixed|null
     */
    public function getMaxFloors5()
    {
        return $this->container['max_floors_5'];
    }

    /**
     * Sets max_floors_5
     *
     * @param mixed|null $max_floors_5 max_floors_5
     *
     * @return self
     */
    public function setMaxFloors5($max_floors_5)
    {
        if (is_null($max_floors_5)) {
            array_push($this->openAPINullablesSetToNull, 'max_floors_5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floors_5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floors_5'] = $max_floors_5;

        return $this;
    }

    /**
     * Gets max_floors_6
     *
     * @return mixed|null
     */
    public function getMaxFloors6()
    {
        return $this->container['max_floors_6'];
    }

    /**
     * Sets max_floors_6
     *
     * @param mixed|null $max_floors_6 max_floors_6
     *
     * @return self
     */
    public function setMaxFloors6($max_floors_6)
    {
        if (is_null($max_floors_6)) {
            array_push($this->openAPINullablesSetToNull, 'max_floors_6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floors_6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floors_6'] = $max_floors_6;

        return $this;
    }

    /**
     * Gets max_floors_7
     *
     * @return mixed|null
     */
    public function getMaxFloors7()
    {
        return $this->container['max_floors_7'];
    }

    /**
     * Sets max_floors_7
     *
     * @param mixed|null $max_floors_7 max_floors_7
     *
     * @return self
     */
    public function setMaxFloors7($max_floors_7)
    {
        if (is_null($max_floors_7)) {
            array_push($this->openAPINullablesSetToNull, 'max_floors_7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floors_7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floors_7'] = $max_floors_7;

        return $this;
    }

    /**
     * Gets max_floors_8
     *
     * @return mixed|null
     */
    public function getMaxFloors8()
    {
        return $this->container['max_floors_8'];
    }

    /**
     * Sets max_floors_8
     *
     * @param mixed|null $max_floors_8 max_floors_8
     *
     * @return self
     */
    public function setMaxFloors8($max_floors_8)
    {
        if (is_null($max_floors_8)) {
            array_push($this->openAPINullablesSetToNull, 'max_floors_8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floors_8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floors_8'] = $max_floors_8;

        return $this;
    }

    /**
     * Gets max_floors_9
     *
     * @return mixed|null
     */
    public function getMaxFloors9()
    {
        return $this->container['max_floors_9'];
    }

    /**
     * Sets max_floors_9
     *
     * @param mixed|null $max_floors_9 max_floors_9
     *
     * @return self
     */
    public function setMaxFloors9($max_floors_9)
    {
        if (is_null($max_floors_9)) {
            array_push($this->openAPINullablesSetToNull, 'max_floors_9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floors_9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floors_9'] = $max_floors_9;

        return $this;
    }

    /**
     * Gets max_floors_10
     *
     * @return mixed|null
     */
    public function getMaxFloors10()
    {
        return $this->container['max_floors_10'];
    }

    /**
     * Sets max_floors_10
     *
     * @param mixed|null $max_floors_10 max_floors_10
     *
     * @return self
     */
    public function setMaxFloors10($max_floors_10)
    {
        if (is_null($max_floors_10)) {
            array_push($this->openAPINullablesSetToNull, 'max_floors_10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floors_10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floors_10'] = $max_floors_10;

        return $this;
    }

    /**
     * Gets max_floor_area
     *
     * @return mixed|null
     */
    public function getMaxFloorArea()
    {
        return $this->container['max_floor_area'];
    }

    /**
     * Sets max_floor_area
     *
     * @param mixed|null $max_floor_area Det stÃ¸rste tilladte etageareal i omrÃ¥det angivet i etagekvadratmetre.
     *
     * @return self
     */
    public function setMaxFloorArea($max_floor_area)
    {
        if (is_null($max_floor_area)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area'] = $max_floor_area;

        return $this;
    }

    /**
     * Gets max_floor_area_1
     *
     * @return mixed|null
     */
    public function getMaxFloorArea1()
    {
        return $this->container['max_floor_area_1'];
    }

    /**
     * Sets max_floor_area_1
     *
     * @param mixed|null $max_floor_area_1 Det stÃ¸rste tilladte etageareal i omrÃ¥det angivet i etagekvadratmeter tilknyttet en specifik anvendelse.
     *
     * @return self
     */
    public function setMaxFloorArea1($max_floor_area_1)
    {
        if (is_null($max_floor_area_1)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_1'] = $max_floor_area_1;

        return $this;
    }

    /**
     * Gets max_floor_area_2
     *
     * @return mixed|null
     */
    public function getMaxFloorArea2()
    {
        return $this->container['max_floor_area_2'];
    }

    /**
     * Sets max_floor_area_2
     *
     * @param mixed|null $max_floor_area_2 max_floor_area_2
     *
     * @return self
     */
    public function setMaxFloorArea2($max_floor_area_2)
    {
        if (is_null($max_floor_area_2)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_2'] = $max_floor_area_2;

        return $this;
    }

    /**
     * Gets max_floor_area_3
     *
     * @return mixed|null
     */
    public function getMaxFloorArea3()
    {
        return $this->container['max_floor_area_3'];
    }

    /**
     * Sets max_floor_area_3
     *
     * @param mixed|null $max_floor_area_3 max_floor_area_3
     *
     * @return self
     */
    public function setMaxFloorArea3($max_floor_area_3)
    {
        if (is_null($max_floor_area_3)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_3'] = $max_floor_area_3;

        return $this;
    }

    /**
     * Gets max_floor_area_4
     *
     * @return mixed|null
     */
    public function getMaxFloorArea4()
    {
        return $this->container['max_floor_area_4'];
    }

    /**
     * Sets max_floor_area_4
     *
     * @param mixed|null $max_floor_area_4 max_floor_area_4
     *
     * @return self
     */
    public function setMaxFloorArea4($max_floor_area_4)
    {
        if (is_null($max_floor_area_4)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_4'] = $max_floor_area_4;

        return $this;
    }

    /**
     * Gets max_floor_area_5
     *
     * @return mixed|null
     */
    public function getMaxFloorArea5()
    {
        return $this->container['max_floor_area_5'];
    }

    /**
     * Sets max_floor_area_5
     *
     * @param mixed|null $max_floor_area_5 max_floor_area_5
     *
     * @return self
     */
    public function setMaxFloorArea5($max_floor_area_5)
    {
        if (is_null($max_floor_area_5)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_5'] = $max_floor_area_5;

        return $this;
    }

    /**
     * Gets max_floor_area_6
     *
     * @return mixed|null
     */
    public function getMaxFloorArea6()
    {
        return $this->container['max_floor_area_6'];
    }

    /**
     * Sets max_floor_area_6
     *
     * @param mixed|null $max_floor_area_6 max_floor_area_6
     *
     * @return self
     */
    public function setMaxFloorArea6($max_floor_area_6)
    {
        if (is_null($max_floor_area_6)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_6'] = $max_floor_area_6;

        return $this;
    }

    /**
     * Gets max_floor_area_7
     *
     * @return mixed|null
     */
    public function getMaxFloorArea7()
    {
        return $this->container['max_floor_area_7'];
    }

    /**
     * Sets max_floor_area_7
     *
     * @param mixed|null $max_floor_area_7 max_floor_area_7
     *
     * @return self
     */
    public function setMaxFloorArea7($max_floor_area_7)
    {
        if (is_null($max_floor_area_7)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_7'] = $max_floor_area_7;

        return $this;
    }

    /**
     * Gets max_floor_area_8
     *
     * @return mixed|null
     */
    public function getMaxFloorArea8()
    {
        return $this->container['max_floor_area_8'];
    }

    /**
     * Sets max_floor_area_8
     *
     * @param mixed|null $max_floor_area_8 max_floor_area_8
     *
     * @return self
     */
    public function setMaxFloorArea8($max_floor_area_8)
    {
        if (is_null($max_floor_area_8)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_8'] = $max_floor_area_8;

        return $this;
    }

    /**
     * Gets max_floor_area_9
     *
     * @return mixed|null
     */
    public function getMaxFloorArea9()
    {
        return $this->container['max_floor_area_9'];
    }

    /**
     * Sets max_floor_area_9
     *
     * @param mixed|null $max_floor_area_9 max_floor_area_9
     *
     * @return self
     */
    public function setMaxFloorArea9($max_floor_area_9)
    {
        if (is_null($max_floor_area_9)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_9'] = $max_floor_area_9;

        return $this;
    }

    /**
     * Gets max_floor_area_10
     *
     * @return mixed|null
     */
    public function getMaxFloorArea10()
    {
        return $this->container['max_floor_area_10'];
    }

    /**
     * Sets max_floor_area_10
     *
     * @param mixed|null $max_floor_area_10 max_floor_area_10
     *
     * @return self
     */
    public function setMaxFloorArea10($max_floor_area_10)
    {
        if (is_null($max_floor_area_10)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_10'] = $max_floor_area_10;

        return $this;
    }

    /**
     * Gets max_floor_area_valid_for
     *
     * @return mixed|null
     */
    public function getMaxFloorAreaValidFor()
    {
        return $this->container['max_floor_area_valid_for'];
    }

    /**
     * Sets max_floor_area_valid_for
     *
     * @param mixed|null $max_floor_area_valid_for Arealenheden som Eareal er gÃ¦ldende for.
     *
     * @return self
     */
    public function setMaxFloorAreaValidFor($max_floor_area_valid_for)
    {
        if (is_null($max_floor_area_valid_for)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_valid_for');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_valid_for', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_valid_for'] = $max_floor_area_valid_for;

        return $this;
    }

    /**
     * Gets max_floor_area_valid_for_1
     *
     * @return mixed|null
     */
    public function getMaxFloorAreaValidFor1()
    {
        return $this->container['max_floor_area_valid_for_1'];
    }

    /**
     * Sets max_floor_area_valid_for_1
     *
     * @param mixed|null $max_floor_area_valid_for_1 Arealenheden som Eareal er gÃ¦ldende for tilknyttet en specifik anvendelse.
     *
     * @return self
     */
    public function setMaxFloorAreaValidFor1($max_floor_area_valid_for_1)
    {
        if (is_null($max_floor_area_valid_for_1)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_valid_for_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_valid_for_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_valid_for_1'] = $max_floor_area_valid_for_1;

        return $this;
    }

    /**
     * Gets max_floor_area_valid_for_2
     *
     * @return mixed|null
     */
    public function getMaxFloorAreaValidFor2()
    {
        return $this->container['max_floor_area_valid_for_2'];
    }

    /**
     * Sets max_floor_area_valid_for_2
     *
     * @param mixed|null $max_floor_area_valid_for_2 max_floor_area_valid_for_2
     *
     * @return self
     */
    public function setMaxFloorAreaValidFor2($max_floor_area_valid_for_2)
    {
        if (is_null($max_floor_area_valid_for_2)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_valid_for_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_valid_for_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_valid_for_2'] = $max_floor_area_valid_for_2;

        return $this;
    }

    /**
     * Gets max_floor_area_valid_for_3
     *
     * @return mixed|null
     */
    public function getMaxFloorAreaValidFor3()
    {
        return $this->container['max_floor_area_valid_for_3'];
    }

    /**
     * Sets max_floor_area_valid_for_3
     *
     * @param mixed|null $max_floor_area_valid_for_3 max_floor_area_valid_for_3
     *
     * @return self
     */
    public function setMaxFloorAreaValidFor3($max_floor_area_valid_for_3)
    {
        if (is_null($max_floor_area_valid_for_3)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_valid_for_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_valid_for_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_valid_for_3'] = $max_floor_area_valid_for_3;

        return $this;
    }

    /**
     * Gets max_floor_area_valid_for_4
     *
     * @return mixed|null
     */
    public function getMaxFloorAreaValidFor4()
    {
        return $this->container['max_floor_area_valid_for_4'];
    }

    /**
     * Sets max_floor_area_valid_for_4
     *
     * @param mixed|null $max_floor_area_valid_for_4 max_floor_area_valid_for_4
     *
     * @return self
     */
    public function setMaxFloorAreaValidFor4($max_floor_area_valid_for_4)
    {
        if (is_null($max_floor_area_valid_for_4)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_valid_for_4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_valid_for_4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_valid_for_4'] = $max_floor_area_valid_for_4;

        return $this;
    }

    /**
     * Gets max_floor_area_valid_for_5
     *
     * @return mixed|null
     */
    public function getMaxFloorAreaValidFor5()
    {
        return $this->container['max_floor_area_valid_for_5'];
    }

    /**
     * Sets max_floor_area_valid_for_5
     *
     * @param mixed|null $max_floor_area_valid_for_5 max_floor_area_valid_for_5
     *
     * @return self
     */
    public function setMaxFloorAreaValidFor5($max_floor_area_valid_for_5)
    {
        if (is_null($max_floor_area_valid_for_5)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_valid_for_5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_valid_for_5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_valid_for_5'] = $max_floor_area_valid_for_5;

        return $this;
    }

    /**
     * Gets max_floor_area_valid_for_6
     *
     * @return mixed|null
     */
    public function getMaxFloorAreaValidFor6()
    {
        return $this->container['max_floor_area_valid_for_6'];
    }

    /**
     * Sets max_floor_area_valid_for_6
     *
     * @param mixed|null $max_floor_area_valid_for_6 max_floor_area_valid_for_6
     *
     * @return self
     */
    public function setMaxFloorAreaValidFor6($max_floor_area_valid_for_6)
    {
        if (is_null($max_floor_area_valid_for_6)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_valid_for_6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_valid_for_6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_valid_for_6'] = $max_floor_area_valid_for_6;

        return $this;
    }

    /**
     * Gets max_floor_area_valid_for_7
     *
     * @return mixed|null
     */
    public function getMaxFloorAreaValidFor7()
    {
        return $this->container['max_floor_area_valid_for_7'];
    }

    /**
     * Sets max_floor_area_valid_for_7
     *
     * @param mixed|null $max_floor_area_valid_for_7 max_floor_area_valid_for_7
     *
     * @return self
     */
    public function setMaxFloorAreaValidFor7($max_floor_area_valid_for_7)
    {
        if (is_null($max_floor_area_valid_for_7)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_valid_for_7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_valid_for_7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_valid_for_7'] = $max_floor_area_valid_for_7;

        return $this;
    }

    /**
     * Gets max_floor_area_valid_for_8
     *
     * @return mixed|null
     */
    public function getMaxFloorAreaValidFor8()
    {
        return $this->container['max_floor_area_valid_for_8'];
    }

    /**
     * Sets max_floor_area_valid_for_8
     *
     * @param mixed|null $max_floor_area_valid_for_8 max_floor_area_valid_for_8
     *
     * @return self
     */
    public function setMaxFloorAreaValidFor8($max_floor_area_valid_for_8)
    {
        if (is_null($max_floor_area_valid_for_8)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_valid_for_8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_valid_for_8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_valid_for_8'] = $max_floor_area_valid_for_8;

        return $this;
    }

    /**
     * Gets max_floor_area_valid_for_9
     *
     * @return mixed|null
     */
    public function getMaxFloorAreaValidFor9()
    {
        return $this->container['max_floor_area_valid_for_9'];
    }

    /**
     * Sets max_floor_area_valid_for_9
     *
     * @param mixed|null $max_floor_area_valid_for_9 max_floor_area_valid_for_9
     *
     * @return self
     */
    public function setMaxFloorAreaValidFor9($max_floor_area_valid_for_9)
    {
        if (is_null($max_floor_area_valid_for_9)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_valid_for_9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_valid_for_9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_valid_for_9'] = $max_floor_area_valid_for_9;

        return $this;
    }

    /**
     * Gets max_floor_area_valid_for_10
     *
     * @return mixed|null
     */
    public function getMaxFloorAreaValidFor10()
    {
        return $this->container['max_floor_area_valid_for_10'];
    }

    /**
     * Sets max_floor_area_valid_for_10
     *
     * @param mixed|null $max_floor_area_valid_for_10 max_floor_area_valid_for_10
     *
     * @return self
     */
    public function setMaxFloorAreaValidFor10($max_floor_area_valid_for_10)
    {
        if (is_null($max_floor_area_valid_for_10)) {
            array_push($this->openAPINullablesSetToNull, 'max_floor_area_valid_for_10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_floor_area_valid_for_10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_floor_area_valid_for_10'] = $max_floor_area_valid_for_10;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm2()
    {
        return $this->container['max_sqm3_per_sqm2'];
    }

    /**
     * Sets max_sqm3_per_sqm2
     *
     * @param mixed|null $max_sqm3_per_sqm2 Det stÃ¸rst tilladte bygningsrumfang per arealenhed, angivet i m3 per m2.
     *
     * @return self
     */
    public function setMaxSqm3PerSqm2($max_sqm3_per_sqm2)
    {
        if (is_null($max_sqm3_per_sqm2)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2'] = $max_sqm3_per_sqm2;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_1
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm21()
    {
        return $this->container['max_sqm3_per_sqm2_1'];
    }

    /**
     * Sets max_sqm3_per_sqm2_1
     *
     * @param mixed|null $max_sqm3_per_sqm2_1 Det stÃ¸rst tilladte bygningsrumfang per arealenhed, angivet i m3 per m2 tilknyttet en specifik anvendelse.
     *
     * @return self
     */
    public function setMaxSqm3PerSqm21($max_sqm3_per_sqm2_1)
    {
        if (is_null($max_sqm3_per_sqm2_1)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_1'] = $max_sqm3_per_sqm2_1;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_2
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm22()
    {
        return $this->container['max_sqm3_per_sqm2_2'];
    }

    /**
     * Sets max_sqm3_per_sqm2_2
     *
     * @param mixed|null $max_sqm3_per_sqm2_2 max_sqm3_per_sqm2_2
     *
     * @return self
     */
    public function setMaxSqm3PerSqm22($max_sqm3_per_sqm2_2)
    {
        if (is_null($max_sqm3_per_sqm2_2)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_2'] = $max_sqm3_per_sqm2_2;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_3
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm23()
    {
        return $this->container['max_sqm3_per_sqm2_3'];
    }

    /**
     * Sets max_sqm3_per_sqm2_3
     *
     * @param mixed|null $max_sqm3_per_sqm2_3 max_sqm3_per_sqm2_3
     *
     * @return self
     */
    public function setMaxSqm3PerSqm23($max_sqm3_per_sqm2_3)
    {
        if (is_null($max_sqm3_per_sqm2_3)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_3'] = $max_sqm3_per_sqm2_3;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_4
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm24()
    {
        return $this->container['max_sqm3_per_sqm2_4'];
    }

    /**
     * Sets max_sqm3_per_sqm2_4
     *
     * @param mixed|null $max_sqm3_per_sqm2_4 max_sqm3_per_sqm2_4
     *
     * @return self
     */
    public function setMaxSqm3PerSqm24($max_sqm3_per_sqm2_4)
    {
        if (is_null($max_sqm3_per_sqm2_4)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_4'] = $max_sqm3_per_sqm2_4;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_5
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm25()
    {
        return $this->container['max_sqm3_per_sqm2_5'];
    }

    /**
     * Sets max_sqm3_per_sqm2_5
     *
     * @param mixed|null $max_sqm3_per_sqm2_5 max_sqm3_per_sqm2_5
     *
     * @return self
     */
    public function setMaxSqm3PerSqm25($max_sqm3_per_sqm2_5)
    {
        if (is_null($max_sqm3_per_sqm2_5)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_5'] = $max_sqm3_per_sqm2_5;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_6
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm26()
    {
        return $this->container['max_sqm3_per_sqm2_6'];
    }

    /**
     * Sets max_sqm3_per_sqm2_6
     *
     * @param mixed|null $max_sqm3_per_sqm2_6 max_sqm3_per_sqm2_6
     *
     * @return self
     */
    public function setMaxSqm3PerSqm26($max_sqm3_per_sqm2_6)
    {
        if (is_null($max_sqm3_per_sqm2_6)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_6'] = $max_sqm3_per_sqm2_6;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_7
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm27()
    {
        return $this->container['max_sqm3_per_sqm2_7'];
    }

    /**
     * Sets max_sqm3_per_sqm2_7
     *
     * @param mixed|null $max_sqm3_per_sqm2_7 max_sqm3_per_sqm2_7
     *
     * @return self
     */
    public function setMaxSqm3PerSqm27($max_sqm3_per_sqm2_7)
    {
        if (is_null($max_sqm3_per_sqm2_7)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_7'] = $max_sqm3_per_sqm2_7;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_8
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm28()
    {
        return $this->container['max_sqm3_per_sqm2_8'];
    }

    /**
     * Sets max_sqm3_per_sqm2_8
     *
     * @param mixed|null $max_sqm3_per_sqm2_8 max_sqm3_per_sqm2_8
     *
     * @return self
     */
    public function setMaxSqm3PerSqm28($max_sqm3_per_sqm2_8)
    {
        if (is_null($max_sqm3_per_sqm2_8)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_8'] = $max_sqm3_per_sqm2_8;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_9
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm29()
    {
        return $this->container['max_sqm3_per_sqm2_9'];
    }

    /**
     * Sets max_sqm3_per_sqm2_9
     *
     * @param mixed|null $max_sqm3_per_sqm2_9 max_sqm3_per_sqm2_9
     *
     * @return self
     */
    public function setMaxSqm3PerSqm29($max_sqm3_per_sqm2_9)
    {
        if (is_null($max_sqm3_per_sqm2_9)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_9'] = $max_sqm3_per_sqm2_9;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_10
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm210()
    {
        return $this->container['max_sqm3_per_sqm2_10'];
    }

    /**
     * Sets max_sqm3_per_sqm2_10
     *
     * @param mixed|null $max_sqm3_per_sqm2_10 max_sqm3_per_sqm2_10
     *
     * @return self
     */
    public function setMaxSqm3PerSqm210($max_sqm3_per_sqm2_10)
    {
        if (is_null($max_sqm3_per_sqm2_10)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_10'] = $max_sqm3_per_sqm2_10;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_valid_for
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm2ValidFor()
    {
        return $this->container['max_sqm3_per_sqm2_valid_for'];
    }

    /**
     * Sets max_sqm3_per_sqm2_valid_for
     *
     * @param mixed|null $max_sqm3_per_sqm2_valid_for Arealenheden som m3_m2 er gÃ¦ldende for.
     *
     * @return self
     */
    public function setMaxSqm3PerSqm2ValidFor($max_sqm3_per_sqm2_valid_for)
    {
        if (is_null($max_sqm3_per_sqm2_valid_for)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_valid_for');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_valid_for', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_valid_for'] = $max_sqm3_per_sqm2_valid_for;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_valid_for_1
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm2ValidFor1()
    {
        return $this->container['max_sqm3_per_sqm2_valid_for_1'];
    }

    /**
     * Sets max_sqm3_per_sqm2_valid_for_1
     *
     * @param mixed|null $max_sqm3_per_sqm2_valid_for_1 Arealenheden som m3_m2 er gÃ¦ldende for tilknyttet en specifik anvendelse.
     *
     * @return self
     */
    public function setMaxSqm3PerSqm2ValidFor1($max_sqm3_per_sqm2_valid_for_1)
    {
        if (is_null($max_sqm3_per_sqm2_valid_for_1)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_valid_for_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_valid_for_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_valid_for_1'] = $max_sqm3_per_sqm2_valid_for_1;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_valid_for_2
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm2ValidFor2()
    {
        return $this->container['max_sqm3_per_sqm2_valid_for_2'];
    }

    /**
     * Sets max_sqm3_per_sqm2_valid_for_2
     *
     * @param mixed|null $max_sqm3_per_sqm2_valid_for_2 max_sqm3_per_sqm2_valid_for_2
     *
     * @return self
     */
    public function setMaxSqm3PerSqm2ValidFor2($max_sqm3_per_sqm2_valid_for_2)
    {
        if (is_null($max_sqm3_per_sqm2_valid_for_2)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_valid_for_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_valid_for_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_valid_for_2'] = $max_sqm3_per_sqm2_valid_for_2;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_valid_for_3
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm2ValidFor3()
    {
        return $this->container['max_sqm3_per_sqm2_valid_for_3'];
    }

    /**
     * Sets max_sqm3_per_sqm2_valid_for_3
     *
     * @param mixed|null $max_sqm3_per_sqm2_valid_for_3 max_sqm3_per_sqm2_valid_for_3
     *
     * @return self
     */
    public function setMaxSqm3PerSqm2ValidFor3($max_sqm3_per_sqm2_valid_for_3)
    {
        if (is_null($max_sqm3_per_sqm2_valid_for_3)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_valid_for_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_valid_for_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_valid_for_3'] = $max_sqm3_per_sqm2_valid_for_3;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_valid_for_4
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm2ValidFor4()
    {
        return $this->container['max_sqm3_per_sqm2_valid_for_4'];
    }

    /**
     * Sets max_sqm3_per_sqm2_valid_for_4
     *
     * @param mixed|null $max_sqm3_per_sqm2_valid_for_4 max_sqm3_per_sqm2_valid_for_4
     *
     * @return self
     */
    public function setMaxSqm3PerSqm2ValidFor4($max_sqm3_per_sqm2_valid_for_4)
    {
        if (is_null($max_sqm3_per_sqm2_valid_for_4)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_valid_for_4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_valid_for_4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_valid_for_4'] = $max_sqm3_per_sqm2_valid_for_4;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_valid_for_5
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm2ValidFor5()
    {
        return $this->container['max_sqm3_per_sqm2_valid_for_5'];
    }

    /**
     * Sets max_sqm3_per_sqm2_valid_for_5
     *
     * @param mixed|null $max_sqm3_per_sqm2_valid_for_5 max_sqm3_per_sqm2_valid_for_5
     *
     * @return self
     */
    public function setMaxSqm3PerSqm2ValidFor5($max_sqm3_per_sqm2_valid_for_5)
    {
        if (is_null($max_sqm3_per_sqm2_valid_for_5)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_valid_for_5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_valid_for_5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_valid_for_5'] = $max_sqm3_per_sqm2_valid_for_5;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_valid_for_6
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm2ValidFor6()
    {
        return $this->container['max_sqm3_per_sqm2_valid_for_6'];
    }

    /**
     * Sets max_sqm3_per_sqm2_valid_for_6
     *
     * @param mixed|null $max_sqm3_per_sqm2_valid_for_6 max_sqm3_per_sqm2_valid_for_6
     *
     * @return self
     */
    public function setMaxSqm3PerSqm2ValidFor6($max_sqm3_per_sqm2_valid_for_6)
    {
        if (is_null($max_sqm3_per_sqm2_valid_for_6)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_valid_for_6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_valid_for_6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_valid_for_6'] = $max_sqm3_per_sqm2_valid_for_6;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_valid_for_7
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm2ValidFor7()
    {
        return $this->container['max_sqm3_per_sqm2_valid_for_7'];
    }

    /**
     * Sets max_sqm3_per_sqm2_valid_for_7
     *
     * @param mixed|null $max_sqm3_per_sqm2_valid_for_7 max_sqm3_per_sqm2_valid_for_7
     *
     * @return self
     */
    public function setMaxSqm3PerSqm2ValidFor7($max_sqm3_per_sqm2_valid_for_7)
    {
        if (is_null($max_sqm3_per_sqm2_valid_for_7)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_valid_for_7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_valid_for_7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_valid_for_7'] = $max_sqm3_per_sqm2_valid_for_7;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_valid_for_8
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm2ValidFor8()
    {
        return $this->container['max_sqm3_per_sqm2_valid_for_8'];
    }

    /**
     * Sets max_sqm3_per_sqm2_valid_for_8
     *
     * @param mixed|null $max_sqm3_per_sqm2_valid_for_8 max_sqm3_per_sqm2_valid_for_8
     *
     * @return self
     */
    public function setMaxSqm3PerSqm2ValidFor8($max_sqm3_per_sqm2_valid_for_8)
    {
        if (is_null($max_sqm3_per_sqm2_valid_for_8)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_valid_for_8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_valid_for_8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_valid_for_8'] = $max_sqm3_per_sqm2_valid_for_8;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_valid_for_9
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm2ValidFor9()
    {
        return $this->container['max_sqm3_per_sqm2_valid_for_9'];
    }

    /**
     * Sets max_sqm3_per_sqm2_valid_for_9
     *
     * @param mixed|null $max_sqm3_per_sqm2_valid_for_9 max_sqm3_per_sqm2_valid_for_9
     *
     * @return self
     */
    public function setMaxSqm3PerSqm2ValidFor9($max_sqm3_per_sqm2_valid_for_9)
    {
        if (is_null($max_sqm3_per_sqm2_valid_for_9)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_valid_for_9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_valid_for_9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_valid_for_9'] = $max_sqm3_per_sqm2_valid_for_9;

        return $this;
    }

    /**
     * Gets max_sqm3_per_sqm2_valid_for_10
     *
     * @return mixed|null
     */
    public function getMaxSqm3PerSqm2ValidFor10()
    {
        return $this->container['max_sqm3_per_sqm2_valid_for_10'];
    }

    /**
     * Sets max_sqm3_per_sqm2_valid_for_10
     *
     * @param mixed|null $max_sqm3_per_sqm2_valid_for_10 max_sqm3_per_sqm2_valid_for_10
     *
     * @return self
     */
    public function setMaxSqm3PerSqm2ValidFor10($max_sqm3_per_sqm2_valid_for_10)
    {
        if (is_null($max_sqm3_per_sqm2_valid_for_10)) {
            array_push($this->openAPINullablesSetToNull, 'max_sqm3_per_sqm2_valid_for_10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_sqm3_per_sqm2_valid_for_10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_sqm3_per_sqm2_valid_for_10'] = $max_sqm3_per_sqm2_valid_for_10;

        return $this;
    }

    /**
     * Gets max_building_height
     *
     * @return mixed|null
     */
    public function getMaxBuildingHeight()
    {
        return $this->container['max_building_height'];
    }

    /**
     * Sets max_building_height
     *
     * @param mixed|null $max_building_height Den hÃ¸jeste tilladte bygningshÃ¸jde agivet i metre.
     *
     * @return self
     */
    public function setMaxBuildingHeight($max_building_height)
    {
        if (is_null($max_building_height)) {
            array_push($this->openAPINullablesSetToNull, 'max_building_height');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_building_height', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_building_height'] = $max_building_height;

        return $this;
    }

    /**
     * Gets max_building_height_1
     *
     * @return mixed|null
     */
    public function getMaxBuildingHeight1()
    {
        return $this->container['max_building_height_1'];
    }

    /**
     * Sets max_building_height_1
     *
     * @param mixed|null $max_building_height_1 Den hÃ¸jeste tilladte bygningshÃ¸jde agivet i meter tilknyttet en specifik anvendelse.
     *
     * @return self
     */
    public function setMaxBuildingHeight1($max_building_height_1)
    {
        if (is_null($max_building_height_1)) {
            array_push($this->openAPINullablesSetToNull, 'max_building_height_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_building_height_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_building_height_1'] = $max_building_height_1;

        return $this;
    }

    /**
     * Gets max_building_height_2
     *
     * @return mixed|null
     */
    public function getMaxBuildingHeight2()
    {
        return $this->container['max_building_height_2'];
    }

    /**
     * Sets max_building_height_2
     *
     * @param mixed|null $max_building_height_2 max_building_height_2
     *
     * @return self
     */
    public function setMaxBuildingHeight2($max_building_height_2)
    {
        if (is_null($max_building_height_2)) {
            array_push($this->openAPINullablesSetToNull, 'max_building_height_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_building_height_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_building_height_2'] = $max_building_height_2;

        return $this;
    }

    /**
     * Gets max_building_height_3
     *
     * @return mixed|null
     */
    public function getMaxBuildingHeight3()
    {
        return $this->container['max_building_height_3'];
    }

    /**
     * Sets max_building_height_3
     *
     * @param mixed|null $max_building_height_3 max_building_height_3
     *
     * @return self
     */
    public function setMaxBuildingHeight3($max_building_height_3)
    {
        if (is_null($max_building_height_3)) {
            array_push($this->openAPINullablesSetToNull, 'max_building_height_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_building_height_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_building_height_3'] = $max_building_height_3;

        return $this;
    }

    /**
     * Gets max_building_height_4
     *
     * @return mixed|null
     */
    public function getMaxBuildingHeight4()
    {
        return $this->container['max_building_height_4'];
    }

    /**
     * Sets max_building_height_4
     *
     * @param mixed|null $max_building_height_4 max_building_height_4
     *
     * @return self
     */
    public function setMaxBuildingHeight4($max_building_height_4)
    {
        if (is_null($max_building_height_4)) {
            array_push($this->openAPINullablesSetToNull, 'max_building_height_4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_building_height_4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_building_height_4'] = $max_building_height_4;

        return $this;
    }

    /**
     * Gets max_building_height_5
     *
     * @return mixed|null
     */
    public function getMaxBuildingHeight5()
    {
        return $this->container['max_building_height_5'];
    }

    /**
     * Sets max_building_height_5
     *
     * @param mixed|null $max_building_height_5 max_building_height_5
     *
     * @return self
     */
    public function setMaxBuildingHeight5($max_building_height_5)
    {
        if (is_null($max_building_height_5)) {
            array_push($this->openAPINullablesSetToNull, 'max_building_height_5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_building_height_5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_building_height_5'] = $max_building_height_5;

        return $this;
    }

    /**
     * Gets max_building_height_6
     *
     * @return mixed|null
     */
    public function getMaxBuildingHeight6()
    {
        return $this->container['max_building_height_6'];
    }

    /**
     * Sets max_building_height_6
     *
     * @param mixed|null $max_building_height_6 max_building_height_6
     *
     * @return self
     */
    public function setMaxBuildingHeight6($max_building_height_6)
    {
        if (is_null($max_building_height_6)) {
            array_push($this->openAPINullablesSetToNull, 'max_building_height_6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_building_height_6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_building_height_6'] = $max_building_height_6;

        return $this;
    }

    /**
     * Gets max_building_height_7
     *
     * @return mixed|null
     */
    public function getMaxBuildingHeight7()
    {
        return $this->container['max_building_height_7'];
    }

    /**
     * Sets max_building_height_7
     *
     * @param mixed|null $max_building_height_7 max_building_height_7
     *
     * @return self
     */
    public function setMaxBuildingHeight7($max_building_height_7)
    {
        if (is_null($max_building_height_7)) {
            array_push($this->openAPINullablesSetToNull, 'max_building_height_7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_building_height_7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_building_height_7'] = $max_building_height_7;

        return $this;
    }

    /**
     * Gets max_building_height_8
     *
     * @return mixed|null
     */
    public function getMaxBuildingHeight8()
    {
        return $this->container['max_building_height_8'];
    }

    /**
     * Sets max_building_height_8
     *
     * @param mixed|null $max_building_height_8 max_building_height_8
     *
     * @return self
     */
    public function setMaxBuildingHeight8($max_building_height_8)
    {
        if (is_null($max_building_height_8)) {
            array_push($this->openAPINullablesSetToNull, 'max_building_height_8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_building_height_8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_building_height_8'] = $max_building_height_8;

        return $this;
    }

    /**
     * Gets max_building_height_9
     *
     * @return mixed|null
     */
    public function getMaxBuildingHeight9()
    {
        return $this->container['max_building_height_9'];
    }

    /**
     * Sets max_building_height_9
     *
     * @param mixed|null $max_building_height_9 max_building_height_9
     *
     * @return self
     */
    public function setMaxBuildingHeight9($max_building_height_9)
    {
        if (is_null($max_building_height_9)) {
            array_push($this->openAPINullablesSetToNull, 'max_building_height_9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_building_height_9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_building_height_9'] = $max_building_height_9;

        return $this;
    }

    /**
     * Gets max_building_height_10
     *
     * @return mixed|null
     */
    public function getMaxBuildingHeight10()
    {
        return $this->container['max_building_height_10'];
    }

    /**
     * Sets max_building_height_10
     *
     * @param mixed|null $max_building_height_10 max_building_height_10
     *
     * @return self
     */
    public function setMaxBuildingHeight10($max_building_height_10)
    {
        if (is_null($max_building_height_10)) {
            array_push($this->openAPINullablesSetToNull, 'max_building_height_10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_building_height_10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_building_height_10'] = $max_building_height_10;

        return $this;
    }

    /**
     * Gets min_parcel_size
     *
     * @return mixed|null
     */
    public function getMinParcelSize()
    {
        return $this->container['min_parcel_size'];
    }

    /**
     * Sets min_parcel_size
     *
     * @param mixed|null $min_parcel_size Den mindste tilladte grundstÃ¸rrelse ved udstykning.
     *
     * @return self
     */
    public function setMinParcelSize($min_parcel_size)
    {
        if (is_null($min_parcel_size)) {
            array_push($this->openAPINullablesSetToNull, 'min_parcel_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_parcel_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_parcel_size'] = $min_parcel_size;

        return $this;
    }

    /**
     * Gets min_parcel_size_1
     *
     * @return mixed|null
     */
    public function getMinParcelSize1()
    {
        return $this->container['min_parcel_size_1'];
    }

    /**
     * Sets min_parcel_size_1
     *
     * @param mixed|null $min_parcel_size_1 Den mindste tilladte grundstÃ¸rrelse ved udstykning tilknyttet en specifik anvendelse.
     *
     * @return self
     */
    public function setMinParcelSize1($min_parcel_size_1)
    {
        if (is_null($min_parcel_size_1)) {
            array_push($this->openAPINullablesSetToNull, 'min_parcel_size_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_parcel_size_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_parcel_size_1'] = $min_parcel_size_1;

        return $this;
    }

    /**
     * Gets min_parcel_size_2
     *
     * @return mixed|null
     */
    public function getMinParcelSize2()
    {
        return $this->container['min_parcel_size_2'];
    }

    /**
     * Sets min_parcel_size_2
     *
     * @param mixed|null $min_parcel_size_2 min_parcel_size_2
     *
     * @return self
     */
    public function setMinParcelSize2($min_parcel_size_2)
    {
        if (is_null($min_parcel_size_2)) {
            array_push($this->openAPINullablesSetToNull, 'min_parcel_size_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_parcel_size_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_parcel_size_2'] = $min_parcel_size_2;

        return $this;
    }

    /**
     * Gets min_parcel_size_3
     *
     * @return mixed|null
     */
    public function getMinParcelSize3()
    {
        return $this->container['min_parcel_size_3'];
    }

    /**
     * Sets min_parcel_size_3
     *
     * @param mixed|null $min_parcel_size_3 min_parcel_size_3
     *
     * @return self
     */
    public function setMinParcelSize3($min_parcel_size_3)
    {
        if (is_null($min_parcel_size_3)) {
            array_push($this->openAPINullablesSetToNull, 'min_parcel_size_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_parcel_size_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_parcel_size_3'] = $min_parcel_size_3;

        return $this;
    }

    /**
     * Gets min_parcel_size_4
     *
     * @return mixed|null
     */
    public function getMinParcelSize4()
    {
        return $this->container['min_parcel_size_4'];
    }

    /**
     * Sets min_parcel_size_4
     *
     * @param mixed|null $min_parcel_size_4 min_parcel_size_4
     *
     * @return self
     */
    public function setMinParcelSize4($min_parcel_size_4)
    {
        if (is_null($min_parcel_size_4)) {
            array_push($this->openAPINullablesSetToNull, 'min_parcel_size_4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_parcel_size_4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_parcel_size_4'] = $min_parcel_size_4;

        return $this;
    }

    /**
     * Gets min_parcel_size_5
     *
     * @return mixed|null
     */
    public function getMinParcelSize5()
    {
        return $this->container['min_parcel_size_5'];
    }

    /**
     * Sets min_parcel_size_5
     *
     * @param mixed|null $min_parcel_size_5 min_parcel_size_5
     *
     * @return self
     */
    public function setMinParcelSize5($min_parcel_size_5)
    {
        if (is_null($min_parcel_size_5)) {
            array_push($this->openAPINullablesSetToNull, 'min_parcel_size_5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_parcel_size_5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_parcel_size_5'] = $min_parcel_size_5;

        return $this;
    }

    /**
     * Gets min_parcel_size_6
     *
     * @return mixed|null
     */
    public function getMinParcelSize6()
    {
        return $this->container['min_parcel_size_6'];
    }

    /**
     * Sets min_parcel_size_6
     *
     * @param mixed|null $min_parcel_size_6 min_parcel_size_6
     *
     * @return self
     */
    public function setMinParcelSize6($min_parcel_size_6)
    {
        if (is_null($min_parcel_size_6)) {
            array_push($this->openAPINullablesSetToNull, 'min_parcel_size_6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_parcel_size_6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_parcel_size_6'] = $min_parcel_size_6;

        return $this;
    }

    /**
     * Gets min_parcel_size_7
     *
     * @return mixed|null
     */
    public function getMinParcelSize7()
    {
        return $this->container['min_parcel_size_7'];
    }

    /**
     * Sets min_parcel_size_7
     *
     * @param mixed|null $min_parcel_size_7 min_parcel_size_7
     *
     * @return self
     */
    public function setMinParcelSize7($min_parcel_size_7)
    {
        if (is_null($min_parcel_size_7)) {
            array_push($this->openAPINullablesSetToNull, 'min_parcel_size_7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_parcel_size_7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_parcel_size_7'] = $min_parcel_size_7;

        return $this;
    }

    /**
     * Gets min_parcel_size_8
     *
     * @return mixed|null
     */
    public function getMinParcelSize8()
    {
        return $this->container['min_parcel_size_8'];
    }

    /**
     * Sets min_parcel_size_8
     *
     * @param mixed|null $min_parcel_size_8 min_parcel_size_8
     *
     * @return self
     */
    public function setMinParcelSize8($min_parcel_size_8)
    {
        if (is_null($min_parcel_size_8)) {
            array_push($this->openAPINullablesSetToNull, 'min_parcel_size_8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_parcel_size_8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_parcel_size_8'] = $min_parcel_size_8;

        return $this;
    }

    /**
     * Gets min_parcel_size_9
     *
     * @return mixed|null
     */
    public function getMinParcelSize9()
    {
        return $this->container['min_parcel_size_9'];
    }

    /**
     * Sets min_parcel_size_9
     *
     * @param mixed|null $min_parcel_size_9 min_parcel_size_9
     *
     * @return self
     */
    public function setMinParcelSize9($min_parcel_size_9)
    {
        if (is_null($min_parcel_size_9)) {
            array_push($this->openAPINullablesSetToNull, 'min_parcel_size_9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_parcel_size_9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_parcel_size_9'] = $min_parcel_size_9;

        return $this;
    }

    /**
     * Gets min_parcel_size_10
     *
     * @return mixed|null
     */
    public function getMinParcelSize10()
    {
        return $this->container['min_parcel_size_10'];
    }

    /**
     * Sets min_parcel_size_10
     *
     * @param mixed|null $min_parcel_size_10 min_parcel_size_10
     *
     * @return self
     */
    public function setMinParcelSize10($min_parcel_size_10)
    {
        if (is_null($min_parcel_size_10)) {
            array_push($this->openAPINullablesSetToNull, 'min_parcel_size_10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_parcel_size_10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_parcel_size_10'] = $min_parcel_size_10;

        return $this;
    }

    /**
     * Gets parcel_subdivision_regulated
     *
     * @return mixed|null
     */
    public function getParcelSubdivisionRegulated()
    {
        return $this->container['parcel_subdivision_regulated'];
    }

    /**
     * Sets parcel_subdivision_regulated
     *
     * @param mixed|null $parcel_subdivision_regulated Angivelse af om planen forbyder udstykning i planomrÃ¥det.
     *
     * @return self
     */
    public function setParcelSubdivisionRegulated($parcel_subdivision_regulated)
    {
        if (is_null($parcel_subdivision_regulated)) {
            array_push($this->openAPINullablesSetToNull, 'parcel_subdivision_regulated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parcel_subdivision_regulated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parcel_subdivision_regulated'] = $parcel_subdivision_regulated;

        return $this;
    }

    /**
     * Gets parcel_subdivision_regulated_1
     *
     * @return mixed|null
     */
    public function getParcelSubdivisionRegulated1()
    {
        return $this->container['parcel_subdivision_regulated_1'];
    }

    /**
     * Sets parcel_subdivision_regulated_1
     *
     * @param mixed|null $parcel_subdivision_regulated_1 Angivelse af om planen forbyder udstykning i planomrÃ¥det tilknyttet en specifik anvendelse.
     *
     * @return self
     */
    public function setParcelSubdivisionRegulated1($parcel_subdivision_regulated_1)
    {
        if (is_null($parcel_subdivision_regulated_1)) {
            array_push($this->openAPINullablesSetToNull, 'parcel_subdivision_regulated_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parcel_subdivision_regulated_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parcel_subdivision_regulated_1'] = $parcel_subdivision_regulated_1;

        return $this;
    }

    /**
     * Gets parcel_subdivision_regulated_2
     *
     * @return mixed|null
     */
    public function getParcelSubdivisionRegulated2()
    {
        return $this->container['parcel_subdivision_regulated_2'];
    }

    /**
     * Sets parcel_subdivision_regulated_2
     *
     * @param mixed|null $parcel_subdivision_regulated_2 parcel_subdivision_regulated_2
     *
     * @return self
     */
    public function setParcelSubdivisionRegulated2($parcel_subdivision_regulated_2)
    {
        if (is_null($parcel_subdivision_regulated_2)) {
            array_push($this->openAPINullablesSetToNull, 'parcel_subdivision_regulated_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parcel_subdivision_regulated_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parcel_subdivision_regulated_2'] = $parcel_subdivision_regulated_2;

        return $this;
    }

    /**
     * Gets parcel_subdivision_regulated_3
     *
     * @return mixed|null
     */
    public function getParcelSubdivisionRegulated3()
    {
        return $this->container['parcel_subdivision_regulated_3'];
    }

    /**
     * Sets parcel_subdivision_regulated_3
     *
     * @param mixed|null $parcel_subdivision_regulated_3 parcel_subdivision_regulated_3
     *
     * @return self
     */
    public function setParcelSubdivisionRegulated3($parcel_subdivision_regulated_3)
    {
        if (is_null($parcel_subdivision_regulated_3)) {
            array_push($this->openAPINullablesSetToNull, 'parcel_subdivision_regulated_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parcel_subdivision_regulated_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parcel_subdivision_regulated_3'] = $parcel_subdivision_regulated_3;

        return $this;
    }

    /**
     * Gets parcel_subdivision_regulated_4
     *
     * @return mixed|null
     */
    public function getParcelSubdivisionRegulated4()
    {
        return $this->container['parcel_subdivision_regulated_4'];
    }

    /**
     * Sets parcel_subdivision_regulated_4
     *
     * @param mixed|null $parcel_subdivision_regulated_4 parcel_subdivision_regulated_4
     *
     * @return self
     */
    public function setParcelSubdivisionRegulated4($parcel_subdivision_regulated_4)
    {
        if (is_null($parcel_subdivision_regulated_4)) {
            array_push($this->openAPINullablesSetToNull, 'parcel_subdivision_regulated_4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parcel_subdivision_regulated_4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parcel_subdivision_regulated_4'] = $parcel_subdivision_regulated_4;

        return $this;
    }

    /**
     * Gets parcel_subdivision_regulated_5
     *
     * @return mixed|null
     */
    public function getParcelSubdivisionRegulated5()
    {
        return $this->container['parcel_subdivision_regulated_5'];
    }

    /**
     * Sets parcel_subdivision_regulated_5
     *
     * @param mixed|null $parcel_subdivision_regulated_5 parcel_subdivision_regulated_5
     *
     * @return self
     */
    public function setParcelSubdivisionRegulated5($parcel_subdivision_regulated_5)
    {
        if (is_null($parcel_subdivision_regulated_5)) {
            array_push($this->openAPINullablesSetToNull, 'parcel_subdivision_regulated_5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parcel_subdivision_regulated_5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parcel_subdivision_regulated_5'] = $parcel_subdivision_regulated_5;

        return $this;
    }

    /**
     * Gets parcel_subdivision_regulated_6
     *
     * @return mixed|null
     */
    public function getParcelSubdivisionRegulated6()
    {
        return $this->container['parcel_subdivision_regulated_6'];
    }

    /**
     * Sets parcel_subdivision_regulated_6
     *
     * @param mixed|null $parcel_subdivision_regulated_6 parcel_subdivision_regulated_6
     *
     * @return self
     */
    public function setParcelSubdivisionRegulated6($parcel_subdivision_regulated_6)
    {
        if (is_null($parcel_subdivision_regulated_6)) {
            array_push($this->openAPINullablesSetToNull, 'parcel_subdivision_regulated_6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parcel_subdivision_regulated_6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parcel_subdivision_regulated_6'] = $parcel_subdivision_regulated_6;

        return $this;
    }

    /**
     * Gets parcel_subdivision_regulated_7
     *
     * @return mixed|null
     */
    public function getParcelSubdivisionRegulated7()
    {
        return $this->container['parcel_subdivision_regulated_7'];
    }

    /**
     * Sets parcel_subdivision_regulated_7
     *
     * @param mixed|null $parcel_subdivision_regulated_7 parcel_subdivision_regulated_7
     *
     * @return self
     */
    public function setParcelSubdivisionRegulated7($parcel_subdivision_regulated_7)
    {
        if (is_null($parcel_subdivision_regulated_7)) {
            array_push($this->openAPINullablesSetToNull, 'parcel_subdivision_regulated_7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parcel_subdivision_regulated_7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parcel_subdivision_regulated_7'] = $parcel_subdivision_regulated_7;

        return $this;
    }

    /**
     * Gets parcel_subdivision_regulated_8
     *
     * @return mixed|null
     */
    public function getParcelSubdivisionRegulated8()
    {
        return $this->container['parcel_subdivision_regulated_8'];
    }

    /**
     * Sets parcel_subdivision_regulated_8
     *
     * @param mixed|null $parcel_subdivision_regulated_8 parcel_subdivision_regulated_8
     *
     * @return self
     */
    public function setParcelSubdivisionRegulated8($parcel_subdivision_regulated_8)
    {
        if (is_null($parcel_subdivision_regulated_8)) {
            array_push($this->openAPINullablesSetToNull, 'parcel_subdivision_regulated_8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parcel_subdivision_regulated_8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parcel_subdivision_regulated_8'] = $parcel_subdivision_regulated_8;

        return $this;
    }

    /**
     * Gets parcel_subdivision_regulated_9
     *
     * @return mixed|null
     */
    public function getParcelSubdivisionRegulated9()
    {
        return $this->container['parcel_subdivision_regulated_9'];
    }

    /**
     * Sets parcel_subdivision_regulated_9
     *
     * @param mixed|null $parcel_subdivision_regulated_9 parcel_subdivision_regulated_9
     *
     * @return self
     */
    public function setParcelSubdivisionRegulated9($parcel_subdivision_regulated_9)
    {
        if (is_null($parcel_subdivision_regulated_9)) {
            array_push($this->openAPINullablesSetToNull, 'parcel_subdivision_regulated_9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parcel_subdivision_regulated_9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parcel_subdivision_regulated_9'] = $parcel_subdivision_regulated_9;

        return $this;
    }

    /**
     * Gets parcel_subdivision_regulated_10
     *
     * @return mixed|null
     */
    public function getParcelSubdivisionRegulated10()
    {
        return $this->container['parcel_subdivision_regulated_10'];
    }

    /**
     * Sets parcel_subdivision_regulated_10
     *
     * @param mixed|null $parcel_subdivision_regulated_10 parcel_subdivision_regulated_10
     *
     * @return self
     */
    public function setParcelSubdivisionRegulated10($parcel_subdivision_regulated_10)
    {
        if (is_null($parcel_subdivision_regulated_10)) {
            array_push($this->openAPINullablesSetToNull, 'parcel_subdivision_regulated_10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parcel_subdivision_regulated_10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parcel_subdivision_regulated_10'] = $parcel_subdivision_regulated_10;

        return $this;
    }

    /**
     * Gets geom
     *
     * @return mixed|null
     */
    public function getGeom()
    {
        return $this->container['geom'];
    }

    /**
     * Sets geom
     *
     * @param mixed|null $geom Objektets geografiske placering.
     *
     * @return self
     */
    public function setGeom($geom)
    {
        if (is_null($geom)) {
            array_push($this->openAPINullablesSetToNull, 'geom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('geom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['geom'] = $geom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


