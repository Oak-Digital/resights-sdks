<?php
/**
 * BBRBuildingResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API 游녦</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BBRBuildingResponse Class Doc Comment
 *
 * @category Class
 * @description En Bygning best친r af en eller flere konstruktioner, der udg칮r en rumlig helhed, og som sk칝rmer mod vejrliget og skal som minimum best친 af en overd칝kning.  Beskrivelse: P친 bygningsniveau i BBR findes de oplysninger, der er f칝lles for Bygningen, det vil sige for alle de Enheder, Bygningen indeholder (f.eks. tagbekl칝dning  og materiale af ydre v칝gge). Ved en bygning forst친s i BBR en sammenh칝ngende bebyggelse, der er opf칮rt p친 en selvst칝ndig Bestemt fast ejendom, og som i det v칝sentlige er opf칮rt af ensartede materialer og med omtrent samme antal etager. Bebyggelsen skal ogs친 have ensartede adgangsforhold (f.eks. direkte adgang til vej eller indirekte adgang gennem port eller lignende).  Bem칝rkninger: En Bygning registreres i BBR uanset om den er opf칮rt p친 et matrikuleret eller umatrikuleret areal - herunder ogs친 bygninger opf칮rt p친 forstand eller s칮territoriet.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BBRBuildingResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BBRBuildingResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'namespace' => 'mixed',
        'status' => 'mixed',
        'business_process' => 'mixed',
        'business_area' => 'mixed',
        'business_event' => 'mixed',
        'registration_from' => 'mixed',
        'registration_to' => 'mixed',
        'registration_actor' => 'mixed',
        'effect_from' => 'mixed',
        'effect_to' => 'mixed',
        'effect_actor' => 'mixed',
        'municipality_code' => 'mixed',
        'byg007_building_number' => 'mixed',
        'byg021_building_usage' => 'mixed',
        'byg024_number_apartments_with_kitchen' => 'mixed',
        'byg025_number_apartments_without_kitchen' => 'mixed',
        'byg026_construction_year' => 'mixed',
        'byg027_rebuilding_year' => 'mixed',
        'byg029_temporary_building_date' => 'mixed',
        'byg030_water_supply' => 'mixed',
        'byg031_drainage' => 'mixed',
        'byg032_material_exterior_wall' => 'mixed',
        'byg033_material_roofing' => 'mixed',
        'byg034_material_supplementary_exterior_wall' => 'mixed',
        'byg035_material_supplementary_roofing' => 'mixed',
        'byg036_material_contains_asbestos' => 'mixed',
        'byg037_material_source' => 'mixed',
        'byg038_area_building_total' => 'mixed',
        'byg039_area_building_residential' => 'mixed',
        'byg040_area_building_commercial' => 'mixed',
        'byg041_area_constructed' => 'mixed',
        'byg042_area_built_in_garage' => 'mixed',
        'byg043_area_built_in_carport' => 'mixed',
        'byg044_area_built_in_outhouse' => 'mixed',
        'byg045_area_built_in_patio' => 'mixed',
        'byg046_area_closed_building_areas_total' => 'mixed',
        'byg047_area_waste_rooms_terrain_level' => 'mixed',
        'byg048_area_other' => 'mixed',
        'byg049_area_covered' => 'mixed',
        'byg050_area_open_roofs_total' => 'mixed',
        'byg051_area_access' => 'mixed',
        'byg052_area_carport_calculation_principle' => 'mixed',
        'byg053_area_building_source' => 'mixed',
        'byg054_number_floors' => 'mixed',
        'byg055_deviating_floors' => 'mixed',
        'byg056_heating_installation' => 'mixed',
        'byg057_heating_medium' => 'mixed',
        'byg058_heating_supplementary' => 'mixed',
        'byg069_number_seats_emergency_room' => 'mixed',
        'byg070_preservation' => 'mixed',
        'byg071_preservation_reference' => 'mixed',
        'byg094_revision_date' => 'mixed',
        'byg111_storm_council_flooding_risk' => 'mixed',
        'byg112_storm_council_flooding_risk_date' => 'mixed',
        'byg113_building_damage_insurance' => 'mixed',
        'byg114_building_damage_insurance_date' => 'mixed',
        'byg119_discharge_permit' => 'mixed',
        'byg121_building_damage_insurance_covered' => 'mixed',
        'byg122_validation_date' => 'mixed',
        'byg123_wastewater_supply_membership' => 'mixed',
        'byg124_wastewater_drainage_order' => 'mixed',
        'byg125_wastewater_drainage_deadline' => 'mixed',
        'byg126_permission_exit' => 'mixed',
        'byg127_permission_exit_date' => 'mixed',
        'byg128_permission_alternative_disposal_diversion' => 'mixed',
        'byg129_permission_alternative_disposal_diversion_date' => 'mixed',
        'byg130_area_exterior_insulation' => 'mixed',
        'byg131_exemption_collective_heating_supply' => 'mixed',
        'byg132_exemption_collective_heating_supply_date' => 'mixed',
        'byg133_coordinate_source' => 'mixed',
        'byg134_coordinate_quality' => 'mixed',
        'byg135_coordinate_supplementary_information' => 'mixed',
        'byg136_placement_maritime_territory' => 'mixed',
        'byg137_banedanmark_building_number' => 'mixed',
        'byg140_easement_rental_property_date' => 'mixed',
        'byg150_material_floor' => 'mixed',
        'byg151_clearance_height' => 'mixed',
        'byg152_construction_open_closed' => 'mixed',
        'byg153_construction_conditions' => 'mixed',
        'byg301_relocation_type' => 'mixed',
        'byg302_municipality_newcomers' => 'mixed',
        'byg403_storm_council_supplementary_comments' => 'mixed',
        'byg404_coordinate' => 'mixed',
        'byg406_coordinate_system' => 'mixed',
        'byg500_note' => 'mixed',
        'slks' => '\OpenAPI\Client\Model\SLKSFBB',
        'energy_label' => '\OpenAPI\Client\Model\EnergyLabelSimple',
        'access_address' => '\OpenAPI\Client\Model\DARAccessAddress',
        'floor' => '\OpenAPI\Client\Model\BBRFloorAggs',
        'opg020_elevator' => 'mixed',
        'number_units' => 'mixed',
        'number_floors' => 'mixed',
        'number_staircases' => 'mixed',
        'plot_id' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'namespace' => null,
        'status' => null,
        'business_process' => null,
        'business_area' => null,
        'business_event' => null,
        'registration_from' => 'date-time',
        'registration_to' => 'date-time',
        'registration_actor' => null,
        'effect_from' => 'date-time',
        'effect_to' => 'date-time',
        'effect_actor' => null,
        'municipality_code' => null,
        'byg007_building_number' => null,
        'byg021_building_usage' => null,
        'byg024_number_apartments_with_kitchen' => null,
        'byg025_number_apartments_without_kitchen' => null,
        'byg026_construction_year' => null,
        'byg027_rebuilding_year' => null,
        'byg029_temporary_building_date' => 'date-time',
        'byg030_water_supply' => null,
        'byg031_drainage' => null,
        'byg032_material_exterior_wall' => null,
        'byg033_material_roofing' => null,
        'byg034_material_supplementary_exterior_wall' => null,
        'byg035_material_supplementary_roofing' => null,
        'byg036_material_contains_asbestos' => null,
        'byg037_material_source' => null,
        'byg038_area_building_total' => null,
        'byg039_area_building_residential' => null,
        'byg040_area_building_commercial' => null,
        'byg041_area_constructed' => null,
        'byg042_area_built_in_garage' => null,
        'byg043_area_built_in_carport' => null,
        'byg044_area_built_in_outhouse' => null,
        'byg045_area_built_in_patio' => null,
        'byg046_area_closed_building_areas_total' => null,
        'byg047_area_waste_rooms_terrain_level' => null,
        'byg048_area_other' => null,
        'byg049_area_covered' => null,
        'byg050_area_open_roofs_total' => null,
        'byg051_area_access' => null,
        'byg052_area_carport_calculation_principle' => null,
        'byg053_area_building_source' => null,
        'byg054_number_floors' => null,
        'byg055_deviating_floors' => null,
        'byg056_heating_installation' => null,
        'byg057_heating_medium' => null,
        'byg058_heating_supplementary' => null,
        'byg069_number_seats_emergency_room' => null,
        'byg070_preservation' => null,
        'byg071_preservation_reference' => null,
        'byg094_revision_date' => 'date-time',
        'byg111_storm_council_flooding_risk' => null,
        'byg112_storm_council_flooding_risk_date' => 'date-time',
        'byg113_building_damage_insurance' => null,
        'byg114_building_damage_insurance_date' => 'date-time',
        'byg119_discharge_permit' => null,
        'byg121_building_damage_insurance_covered' => null,
        'byg122_validation_date' => 'date-time',
        'byg123_wastewater_supply_membership' => null,
        'byg124_wastewater_drainage_order' => null,
        'byg125_wastewater_drainage_deadline' => 'date-time',
        'byg126_permission_exit' => null,
        'byg127_permission_exit_date' => 'date-time',
        'byg128_permission_alternative_disposal_diversion' => null,
        'byg129_permission_alternative_disposal_diversion_date' => 'date-time',
        'byg130_area_exterior_insulation' => null,
        'byg131_exemption_collective_heating_supply' => null,
        'byg132_exemption_collective_heating_supply_date' => 'date-time',
        'byg133_coordinate_source' => null,
        'byg134_coordinate_quality' => null,
        'byg135_coordinate_supplementary_information' => null,
        'byg136_placement_maritime_territory' => null,
        'byg137_banedanmark_building_number' => null,
        'byg140_easement_rental_property_date' => null,
        'byg150_material_floor' => null,
        'byg151_clearance_height' => null,
        'byg152_construction_open_closed' => null,
        'byg153_construction_conditions' => null,
        'byg301_relocation_type' => null,
        'byg302_municipality_newcomers' => null,
        'byg403_storm_council_supplementary_comments' => null,
        'byg404_coordinate' => null,
        'byg406_coordinate_system' => null,
        'byg500_note' => null,
        'slks' => null,
        'energy_label' => null,
        'access_address' => null,
        'floor' => null,
        'opg020_elevator' => null,
        'number_units' => null,
        'number_floors' => null,
        'number_staircases' => null,
        'plot_id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'namespace' => true,
		'status' => true,
		'business_process' => true,
		'business_area' => true,
		'business_event' => true,
		'registration_from' => true,
		'registration_to' => true,
		'registration_actor' => true,
		'effect_from' => true,
		'effect_to' => true,
		'effect_actor' => true,
		'municipality_code' => true,
		'byg007_building_number' => true,
		'byg021_building_usage' => true,
		'byg024_number_apartments_with_kitchen' => true,
		'byg025_number_apartments_without_kitchen' => true,
		'byg026_construction_year' => true,
		'byg027_rebuilding_year' => true,
		'byg029_temporary_building_date' => true,
		'byg030_water_supply' => true,
		'byg031_drainage' => true,
		'byg032_material_exterior_wall' => true,
		'byg033_material_roofing' => true,
		'byg034_material_supplementary_exterior_wall' => true,
		'byg035_material_supplementary_roofing' => true,
		'byg036_material_contains_asbestos' => true,
		'byg037_material_source' => true,
		'byg038_area_building_total' => true,
		'byg039_area_building_residential' => true,
		'byg040_area_building_commercial' => true,
		'byg041_area_constructed' => true,
		'byg042_area_built_in_garage' => true,
		'byg043_area_built_in_carport' => true,
		'byg044_area_built_in_outhouse' => true,
		'byg045_area_built_in_patio' => true,
		'byg046_area_closed_building_areas_total' => true,
		'byg047_area_waste_rooms_terrain_level' => true,
		'byg048_area_other' => true,
		'byg049_area_covered' => true,
		'byg050_area_open_roofs_total' => true,
		'byg051_area_access' => true,
		'byg052_area_carport_calculation_principle' => true,
		'byg053_area_building_source' => true,
		'byg054_number_floors' => true,
		'byg055_deviating_floors' => true,
		'byg056_heating_installation' => true,
		'byg057_heating_medium' => true,
		'byg058_heating_supplementary' => true,
		'byg069_number_seats_emergency_room' => true,
		'byg070_preservation' => true,
		'byg071_preservation_reference' => true,
		'byg094_revision_date' => true,
		'byg111_storm_council_flooding_risk' => true,
		'byg112_storm_council_flooding_risk_date' => true,
		'byg113_building_damage_insurance' => true,
		'byg114_building_damage_insurance_date' => true,
		'byg119_discharge_permit' => true,
		'byg121_building_damage_insurance_covered' => true,
		'byg122_validation_date' => true,
		'byg123_wastewater_supply_membership' => true,
		'byg124_wastewater_drainage_order' => true,
		'byg125_wastewater_drainage_deadline' => true,
		'byg126_permission_exit' => true,
		'byg127_permission_exit_date' => true,
		'byg128_permission_alternative_disposal_diversion' => true,
		'byg129_permission_alternative_disposal_diversion_date' => true,
		'byg130_area_exterior_insulation' => true,
		'byg131_exemption_collective_heating_supply' => true,
		'byg132_exemption_collective_heating_supply_date' => true,
		'byg133_coordinate_source' => true,
		'byg134_coordinate_quality' => true,
		'byg135_coordinate_supplementary_information' => true,
		'byg136_placement_maritime_territory' => true,
		'byg137_banedanmark_building_number' => true,
		'byg140_easement_rental_property_date' => true,
		'byg150_material_floor' => true,
		'byg151_clearance_height' => true,
		'byg152_construction_open_closed' => true,
		'byg153_construction_conditions' => true,
		'byg301_relocation_type' => true,
		'byg302_municipality_newcomers' => true,
		'byg403_storm_council_supplementary_comments' => true,
		'byg404_coordinate' => true,
		'byg406_coordinate_system' => true,
		'byg500_note' => true,
		'slks' => false,
		'energy_label' => false,
		'access_address' => false,
		'floor' => false,
		'opg020_elevator' => true,
		'number_units' => true,
		'number_floors' => true,
		'number_staircases' => true,
		'plot_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'namespace' => 'namespace',
        'status' => 'status',
        'business_process' => 'business_process',
        'business_area' => 'business_area',
        'business_event' => 'business_event',
        'registration_from' => 'registration_from',
        'registration_to' => 'registration_to',
        'registration_actor' => 'registration_actor',
        'effect_from' => 'effect_from',
        'effect_to' => 'effect_to',
        'effect_actor' => 'effect_actor',
        'municipality_code' => 'municipality_code',
        'byg007_building_number' => 'byg007_building_number',
        'byg021_building_usage' => 'byg021_building_usage',
        'byg024_number_apartments_with_kitchen' => 'byg024_number_apartments_with_kitchen',
        'byg025_number_apartments_without_kitchen' => 'byg025_number_apartments_without_kitchen',
        'byg026_construction_year' => 'byg026_construction_year',
        'byg027_rebuilding_year' => 'byg027_rebuilding_year',
        'byg029_temporary_building_date' => 'byg029_temporary_building_date',
        'byg030_water_supply' => 'byg030_water_supply',
        'byg031_drainage' => 'byg031_drainage',
        'byg032_material_exterior_wall' => 'byg032_material_exterior_wall',
        'byg033_material_roofing' => 'byg033_material_roofing',
        'byg034_material_supplementary_exterior_wall' => 'byg034_material_supplementary_exterior_wall',
        'byg035_material_supplementary_roofing' => 'byg035_material_supplementary_roofing',
        'byg036_material_contains_asbestos' => 'byg036_material_contains_asbestos',
        'byg037_material_source' => 'byg037_material_source',
        'byg038_area_building_total' => 'byg038_area_building_total',
        'byg039_area_building_residential' => 'byg039_area_building_residential',
        'byg040_area_building_commercial' => 'byg040_area_building_commercial',
        'byg041_area_constructed' => 'byg041_area_constructed',
        'byg042_area_built_in_garage' => 'byg042_area_built_in_garage',
        'byg043_area_built_in_carport' => 'byg043_area_built_in_carport',
        'byg044_area_built_in_outhouse' => 'byg044_area_built_in_outhouse',
        'byg045_area_built_in_patio' => 'byg045_area_built_in_patio',
        'byg046_area_closed_building_areas_total' => 'byg046_area_closed_building_areas_total',
        'byg047_area_waste_rooms_terrain_level' => 'byg047_area_waste_rooms_terrain_level',
        'byg048_area_other' => 'byg048_area_other',
        'byg049_area_covered' => 'byg049_area_covered',
        'byg050_area_open_roofs_total' => 'byg050_area_open_roofs_total',
        'byg051_area_access' => 'byg051_area_access',
        'byg052_area_carport_calculation_principle' => 'byg052_area_carport_calculation_principle',
        'byg053_area_building_source' => 'byg053_area_building_source',
        'byg054_number_floors' => 'byg054_number_floors',
        'byg055_deviating_floors' => 'byg055_deviating_floors',
        'byg056_heating_installation' => 'byg056_heating_installation',
        'byg057_heating_medium' => 'byg057_heating_medium',
        'byg058_heating_supplementary' => 'byg058_heating_supplementary',
        'byg069_number_seats_emergency_room' => 'byg069_number_seats_emergency_room',
        'byg070_preservation' => 'byg070_preservation',
        'byg071_preservation_reference' => 'byg071_preservation_reference',
        'byg094_revision_date' => 'byg094_revision_date',
        'byg111_storm_council_flooding_risk' => 'byg111_storm_council_flooding_risk',
        'byg112_storm_council_flooding_risk_date' => 'byg112_storm_council_flooding_risk_date',
        'byg113_building_damage_insurance' => 'byg113_building_damage_insurance',
        'byg114_building_damage_insurance_date' => 'byg114_building_damage_insurance_date',
        'byg119_discharge_permit' => 'byg119_discharge_permit',
        'byg121_building_damage_insurance_covered' => 'byg121_building_damage_insurance_covered',
        'byg122_validation_date' => 'byg122_validation_date',
        'byg123_wastewater_supply_membership' => 'byg123_wastewater_supply_membership',
        'byg124_wastewater_drainage_order' => 'byg124_wastewater_drainage_order',
        'byg125_wastewater_drainage_deadline' => 'byg125_wastewater_drainage_deadline',
        'byg126_permission_exit' => 'byg126_permission_exit',
        'byg127_permission_exit_date' => 'byg127_permission_exit_date',
        'byg128_permission_alternative_disposal_diversion' => 'byg128_permission_alternative_disposal_diversion',
        'byg129_permission_alternative_disposal_diversion_date' => 'byg129_permission_alternative_disposal_diversion_date',
        'byg130_area_exterior_insulation' => 'byg130_area_exterior_insulation',
        'byg131_exemption_collective_heating_supply' => 'byg131_exemption_collective_heating_supply',
        'byg132_exemption_collective_heating_supply_date' => 'byg132_exemption_collective_heating_supply_date',
        'byg133_coordinate_source' => 'byg133_coordinate_source',
        'byg134_coordinate_quality' => 'byg134_coordinate_quality',
        'byg135_coordinate_supplementary_information' => 'byg135_coordinate_supplementary_information',
        'byg136_placement_maritime_territory' => 'byg136_placement_maritime_territory',
        'byg137_banedanmark_building_number' => 'byg137_banedanmark_building_number',
        'byg140_easement_rental_property_date' => 'byg140_easement_rental_property_date',
        'byg150_material_floor' => 'byg150_material_floor',
        'byg151_clearance_height' => 'byg151_clearance_height',
        'byg152_construction_open_closed' => 'byg152_construction_open_closed',
        'byg153_construction_conditions' => 'byg153_construction_conditions',
        'byg301_relocation_type' => 'byg301_relocation_type',
        'byg302_municipality_newcomers' => 'byg302_municipality_newcomers',
        'byg403_storm_council_supplementary_comments' => 'byg403_storm_council_supplementary_comments',
        'byg404_coordinate' => 'byg404_coordinate',
        'byg406_coordinate_system' => 'byg406_coordinate_system',
        'byg500_note' => 'byg500_note',
        'slks' => 'slks',
        'energy_label' => 'energy_label',
        'access_address' => 'access_address',
        'floor' => 'floor',
        'opg020_elevator' => 'opg020_elevator',
        'number_units' => 'number_units',
        'number_floors' => 'number_floors',
        'number_staircases' => 'number_staircases',
        'plot_id' => 'plot_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'namespace' => 'setNamespace',
        'status' => 'setStatus',
        'business_process' => 'setBusinessProcess',
        'business_area' => 'setBusinessArea',
        'business_event' => 'setBusinessEvent',
        'registration_from' => 'setRegistrationFrom',
        'registration_to' => 'setRegistrationTo',
        'registration_actor' => 'setRegistrationActor',
        'effect_from' => 'setEffectFrom',
        'effect_to' => 'setEffectTo',
        'effect_actor' => 'setEffectActor',
        'municipality_code' => 'setMunicipalityCode',
        'byg007_building_number' => 'setByg007BuildingNumber',
        'byg021_building_usage' => 'setByg021BuildingUsage',
        'byg024_number_apartments_with_kitchen' => 'setByg024NumberApartmentsWithKitchen',
        'byg025_number_apartments_without_kitchen' => 'setByg025NumberApartmentsWithoutKitchen',
        'byg026_construction_year' => 'setByg026ConstructionYear',
        'byg027_rebuilding_year' => 'setByg027RebuildingYear',
        'byg029_temporary_building_date' => 'setByg029TemporaryBuildingDate',
        'byg030_water_supply' => 'setByg030WaterSupply',
        'byg031_drainage' => 'setByg031Drainage',
        'byg032_material_exterior_wall' => 'setByg032MaterialExteriorWall',
        'byg033_material_roofing' => 'setByg033MaterialRoofing',
        'byg034_material_supplementary_exterior_wall' => 'setByg034MaterialSupplementaryExteriorWall',
        'byg035_material_supplementary_roofing' => 'setByg035MaterialSupplementaryRoofing',
        'byg036_material_contains_asbestos' => 'setByg036MaterialContainsAsbestos',
        'byg037_material_source' => 'setByg037MaterialSource',
        'byg038_area_building_total' => 'setByg038AreaBuildingTotal',
        'byg039_area_building_residential' => 'setByg039AreaBuildingResidential',
        'byg040_area_building_commercial' => 'setByg040AreaBuildingCommercial',
        'byg041_area_constructed' => 'setByg041AreaConstructed',
        'byg042_area_built_in_garage' => 'setByg042AreaBuiltInGarage',
        'byg043_area_built_in_carport' => 'setByg043AreaBuiltInCarport',
        'byg044_area_built_in_outhouse' => 'setByg044AreaBuiltInOuthouse',
        'byg045_area_built_in_patio' => 'setByg045AreaBuiltInPatio',
        'byg046_area_closed_building_areas_total' => 'setByg046AreaClosedBuildingAreasTotal',
        'byg047_area_waste_rooms_terrain_level' => 'setByg047AreaWasteRoomsTerrainLevel',
        'byg048_area_other' => 'setByg048AreaOther',
        'byg049_area_covered' => 'setByg049AreaCovered',
        'byg050_area_open_roofs_total' => 'setByg050AreaOpenRoofsTotal',
        'byg051_area_access' => 'setByg051AreaAccess',
        'byg052_area_carport_calculation_principle' => 'setByg052AreaCarportCalculationPrinciple',
        'byg053_area_building_source' => 'setByg053AreaBuildingSource',
        'byg054_number_floors' => 'setByg054NumberFloors',
        'byg055_deviating_floors' => 'setByg055DeviatingFloors',
        'byg056_heating_installation' => 'setByg056HeatingInstallation',
        'byg057_heating_medium' => 'setByg057HeatingMedium',
        'byg058_heating_supplementary' => 'setByg058HeatingSupplementary',
        'byg069_number_seats_emergency_room' => 'setByg069NumberSeatsEmergencyRoom',
        'byg070_preservation' => 'setByg070Preservation',
        'byg071_preservation_reference' => 'setByg071PreservationReference',
        'byg094_revision_date' => 'setByg094RevisionDate',
        'byg111_storm_council_flooding_risk' => 'setByg111StormCouncilFloodingRisk',
        'byg112_storm_council_flooding_risk_date' => 'setByg112StormCouncilFloodingRiskDate',
        'byg113_building_damage_insurance' => 'setByg113BuildingDamageInsurance',
        'byg114_building_damage_insurance_date' => 'setByg114BuildingDamageInsuranceDate',
        'byg119_discharge_permit' => 'setByg119DischargePermit',
        'byg121_building_damage_insurance_covered' => 'setByg121BuildingDamageInsuranceCovered',
        'byg122_validation_date' => 'setByg122ValidationDate',
        'byg123_wastewater_supply_membership' => 'setByg123WastewaterSupplyMembership',
        'byg124_wastewater_drainage_order' => 'setByg124WastewaterDrainageOrder',
        'byg125_wastewater_drainage_deadline' => 'setByg125WastewaterDrainageDeadline',
        'byg126_permission_exit' => 'setByg126PermissionExit',
        'byg127_permission_exit_date' => 'setByg127PermissionExitDate',
        'byg128_permission_alternative_disposal_diversion' => 'setByg128PermissionAlternativeDisposalDiversion',
        'byg129_permission_alternative_disposal_diversion_date' => 'setByg129PermissionAlternativeDisposalDiversionDate',
        'byg130_area_exterior_insulation' => 'setByg130AreaExteriorInsulation',
        'byg131_exemption_collective_heating_supply' => 'setByg131ExemptionCollectiveHeatingSupply',
        'byg132_exemption_collective_heating_supply_date' => 'setByg132ExemptionCollectiveHeatingSupplyDate',
        'byg133_coordinate_source' => 'setByg133CoordinateSource',
        'byg134_coordinate_quality' => 'setByg134CoordinateQuality',
        'byg135_coordinate_supplementary_information' => 'setByg135CoordinateSupplementaryInformation',
        'byg136_placement_maritime_territory' => 'setByg136PlacementMaritimeTerritory',
        'byg137_banedanmark_building_number' => 'setByg137BanedanmarkBuildingNumber',
        'byg140_easement_rental_property_date' => 'setByg140EasementRentalPropertyDate',
        'byg150_material_floor' => 'setByg150MaterialFloor',
        'byg151_clearance_height' => 'setByg151ClearanceHeight',
        'byg152_construction_open_closed' => 'setByg152ConstructionOpenClosed',
        'byg153_construction_conditions' => 'setByg153ConstructionConditions',
        'byg301_relocation_type' => 'setByg301RelocationType',
        'byg302_municipality_newcomers' => 'setByg302MunicipalityNewcomers',
        'byg403_storm_council_supplementary_comments' => 'setByg403StormCouncilSupplementaryComments',
        'byg404_coordinate' => 'setByg404Coordinate',
        'byg406_coordinate_system' => 'setByg406CoordinateSystem',
        'byg500_note' => 'setByg500Note',
        'slks' => 'setSlks',
        'energy_label' => 'setEnergyLabel',
        'access_address' => 'setAccessAddress',
        'floor' => 'setFloor',
        'opg020_elevator' => 'setOpg020Elevator',
        'number_units' => 'setNumberUnits',
        'number_floors' => 'setNumberFloors',
        'number_staircases' => 'setNumberStaircases',
        'plot_id' => 'setPlotId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'namespace' => 'getNamespace',
        'status' => 'getStatus',
        'business_process' => 'getBusinessProcess',
        'business_area' => 'getBusinessArea',
        'business_event' => 'getBusinessEvent',
        'registration_from' => 'getRegistrationFrom',
        'registration_to' => 'getRegistrationTo',
        'registration_actor' => 'getRegistrationActor',
        'effect_from' => 'getEffectFrom',
        'effect_to' => 'getEffectTo',
        'effect_actor' => 'getEffectActor',
        'municipality_code' => 'getMunicipalityCode',
        'byg007_building_number' => 'getByg007BuildingNumber',
        'byg021_building_usage' => 'getByg021BuildingUsage',
        'byg024_number_apartments_with_kitchen' => 'getByg024NumberApartmentsWithKitchen',
        'byg025_number_apartments_without_kitchen' => 'getByg025NumberApartmentsWithoutKitchen',
        'byg026_construction_year' => 'getByg026ConstructionYear',
        'byg027_rebuilding_year' => 'getByg027RebuildingYear',
        'byg029_temporary_building_date' => 'getByg029TemporaryBuildingDate',
        'byg030_water_supply' => 'getByg030WaterSupply',
        'byg031_drainage' => 'getByg031Drainage',
        'byg032_material_exterior_wall' => 'getByg032MaterialExteriorWall',
        'byg033_material_roofing' => 'getByg033MaterialRoofing',
        'byg034_material_supplementary_exterior_wall' => 'getByg034MaterialSupplementaryExteriorWall',
        'byg035_material_supplementary_roofing' => 'getByg035MaterialSupplementaryRoofing',
        'byg036_material_contains_asbestos' => 'getByg036MaterialContainsAsbestos',
        'byg037_material_source' => 'getByg037MaterialSource',
        'byg038_area_building_total' => 'getByg038AreaBuildingTotal',
        'byg039_area_building_residential' => 'getByg039AreaBuildingResidential',
        'byg040_area_building_commercial' => 'getByg040AreaBuildingCommercial',
        'byg041_area_constructed' => 'getByg041AreaConstructed',
        'byg042_area_built_in_garage' => 'getByg042AreaBuiltInGarage',
        'byg043_area_built_in_carport' => 'getByg043AreaBuiltInCarport',
        'byg044_area_built_in_outhouse' => 'getByg044AreaBuiltInOuthouse',
        'byg045_area_built_in_patio' => 'getByg045AreaBuiltInPatio',
        'byg046_area_closed_building_areas_total' => 'getByg046AreaClosedBuildingAreasTotal',
        'byg047_area_waste_rooms_terrain_level' => 'getByg047AreaWasteRoomsTerrainLevel',
        'byg048_area_other' => 'getByg048AreaOther',
        'byg049_area_covered' => 'getByg049AreaCovered',
        'byg050_area_open_roofs_total' => 'getByg050AreaOpenRoofsTotal',
        'byg051_area_access' => 'getByg051AreaAccess',
        'byg052_area_carport_calculation_principle' => 'getByg052AreaCarportCalculationPrinciple',
        'byg053_area_building_source' => 'getByg053AreaBuildingSource',
        'byg054_number_floors' => 'getByg054NumberFloors',
        'byg055_deviating_floors' => 'getByg055DeviatingFloors',
        'byg056_heating_installation' => 'getByg056HeatingInstallation',
        'byg057_heating_medium' => 'getByg057HeatingMedium',
        'byg058_heating_supplementary' => 'getByg058HeatingSupplementary',
        'byg069_number_seats_emergency_room' => 'getByg069NumberSeatsEmergencyRoom',
        'byg070_preservation' => 'getByg070Preservation',
        'byg071_preservation_reference' => 'getByg071PreservationReference',
        'byg094_revision_date' => 'getByg094RevisionDate',
        'byg111_storm_council_flooding_risk' => 'getByg111StormCouncilFloodingRisk',
        'byg112_storm_council_flooding_risk_date' => 'getByg112StormCouncilFloodingRiskDate',
        'byg113_building_damage_insurance' => 'getByg113BuildingDamageInsurance',
        'byg114_building_damage_insurance_date' => 'getByg114BuildingDamageInsuranceDate',
        'byg119_discharge_permit' => 'getByg119DischargePermit',
        'byg121_building_damage_insurance_covered' => 'getByg121BuildingDamageInsuranceCovered',
        'byg122_validation_date' => 'getByg122ValidationDate',
        'byg123_wastewater_supply_membership' => 'getByg123WastewaterSupplyMembership',
        'byg124_wastewater_drainage_order' => 'getByg124WastewaterDrainageOrder',
        'byg125_wastewater_drainage_deadline' => 'getByg125WastewaterDrainageDeadline',
        'byg126_permission_exit' => 'getByg126PermissionExit',
        'byg127_permission_exit_date' => 'getByg127PermissionExitDate',
        'byg128_permission_alternative_disposal_diversion' => 'getByg128PermissionAlternativeDisposalDiversion',
        'byg129_permission_alternative_disposal_diversion_date' => 'getByg129PermissionAlternativeDisposalDiversionDate',
        'byg130_area_exterior_insulation' => 'getByg130AreaExteriorInsulation',
        'byg131_exemption_collective_heating_supply' => 'getByg131ExemptionCollectiveHeatingSupply',
        'byg132_exemption_collective_heating_supply_date' => 'getByg132ExemptionCollectiveHeatingSupplyDate',
        'byg133_coordinate_source' => 'getByg133CoordinateSource',
        'byg134_coordinate_quality' => 'getByg134CoordinateQuality',
        'byg135_coordinate_supplementary_information' => 'getByg135CoordinateSupplementaryInformation',
        'byg136_placement_maritime_territory' => 'getByg136PlacementMaritimeTerritory',
        'byg137_banedanmark_building_number' => 'getByg137BanedanmarkBuildingNumber',
        'byg140_easement_rental_property_date' => 'getByg140EasementRentalPropertyDate',
        'byg150_material_floor' => 'getByg150MaterialFloor',
        'byg151_clearance_height' => 'getByg151ClearanceHeight',
        'byg152_construction_open_closed' => 'getByg152ConstructionOpenClosed',
        'byg153_construction_conditions' => 'getByg153ConstructionConditions',
        'byg301_relocation_type' => 'getByg301RelocationType',
        'byg302_municipality_newcomers' => 'getByg302MunicipalityNewcomers',
        'byg403_storm_council_supplementary_comments' => 'getByg403StormCouncilSupplementaryComments',
        'byg404_coordinate' => 'getByg404Coordinate',
        'byg406_coordinate_system' => 'getByg406CoordinateSystem',
        'byg500_note' => 'getByg500Note',
        'slks' => 'getSlks',
        'energy_label' => 'getEnergyLabel',
        'access_address' => 'getAccessAddress',
        'floor' => 'getFloor',
        'opg020_elevator' => 'getOpg020Elevator',
        'number_units' => 'getNumberUnits',
        'number_floors' => 'getNumberFloors',
        'number_staircases' => 'getNumberStaircases',
        'plot_id' => 'getPlotId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('namespace', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('business_process', $data ?? [], null);
        $this->setIfExists('business_area', $data ?? [], null);
        $this->setIfExists('business_event', $data ?? [], null);
        $this->setIfExists('registration_from', $data ?? [], null);
        $this->setIfExists('registration_to', $data ?? [], null);
        $this->setIfExists('registration_actor', $data ?? [], null);
        $this->setIfExists('effect_from', $data ?? [], null);
        $this->setIfExists('effect_to', $data ?? [], null);
        $this->setIfExists('effect_actor', $data ?? [], null);
        $this->setIfExists('municipality_code', $data ?? [], null);
        $this->setIfExists('byg007_building_number', $data ?? [], null);
        $this->setIfExists('byg021_building_usage', $data ?? [], null);
        $this->setIfExists('byg024_number_apartments_with_kitchen', $data ?? [], null);
        $this->setIfExists('byg025_number_apartments_without_kitchen', $data ?? [], null);
        $this->setIfExists('byg026_construction_year', $data ?? [], null);
        $this->setIfExists('byg027_rebuilding_year', $data ?? [], null);
        $this->setIfExists('byg029_temporary_building_date', $data ?? [], null);
        $this->setIfExists('byg030_water_supply', $data ?? [], null);
        $this->setIfExists('byg031_drainage', $data ?? [], null);
        $this->setIfExists('byg032_material_exterior_wall', $data ?? [], null);
        $this->setIfExists('byg033_material_roofing', $data ?? [], null);
        $this->setIfExists('byg034_material_supplementary_exterior_wall', $data ?? [], null);
        $this->setIfExists('byg035_material_supplementary_roofing', $data ?? [], null);
        $this->setIfExists('byg036_material_contains_asbestos', $data ?? [], null);
        $this->setIfExists('byg037_material_source', $data ?? [], null);
        $this->setIfExists('byg038_area_building_total', $data ?? [], null);
        $this->setIfExists('byg039_area_building_residential', $data ?? [], null);
        $this->setIfExists('byg040_area_building_commercial', $data ?? [], null);
        $this->setIfExists('byg041_area_constructed', $data ?? [], null);
        $this->setIfExists('byg042_area_built_in_garage', $data ?? [], null);
        $this->setIfExists('byg043_area_built_in_carport', $data ?? [], null);
        $this->setIfExists('byg044_area_built_in_outhouse', $data ?? [], null);
        $this->setIfExists('byg045_area_built_in_patio', $data ?? [], null);
        $this->setIfExists('byg046_area_closed_building_areas_total', $data ?? [], null);
        $this->setIfExists('byg047_area_waste_rooms_terrain_level', $data ?? [], null);
        $this->setIfExists('byg048_area_other', $data ?? [], null);
        $this->setIfExists('byg049_area_covered', $data ?? [], null);
        $this->setIfExists('byg050_area_open_roofs_total', $data ?? [], null);
        $this->setIfExists('byg051_area_access', $data ?? [], null);
        $this->setIfExists('byg052_area_carport_calculation_principle', $data ?? [], null);
        $this->setIfExists('byg053_area_building_source', $data ?? [], null);
        $this->setIfExists('byg054_number_floors', $data ?? [], null);
        $this->setIfExists('byg055_deviating_floors', $data ?? [], null);
        $this->setIfExists('byg056_heating_installation', $data ?? [], null);
        $this->setIfExists('byg057_heating_medium', $data ?? [], null);
        $this->setIfExists('byg058_heating_supplementary', $data ?? [], null);
        $this->setIfExists('byg069_number_seats_emergency_room', $data ?? [], null);
        $this->setIfExists('byg070_preservation', $data ?? [], null);
        $this->setIfExists('byg071_preservation_reference', $data ?? [], null);
        $this->setIfExists('byg094_revision_date', $data ?? [], null);
        $this->setIfExists('byg111_storm_council_flooding_risk', $data ?? [], null);
        $this->setIfExists('byg112_storm_council_flooding_risk_date', $data ?? [], null);
        $this->setIfExists('byg113_building_damage_insurance', $data ?? [], null);
        $this->setIfExists('byg114_building_damage_insurance_date', $data ?? [], null);
        $this->setIfExists('byg119_discharge_permit', $data ?? [], null);
        $this->setIfExists('byg121_building_damage_insurance_covered', $data ?? [], null);
        $this->setIfExists('byg122_validation_date', $data ?? [], null);
        $this->setIfExists('byg123_wastewater_supply_membership', $data ?? [], null);
        $this->setIfExists('byg124_wastewater_drainage_order', $data ?? [], null);
        $this->setIfExists('byg125_wastewater_drainage_deadline', $data ?? [], null);
        $this->setIfExists('byg126_permission_exit', $data ?? [], null);
        $this->setIfExists('byg127_permission_exit_date', $data ?? [], null);
        $this->setIfExists('byg128_permission_alternative_disposal_diversion', $data ?? [], null);
        $this->setIfExists('byg129_permission_alternative_disposal_diversion_date', $data ?? [], null);
        $this->setIfExists('byg130_area_exterior_insulation', $data ?? [], null);
        $this->setIfExists('byg131_exemption_collective_heating_supply', $data ?? [], null);
        $this->setIfExists('byg132_exemption_collective_heating_supply_date', $data ?? [], null);
        $this->setIfExists('byg133_coordinate_source', $data ?? [], null);
        $this->setIfExists('byg134_coordinate_quality', $data ?? [], null);
        $this->setIfExists('byg135_coordinate_supplementary_information', $data ?? [], null);
        $this->setIfExists('byg136_placement_maritime_territory', $data ?? [], null);
        $this->setIfExists('byg137_banedanmark_building_number', $data ?? [], null);
        $this->setIfExists('byg140_easement_rental_property_date', $data ?? [], null);
        $this->setIfExists('byg150_material_floor', $data ?? [], null);
        $this->setIfExists('byg151_clearance_height', $data ?? [], null);
        $this->setIfExists('byg152_construction_open_closed', $data ?? [], null);
        $this->setIfExists('byg153_construction_conditions', $data ?? [], null);
        $this->setIfExists('byg301_relocation_type', $data ?? [], null);
        $this->setIfExists('byg302_municipality_newcomers', $data ?? [], null);
        $this->setIfExists('byg403_storm_council_supplementary_comments', $data ?? [], null);
        $this->setIfExists('byg404_coordinate', $data ?? [], null);
        $this->setIfExists('byg406_coordinate_system', $data ?? [], null);
        $this->setIfExists('byg500_note', $data ?? [], null);
        $this->setIfExists('slks', $data ?? [], null);
        $this->setIfExists('energy_label', $data ?? [], null);
        $this->setIfExists('access_address', $data ?? [], null);
        $this->setIfExists('floor', $data ?? [], null);
        $this->setIfExists('opg020_elevator', $data ?? [], null);
        $this->setIfExists('number_units', $data ?? [], null);
        $this->setIfExists('number_floors', $data ?? [], null);
        $this->setIfExists('number_staircases', $data ?? [], null);
        $this->setIfExists('plot_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['namespace'] === null) {
            $invalidProperties[] = "'namespace' can't be null";
        }
        if ($this->container['registration_from'] === null) {
            $invalidProperties[] = "'registration_from' can't be null";
        }
        if ($this->container['registration_actor'] === null) {
            $invalidProperties[] = "'registration_actor' can't be null";
        }
        if ($this->container['effect_from'] === null) {
            $invalidProperties[] = "'effect_from' can't be null";
        }
        if ($this->container['effect_actor'] === null) {
            $invalidProperties[] = "'effect_actor' can't be null";
        }
        if ($this->container['opg020_elevator'] === null) {
            $invalidProperties[] = "'opg020_elevator' can't be null";
        }
        if ($this->container['number_units'] === null) {
            $invalidProperties[] = "'number_units' can't be null";
        }
        if ($this->container['number_floors'] === null) {
            $invalidProperties[] = "'number_floors' can't be null";
        }
        if ($this->container['number_staircases'] === null) {
            $invalidProperties[] = "'number_staircases' can't be null";
        }
        if ($this->container['plot_id'] === null) {
            $invalidProperties[] = "'plot_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id Persistent unik n칮gle.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return mixed
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param mixed $namespace namespace
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        if (is_null($namespace)) {
            array_push($this->openAPINullablesSetToNull, 'namespace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('namespace', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets status
     *
     * @return mixed|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param mixed|null $status Angivelse af hvor et forvaltningsobjekt er i sin livscyklus.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets business_process
     *
     * @return mixed|null
     */
    public function getBusinessProcess()
    {
        return $this->container['business_process'];
    }

    /**
     * Sets business_process
     *
     * @param mixed|null $business_process Den manuelle eller IT-underst칮ttede proces hvori forretningsomr친det h친ndterer h칝ndelsen.
     *
     * @return self
     */
    public function setBusinessProcess($business_process)
    {
        if (is_null($business_process)) {
            array_push($this->openAPINullablesSetToNull, 'business_process');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_process', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_process'] = $business_process;

        return $this;
    }

    /**
     * Gets business_area
     *
     * @return mixed|null
     */
    public function getBusinessArea()
    {
        return $this->container['business_area'];
    }

    /**
     * Sets business_area
     *
     * @param mixed|null $business_area Den del af den offentlige forretning der h친ndterer h칝ndelsen og derved udvirker 칝ndringen i data.
     *
     * @return self
     */
    public function setBusinessArea($business_area)
    {
        if (is_null($business_area)) {
            array_push($this->openAPINullablesSetToNull, 'business_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_area'] = $business_area;

        return $this;
    }

    /**
     * Gets business_event
     *
     * @return mixed|null
     */
    public function getBusinessEvent()
    {
        return $this->container['business_event'];
    }

    /**
     * Sets business_event
     *
     * @param mixed|null $business_event Den begivenhed i virkeligheden som udl칮ste 칝ndringen i data.
     *
     * @return self
     */
    public function setBusinessEvent($business_event)
    {
        if (is_null($business_event)) {
            array_push($this->openAPINullablesSetToNull, 'business_event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_event'] = $business_event;

        return $this;
    }

    /**
     * Gets registration_from
     *
     * @return mixed
     */
    public function getRegistrationFrom()
    {
        return $this->container['registration_from'];
    }

    /**
     * Sets registration_from
     *
     * @param mixed $registration_from Tidspunktet hvor registreringen er foretaget.
     *
     * @return self
     */
    public function setRegistrationFrom($registration_from)
    {
        if (is_null($registration_from)) {
            array_push($this->openAPINullablesSetToNull, 'registration_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_from'] = $registration_from;

        return $this;
    }

    /**
     * Gets registration_to
     *
     * @return mixed|null
     */
    public function getRegistrationTo()
    {
        return $this->container['registration_to'];
    }

    /**
     * Sets registration_to
     *
     * @param mixed|null $registration_to Tidspunktet hvor en ny registrering er foretaget p친 objektet, og hvor denne version s친ledes ikke l칝ngere er den seneste.
     *
     * @return self
     */
    public function setRegistrationTo($registration_to)
    {
        if (is_null($registration_to)) {
            array_push($this->openAPINullablesSetToNull, 'registration_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_to'] = $registration_to;

        return $this;
    }

    /**
     * Gets registration_actor
     *
     * @return mixed
     */
    public function getRegistrationActor()
    {
        return $this->container['registration_actor'];
    }

    /**
     * Sets registration_actor
     *
     * @param mixed $registration_actor Den akt칮r der har foretaget registreringen.
     *
     * @return self
     */
    public function setRegistrationActor($registration_actor)
    {
        if (is_null($registration_actor)) {
            array_push($this->openAPINullablesSetToNull, 'registration_actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_actor'] = $registration_actor;

        return $this;
    }

    /**
     * Gets effect_from
     *
     * @return mixed
     */
    public function getEffectFrom()
    {
        return $this->container['effect_from'];
    }

    /**
     * Sets effect_from
     *
     * @param mixed $effect_from Tidspunktet hvorfra objektet har virkning.
     *
     * @return self
     */
    public function setEffectFrom($effect_from)
    {
        if (is_null($effect_from)) {
            array_push($this->openAPINullablesSetToNull, 'effect_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_from'] = $effect_from;

        return $this;
    }

    /**
     * Gets effect_to
     *
     * @return mixed|null
     */
    public function getEffectTo()
    {
        return $this->container['effect_to'];
    }

    /**
     * Sets effect_to
     *
     * @param mixed|null $effect_to Tidspunktet hvor objektets virkning oph칮rer.
     *
     * @return self
     */
    public function setEffectTo($effect_to)
    {
        if (is_null($effect_to)) {
            array_push($this->openAPINullablesSetToNull, 'effect_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_to'] = $effect_to;

        return $this;
    }

    /**
     * Gets effect_actor
     *
     * @return mixed
     */
    public function getEffectActor()
    {
        return $this->container['effect_actor'];
    }

    /**
     * Sets effect_actor
     *
     * @param mixed $effect_actor Den akt칮r der har afstedkommet objektets virkning.
     *
     * @return self
     */
    public function setEffectActor($effect_actor)
    {
        if (is_null($effect_actor)) {
            array_push($this->openAPINullablesSetToNull, 'effect_actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_actor'] = $effect_actor;

        return $this;
    }

    /**
     * Gets municipality_code
     *
     * @return mixed|null
     */
    public function getMunicipalityCode()
    {
        return $this->container['municipality_code'];
    }

    /**
     * Sets municipality_code
     *
     * @param mixed|null $municipality_code municipality_code
     *
     * @return self
     */
    public function setMunicipalityCode($municipality_code)
    {
        if (is_null($municipality_code)) {
            array_push($this->openAPINullablesSetToNull, 'municipality_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('municipality_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['municipality_code'] = $municipality_code;

        return $this;
    }

    /**
     * Gets byg007_building_number
     *
     * @return mixed|null
     */
    public function getByg007BuildingNumber()
    {
        return $this->container['byg007_building_number'];
    }

    /**
     * Sets byg007_building_number
     *
     * @param mixed|null $byg007_building_number Angiver bygningens nummer indenfor vurderingsejendommen
     *
     * @return self
     */
    public function setByg007BuildingNumber($byg007_building_number)
    {
        if (is_null($byg007_building_number)) {
            array_push($this->openAPINullablesSetToNull, 'byg007_building_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg007_building_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg007_building_number'] = $byg007_building_number;

        return $this;
    }

    /**
     * Gets byg021_building_usage
     *
     * @return mixed|null
     */
    public function getByg021BuildingUsage()
    {
        return $this->container['byg021_building_usage'];
    }

    /**
     * Sets byg021_building_usage
     *
     * @param mixed|null $byg021_building_usage Bygningens hovedanvendelse. Har en bygning flere anvendelser registreres den anvendelse som hovedparten af bygningen har.
     *
     * @return self
     */
    public function setByg021BuildingUsage($byg021_building_usage)
    {
        if (is_null($byg021_building_usage)) {
            array_push($this->openAPINullablesSetToNull, 'byg021_building_usage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg021_building_usage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg021_building_usage'] = $byg021_building_usage;

        return $this;
    }

    /**
     * Gets byg024_number_apartments_with_kitchen
     *
     * @return mixed|null
     */
    public function getByg024NumberApartmentsWithKitchen()
    {
        return $this->container['byg024_number_apartments_with_kitchen'];
    }

    /**
     * Sets byg024_number_apartments_with_kitchen
     *
     * @param mixed|null $byg024_number_apartments_with_kitchen Antal lejligheder (enheder) med eget k칮kken i bygningen.
     *
     * @return self
     */
    public function setByg024NumberApartmentsWithKitchen($byg024_number_apartments_with_kitchen)
    {
        if (is_null($byg024_number_apartments_with_kitchen)) {
            array_push($this->openAPINullablesSetToNull, 'byg024_number_apartments_with_kitchen');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg024_number_apartments_with_kitchen', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg024_number_apartments_with_kitchen'] = $byg024_number_apartments_with_kitchen;

        return $this;
    }

    /**
     * Gets byg025_number_apartments_without_kitchen
     *
     * @return mixed|null
     */
    public function getByg025NumberApartmentsWithoutKitchen()
    {
        return $this->container['byg025_number_apartments_without_kitchen'];
    }

    /**
     * Sets byg025_number_apartments_without_kitchen
     *
     * @param mixed|null $byg025_number_apartments_without_kitchen Antal lejligheder uden k칮kken i bygning.
     *
     * @return self
     */
    public function setByg025NumberApartmentsWithoutKitchen($byg025_number_apartments_without_kitchen)
    {
        if (is_null($byg025_number_apartments_without_kitchen)) {
            array_push($this->openAPINullablesSetToNull, 'byg025_number_apartments_without_kitchen');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg025_number_apartments_without_kitchen', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg025_number_apartments_without_kitchen'] = $byg025_number_apartments_without_kitchen;

        return $this;
    }

    /**
     * Gets byg026_construction_year
     *
     * @return mixed|null
     */
    public function getByg026ConstructionYear()
    {
        return $this->container['byg026_construction_year'];
    }

    /**
     * Sets byg026_construction_year
     *
     * @param mixed|null $byg026_construction_year Angiver bygningens opf칮rsels친r.
     *
     * @return self
     */
    public function setByg026ConstructionYear($byg026_construction_year)
    {
        if (is_null($byg026_construction_year)) {
            array_push($this->openAPINullablesSetToNull, 'byg026_construction_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg026_construction_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg026_construction_year'] = $byg026_construction_year;

        return $this;
    }

    /**
     * Gets byg027_rebuilding_year
     *
     * @return mixed|null
     */
    public function getByg027RebuildingYear()
    {
        return $this->container['byg027_rebuilding_year'];
    }

    /**
     * Sets byg027_rebuilding_year
     *
     * @param mixed|null $byg027_rebuilding_year Angiver bygningens seneste om- eller tilbygnings친r.
     *
     * @return self
     */
    public function setByg027RebuildingYear($byg027_rebuilding_year)
    {
        if (is_null($byg027_rebuilding_year)) {
            array_push($this->openAPINullablesSetToNull, 'byg027_rebuilding_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg027_rebuilding_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg027_rebuilding_year'] = $byg027_rebuilding_year;

        return $this;
    }

    /**
     * Gets byg029_temporary_building_date
     *
     * @return mixed|null
     */
    public function getByg029TemporaryBuildingDate()
    {
        return $this->container['byg029_temporary_building_date'];
    }

    /**
     * Sets byg029_temporary_building_date
     *
     * @param mixed|null $byg029_temporary_building_date Angiver udl칮bsdato for midlertidig opf칮rt bygning.
     *
     * @return self
     */
    public function setByg029TemporaryBuildingDate($byg029_temporary_building_date)
    {
        if (is_null($byg029_temporary_building_date)) {
            array_push($this->openAPINullablesSetToNull, 'byg029_temporary_building_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg029_temporary_building_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg029_temporary_building_date'] = $byg029_temporary_building_date;

        return $this;
    }

    /**
     * Gets byg030_water_supply
     *
     * @return mixed|null
     */
    public function getByg030WaterSupply()
    {
        return $this->container['byg030_water_supply'];
    }

    /**
     * Sets byg030_water_supply
     *
     * @param mixed|null $byg030_water_supply Angiver bygningens vandforsyning.
     *
     * @return self
     */
    public function setByg030WaterSupply($byg030_water_supply)
    {
        if (is_null($byg030_water_supply)) {
            array_push($this->openAPINullablesSetToNull, 'byg030_water_supply');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg030_water_supply', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg030_water_supply'] = $byg030_water_supply;

        return $this;
    }

    /**
     * Gets byg031_drainage
     *
     * @return mixed|null
     */
    public function getByg031Drainage()
    {
        return $this->container['byg031_drainage'];
    }

    /**
     * Sets byg031_drainage
     *
     * @param mixed|null $byg031_drainage Angiver bygningens afl칮bsforhold.
     *
     * @return self
     */
    public function setByg031Drainage($byg031_drainage)
    {
        if (is_null($byg031_drainage)) {
            array_push($this->openAPINullablesSetToNull, 'byg031_drainage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg031_drainage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg031_drainage'] = $byg031_drainage;

        return $this;
    }

    /**
     * Gets byg032_material_exterior_wall
     *
     * @return mixed|null
     */
    public function getByg032MaterialExteriorWall()
    {
        return $this->container['byg032_material_exterior_wall'];
    }

    /**
     * Sets byg032_material_exterior_wall
     *
     * @param mixed|null $byg032_material_exterior_wall Angiver bygningens yderv칝gsmateriale.
     *
     * @return self
     */
    public function setByg032MaterialExteriorWall($byg032_material_exterior_wall)
    {
        if (is_null($byg032_material_exterior_wall)) {
            array_push($this->openAPINullablesSetToNull, 'byg032_material_exterior_wall');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg032_material_exterior_wall', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg032_material_exterior_wall'] = $byg032_material_exterior_wall;

        return $this;
    }

    /**
     * Gets byg033_material_roofing
     *
     * @return mixed|null
     */
    public function getByg033MaterialRoofing()
    {
        return $this->container['byg033_material_roofing'];
    }

    /**
     * Sets byg033_material_roofing
     *
     * @param mixed|null $byg033_material_roofing Angiver bygningens tagd칝kningsmateriale.
     *
     * @return self
     */
    public function setByg033MaterialRoofing($byg033_material_roofing)
    {
        if (is_null($byg033_material_roofing)) {
            array_push($this->openAPINullablesSetToNull, 'byg033_material_roofing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg033_material_roofing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg033_material_roofing'] = $byg033_material_roofing;

        return $this;
    }

    /**
     * Gets byg034_material_supplementary_exterior_wall
     *
     * @return mixed|null
     */
    public function getByg034MaterialSupplementaryExteriorWall()
    {
        return $this->container['byg034_material_supplementary_exterior_wall'];
    }

    /**
     * Sets byg034_material_supplementary_exterior_wall
     *
     * @param mixed|null $byg034_material_supplementary_exterior_wall Angiver bygningens supplerende yderv칝gsmateriale.
     *
     * @return self
     */
    public function setByg034MaterialSupplementaryExteriorWall($byg034_material_supplementary_exterior_wall)
    {
        if (is_null($byg034_material_supplementary_exterior_wall)) {
            array_push($this->openAPINullablesSetToNull, 'byg034_material_supplementary_exterior_wall');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg034_material_supplementary_exterior_wall', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg034_material_supplementary_exterior_wall'] = $byg034_material_supplementary_exterior_wall;

        return $this;
    }

    /**
     * Gets byg035_material_supplementary_roofing
     *
     * @return mixed|null
     */
    public function getByg035MaterialSupplementaryRoofing()
    {
        return $this->container['byg035_material_supplementary_roofing'];
    }

    /**
     * Sets byg035_material_supplementary_roofing
     *
     * @param mixed|null $byg035_material_supplementary_roofing Angiver bygningens supplerende tagd칝kningsmateriale.
     *
     * @return self
     */
    public function setByg035MaterialSupplementaryRoofing($byg035_material_supplementary_roofing)
    {
        if (is_null($byg035_material_supplementary_roofing)) {
            array_push($this->openAPINullablesSetToNull, 'byg035_material_supplementary_roofing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg035_material_supplementary_roofing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg035_material_supplementary_roofing'] = $byg035_material_supplementary_roofing;

        return $this;
    }

    /**
     * Gets byg036_material_contains_asbestos
     *
     * @return mixed|null
     */
    public function getByg036MaterialContainsAsbestos()
    {
        return $this->container['byg036_material_contains_asbestos'];
    }

    /**
     * Sets byg036_material_contains_asbestos
     *
     * @param mixed|null $byg036_material_contains_asbestos Angivelse af om der er konstateret asbestholdigt materiale i yderv칝g eller tagd칝kning.
     *
     * @return self
     */
    public function setByg036MaterialContainsAsbestos($byg036_material_contains_asbestos)
    {
        if (is_null($byg036_material_contains_asbestos)) {
            array_push($this->openAPINullablesSetToNull, 'byg036_material_contains_asbestos');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg036_material_contains_asbestos', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg036_material_contains_asbestos'] = $byg036_material_contains_asbestos;

        return $this;
    }

    /**
     * Gets byg037_material_source
     *
     * @return mixed|null
     */
    public function getByg037MaterialSource()
    {
        return $this->container['byg037_material_source'];
    }

    /**
     * Sets byg037_material_source
     *
     * @param mixed|null $byg037_material_source Angiver kilde til bygningens materialer.
     *
     * @return self
     */
    public function setByg037MaterialSource($byg037_material_source)
    {
        if (is_null($byg037_material_source)) {
            array_push($this->openAPINullablesSetToNull, 'byg037_material_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg037_material_source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg037_material_source'] = $byg037_material_source;

        return $this;
    }

    /**
     * Gets byg038_area_building_total
     *
     * @return mixed|null
     */
    public function getByg038AreaBuildingTotal()
    {
        return $this->container['byg038_area_building_total'];
    }

    /**
     * Sets byg038_area_building_total
     *
     * @param mixed|null $byg038_area_building_total Angiver bygningens samlede areal.
     *
     * @return self
     */
    public function setByg038AreaBuildingTotal($byg038_area_building_total)
    {
        if (is_null($byg038_area_building_total)) {
            array_push($this->openAPINullablesSetToNull, 'byg038_area_building_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg038_area_building_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg038_area_building_total'] = $byg038_area_building_total;

        return $this;
    }

    /**
     * Gets byg039_area_building_residential
     *
     * @return mixed|null
     */
    public function getByg039AreaBuildingResidential()
    {
        return $this->container['byg039_area_building_residential'];
    }

    /**
     * Sets byg039_area_building_residential
     *
     * @param mixed|null $byg039_area_building_residential Angiver bygningens samlede boligareal.
     *
     * @return self
     */
    public function setByg039AreaBuildingResidential($byg039_area_building_residential)
    {
        if (is_null($byg039_area_building_residential)) {
            array_push($this->openAPINullablesSetToNull, 'byg039_area_building_residential');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg039_area_building_residential', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg039_area_building_residential'] = $byg039_area_building_residential;

        return $this;
    }

    /**
     * Gets byg040_area_building_commercial
     *
     * @return mixed|null
     */
    public function getByg040AreaBuildingCommercial()
    {
        return $this->container['byg040_area_building_commercial'];
    }

    /**
     * Sets byg040_area_building_commercial
     *
     * @param mixed|null $byg040_area_building_commercial Angiver bygningens samlede erhvervsareal.
     *
     * @return self
     */
    public function setByg040AreaBuildingCommercial($byg040_area_building_commercial)
    {
        if (is_null($byg040_area_building_commercial)) {
            array_push($this->openAPINullablesSetToNull, 'byg040_area_building_commercial');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg040_area_building_commercial', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg040_area_building_commercial'] = $byg040_area_building_commercial;

        return $this;
    }

    /**
     * Gets byg041_area_constructed
     *
     * @return mixed|null
     */
    public function getByg041AreaConstructed()
    {
        return $this->container['byg041_area_constructed'];
    }

    /**
     * Sets byg041_area_constructed
     *
     * @param mixed|null $byg041_area_constructed Angiver bygningens bebyggede areal.
     *
     * @return self
     */
    public function setByg041AreaConstructed($byg041_area_constructed)
    {
        if (is_null($byg041_area_constructed)) {
            array_push($this->openAPINullablesSetToNull, 'byg041_area_constructed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg041_area_constructed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg041_area_constructed'] = $byg041_area_constructed;

        return $this;
    }

    /**
     * Gets byg042_area_built_in_garage
     *
     * @return mixed|null
     */
    public function getByg042AreaBuiltInGarage()
    {
        return $this->container['byg042_area_built_in_garage'];
    }

    /**
     * Sets byg042_area_built_in_garage
     *
     * @param mixed|null $byg042_area_built_in_garage Angiver areal af indbygget garage.
     *
     * @return self
     */
    public function setByg042AreaBuiltInGarage($byg042_area_built_in_garage)
    {
        if (is_null($byg042_area_built_in_garage)) {
            array_push($this->openAPINullablesSetToNull, 'byg042_area_built_in_garage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg042_area_built_in_garage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg042_area_built_in_garage'] = $byg042_area_built_in_garage;

        return $this;
    }

    /**
     * Gets byg043_area_built_in_carport
     *
     * @return mixed|null
     */
    public function getByg043AreaBuiltInCarport()
    {
        return $this->container['byg043_area_built_in_carport'];
    }

    /**
     * Sets byg043_area_built_in_carport
     *
     * @param mixed|null $byg043_area_built_in_carport Angiver areal af indbygget carport.
     *
     * @return self
     */
    public function setByg043AreaBuiltInCarport($byg043_area_built_in_carport)
    {
        if (is_null($byg043_area_built_in_carport)) {
            array_push($this->openAPINullablesSetToNull, 'byg043_area_built_in_carport');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg043_area_built_in_carport', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg043_area_built_in_carport'] = $byg043_area_built_in_carport;

        return $this;
    }

    /**
     * Gets byg044_area_built_in_outhouse
     *
     * @return mixed|null
     */
    public function getByg044AreaBuiltInOuthouse()
    {
        return $this->container['byg044_area_built_in_outhouse'];
    }

    /**
     * Sets byg044_area_built_in_outhouse
     *
     * @param mixed|null $byg044_area_built_in_outhouse Angiver areal af indbygget udhus.
     *
     * @return self
     */
    public function setByg044AreaBuiltInOuthouse($byg044_area_built_in_outhouse)
    {
        if (is_null($byg044_area_built_in_outhouse)) {
            array_push($this->openAPINullablesSetToNull, 'byg044_area_built_in_outhouse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg044_area_built_in_outhouse', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg044_area_built_in_outhouse'] = $byg044_area_built_in_outhouse;

        return $this;
    }

    /**
     * Gets byg045_area_built_in_patio
     *
     * @return mixed|null
     */
    public function getByg045AreaBuiltInPatio()
    {
        return $this->container['byg045_area_built_in_patio'];
    }

    /**
     * Sets byg045_area_built_in_patio
     *
     * @param mixed|null $byg045_area_built_in_patio Angiver areal af indbygget udstue.
     *
     * @return self
     */
    public function setByg045AreaBuiltInPatio($byg045_area_built_in_patio)
    {
        if (is_null($byg045_area_built_in_patio)) {
            array_push($this->openAPINullablesSetToNull, 'byg045_area_built_in_patio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg045_area_built_in_patio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg045_area_built_in_patio'] = $byg045_area_built_in_patio;

        return $this;
    }

    /**
     * Gets byg046_area_closed_building_areas_total
     *
     * @return mixed|null
     */
    public function getByg046AreaClosedBuildingAreasTotal()
    {
        return $this->container['byg046_area_closed_building_areas_total'];
    }

    /**
     * Sets byg046_area_closed_building_areas_total
     *
     * @param mixed|null $byg046_area_closed_building_areas_total Angiver areal af lukkede overd칝kninger p친 hele bygningen.
     *
     * @return self
     */
    public function setByg046AreaClosedBuildingAreasTotal($byg046_area_closed_building_areas_total)
    {
        if (is_null($byg046_area_closed_building_areas_total)) {
            array_push($this->openAPINullablesSetToNull, 'byg046_area_closed_building_areas_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg046_area_closed_building_areas_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg046_area_closed_building_areas_total'] = $byg046_area_closed_building_areas_total;

        return $this;
    }

    /**
     * Gets byg047_area_waste_rooms_terrain_level
     *
     * @return mixed|null
     */
    public function getByg047AreaWasteRoomsTerrainLevel()
    {
        return $this->container['byg047_area_waste_rooms_terrain_level'];
    }

    /**
     * Sets byg047_area_waste_rooms_terrain_level
     *
     * @param mixed|null $byg047_area_waste_rooms_terrain_level Angiver areal af samtlige affaldsrum i terr칝nniveau.
     *
     * @return self
     */
    public function setByg047AreaWasteRoomsTerrainLevel($byg047_area_waste_rooms_terrain_level)
    {
        if (is_null($byg047_area_waste_rooms_terrain_level)) {
            array_push($this->openAPINullablesSetToNull, 'byg047_area_waste_rooms_terrain_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg047_area_waste_rooms_terrain_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg047_area_waste_rooms_terrain_level'] = $byg047_area_waste_rooms_terrain_level;

        return $this;
    }

    /**
     * Gets byg048_area_other
     *
     * @return mixed|null
     */
    public function getByg048AreaOther()
    {
        return $this->container['byg048_area_other'];
    }

    /**
     * Sets byg048_area_other
     *
     * @param mixed|null $byg048_area_other Angiver andet areal i bygning.
     *
     * @return self
     */
    public function setByg048AreaOther($byg048_area_other)
    {
        if (is_null($byg048_area_other)) {
            array_push($this->openAPINullablesSetToNull, 'byg048_area_other');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg048_area_other', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg048_area_other'] = $byg048_area_other;

        return $this;
    }

    /**
     * Gets byg049_area_covered
     *
     * @return mixed|null
     */
    public function getByg049AreaCovered()
    {
        return $this->container['byg049_area_covered'];
    }

    /**
     * Sets byg049_area_covered
     *
     * @param mixed|null $byg049_area_covered Angiver arealet af overd칝kket areal p친 bygning.
     *
     * @return self
     */
    public function setByg049AreaCovered($byg049_area_covered)
    {
        if (is_null($byg049_area_covered)) {
            array_push($this->openAPINullablesSetToNull, 'byg049_area_covered');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg049_area_covered', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg049_area_covered'] = $byg049_area_covered;

        return $this;
    }

    /**
     * Gets byg050_area_open_roofs_total
     *
     * @return mixed|null
     */
    public function getByg050AreaOpenRoofsTotal()
    {
        return $this->container['byg050_area_open_roofs_total'];
    }

    /**
     * Sets byg050_area_open_roofs_total
     *
     * @param mixed|null $byg050_area_open_roofs_total Angiver det samlede areal af 친bne overd칝kninger p친 bygningen.
     *
     * @return self
     */
    public function setByg050AreaOpenRoofsTotal($byg050_area_open_roofs_total)
    {
        if (is_null($byg050_area_open_roofs_total)) {
            array_push($this->openAPINullablesSetToNull, 'byg050_area_open_roofs_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg050_area_open_roofs_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg050_area_open_roofs_total'] = $byg050_area_open_roofs_total;

        return $this;
    }

    /**
     * Gets byg051_area_access
     *
     * @return mixed|null
     */
    public function getByg051AreaAccess()
    {
        return $this->container['byg051_area_access'];
    }

    /**
     * Sets byg051_area_access
     *
     * @param mixed|null $byg051_area_access Angiver det samlede adgangsareal p친 bygning.
     *
     * @return self
     */
    public function setByg051AreaAccess($byg051_area_access)
    {
        if (is_null($byg051_area_access)) {
            array_push($this->openAPINullablesSetToNull, 'byg051_area_access');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg051_area_access', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg051_area_access'] = $byg051_area_access;

        return $this;
    }

    /**
     * Gets byg052_area_carport_calculation_principle
     *
     * @return mixed|null
     */
    public function getByg052AreaCarportCalculationPrinciple()
    {
        return $this->container['byg052_area_carport_calculation_principle'];
    }

    /**
     * Sets byg052_area_carport_calculation_principle
     *
     * @param mixed|null $byg052_area_carport_calculation_principle Angiver beregningsprincip for areal af carport.
     *
     * @return self
     */
    public function setByg052AreaCarportCalculationPrinciple($byg052_area_carport_calculation_principle)
    {
        if (is_null($byg052_area_carport_calculation_principle)) {
            array_push($this->openAPINullablesSetToNull, 'byg052_area_carport_calculation_principle');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg052_area_carport_calculation_principle', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg052_area_carport_calculation_principle'] = $byg052_area_carport_calculation_principle;

        return $this;
    }

    /**
     * Gets byg053_area_building_source
     *
     * @return mixed|null
     */
    public function getByg053AreaBuildingSource()
    {
        return $this->container['byg053_area_building_source'];
    }

    /**
     * Sets byg053_area_building_source
     *
     * @param mixed|null $byg053_area_building_source Angiver kilde til oplysninger om bygningens arealer.
     *
     * @return self
     */
    public function setByg053AreaBuildingSource($byg053_area_building_source)
    {
        if (is_null($byg053_area_building_source)) {
            array_push($this->openAPINullablesSetToNull, 'byg053_area_building_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg053_area_building_source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg053_area_building_source'] = $byg053_area_building_source;

        return $this;
    }

    /**
     * Gets byg054_number_floors
     *
     * @return mixed|null
     */
    public function getByg054NumberFloors()
    {
        return $this->container['byg054_number_floors'];
    }

    /**
     * Sets byg054_number_floors
     *
     * @param mixed|null $byg054_number_floors Angiver antal etager i bygningen.
     *
     * @return self
     */
    public function setByg054NumberFloors($byg054_number_floors)
    {
        if (is_null($byg054_number_floors)) {
            array_push($this->openAPINullablesSetToNull, 'byg054_number_floors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg054_number_floors', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg054_number_floors'] = $byg054_number_floors;

        return $this;
    }

    /**
     * Gets byg055_deviating_floors
     *
     * @return mixed|null
     */
    public function getByg055DeviatingFloors()
    {
        return $this->container['byg055_deviating_floors'];
    }

    /**
     * Sets byg055_deviating_floors
     *
     * @param mixed|null $byg055_deviating_floors Angiver om bygningen indeholder afvigende etager.
     *
     * @return self
     */
    public function setByg055DeviatingFloors($byg055_deviating_floors)
    {
        if (is_null($byg055_deviating_floors)) {
            array_push($this->openAPINullablesSetToNull, 'byg055_deviating_floors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg055_deviating_floors', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg055_deviating_floors'] = $byg055_deviating_floors;

        return $this;
    }

    /**
     * Gets byg056_heating_installation
     *
     * @return mixed|null
     */
    public function getByg056HeatingInstallation()
    {
        return $this->container['byg056_heating_installation'];
    }

    /**
     * Sets byg056_heating_installation
     *
     * @param mixed|null $byg056_heating_installation Angiver bygningens prim칝re varmeinstallation.
     *
     * @return self
     */
    public function setByg056HeatingInstallation($byg056_heating_installation)
    {
        if (is_null($byg056_heating_installation)) {
            array_push($this->openAPINullablesSetToNull, 'byg056_heating_installation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg056_heating_installation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg056_heating_installation'] = $byg056_heating_installation;

        return $this;
    }

    /**
     * Gets byg057_heating_medium
     *
     * @return mixed|null
     */
    public function getByg057HeatingMedium()
    {
        return $this->container['byg057_heating_medium'];
    }

    /**
     * Sets byg057_heating_medium
     *
     * @param mixed|null $byg057_heating_medium Angiver bygningens prim칝re opvarmingsmiddel.
     *
     * @return self
     */
    public function setByg057HeatingMedium($byg057_heating_medium)
    {
        if (is_null($byg057_heating_medium)) {
            array_push($this->openAPINullablesSetToNull, 'byg057_heating_medium');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg057_heating_medium', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg057_heating_medium'] = $byg057_heating_medium;

        return $this;
    }

    /**
     * Gets byg058_heating_supplementary
     *
     * @return mixed|null
     */
    public function getByg058HeatingSupplementary()
    {
        return $this->container['byg058_heating_supplementary'];
    }

    /**
     * Sets byg058_heating_supplementary
     *
     * @param mixed|null $byg058_heating_supplementary Angiver supplerende varmeinstallation i bygningen.
     *
     * @return self
     */
    public function setByg058HeatingSupplementary($byg058_heating_supplementary)
    {
        if (is_null($byg058_heating_supplementary)) {
            array_push($this->openAPINullablesSetToNull, 'byg058_heating_supplementary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg058_heating_supplementary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg058_heating_supplementary'] = $byg058_heating_supplementary;

        return $this;
    }

    /**
     * Gets byg069_number_seats_emergency_room
     *
     * @return mixed|null
     */
    public function getByg069NumberSeatsEmergencyRoom()
    {
        return $this->container['byg069_number_seats_emergency_room'];
    }

    /**
     * Sets byg069_number_seats_emergency_room
     *
     * @param mixed|null $byg069_number_seats_emergency_room Angiver antallet at sikringsrumpladser i bygningen.
     *
     * @return self
     */
    public function setByg069NumberSeatsEmergencyRoom($byg069_number_seats_emergency_room)
    {
        if (is_null($byg069_number_seats_emergency_room)) {
            array_push($this->openAPINullablesSetToNull, 'byg069_number_seats_emergency_room');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg069_number_seats_emergency_room', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg069_number_seats_emergency_room'] = $byg069_number_seats_emergency_room;

        return $this;
    }

    /**
     * Gets byg070_preservation
     *
     * @return mixed|null
     */
    public function getByg070Preservation()
    {
        return $this->container['byg070_preservation'];
    }

    /**
     * Sets byg070_preservation
     *
     * @param mixed|null $byg070_preservation Angiver om bygningen er fredet.
     *
     * @return self
     */
    public function setByg070Preservation($byg070_preservation)
    {
        if (is_null($byg070_preservation)) {
            array_push($this->openAPINullablesSetToNull, 'byg070_preservation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg070_preservation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg070_preservation'] = $byg070_preservation;

        return $this;
    }

    /**
     * Gets byg071_preservation_reference
     *
     * @return mixed|null
     */
    public function getByg071PreservationReference()
    {
        return $this->container['byg071_preservation_reference'];
    }

    /**
     * Sets byg071_preservation_reference
     *
     * @param mixed|null $byg071_preservation_reference Linker til Kulturstyrelsens registrering i FBB (Fredede og Bevaringsv칝rdige Bygninger).
     *
     * @return self
     */
    public function setByg071PreservationReference($byg071_preservation_reference)
    {
        if (is_null($byg071_preservation_reference)) {
            array_push($this->openAPINullablesSetToNull, 'byg071_preservation_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg071_preservation_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg071_preservation_reference'] = $byg071_preservation_reference;

        return $this;
    }

    /**
     * Gets byg094_revision_date
     *
     * @return mixed|null
     */
    public function getByg094RevisionDate()
    {
        return $this->container['byg094_revision_date'];
    }

    /**
     * Sets byg094_revision_date
     *
     * @param mixed|null $byg094_revision_date Angiver revisionsdato for seneste 칝ndring af geometrioplysninger.
     *
     * @return self
     */
    public function setByg094RevisionDate($byg094_revision_date)
    {
        if (is_null($byg094_revision_date)) {
            array_push($this->openAPINullablesSetToNull, 'byg094_revision_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg094_revision_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg094_revision_date'] = $byg094_revision_date;

        return $this;
    }

    /**
     * Gets byg111_storm_council_flooding_risk
     *
     * @return mixed|null
     */
    public function getByg111StormCouncilFloodingRisk()
    {
        return $this->container['byg111_storm_council_flooding_risk'];
    }

    /**
     * Sets byg111_storm_council_flooding_risk
     *
     * @param mixed|null $byg111_storm_council_flooding_risk Angiver selvrisiko ved stormskade.
     *
     * @return self
     */
    public function setByg111StormCouncilFloodingRisk($byg111_storm_council_flooding_risk)
    {
        if (is_null($byg111_storm_council_flooding_risk)) {
            array_push($this->openAPINullablesSetToNull, 'byg111_storm_council_flooding_risk');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg111_storm_council_flooding_risk', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg111_storm_council_flooding_risk'] = $byg111_storm_council_flooding_risk;

        return $this;
    }

    /**
     * Gets byg112_storm_council_flooding_risk_date
     *
     * @return mixed|null
     */
    public function getByg112StormCouncilFloodingRiskDate()
    {
        return $this->container['byg112_storm_council_flooding_risk_date'];
    }

    /**
     * Sets byg112_storm_council_flooding_risk_date
     *
     * @param mixed|null $byg112_storm_council_flooding_risk_date Angiver ajourf칮ringsdato for registrering fra Stormr친det.
     *
     * @return self
     */
    public function setByg112StormCouncilFloodingRiskDate($byg112_storm_council_flooding_risk_date)
    {
        if (is_null($byg112_storm_council_flooding_risk_date)) {
            array_push($this->openAPINullablesSetToNull, 'byg112_storm_council_flooding_risk_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg112_storm_council_flooding_risk_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg112_storm_council_flooding_risk_date'] = $byg112_storm_council_flooding_risk_date;

        return $this;
    }

    /**
     * Gets byg113_building_damage_insurance
     *
     * @return mixed|null
     */
    public function getByg113BuildingDamageInsurance()
    {
        return $this->container['byg113_building_damage_insurance'];
    }

    /**
     * Sets byg113_building_damage_insurance
     *
     * @param mixed|null $byg113_building_damage_insurance Angiver navnet p친 byggeskadeforsikringsselskab
     *
     * @return self
     */
    public function setByg113BuildingDamageInsurance($byg113_building_damage_insurance)
    {
        if (is_null($byg113_building_damage_insurance)) {
            array_push($this->openAPINullablesSetToNull, 'byg113_building_damage_insurance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg113_building_damage_insurance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg113_building_damage_insurance'] = $byg113_building_damage_insurance;

        return $this;
    }

    /**
     * Gets byg114_building_damage_insurance_date
     *
     * @return mixed|null
     */
    public function getByg114BuildingDamageInsuranceDate()
    {
        return $this->container['byg114_building_damage_insurance_date'];
    }

    /**
     * Sets byg114_building_damage_insurance_date
     *
     * @param mixed|null $byg114_building_damage_insurance_date Angiver ikr칝fttr칝delsesdato for byggeskadeforsikring.
     *
     * @return self
     */
    public function setByg114BuildingDamageInsuranceDate($byg114_building_damage_insurance_date)
    {
        if (is_null($byg114_building_damage_insurance_date)) {
            array_push($this->openAPINullablesSetToNull, 'byg114_building_damage_insurance_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg114_building_damage_insurance_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg114_building_damage_insurance_date'] = $byg114_building_damage_insurance_date;

        return $this;
    }

    /**
     * Gets byg119_discharge_permit
     *
     * @return mixed|null
     */
    public function getByg119DischargePermit()
    {
        return $this->container['byg119_discharge_permit'];
    }

    /**
     * Sets byg119_discharge_permit
     *
     * @param mixed|null $byg119_discharge_permit Angiver status for udledningstilladelse p친 bygningen.
     *
     * @return self
     */
    public function setByg119DischargePermit($byg119_discharge_permit)
    {
        if (is_null($byg119_discharge_permit)) {
            array_push($this->openAPINullablesSetToNull, 'byg119_discharge_permit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg119_discharge_permit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg119_discharge_permit'] = $byg119_discharge_permit;

        return $this;
    }

    /**
     * Gets byg121_building_damage_insurance_covered
     *
     * @return mixed|null
     */
    public function getByg121BuildingDamageInsuranceCovered()
    {
        return $this->container['byg121_building_damage_insurance_covered'];
    }

    /**
     * Sets byg121_building_damage_insurance_covered
     *
     * @param mixed|null $byg121_building_damage_insurance_covered Angiver om bygningen er omfattet af byggeskadeforsikring.
     *
     * @return self
     */
    public function setByg121BuildingDamageInsuranceCovered($byg121_building_damage_insurance_covered)
    {
        if (is_null($byg121_building_damage_insurance_covered)) {
            array_push($this->openAPINullablesSetToNull, 'byg121_building_damage_insurance_covered');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg121_building_damage_insurance_covered', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg121_building_damage_insurance_covered'] = $byg121_building_damage_insurance_covered;

        return $this;
    }

    /**
     * Gets byg122_validation_date
     *
     * @return mixed|null
     */
    public function getByg122ValidationDate()
    {
        return $this->container['byg122_validation_date'];
    }

    /**
     * Sets byg122_validation_date
     *
     * @param mixed|null $byg122_validation_date Angiver gyldighedsdato i forbindelse med vurdering.
     *
     * @return self
     */
    public function setByg122ValidationDate($byg122_validation_date)
    {
        if (is_null($byg122_validation_date)) {
            array_push($this->openAPINullablesSetToNull, 'byg122_validation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg122_validation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg122_validation_date'] = $byg122_validation_date;

        return $this;
    }

    /**
     * Gets byg123_wastewater_supply_membership
     *
     * @return mixed|null
     */
    public function getByg123WastewaterSupplyMembership()
    {
        return $this->container['byg123_wastewater_supply_membership'];
    }

    /**
     * Sets byg123_wastewater_supply_membership
     *
     * @param mixed|null $byg123_wastewater_supply_membership Angiver om der for bygningen er indg친et kontraktligt medlemskab af spildevandsforsyningsselskab.
     *
     * @return self
     */
    public function setByg123WastewaterSupplyMembership($byg123_wastewater_supply_membership)
    {
        if (is_null($byg123_wastewater_supply_membership)) {
            array_push($this->openAPINullablesSetToNull, 'byg123_wastewater_supply_membership');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg123_wastewater_supply_membership', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg123_wastewater_supply_membership'] = $byg123_wastewater_supply_membership;

        return $this;
    }

    /**
     * Gets byg124_wastewater_drainage_order
     *
     * @return mixed|null
     */
    public function getByg124WastewaterDrainageOrder()
    {
        return $this->container['byg124_wastewater_drainage_order'];
    }

    /**
     * Sets byg124_wastewater_drainage_order
     *
     * @param mixed|null $byg124_wastewater_drainage_order Angiver om der er givet p친bud vedr. spildevandsafledning p친 bygningen.
     *
     * @return self
     */
    public function setByg124WastewaterDrainageOrder($byg124_wastewater_drainage_order)
    {
        if (is_null($byg124_wastewater_drainage_order)) {
            array_push($this->openAPINullablesSetToNull, 'byg124_wastewater_drainage_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg124_wastewater_drainage_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg124_wastewater_drainage_order'] = $byg124_wastewater_drainage_order;

        return $this;
    }

    /**
     * Gets byg125_wastewater_drainage_deadline
     *
     * @return mixed|null
     */
    public function getByg125WastewaterDrainageDeadline()
    {
        return $this->container['byg125_wastewater_drainage_deadline'];
    }

    /**
     * Sets byg125_wastewater_drainage_deadline
     *
     * @param mixed|null $byg125_wastewater_drainage_deadline Angiver dato for frist for evt. p친bud vedr. spildevandsafledning p친 bygningen.
     *
     * @return self
     */
    public function setByg125WastewaterDrainageDeadline($byg125_wastewater_drainage_deadline)
    {
        if (is_null($byg125_wastewater_drainage_deadline)) {
            array_push($this->openAPINullablesSetToNull, 'byg125_wastewater_drainage_deadline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg125_wastewater_drainage_deadline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg125_wastewater_drainage_deadline'] = $byg125_wastewater_drainage_deadline;

        return $this;
    }

    /**
     * Gets byg126_permission_exit
     *
     * @return mixed|null
     */
    public function getByg126PermissionExit()
    {
        return $this->container['byg126_permission_exit'];
    }

    /**
     * Sets byg126_permission_exit
     *
     * @param mixed|null $byg126_permission_exit Angiver tilladelse til udtr칝den af det offentlige kloakf칝llesskab.
     *
     * @return self
     */
    public function setByg126PermissionExit($byg126_permission_exit)
    {
        if (is_null($byg126_permission_exit)) {
            array_push($this->openAPINullablesSetToNull, 'byg126_permission_exit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg126_permission_exit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg126_permission_exit'] = $byg126_permission_exit;

        return $this;
    }

    /**
     * Gets byg127_permission_exit_date
     *
     * @return mixed|null
     */
    public function getByg127PermissionExitDate()
    {
        return $this->container['byg127_permission_exit_date'];
    }

    /**
     * Sets byg127_permission_exit_date
     *
     * @param mixed|null $byg127_permission_exit_date Angiver dato for tilladelse til udtr칝den af det offentlige kloakf칝llesskab.
     *
     * @return self
     */
    public function setByg127PermissionExitDate($byg127_permission_exit_date)
    {
        if (is_null($byg127_permission_exit_date)) {
            array_push($this->openAPINullablesSetToNull, 'byg127_permission_exit_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg127_permission_exit_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg127_permission_exit_date'] = $byg127_permission_exit_date;

        return $this;
    }

    /**
     * Gets byg128_permission_alternative_disposal_diversion
     *
     * @return mixed|null
     */
    public function getByg128PermissionAlternativeDisposalDiversion()
    {
        return $this->container['byg128_permission_alternative_disposal_diversion'];
    }

    /**
     * Sets byg128_permission_alternative_disposal_diversion
     *
     * @param mixed|null $byg128_permission_alternative_disposal_diversion Angiver tilladelse til alternativ bortskaffelse eller afledning af spildevand.
     *
     * @return self
     */
    public function setByg128PermissionAlternativeDisposalDiversion($byg128_permission_alternative_disposal_diversion)
    {
        if (is_null($byg128_permission_alternative_disposal_diversion)) {
            array_push($this->openAPINullablesSetToNull, 'byg128_permission_alternative_disposal_diversion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg128_permission_alternative_disposal_diversion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg128_permission_alternative_disposal_diversion'] = $byg128_permission_alternative_disposal_diversion;

        return $this;
    }

    /**
     * Gets byg129_permission_alternative_disposal_diversion_date
     *
     * @return mixed|null
     */
    public function getByg129PermissionAlternativeDisposalDiversionDate()
    {
        return $this->container['byg129_permission_alternative_disposal_diversion_date'];
    }

    /**
     * Sets byg129_permission_alternative_disposal_diversion_date
     *
     * @param mixed|null $byg129_permission_alternative_disposal_diversion_date Dato for tilladelse til alternativ bortskaffelse eller afledning af spildevand.
     *
     * @return self
     */
    public function setByg129PermissionAlternativeDisposalDiversionDate($byg129_permission_alternative_disposal_diversion_date)
    {
        if (is_null($byg129_permission_alternative_disposal_diversion_date)) {
            array_push($this->openAPINullablesSetToNull, 'byg129_permission_alternative_disposal_diversion_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg129_permission_alternative_disposal_diversion_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg129_permission_alternative_disposal_diversion_date'] = $byg129_permission_alternative_disposal_diversion_date;

        return $this;
    }

    /**
     * Gets byg130_area_exterior_insulation
     *
     * @return mixed|null
     */
    public function getByg130AreaExteriorInsulation()
    {
        return $this->container['byg130_area_exterior_insulation'];
    }

    /**
     * Sets byg130_area_exterior_insulation
     *
     * @param mixed|null $byg130_area_exterior_insulation Angiver areal af udvendig efterisolering.
     *
     * @return self
     */
    public function setByg130AreaExteriorInsulation($byg130_area_exterior_insulation)
    {
        if (is_null($byg130_area_exterior_insulation)) {
            array_push($this->openAPINullablesSetToNull, 'byg130_area_exterior_insulation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg130_area_exterior_insulation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg130_area_exterior_insulation'] = $byg130_area_exterior_insulation;

        return $this;
    }

    /**
     * Gets byg131_exemption_collective_heating_supply
     *
     * @return mixed|null
     */
    public function getByg131ExemptionCollectiveHeatingSupply()
    {
        return $this->container['byg131_exemption_collective_heating_supply'];
    }

    /**
     * Sets byg131_exemption_collective_heating_supply
     *
     * @param mixed|null $byg131_exemption_collective_heating_supply Angiver om der er givet dispensation eller fritagelse ift kollektiv varmeforsyning.
     *
     * @return self
     */
    public function setByg131ExemptionCollectiveHeatingSupply($byg131_exemption_collective_heating_supply)
    {
        if (is_null($byg131_exemption_collective_heating_supply)) {
            array_push($this->openAPINullablesSetToNull, 'byg131_exemption_collective_heating_supply');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg131_exemption_collective_heating_supply', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg131_exemption_collective_heating_supply'] = $byg131_exemption_collective_heating_supply;

        return $this;
    }

    /**
     * Gets byg132_exemption_collective_heating_supply_date
     *
     * @return mixed|null
     */
    public function getByg132ExemptionCollectiveHeatingSupplyDate()
    {
        return $this->container['byg132_exemption_collective_heating_supply_date'];
    }

    /**
     * Sets byg132_exemption_collective_heating_supply_date
     *
     * @param mixed|null $byg132_exemption_collective_heating_supply_date Angiver dato for dispensation eller fritagelse ift kollektiv varmeforsyning.
     *
     * @return self
     */
    public function setByg132ExemptionCollectiveHeatingSupplyDate($byg132_exemption_collective_heating_supply_date)
    {
        if (is_null($byg132_exemption_collective_heating_supply_date)) {
            array_push($this->openAPINullablesSetToNull, 'byg132_exemption_collective_heating_supply_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg132_exemption_collective_heating_supply_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg132_exemption_collective_heating_supply_date'] = $byg132_exemption_collective_heating_supply_date;

        return $this;
    }

    /**
     * Gets byg133_coordinate_source
     *
     * @return mixed|null
     */
    public function getByg133CoordinateSource()
    {
        return $this->container['byg133_coordinate_source'];
    }

    /**
     * Sets byg133_coordinate_source
     *
     * @param mixed|null $byg133_coordinate_source Kodeliste der angiver kilden til geometrioplysninger.
     *
     * @return self
     */
    public function setByg133CoordinateSource($byg133_coordinate_source)
    {
        if (is_null($byg133_coordinate_source)) {
            array_push($this->openAPINullablesSetToNull, 'byg133_coordinate_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg133_coordinate_source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg133_coordinate_source'] = $byg133_coordinate_source;

        return $this;
    }

    /**
     * Gets byg134_coordinate_quality
     *
     * @return mixed|null
     */
    public function getByg134CoordinateQuality()
    {
        return $this->container['byg134_coordinate_quality'];
    }

    /**
     * Sets byg134_coordinate_quality
     *
     * @param mixed|null $byg134_coordinate_quality Kodeliste der angiver kvaliteten af geometrioplysninger.
     *
     * @return self
     */
    public function setByg134CoordinateQuality($byg134_coordinate_quality)
    {
        if (is_null($byg134_coordinate_quality)) {
            array_push($this->openAPINullablesSetToNull, 'byg134_coordinate_quality');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg134_coordinate_quality', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg134_coordinate_quality'] = $byg134_coordinate_quality;

        return $this;
    }

    /**
     * Gets byg135_coordinate_supplementary_information
     *
     * @return mixed|null
     */
    public function getByg135CoordinateSupplementaryInformation()
    {
        return $this->container['byg135_coordinate_supplementary_information'];
    }

    /**
     * Sets byg135_coordinate_supplementary_information
     *
     * @param mixed|null $byg135_coordinate_supplementary_information Angiver om det fysiske objekt koordinats칝ttet referer til ligger under eller over jorden.
     *
     * @return self
     */
    public function setByg135CoordinateSupplementaryInformation($byg135_coordinate_supplementary_information)
    {
        if (is_null($byg135_coordinate_supplementary_information)) {
            array_push($this->openAPINullablesSetToNull, 'byg135_coordinate_supplementary_information');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg135_coordinate_supplementary_information', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg135_coordinate_supplementary_information'] = $byg135_coordinate_supplementary_information;

        return $this;
    }

    /**
     * Gets byg136_placement_maritime_territory
     *
     * @return mixed|null
     */
    public function getByg136PlacementMaritimeTerritory()
    {
        return $this->container['byg136_placement_maritime_territory'];
    }

    /**
     * Sets byg136_placement_maritime_territory
     *
     * @param mixed|null $byg136_placement_maritime_territory Angiver om objekt ligger p친 s칮territorie.
     *
     * @return self
     */
    public function setByg136PlacementMaritimeTerritory($byg136_placement_maritime_territory)
    {
        if (is_null($byg136_placement_maritime_territory)) {
            array_push($this->openAPINullablesSetToNull, 'byg136_placement_maritime_territory');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg136_placement_maritime_territory', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg136_placement_maritime_territory'] = $byg136_placement_maritime_territory;

        return $this;
    }

    /**
     * Gets byg137_banedanmark_building_number
     *
     * @return mixed|null
     */
    public function getByg137BanedanmarkBuildingNumber()
    {
        return $this->container['byg137_banedanmark_building_number'];
    }

    /**
     * Sets byg137_banedanmark_building_number
     *
     * @param mixed|null $byg137_banedanmark_building_number Angiver Banedanmarks BGV-nummer og bygv칝rksnummer
     *
     * @return self
     */
    public function setByg137BanedanmarkBuildingNumber($byg137_banedanmark_building_number)
    {
        if (is_null($byg137_banedanmark_building_number)) {
            array_push($this->openAPINullablesSetToNull, 'byg137_banedanmark_building_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg137_banedanmark_building_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg137_banedanmark_building_number'] = $byg137_banedanmark_building_number;

        return $this;
    }

    /**
     * Gets byg140_easement_rental_property_date
     *
     * @return mixed|null
     */
    public function getByg140EasementRentalPropertyDate()
    {
        return $this->container['byg140_easement_rental_property_date'];
    }

    /**
     * Sets byg140_easement_rental_property_date
     *
     * @param mixed|null $byg140_easement_rental_property_date Dato for eventuel tinglyst servitut der undtager en udlejningsejendom for byggeskadeforsikring
     *
     * @return self
     */
    public function setByg140EasementRentalPropertyDate($byg140_easement_rental_property_date)
    {
        if (is_null($byg140_easement_rental_property_date)) {
            array_push($this->openAPINullablesSetToNull, 'byg140_easement_rental_property_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg140_easement_rental_property_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg140_easement_rental_property_date'] = $byg140_easement_rental_property_date;

        return $this;
    }

    /**
     * Gets byg150_material_floor
     *
     * @return mixed|null
     */
    public function getByg150MaterialFloor()
    {
        return $this->container['byg150_material_floor'];
    }

    /**
     * Sets byg150_material_floor
     *
     * @param mixed|null $byg150_material_floor Oplysning som kan knyttes til en bygning til erhvervsform친l. Angiver typen af gulvbel칝gning fx beton
     *
     * @return self
     */
    public function setByg150MaterialFloor($byg150_material_floor)
    {
        if (is_null($byg150_material_floor)) {
            array_push($this->openAPINullablesSetToNull, 'byg150_material_floor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg150_material_floor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg150_material_floor'] = $byg150_material_floor;

        return $this;
    }

    /**
     * Gets byg151_clearance_height
     *
     * @return mixed|null
     */
    public function getByg151ClearanceHeight()
    {
        return $this->container['byg151_clearance_height'];
    }

    /**
     * Sets byg151_clearance_height
     *
     * @param mixed|null $byg151_clearance_height Oplysning som kan knyttes til en bygning til lagerform친l, garage e.l. Angiver den maksimale h칮jde af k칮ret칮jer der kan k칮re ind og ud af bygningen
     *
     * @return self
     */
    public function setByg151ClearanceHeight($byg151_clearance_height)
    {
        if (is_null($byg151_clearance_height)) {
            array_push($this->openAPINullablesSetToNull, 'byg151_clearance_height');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg151_clearance_height', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg151_clearance_height'] = $byg151_clearance_height;

        return $this;
    }

    /**
     * Gets byg152_construction_open_closed
     *
     * @return mixed|null
     */
    public function getByg152ConstructionOpenClosed()
    {
        return $this->container['byg152_construction_open_closed'];
    }

    /**
     * Sets byg152_construction_open_closed
     *
     * @param mixed|null $byg152_construction_open_closed Information om bygningen udg칮r en 친ben eller lukket konstruktion, dvs. med eller uden yderv칝gge
     *
     * @return self
     */
    public function setByg152ConstructionOpenClosed($byg152_construction_open_closed)
    {
        if (is_null($byg152_construction_open_closed)) {
            array_push($this->openAPINullablesSetToNull, 'byg152_construction_open_closed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg152_construction_open_closed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg152_construction_open_closed'] = $byg152_construction_open_closed;

        return $this;
    }

    /**
     * Gets byg153_construction_conditions
     *
     * @return mixed|null
     */
    public function getByg153ConstructionConditions()
    {
        return $this->container['byg153_construction_conditions'];
    }

    /**
     * Sets byg153_construction_conditions
     *
     * @param mixed|null $byg153_construction_conditions Information om typen af bygningens b칝rende konstruktion
     *
     * @return self
     */
    public function setByg153ConstructionConditions($byg153_construction_conditions)
    {
        if (is_null($byg153_construction_conditions)) {
            array_push($this->openAPINullablesSetToNull, 'byg153_construction_conditions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg153_construction_conditions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg153_construction_conditions'] = $byg153_construction_conditions;

        return $this;
    }

    /**
     * Gets byg301_relocation_type
     *
     * @return mixed|null
     */
    public function getByg301RelocationType()
    {
        return $this->container['byg301_relocation_type'];
    }

    /**
     * Sets byg301_relocation_type
     *
     * @param mixed|null $byg301_relocation_type Angiver type af flytning af en bygning.
     *
     * @return self
     */
    public function setByg301RelocationType($byg301_relocation_type)
    {
        if (is_null($byg301_relocation_type)) {
            array_push($this->openAPINullablesSetToNull, 'byg301_relocation_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg301_relocation_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg301_relocation_type'] = $byg301_relocation_type;

        return $this;
    }

    /**
     * Gets byg302_municipality_newcomers
     *
     * @return mixed|null
     */
    public function getByg302MunicipalityNewcomers()
    {
        return $this->container['byg302_municipality_newcomers'];
    }

    /**
     * Sets byg302_municipality_newcomers
     *
     * @param mixed|null $byg302_municipality_newcomers Angiver den kommune bygningen flyttes til.
     *
     * @return self
     */
    public function setByg302MunicipalityNewcomers($byg302_municipality_newcomers)
    {
        if (is_null($byg302_municipality_newcomers)) {
            array_push($this->openAPINullablesSetToNull, 'byg302_municipality_newcomers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg302_municipality_newcomers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg302_municipality_newcomers'] = $byg302_municipality_newcomers;

        return $this;
    }

    /**
     * Gets byg403_storm_council_supplementary_comments
     *
     * @return mixed|null
     */
    public function getByg403StormCouncilSupplementaryComments()
    {
        return $this->container['byg403_storm_council_supplementary_comments'];
    }

    /**
     * Sets byg403_storm_council_supplementary_comments
     *
     * @param mixed|null $byg403_storm_council_supplementary_comments Angiver 칮vrige bem칝rkninger fra stormr친det.
     *
     * @return self
     */
    public function setByg403StormCouncilSupplementaryComments($byg403_storm_council_supplementary_comments)
    {
        if (is_null($byg403_storm_council_supplementary_comments)) {
            array_push($this->openAPINullablesSetToNull, 'byg403_storm_council_supplementary_comments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg403_storm_council_supplementary_comments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg403_storm_council_supplementary_comments'] = $byg403_storm_council_supplementary_comments;

        return $this;
    }

    /**
     * Gets byg404_coordinate
     *
     * @return mixed|null
     */
    public function getByg404Coordinate()
    {
        return $this->container['byg404_coordinate'];
    }

    /**
     * Sets byg404_coordinate
     *
     * @param mixed|null $byg404_coordinate Angiver bygningens geografiske repr칝sentation i form af et punkt.
     *
     * @return self
     */
    public function setByg404Coordinate($byg404_coordinate)
    {
        if (is_null($byg404_coordinate)) {
            array_push($this->openAPINullablesSetToNull, 'byg404_coordinate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg404_coordinate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg404_coordinate'] = $byg404_coordinate;

        return $this;
    }

    /**
     * Gets byg406_coordinate_system
     *
     * @return mixed|null
     */
    public function getByg406CoordinateSystem()
    {
        return $this->container['byg406_coordinate_system'];
    }

    /**
     * Sets byg406_coordinate_system
     *
     * @param mixed|null $byg406_coordinate_system Angiver geografisk koordinatsystem og projektion.
     *
     * @return self
     */
    public function setByg406CoordinateSystem($byg406_coordinate_system)
    {
        if (is_null($byg406_coordinate_system)) {
            array_push($this->openAPINullablesSetToNull, 'byg406_coordinate_system');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg406_coordinate_system', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg406_coordinate_system'] = $byg406_coordinate_system;

        return $this;
    }

    /**
     * Gets byg500_note
     *
     * @return mixed|null
     */
    public function getByg500Note()
    {
        return $this->container['byg500_note'];
    }

    /**
     * Sets byg500_note
     *
     * @param mixed|null $byg500_note Beskrivende tekstnotat om s칝rlige forhold for dette BBR-element
     *
     * @return self
     */
    public function setByg500Note($byg500_note)
    {
        if (is_null($byg500_note)) {
            array_push($this->openAPINullablesSetToNull, 'byg500_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('byg500_note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['byg500_note'] = $byg500_note;

        return $this;
    }

    /**
     * Gets slks
     *
     * @return \OpenAPI\Client\Model\SLKSFBB|null
     */
    public function getSlks()
    {
        return $this->container['slks'];
    }

    /**
     * Sets slks
     *
     * @param \OpenAPI\Client\Model\SLKSFBB|null $slks slks
     *
     * @return self
     */
    public function setSlks($slks)
    {
        if (is_null($slks)) {
            throw new \InvalidArgumentException('non-nullable slks cannot be null');
        }
        $this->container['slks'] = $slks;

        return $this;
    }

    /**
     * Gets energy_label
     *
     * @return \OpenAPI\Client\Model\EnergyLabelSimple|null
     */
    public function getEnergyLabel()
    {
        return $this->container['energy_label'];
    }

    /**
     * Sets energy_label
     *
     * @param \OpenAPI\Client\Model\EnergyLabelSimple|null $energy_label energy_label
     *
     * @return self
     */
    public function setEnergyLabel($energy_label)
    {
        if (is_null($energy_label)) {
            throw new \InvalidArgumentException('non-nullable energy_label cannot be null');
        }
        $this->container['energy_label'] = $energy_label;

        return $this;
    }

    /**
     * Gets access_address
     *
     * @return \OpenAPI\Client\Model\DARAccessAddress|null
     */
    public function getAccessAddress()
    {
        return $this->container['access_address'];
    }

    /**
     * Sets access_address
     *
     * @param \OpenAPI\Client\Model\DARAccessAddress|null $access_address access_address
     *
     * @return self
     */
    public function setAccessAddress($access_address)
    {
        if (is_null($access_address)) {
            throw new \InvalidArgumentException('non-nullable access_address cannot be null');
        }
        $this->container['access_address'] = $access_address;

        return $this;
    }

    /**
     * Gets floor
     *
     * @return \OpenAPI\Client\Model\BBRFloorAggs|null
     */
    public function getFloor()
    {
        return $this->container['floor'];
    }

    /**
     * Sets floor
     *
     * @param \OpenAPI\Client\Model\BBRFloorAggs|null $floor floor
     *
     * @return self
     */
    public function setFloor($floor)
    {
        if (is_null($floor)) {
            throw new \InvalidArgumentException('non-nullable floor cannot be null');
        }
        $this->container['floor'] = $floor;

        return $this;
    }

    /**
     * Gets opg020_elevator
     *
     * @return mixed
     */
    public function getOpg020Elevator()
    {
        return $this->container['opg020_elevator'];
    }

    /**
     * Sets opg020_elevator
     *
     * @param mixed $opg020_elevator opg020_elevator
     *
     * @return self
     */
    public function setOpg020Elevator($opg020_elevator)
    {
        if (is_null($opg020_elevator)) {
            array_push($this->openAPINullablesSetToNull, 'opg020_elevator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('opg020_elevator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['opg020_elevator'] = $opg020_elevator;

        return $this;
    }

    /**
     * Gets number_units
     *
     * @return mixed
     */
    public function getNumberUnits()
    {
        return $this->container['number_units'];
    }

    /**
     * Sets number_units
     *
     * @param mixed $number_units number_units
     *
     * @return self
     */
    public function setNumberUnits($number_units)
    {
        if (is_null($number_units)) {
            array_push($this->openAPINullablesSetToNull, 'number_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_units', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_units'] = $number_units;

        return $this;
    }

    /**
     * Gets number_floors
     *
     * @return mixed
     */
    public function getNumberFloors()
    {
        return $this->container['number_floors'];
    }

    /**
     * Sets number_floors
     *
     * @param mixed $number_floors number_floors
     *
     * @return self
     */
    public function setNumberFloors($number_floors)
    {
        if (is_null($number_floors)) {
            array_push($this->openAPINullablesSetToNull, 'number_floors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_floors', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_floors'] = $number_floors;

        return $this;
    }

    /**
     * Gets number_staircases
     *
     * @return mixed
     */
    public function getNumberStaircases()
    {
        return $this->container['number_staircases'];
    }

    /**
     * Sets number_staircases
     *
     * @param mixed $number_staircases number_staircases
     *
     * @return self
     */
    public function setNumberStaircases($number_staircases)
    {
        if (is_null($number_staircases)) {
            array_push($this->openAPINullablesSetToNull, 'number_staircases');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_staircases', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_staircases'] = $number_staircases;

        return $this;
    }

    /**
     * Gets plot_id
     *
     * @return mixed
     */
    public function getPlotId()
    {
        return $this->container['plot_id'];
    }

    /**
     * Sets plot_id
     *
     * @param mixed $plot_id plot_id
     *
     * @return self
     */
    public function setPlotId($plot_id)
    {
        if (is_null($plot_id)) {
            array_push($this->openAPINullablesSetToNull, 'plot_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plot_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['plot_id'] = $plot_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


