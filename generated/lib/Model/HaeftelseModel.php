<?php
/**
 * HaeftelseModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HaeftelseModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HaeftelseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HaeftelseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'revision_nummer' => 'mixed',
        'alias_id' => 'mixed',
        'alias_akt_historisk_id' => 'mixed',
        'overfoert' => 'mixed',
        'type' => '\OpenAPI\Client\Model\HaeftelseCompleteTypeEnum',
        'tinglysning_dato' => 'mixed',
        'senest_paategnet_dato' => 'mixed',
        'pantrettighed_id' => 'mixed',
        'pantrettighed_prioritet_nummer' => 'mixed',
        'pantebrev_formular_lovpligtig_kode' => '\OpenAPI\Client\Model\HaeftelsePantebrevFormularLovpligtigKodeEnum',
        'kreditor_samling' => 'mixed',
        'debitor_samling' => 'mixed',
        'meddelelseshaver_samling' => 'mixed',
        'underpantrettighed_samling' => 'mixed',
        'beloeb' => 'mixed',
        'beloeb_valuta' => 'mixed',
        'delta_beloeb' => 'mixed',
        'rente' => '\OpenAPI\Client\Model\HaeftelseRenteModel',
        'rente_overfoert' => 'mixed',
        'anmaerkning_samling' => 'mixed',
        'respekt_samling' => 'mixed',
        'fritekst_information_tekst' => 'mixed',
        'tinglysning_afgift_betalt' => 'mixed',
        'tinglysning_afgift_overfoersel_indikator' => 'mixed',
        'konverteret_digital_pantebrev_indikator' => 'mixed',
        'rettighedsspaltning_status_tekst' => '\OpenAPI\Client\Model\RettighedsspaltningStatusEnum',
        'saerlige_laanevilkaar_samling' => 'mixed',
        'laantype_kode' => '\OpenAPI\Client\Model\HaeftelseLaantypeKodeEnum',
        'kreditorbetegnelse_tekst' => '\OpenAPI\Client\Model\TekstGruppeNestedModel',
        'tillaegstekst_samling' => 'mixed',
        'frist_information_samling' => 'mixed',
        'ogsaa_lyst_paa' => '\OpenAPI\Client\Model\OgsaaLystPaaModel',
        'information_overfoert' => '\OpenAPI\Client\Model\DokumentInformationOverfoertModel',
        'andel' => 'mixed',
        'andel_taeller' => 'mixed',
        'andel_naevner' => 'mixed',
        'implicit_fuldmagt_samling' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'revision_nummer' => null,
        'alias_id' => null,
        'alias_akt_historisk_id' => null,
        'overfoert' => null,
        'type' => null,
        'tinglysning_dato' => 'date-time',
        'senest_paategnet_dato' => 'date-time',
        'pantrettighed_id' => null,
        'pantrettighed_prioritet_nummer' => null,
        'pantebrev_formular_lovpligtig_kode' => null,
        'kreditor_samling' => null,
        'debitor_samling' => null,
        'meddelelseshaver_samling' => null,
        'underpantrettighed_samling' => null,
        'beloeb' => null,
        'beloeb_valuta' => null,
        'delta_beloeb' => null,
        'rente' => null,
        'rente_overfoert' => null,
        'anmaerkning_samling' => null,
        'respekt_samling' => null,
        'fritekst_information_tekst' => null,
        'tinglysning_afgift_betalt' => null,
        'tinglysning_afgift_overfoersel_indikator' => null,
        'konverteret_digital_pantebrev_indikator' => null,
        'rettighedsspaltning_status_tekst' => null,
        'saerlige_laanevilkaar_samling' => null,
        'laantype_kode' => null,
        'kreditorbetegnelse_tekst' => null,
        'tillaegstekst_samling' => null,
        'frist_information_samling' => null,
        'ogsaa_lyst_paa' => null,
        'information_overfoert' => null,
        'andel' => null,
        'andel_taeller' => null,
        'andel_naevner' => null,
        'implicit_fuldmagt_samling' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'revision_nummer' => true,
		'alias_id' => true,
		'alias_akt_historisk_id' => true,
		'overfoert' => true,
		'type' => false,
		'tinglysning_dato' => true,
		'senest_paategnet_dato' => true,
		'pantrettighed_id' => true,
		'pantrettighed_prioritet_nummer' => true,
		'pantebrev_formular_lovpligtig_kode' => false,
		'kreditor_samling' => true,
		'debitor_samling' => true,
		'meddelelseshaver_samling' => true,
		'underpantrettighed_samling' => true,
		'beloeb' => true,
		'beloeb_valuta' => true,
		'delta_beloeb' => true,
		'rente' => false,
		'rente_overfoert' => true,
		'anmaerkning_samling' => true,
		'respekt_samling' => true,
		'fritekst_information_tekst' => true,
		'tinglysning_afgift_betalt' => true,
		'tinglysning_afgift_overfoersel_indikator' => true,
		'konverteret_digital_pantebrev_indikator' => true,
		'rettighedsspaltning_status_tekst' => false,
		'saerlige_laanevilkaar_samling' => true,
		'laantype_kode' => false,
		'kreditorbetegnelse_tekst' => false,
		'tillaegstekst_samling' => true,
		'frist_information_samling' => true,
		'ogsaa_lyst_paa' => false,
		'information_overfoert' => false,
		'andel' => true,
		'andel_taeller' => true,
		'andel_naevner' => true,
		'implicit_fuldmagt_samling' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'revision_nummer' => 'RevisionNummer',
        'alias_id' => 'AliasId',
        'alias_akt_historisk_id' => 'AliasAktHistoriskId',
        'overfoert' => 'Overfoert',
        'type' => 'Type',
        'tinglysning_dato' => 'TinglysningDato',
        'senest_paategnet_dato' => 'SenestPaategnetDato',
        'pantrettighed_id' => 'PantrettighedId',
        'pantrettighed_prioritet_nummer' => 'PantrettighedPrioritetNummer',
        'pantebrev_formular_lovpligtig_kode' => 'PantebrevFormularLovpligtigKode',
        'kreditor_samling' => 'KreditorSamling',
        'debitor_samling' => 'DebitorSamling',
        'meddelelseshaver_samling' => 'MeddelelseshaverSamling',
        'underpantrettighed_samling' => 'UnderpantrettighedSamling',
        'beloeb' => 'Beloeb',
        'beloeb_valuta' => 'BeloebValuta',
        'delta_beloeb' => 'DeltaBeloeb',
        'rente' => 'Rente',
        'rente_overfoert' => 'RenteOverfoert',
        'anmaerkning_samling' => 'AnmaerkningSamling',
        'respekt_samling' => 'RespektSamling',
        'fritekst_information_tekst' => 'FritekstInformationTekst',
        'tinglysning_afgift_betalt' => 'TinglysningAfgiftBetalt',
        'tinglysning_afgift_overfoersel_indikator' => 'TinglysningAfgiftOverfoerselIndikator',
        'konverteret_digital_pantebrev_indikator' => 'KonverteretDigitalPantebrevIndikator',
        'rettighedsspaltning_status_tekst' => 'RettighedsspaltningStatusTekst',
        'saerlige_laanevilkaar_samling' => 'SaerligeLaanevilkaarSamling',
        'laantype_kode' => 'LaantypeKode',
        'kreditorbetegnelse_tekst' => 'KreditorbetegnelseTekst',
        'tillaegstekst_samling' => 'TillaegstekstSamling',
        'frist_information_samling' => 'FristInformationSamling',
        'ogsaa_lyst_paa' => 'OgsaaLystPaa',
        'information_overfoert' => 'InformationOverfoert',
        'andel' => 'Andel',
        'andel_taeller' => 'AndelTaeller',
        'andel_naevner' => 'AndelNaevner',
        'implicit_fuldmagt_samling' => 'ImplicitFuldmagtSamling'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'revision_nummer' => 'setRevisionNummer',
        'alias_id' => 'setAliasId',
        'alias_akt_historisk_id' => 'setAliasAktHistoriskId',
        'overfoert' => 'setOverfoert',
        'type' => 'setType',
        'tinglysning_dato' => 'setTinglysningDato',
        'senest_paategnet_dato' => 'setSenestPaategnetDato',
        'pantrettighed_id' => 'setPantrettighedId',
        'pantrettighed_prioritet_nummer' => 'setPantrettighedPrioritetNummer',
        'pantebrev_formular_lovpligtig_kode' => 'setPantebrevFormularLovpligtigKode',
        'kreditor_samling' => 'setKreditorSamling',
        'debitor_samling' => 'setDebitorSamling',
        'meddelelseshaver_samling' => 'setMeddelelseshaverSamling',
        'underpantrettighed_samling' => 'setUnderpantrettighedSamling',
        'beloeb' => 'setBeloeb',
        'beloeb_valuta' => 'setBeloebValuta',
        'delta_beloeb' => 'setDeltaBeloeb',
        'rente' => 'setRente',
        'rente_overfoert' => 'setRenteOverfoert',
        'anmaerkning_samling' => 'setAnmaerkningSamling',
        'respekt_samling' => 'setRespektSamling',
        'fritekst_information_tekst' => 'setFritekstInformationTekst',
        'tinglysning_afgift_betalt' => 'setTinglysningAfgiftBetalt',
        'tinglysning_afgift_overfoersel_indikator' => 'setTinglysningAfgiftOverfoerselIndikator',
        'konverteret_digital_pantebrev_indikator' => 'setKonverteretDigitalPantebrevIndikator',
        'rettighedsspaltning_status_tekst' => 'setRettighedsspaltningStatusTekst',
        'saerlige_laanevilkaar_samling' => 'setSaerligeLaanevilkaarSamling',
        'laantype_kode' => 'setLaantypeKode',
        'kreditorbetegnelse_tekst' => 'setKreditorbetegnelseTekst',
        'tillaegstekst_samling' => 'setTillaegstekstSamling',
        'frist_information_samling' => 'setFristInformationSamling',
        'ogsaa_lyst_paa' => 'setOgsaaLystPaa',
        'information_overfoert' => 'setInformationOverfoert',
        'andel' => 'setAndel',
        'andel_taeller' => 'setAndelTaeller',
        'andel_naevner' => 'setAndelNaevner',
        'implicit_fuldmagt_samling' => 'setImplicitFuldmagtSamling'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'revision_nummer' => 'getRevisionNummer',
        'alias_id' => 'getAliasId',
        'alias_akt_historisk_id' => 'getAliasAktHistoriskId',
        'overfoert' => 'getOverfoert',
        'type' => 'getType',
        'tinglysning_dato' => 'getTinglysningDato',
        'senest_paategnet_dato' => 'getSenestPaategnetDato',
        'pantrettighed_id' => 'getPantrettighedId',
        'pantrettighed_prioritet_nummer' => 'getPantrettighedPrioritetNummer',
        'pantebrev_formular_lovpligtig_kode' => 'getPantebrevFormularLovpligtigKode',
        'kreditor_samling' => 'getKreditorSamling',
        'debitor_samling' => 'getDebitorSamling',
        'meddelelseshaver_samling' => 'getMeddelelseshaverSamling',
        'underpantrettighed_samling' => 'getUnderpantrettighedSamling',
        'beloeb' => 'getBeloeb',
        'beloeb_valuta' => 'getBeloebValuta',
        'delta_beloeb' => 'getDeltaBeloeb',
        'rente' => 'getRente',
        'rente_overfoert' => 'getRenteOverfoert',
        'anmaerkning_samling' => 'getAnmaerkningSamling',
        'respekt_samling' => 'getRespektSamling',
        'fritekst_information_tekst' => 'getFritekstInformationTekst',
        'tinglysning_afgift_betalt' => 'getTinglysningAfgiftBetalt',
        'tinglysning_afgift_overfoersel_indikator' => 'getTinglysningAfgiftOverfoerselIndikator',
        'konverteret_digital_pantebrev_indikator' => 'getKonverteretDigitalPantebrevIndikator',
        'rettighedsspaltning_status_tekst' => 'getRettighedsspaltningStatusTekst',
        'saerlige_laanevilkaar_samling' => 'getSaerligeLaanevilkaarSamling',
        'laantype_kode' => 'getLaantypeKode',
        'kreditorbetegnelse_tekst' => 'getKreditorbetegnelseTekst',
        'tillaegstekst_samling' => 'getTillaegstekstSamling',
        'frist_information_samling' => 'getFristInformationSamling',
        'ogsaa_lyst_paa' => 'getOgsaaLystPaa',
        'information_overfoert' => 'getInformationOverfoert',
        'andel' => 'getAndel',
        'andel_taeller' => 'getAndelTaeller',
        'andel_naevner' => 'getAndelNaevner',
        'implicit_fuldmagt_samling' => 'getImplicitFuldmagtSamling'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('revision_nummer', $data ?? [], null);
        $this->setIfExists('alias_id', $data ?? [], null);
        $this->setIfExists('alias_akt_historisk_id', $data ?? [], null);
        $this->setIfExists('overfoert', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('tinglysning_dato', $data ?? [], null);
        $this->setIfExists('senest_paategnet_dato', $data ?? [], null);
        $this->setIfExists('pantrettighed_id', $data ?? [], null);
        $this->setIfExists('pantrettighed_prioritet_nummer', $data ?? [], null);
        $this->setIfExists('pantebrev_formular_lovpligtig_kode', $data ?? [], null);
        $this->setIfExists('kreditor_samling', $data ?? [], null);
        $this->setIfExists('debitor_samling', $data ?? [], null);
        $this->setIfExists('meddelelseshaver_samling', $data ?? [], null);
        $this->setIfExists('underpantrettighed_samling', $data ?? [], null);
        $this->setIfExists('beloeb', $data ?? [], null);
        $this->setIfExists('beloeb_valuta', $data ?? [], null);
        $this->setIfExists('delta_beloeb', $data ?? [], null);
        $this->setIfExists('rente', $data ?? [], null);
        $this->setIfExists('rente_overfoert', $data ?? [], null);
        $this->setIfExists('anmaerkning_samling', $data ?? [], null);
        $this->setIfExists('respekt_samling', $data ?? [], null);
        $this->setIfExists('fritekst_information_tekst', $data ?? [], null);
        $this->setIfExists('tinglysning_afgift_betalt', $data ?? [], null);
        $this->setIfExists('tinglysning_afgift_overfoersel_indikator', $data ?? [], null);
        $this->setIfExists('konverteret_digital_pantebrev_indikator', $data ?? [], null);
        $this->setIfExists('rettighedsspaltning_status_tekst', $data ?? [], null);
        $this->setIfExists('saerlige_laanevilkaar_samling', $data ?? [], null);
        $this->setIfExists('laantype_kode', $data ?? [], null);
        $this->setIfExists('kreditorbetegnelse_tekst', $data ?? [], null);
        $this->setIfExists('tillaegstekst_samling', $data ?? [], null);
        $this->setIfExists('frist_information_samling', $data ?? [], null);
        $this->setIfExists('ogsaa_lyst_paa', $data ?? [], null);
        $this->setIfExists('information_overfoert', $data ?? [], null);
        $this->setIfExists('andel', $data ?? [], null);
        $this->setIfExists('andel_taeller', $data ?? [], null);
        $this->setIfExists('andel_naevner', $data ?? [], null);
        $this->setIfExists('implicit_fuldmagt_samling', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['revision_nummer'] === null) {
            $invalidProperties[] = "'revision_nummer' can't be null";
        }
        if ($this->container['overfoert'] === null) {
            $invalidProperties[] = "'overfoert' can't be null";
        }
        if ($this->container['tinglysning_dato'] === null) {
            $invalidProperties[] = "'tinglysning_dato' can't be null";
        }
        if ($this->container['pantrettighed_id'] === null) {
            $invalidProperties[] = "'pantrettighed_id' can't be null";
        }
        if ($this->container['pantrettighed_prioritet_nummer'] === null) {
            $invalidProperties[] = "'pantrettighed_prioritet_nummer' can't be null";
        }
        if ($this->container['beloeb'] === null) {
            $invalidProperties[] = "'beloeb' can't be null";
        }
        if ($this->container['beloeb_valuta'] === null) {
            $invalidProperties[] = "'beloeb_valuta' can't be null";
        }
        if ($this->container['tinglysning_afgift_overfoersel_indikator'] === null) {
            $invalidProperties[] = "'tinglysning_afgift_overfoersel_indikator' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id Identifikation af et dokument, som kan vÃ¦re et adkomst-, hÃ¦ftelses- eller servitutdokument.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets revision_nummer
     *
     * @return mixed
     */
    public function getRevisionNummer()
    {
        return $this->container['revision_nummer'];
    }

    /**
     * Sets revision_nummer
     *
     * @param mixed $revision_nummer Revisionsnummer for rettighedsdokument.
     *
     * @return self
     */
    public function setRevisionNummer($revision_nummer)
    {
        if (is_null($revision_nummer)) {
            array_push($this->openAPINullablesSetToNull, 'revision_nummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('revision_nummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['revision_nummer'] = $revision_nummer;

        return $this;
    }

    /**
     * Gets alias_id
     *
     * @return mixed|null
     */
    public function getAliasId()
    {
        return $this->container['alias_id'];
    }

    /**
     * Sets alias_id
     *
     * @param mixed|null $alias_id Unikt dokument-alias bestÃ¥ende af dags dato og et lÃ¸benummer. F.eks. 20080304-1234567890
     *
     * @return self
     */
    public function setAliasId($alias_id)
    {
        if (is_null($alias_id)) {
            array_push($this->openAPINullablesSetToNull, 'alias_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alias_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alias_id'] = $alias_id;

        return $this;
    }

    /**
     * Gets alias_akt_historisk_id
     *
     * @return mixed|null
     */
    public function getAliasAktHistoriskId()
    {
        return $this->container['alias_akt_historisk_id'];
    }

    /**
     * Sets alias_akt_historisk_id
     *
     * @param mixed|null $alias_akt_historisk_id For konverterede data er dokument-alias dato, lÃ¸benummer og retskreds for det konverterede dokument. Elementet er opbygget af dato der bestÃ¥r af 8 tal pÃ¥ formen yyyymmdd, herefter kommer bindestreg. LÃ¸benummer indeholder 1 til 6 tal. Der er ikke foranstillede nuller. Herefter kommer en bindestreg. Retskreds bestÃ¥r af 2 tal, f. eks. 01 eller 19. Hvis der findes flere konverteret dokumenter med samme dato/lÃ¸benummer, fÃ¥r disse tilfÃ¸jet et suffix pÃ¥ fem tegn: [-][Ã©t tegns dokumenttype][trecifret lÃ¸benr]. Dokumentypen er enten A (adkomstdokument), H (hÃ¦ftelsesdokument) eller S (servitutdokument). Eksempler: 20060304-123456-19, 19950507-12345-04, 19981209-1234-21-H0001 og 11111111-0-10-H0054
     *
     * @return self
     */
    public function setAliasAktHistoriskId($alias_akt_historisk_id)
    {
        if (is_null($alias_akt_historisk_id)) {
            array_push($this->openAPINullablesSetToNull, 'alias_akt_historisk_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alias_akt_historisk_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alias_akt_historisk_id'] = $alias_akt_historisk_id;

        return $this;
    }

    /**
     * Gets overfoert
     *
     * @return mixed
     */
    public function getOverfoert()
    {
        return $this->container['overfoert'];
    }

    /**
     * Sets overfoert
     *
     * @param mixed $overfoert Angiver om dokumentet oprindeligt blev oprettet i e-akten som resultat af overfÃ¸rslen fra TLS. True angiver at dokumentet blev oprettet i e-akten ifm. overfÃ¸rslen. False angiver at dokumentet ikke blev oprettet i e-akten ifm. overfÃ¸rslen.
     *
     * @return self
     */
    public function setOverfoert($overfoert)
    {
        if (is_null($overfoert)) {
            array_push($this->openAPINullablesSetToNull, 'overfoert');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overfoert', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['overfoert'] = $overfoert;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\HaeftelseCompleteTypeEnum|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\HaeftelseCompleteTypeEnum|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets tinglysning_dato
     *
     * @return mixed
     */
    public function getTinglysningDato()
    {
        return $this->container['tinglysning_dato'];
    }

    /**
     * Sets tinglysning_dato
     *
     * @param mixed $tinglysning_dato Tinglysningsdatoen er tidspunktet for modtagelsen af en anmeldelse, der indeholder oprettende ekspeditionstype. Tinglysningsdatoen viser altid datoen for den oprindelige tinglysning. Datoen for eventuelle pÃ¥tegninger kan udelukkende ses i akten via revisionssporet.
     *
     * @return self
     */
    public function setTinglysningDato($tinglysning_dato)
    {
        if (is_null($tinglysning_dato)) {
            array_push($this->openAPINullablesSetToNull, 'tinglysning_dato');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tinglysning_dato', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tinglysning_dato'] = $tinglysning_dato;

        return $this;
    }

    /**
     * Gets senest_paategnet_dato
     *
     * @return mixed|null
     */
    public function getSenestPaategnetDato()
    {
        return $this->container['senest_paategnet_dato'];
    }

    /**
     * Sets senest_paategnet_dato
     *
     * @param mixed|null $senest_paategnet_dato Dato for seneste pÃ¥tegning
     *
     * @return self
     */
    public function setSenestPaategnetDato($senest_paategnet_dato)
    {
        if (is_null($senest_paategnet_dato)) {
            array_push($this->openAPINullablesSetToNull, 'senest_paategnet_dato');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('senest_paategnet_dato', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['senest_paategnet_dato'] = $senest_paategnet_dato;

        return $this;
    }

    /**
     * Gets pantrettighed_id
     *
     * @return mixed
     */
    public function getPantrettighedId()
    {
        return $this->container['pantrettighed_id'];
    }

    /**
     * Sets pantrettighed_id
     *
     * @param mixed $pantrettighed_id Identifikation af en rettighed. Betegnelsen rettighed dÃ¦kker alle de former for sammenkob- linger som et rettighedsdokument (DokumentIdentifikator) kan registrere i forhold til et tinglysningsobjekt.
     *
     * @return self
     */
    public function setPantrettighedId($pantrettighed_id)
    {
        if (is_null($pantrettighed_id)) {
            array_push($this->openAPINullablesSetToNull, 'pantrettighed_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pantrettighed_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pantrettighed_id'] = $pantrettighed_id;

        return $this;
    }

    /**
     * Gets pantrettighed_prioritet_nummer
     *
     * @return mixed
     */
    public function getPantrettighedPrioritetNummer()
    {
        return $this->container['pantrettighed_prioritet_nummer'];
    }

    /**
     * Sets pantrettighed_prioritet_nummer
     *
     * @param mixed $pantrettighed_prioritet_nummer Den faktiske prioritet for rettigheden. Ud af dokumentet kan lÃ¦ses respekterne, som angiver den Ã¸nskede prioritet. Dette modereres evt. af anmÃ¦rkninger og giver den faktiske prioritet.
     *
     * @return self
     */
    public function setPantrettighedPrioritetNummer($pantrettighed_prioritet_nummer)
    {
        if (is_null($pantrettighed_prioritet_nummer)) {
            array_push($this->openAPINullablesSetToNull, 'pantrettighed_prioritet_nummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pantrettighed_prioritet_nummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pantrettighed_prioritet_nummer'] = $pantrettighed_prioritet_nummer;

        return $this;
    }

    /**
     * Gets pantebrev_formular_lovpligtig_kode
     *
     * @return \OpenAPI\Client\Model\HaeftelsePantebrevFormularLovpligtigKodeEnum|null
     */
    public function getPantebrevFormularLovpligtigKode()
    {
        return $this->container['pantebrev_formular_lovpligtig_kode'];
    }

    /**
     * Sets pantebrev_formular_lovpligtig_kode
     *
     * @param \OpenAPI\Client\Model\HaeftelsePantebrevFormularLovpligtigKodeEnum|null $pantebrev_formular_lovpligtig_kode pantebrev_formular_lovpligtig_kode
     *
     * @return self
     */
    public function setPantebrevFormularLovpligtigKode($pantebrev_formular_lovpligtig_kode)
    {
        if (is_null($pantebrev_formular_lovpligtig_kode)) {
            throw new \InvalidArgumentException('non-nullable pantebrev_formular_lovpligtig_kode cannot be null');
        }
        $this->container['pantebrev_formular_lovpligtig_kode'] = $pantebrev_formular_lovpligtig_kode;

        return $this;
    }

    /**
     * Gets kreditor_samling
     *
     * @return mixed|null
     */
    public function getKreditorSamling()
    {
        return $this->container['kreditor_samling'];
    }

    /**
     * Sets kreditor_samling
     *
     * @param mixed|null $kreditor_samling Information om kreditorer pÃ¥ det valgte tingslysningsopbjekt
     *
     * @return self
     */
    public function setKreditorSamling($kreditor_samling)
    {
        if (is_null($kreditor_samling)) {
            array_push($this->openAPINullablesSetToNull, 'kreditor_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('kreditor_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['kreditor_samling'] = $kreditor_samling;

        return $this;
    }

    /**
     * Gets debitor_samling
     *
     * @return mixed|null
     */
    public function getDebitorSamling()
    {
        return $this->container['debitor_samling'];
    }

    /**
     * Sets debitor_samling
     *
     * @param mixed|null $debitor_samling Information om debitorer pÃ¥ det valgte tingslysningsopbjekt.
     *
     * @return self
     */
    public function setDebitorSamling($debitor_samling)
    {
        if (is_null($debitor_samling)) {
            array_push($this->openAPINullablesSetToNull, 'debitor_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('debitor_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['debitor_samling'] = $debitor_samling;

        return $this;
    }

    /**
     * Gets meddelelseshaver_samling
     *
     * @return mixed|null
     */
    public function getMeddelelseshaverSamling()
    {
        return $this->container['meddelelseshaver_samling'];
    }

    /**
     * Sets meddelelseshaver_samling
     *
     * @param mixed|null $meddelelseshaver_samling Information om meddelelseshavere pÃ¥ det valgte tingslysningsopbjekt
     *
     * @return self
     */
    public function setMeddelelseshaverSamling($meddelelseshaver_samling)
    {
        if (is_null($meddelelseshaver_samling)) {
            array_push($this->openAPINullablesSetToNull, 'meddelelseshaver_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meddelelseshaver_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meddelelseshaver_samling'] = $meddelelseshaver_samling;

        return $this;
    }

    /**
     * Gets underpantrettighed_samling
     *
     * @return mixed|null
     */
    public function getUnderpantrettighedSamling()
    {
        return $this->container['underpantrettighed_samling'];
    }

    /**
     * Sets underpantrettighed_samling
     *
     * @param mixed|null $underpantrettighed_samling Angiver et underpant i en pantrettighed. Underpant har deres egen underordnede prioritetsstilling og sin egen unikke rettighedsidentifkator. Der returneres identifikation af underpantets dokument i form af DokumenRevisionIdentifikator og underpantets belÃ¸b.
     *
     * @return self
     */
    public function setUnderpantrettighedSamling($underpantrettighed_samling)
    {
        if (is_null($underpantrettighed_samling)) {
            array_push($this->openAPINullablesSetToNull, 'underpantrettighed_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('underpantrettighed_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['underpantrettighed_samling'] = $underpantrettighed_samling;

        return $this;
    }

    /**
     * Gets beloeb
     *
     * @return mixed
     */
    public function getBeloeb()
    {
        return $this->container['beloeb'];
    }

    /**
     * Sets beloeb
     *
     * @param mixed $beloeb BelÃ¸b pÃ¥ hÃ¦ftelse.
     *
     * @return self
     */
    public function setBeloeb($beloeb)
    {
        if (is_null($beloeb)) {
            array_push($this->openAPINullablesSetToNull, 'beloeb');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('beloeb', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['beloeb'] = $beloeb;

        return $this;
    }

    /**
     * Gets beloeb_valuta
     *
     * @return mixed
     */
    public function getBeloebValuta()
    {
        return $this->container['beloeb_valuta'];
    }

    /**
     * Sets beloeb_valuta
     *
     * @param mixed $beloeb_valuta ISO 4217 valutakode
     *
     * @return self
     */
    public function setBeloebValuta($beloeb_valuta)
    {
        if (is_null($beloeb_valuta)) {
            array_push($this->openAPINullablesSetToNull, 'beloeb_valuta');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('beloeb_valuta', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['beloeb_valuta'] = $beloeb_valuta;

        return $this;
    }

    /**
     * Gets delta_beloeb
     *
     * @return mixed|null
     */
    public function getDeltaBeloeb()
    {
        return $this->container['delta_beloeb'];
    }

    /**
     * Sets delta_beloeb
     *
     * @param mixed|null $delta_beloeb DeltabelÃ¸b ved forhÃ¸jelser og nedsÃ¦ttelser inden for det enkelte tinglysningsobjekt.
     *
     * @return self
     */
    public function setDeltaBeloeb($delta_beloeb)
    {
        if (is_null($delta_beloeb)) {
            array_push($this->openAPINullablesSetToNull, 'delta_beloeb');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delta_beloeb', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delta_beloeb'] = $delta_beloeb;

        return $this;
    }

    /**
     * Gets rente
     *
     * @return \OpenAPI\Client\Model\HaeftelseRenteModel|null
     */
    public function getRente()
    {
        return $this->container['rente'];
    }

    /**
     * Sets rente
     *
     * @param \OpenAPI\Client\Model\HaeftelseRenteModel|null $rente rente
     *
     * @return self
     */
    public function setRente($rente)
    {
        if (is_null($rente)) {
            throw new \InvalidArgumentException('non-nullable rente cannot be null');
        }
        $this->container['rente'] = $rente;

        return $this;
    }

    /**
     * Gets rente_overfoert
     *
     * @return mixed|null
     */
    public function getRenteOverfoert()
    {
        return $this->container['rente_overfoert'];
    }

    /**
     * Sets rente_overfoert
     *
     * @param mixed|null $rente_overfoert Angives for et overfÃ¸rt dokument, hvis renten ikke er Ã¦ndret ved pÃ¥tegning efter overfÃ¸rslen.
     *
     * @return self
     */
    public function setRenteOverfoert($rente_overfoert)
    {
        if (is_null($rente_overfoert)) {
            array_push($this->openAPINullablesSetToNull, 'rente_overfoert');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rente_overfoert', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rente_overfoert'] = $rente_overfoert;

        return $this;
    }

    /**
     * Gets anmaerkning_samling
     *
     * @return mixed|null
     */
    public function getAnmaerkningSamling()
    {
        return $this->container['anmaerkning_samling'];
    }

    /**
     * Sets anmaerkning_samling
     *
     * @param mixed|null $anmaerkning_samling Samling af anmaerkninger. Det kan vÃ¦re anmaerkninger om servitutter og hÃ¦ftelser angivet ved nummer. AnmÃ¦rkninger vedrÃ¸rer altid respekter. Mangler der i en anmeldelse respekt for en eller flere hÃ¦ftelser eller servitutter, giver sagsbehandlingen anledning til anmÃ¦rkninger herom. AnmÃ¦rkning for servitutter indeholder kode for yderligere oplysninger om servitutten.
     *
     * @return self
     */
    public function setAnmaerkningSamling($anmaerkning_samling)
    {
        if (is_null($anmaerkning_samling)) {
            array_push($this->openAPINullablesSetToNull, 'anmaerkning_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('anmaerkning_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['anmaerkning_samling'] = $anmaerkning_samling;

        return $this;
    }

    /**
     * Gets respekt_samling
     *
     * @return mixed|null
     */
    public function getRespektSamling()
    {
        return $this->container['respekt_samling'];
    }

    /**
     * Sets respekt_samling
     *
     * @param mixed|null $respekt_samling Samling af respekter.
     *
     * @return self
     */
    public function setRespektSamling($respekt_samling)
    {
        if (is_null($respekt_samling)) {
            array_push($this->openAPINullablesSetToNull, 'respekt_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('respekt_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['respekt_samling'] = $respekt_samling;

        return $this;
    }

    /**
     * Gets fritekst_information_tekst
     *
     * @return mixed|null
     */
    public function getFritekstInformationTekst()
    {
        return $this->container['fritekst_information_tekst'];
    }

    /**
     * Sets fritekst_information_tekst
     *
     * @param mixed|null $fritekst_information_tekst Her angives information i fri tekst, som ikke kan placeres andensteds. Der vil ikke optrÃ¦de koder i dette felt og man skal vise indholdet som fri tekst. Feltet er relateret til arbejdet med med den interne sagsportal.
     *
     * @return self
     */
    public function setFritekstInformationTekst($fritekst_information_tekst)
    {
        if (is_null($fritekst_information_tekst)) {
            array_push($this->openAPINullablesSetToNull, 'fritekst_information_tekst');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fritekst_information_tekst', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fritekst_information_tekst'] = $fritekst_information_tekst;

        return $this;
    }

    /**
     * Gets tinglysning_afgift_betalt
     *
     * @return mixed|null
     */
    public function getTinglysningAfgiftBetalt()
    {
        return $this->container['tinglysning_afgift_betalt'];
    }

    /**
     * Sets tinglysning_afgift_betalt
     *
     * @param mixed|null $tinglysning_afgift_betalt Det totale tinglysningsbelÃ¸b i danske kroner, der er betalt for anmeldelsen, der berÃ¸rte det pÃ¥gÃ¦ldende dokument. BelÃ¸bet kan dÃ¦kke flere dokumenter, hvis behandlingen af anmeldelsen har resulteret i flere dokumenter eller dokumentrevisioner.
     *
     * @return self
     */
    public function setTinglysningAfgiftBetalt($tinglysning_afgift_betalt)
    {
        if (is_null($tinglysning_afgift_betalt)) {
            array_push($this->openAPINullablesSetToNull, 'tinglysning_afgift_betalt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tinglysning_afgift_betalt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tinglysning_afgift_betalt'] = $tinglysning_afgift_betalt;

        return $this;
    }

    /**
     * Gets tinglysning_afgift_overfoersel_indikator
     *
     * @return mixed
     */
    public function getTinglysningAfgiftOverfoerselIndikator()
    {
        return $this->container['tinglysning_afgift_overfoersel_indikator'];
    }

    /**
     * Sets tinglysning_afgift_overfoersel_indikator
     *
     * @param mixed $tinglysning_afgift_overfoersel_indikator True angiver at der findes en erklÃ¦ring om at hÃ¦ftelse alene indestÃ¥r med henblik pÃ¥ overfÃ¸rsel af tinglysningsafgift.
     *
     * @return self
     */
    public function setTinglysningAfgiftOverfoerselIndikator($tinglysning_afgift_overfoersel_indikator)
    {
        if (is_null($tinglysning_afgift_overfoersel_indikator)) {
            array_push($this->openAPINullablesSetToNull, 'tinglysning_afgift_overfoersel_indikator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tinglysning_afgift_overfoersel_indikator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tinglysning_afgift_overfoersel_indikator'] = $tinglysning_afgift_overfoersel_indikator;

        return $this;
    }

    /**
     * Gets konverteret_digital_pantebrev_indikator
     *
     * @return mixed|null
     */
    public function getKonverteretDigitalPantebrevIndikator()
    {
        return $this->container['konverteret_digital_pantebrev_indikator'];
    }

    /**
     * Sets konverteret_digital_pantebrev_indikator
     *
     * @param mixed|null $konverteret_digital_pantebrev_indikator Kun for overfÃ¸rte dokumenter: True angiver at pantebrevet er digitaliseret og papir udgaven hermed er ugyldig.
     *
     * @return self
     */
    public function setKonverteretDigitalPantebrevIndikator($konverteret_digital_pantebrev_indikator)
    {
        if (is_null($konverteret_digital_pantebrev_indikator)) {
            array_push($this->openAPINullablesSetToNull, 'konverteret_digital_pantebrev_indikator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('konverteret_digital_pantebrev_indikator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['konverteret_digital_pantebrev_indikator'] = $konverteret_digital_pantebrev_indikator;

        return $this;
    }

    /**
     * Gets rettighedsspaltning_status_tekst
     *
     * @return \OpenAPI\Client\Model\RettighedsspaltningStatusEnum|null
     */
    public function getRettighedsspaltningStatusTekst()
    {
        return $this->container['rettighedsspaltning_status_tekst'];
    }

    /**
     * Sets rettighedsspaltning_status_tekst
     *
     * @param \OpenAPI\Client\Model\RettighedsspaltningStatusEnum|null $rettighedsspaltning_status_tekst rettighedsspaltning_status_tekst
     *
     * @return self
     */
    public function setRettighedsspaltningStatusTekst($rettighedsspaltning_status_tekst)
    {
        if (is_null($rettighedsspaltning_status_tekst)) {
            throw new \InvalidArgumentException('non-nullable rettighedsspaltning_status_tekst cannot be null');
        }
        $this->container['rettighedsspaltning_status_tekst'] = $rettighedsspaltning_status_tekst;

        return $this;
    }

    /**
     * Gets saerlige_laanevilkaar_samling
     *
     * @return mixed|null
     */
    public function getSaerligeLaanevilkaarSamling()
    {
        return $this->container['saerlige_laanevilkaar_samling'];
    }

    /**
     * Sets saerlige_laanevilkaar_samling
     *
     * @param mixed|null $saerlige_laanevilkaar_samling SÃ¦rlige lÃ¥nevilkÃ¥r for en fremtidig hÃ¦ftelse.
     *
     * @return self
     */
    public function setSaerligeLaanevilkaarSamling($saerlige_laanevilkaar_samling)
    {
        if (is_null($saerlige_laanevilkaar_samling)) {
            array_push($this->openAPINullablesSetToNull, 'saerlige_laanevilkaar_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('saerlige_laanevilkaar_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['saerlige_laanevilkaar_samling'] = $saerlige_laanevilkaar_samling;

        return $this;
    }

    /**
     * Gets laantype_kode
     *
     * @return \OpenAPI\Client\Model\HaeftelseLaantypeKodeEnum|null
     */
    public function getLaantypeKode()
    {
        return $this->container['laantype_kode'];
    }

    /**
     * Sets laantype_kode
     *
     * @param \OpenAPI\Client\Model\HaeftelseLaantypeKodeEnum|null $laantype_kode laantype_kode
     *
     * @return self
     */
    public function setLaantypeKode($laantype_kode)
    {
        if (is_null($laantype_kode)) {
            throw new \InvalidArgumentException('non-nullable laantype_kode cannot be null');
        }
        $this->container['laantype_kode'] = $laantype_kode;

        return $this;
    }

    /**
     * Gets kreditorbetegnelse_tekst
     *
     * @return \OpenAPI\Client\Model\TekstGruppeNestedModel|null
     */
    public function getKreditorbetegnelseTekst()
    {
        return $this->container['kreditorbetegnelse_tekst'];
    }

    /**
     * Sets kreditorbetegnelse_tekst
     *
     * @param \OpenAPI\Client\Model\TekstGruppeNestedModel|null $kreditorbetegnelse_tekst kreditorbetegnelse_tekst
     *
     * @return self
     */
    public function setKreditorbetegnelseTekst($kreditorbetegnelse_tekst)
    {
        if (is_null($kreditorbetegnelse_tekst)) {
            throw new \InvalidArgumentException('non-nullable kreditorbetegnelse_tekst cannot be null');
        }
        $this->container['kreditorbetegnelse_tekst'] = $kreditorbetegnelse_tekst;

        return $this;
    }

    /**
     * Gets tillaegstekst_samling
     *
     * @return mixed|null
     */
    public function getTillaegstekstSamling()
    {
        return $this->container['tillaegstekst_samling'];
    }

    /**
     * Sets tillaegstekst_samling
     *
     * @param mixed|null $tillaegstekst_samling Angiver enten en oplysende tekst givet af Tinglysningsmedarbejderen i den interne sagsportal eller et antal tillÃ¦gstekster fra overfÃ¸rslen.
     *
     * @return self
     */
    public function setTillaegstekstSamling($tillaegstekst_samling)
    {
        if (is_null($tillaegstekst_samling)) {
            array_push($this->openAPINullablesSetToNull, 'tillaegstekst_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tillaegstekst_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tillaegstekst_samling'] = $tillaegstekst_samling;

        return $this;
    }

    /**
     * Gets frist_information_samling
     *
     * @return mixed|null
     */
    public function getFristInformationSamling()
    {
        return $this->container['frist_information_samling'];
    }

    /**
     * Sets frist_information_samling
     *
     * @param mixed|null $frist_information_samling FristInformation ved tinglysning med frist. Her oplyses Ã¥rsag og fristdato.
     *
     * @return self
     */
    public function setFristInformationSamling($frist_information_samling)
    {
        if (is_null($frist_information_samling)) {
            array_push($this->openAPINullablesSetToNull, 'frist_information_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('frist_information_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['frist_information_samling'] = $frist_information_samling;

        return $this;
    }

    /**
     * Gets ogsaa_lyst_paa
     *
     * @return \OpenAPI\Client\Model\OgsaaLystPaaModel|null
     */
    public function getOgsaaLystPaa()
    {
        return $this->container['ogsaa_lyst_paa'];
    }

    /**
     * Sets ogsaa_lyst_paa
     *
     * @param \OpenAPI\Client\Model\OgsaaLystPaaModel|null $ogsaa_lyst_paa ogsaa_lyst_paa
     *
     * @return self
     */
    public function setOgsaaLystPaa($ogsaa_lyst_paa)
    {
        if (is_null($ogsaa_lyst_paa)) {
            throw new \InvalidArgumentException('non-nullable ogsaa_lyst_paa cannot be null');
        }
        $this->container['ogsaa_lyst_paa'] = $ogsaa_lyst_paa;

        return $this;
    }

    /**
     * Gets information_overfoert
     *
     * @return \OpenAPI\Client\Model\DokumentInformationOverfoertModel|null
     */
    public function getInformationOverfoert()
    {
        return $this->container['information_overfoert'];
    }

    /**
     * Sets information_overfoert
     *
     * @param \OpenAPI\Client\Model\DokumentInformationOverfoertModel|null $information_overfoert information_overfoert
     *
     * @return self
     */
    public function setInformationOverfoert($information_overfoert)
    {
        if (is_null($information_overfoert)) {
            throw new \InvalidArgumentException('non-nullable information_overfoert cannot be null');
        }
        $this->container['information_overfoert'] = $information_overfoert;

        return $this;
    }

    /**
     * Gets andel
     *
     * @return mixed|null
     */
    public function getAndel()
    {
        return $this->container['andel'];
    }

    /**
     * Sets andel
     *
     * @param mixed|null $andel andel
     *
     * @return self
     */
    public function setAndel($andel)
    {
        if (is_null($andel)) {
            array_push($this->openAPINullablesSetToNull, 'andel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('andel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['andel'] = $andel;

        return $this;
    }

    /**
     * Gets andel_taeller
     *
     * @return mixed|null
     */
    public function getAndelTaeller()
    {
        return $this->container['andel_taeller'];
    }

    /**
     * Sets andel_taeller
     *
     * @param mixed|null $andel_taeller andel_taeller
     *
     * @return self
     */
    public function setAndelTaeller($andel_taeller)
    {
        if (is_null($andel_taeller)) {
            array_push($this->openAPINullablesSetToNull, 'andel_taeller');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('andel_taeller', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['andel_taeller'] = $andel_taeller;

        return $this;
    }

    /**
     * Gets andel_naevner
     *
     * @return mixed|null
     */
    public function getAndelNaevner()
    {
        return $this->container['andel_naevner'];
    }

    /**
     * Sets andel_naevner
     *
     * @param mixed|null $andel_naevner andel_naevner
     *
     * @return self
     */
    public function setAndelNaevner($andel_naevner)
    {
        if (is_null($andel_naevner)) {
            array_push($this->openAPINullablesSetToNull, 'andel_naevner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('andel_naevner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['andel_naevner'] = $andel_naevner;

        return $this;
    }

    /**
     * Gets implicit_fuldmagt_samling
     *
     * @return mixed|null
     */
    public function getImplicitFuldmagtSamling()
    {
        return $this->container['implicit_fuldmagt_samling'];
    }

    /**
     * Sets implicit_fuldmagt_samling
     *
     * @param mixed|null $implicit_fuldmagt_samling Samling af anmeldte fuldmagter.
     *
     * @return self
     */
    public function setImplicitFuldmagtSamling($implicit_fuldmagt_samling)
    {
        if (is_null($implicit_fuldmagt_samling)) {
            array_push($this->openAPINullablesSetToNull, 'implicit_fuldmagt_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('implicit_fuldmagt_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['implicit_fuldmagt_samling'] = $implicit_fuldmagt_samling;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


