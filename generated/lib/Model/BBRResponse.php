<?php
/**
 * BBRResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BBRResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BBRResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BBRResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'property_relations' => 'mixed',
        'plots' => 'mixed',
        'buildings' => 'mixed',
        'units' => 'mixed',
        'staircases' => 'mixed',
        'floors' => 'mixed',
        'technical_installations' => 'mixed',
        'case_levels' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'property_relations' => null,
        'plots' => null,
        'buildings' => null,
        'units' => null,
        'staircases' => null,
        'floors' => null,
        'technical_installations' => null,
        'case_levels' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'property_relations' => true,
		'plots' => true,
		'buildings' => true,
		'units' => true,
		'staircases' => true,
		'floors' => true,
		'technical_installations' => true,
		'case_levels' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_relations' => 'property_relations',
        'plots' => 'plots',
        'buildings' => 'buildings',
        'units' => 'units',
        'staircases' => 'staircases',
        'floors' => 'floors',
        'technical_installations' => 'technical_installations',
        'case_levels' => 'case_levels'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_relations' => 'setPropertyRelations',
        'plots' => 'setPlots',
        'buildings' => 'setBuildings',
        'units' => 'setUnits',
        'staircases' => 'setStaircases',
        'floors' => 'setFloors',
        'technical_installations' => 'setTechnicalInstallations',
        'case_levels' => 'setCaseLevels'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_relations' => 'getPropertyRelations',
        'plots' => 'getPlots',
        'buildings' => 'getBuildings',
        'units' => 'getUnits',
        'staircases' => 'getStaircases',
        'floors' => 'getFloors',
        'technical_installations' => 'getTechnicalInstallations',
        'case_levels' => 'getCaseLevels'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('property_relations', $data ?? [], null);
        $this->setIfExists('plots', $data ?? [], null);
        $this->setIfExists('buildings', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('staircases', $data ?? [], null);
        $this->setIfExists('floors', $data ?? [], null);
        $this->setIfExists('technical_installations', $data ?? [], null);
        $this->setIfExists('case_levels', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['property_relations'] === null) {
            $invalidProperties[] = "'property_relations' can't be null";
        }
        if ($this->container['plots'] === null) {
            $invalidProperties[] = "'plots' can't be null";
        }
        if ($this->container['buildings'] === null) {
            $invalidProperties[] = "'buildings' can't be null";
        }
        if ($this->container['units'] === null) {
            $invalidProperties[] = "'units' can't be null";
        }
        if ($this->container['staircases'] === null) {
            $invalidProperties[] = "'staircases' can't be null";
        }
        if ($this->container['floors'] === null) {
            $invalidProperties[] = "'floors' can't be null";
        }
        if ($this->container['technical_installations'] === null) {
            $invalidProperties[] = "'technical_installations' can't be null";
        }
        if ($this->container['case_levels'] === null) {
            $invalidProperties[] = "'case_levels' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_relations
     *
     * @return mixed
     */
    public function getPropertyRelations()
    {
        return $this->container['property_relations'];
    }

    /**
     * Sets property_relations
     *
     * @param mixed $property_relations property_relations
     *
     * @return self
     */
    public function setPropertyRelations($property_relations)
    {
        if (is_null($property_relations)) {
            array_push($this->openAPINullablesSetToNull, 'property_relations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_relations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_relations'] = $property_relations;

        return $this;
    }

    /**
     * Gets plots
     *
     * @return mixed
     */
    public function getPlots()
    {
        return $this->container['plots'];
    }

    /**
     * Sets plots
     *
     * @param mixed $plots plots
     *
     * @return self
     */
    public function setPlots($plots)
    {
        if (is_null($plots)) {
            array_push($this->openAPINullablesSetToNull, 'plots');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plots', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['plots'] = $plots;

        return $this;
    }

    /**
     * Gets buildings
     *
     * @return mixed
     */
    public function getBuildings()
    {
        return $this->container['buildings'];
    }

    /**
     * Sets buildings
     *
     * @param mixed $buildings buildings
     *
     * @return self
     */
    public function setBuildings($buildings)
    {
        if (is_null($buildings)) {
            array_push($this->openAPINullablesSetToNull, 'buildings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buildings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buildings'] = $buildings;

        return $this;
    }

    /**
     * Gets units
     *
     * @return mixed
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param mixed $units units
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            array_push($this->openAPINullablesSetToNull, 'units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('units', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets staircases
     *
     * @return mixed
     */
    public function getStaircases()
    {
        return $this->container['staircases'];
    }

    /**
     * Sets staircases
     *
     * @param mixed $staircases staircases
     *
     * @return self
     */
    public function setStaircases($staircases)
    {
        if (is_null($staircases)) {
            array_push($this->openAPINullablesSetToNull, 'staircases');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staircases', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['staircases'] = $staircases;

        return $this;
    }

    /**
     * Gets floors
     *
     * @return mixed
     */
    public function getFloors()
    {
        return $this->container['floors'];
    }

    /**
     * Sets floors
     *
     * @param mixed $floors floors
     *
     * @return self
     */
    public function setFloors($floors)
    {
        if (is_null($floors)) {
            array_push($this->openAPINullablesSetToNull, 'floors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('floors', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['floors'] = $floors;

        return $this;
    }

    /**
     * Gets technical_installations
     *
     * @return mixed
     */
    public function getTechnicalInstallations()
    {
        return $this->container['technical_installations'];
    }

    /**
     * Sets technical_installations
     *
     * @param mixed $technical_installations technical_installations
     *
     * @return self
     */
    public function setTechnicalInstallations($technical_installations)
    {
        if (is_null($technical_installations)) {
            array_push($this->openAPINullablesSetToNull, 'technical_installations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('technical_installations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['technical_installations'] = $technical_installations;

        return $this;
    }

    /**
     * Gets case_levels
     *
     * @return mixed
     */
    public function getCaseLevels()
    {
        return $this->container['case_levels'];
    }

    /**
     * Sets case_levels
     *
     * @param mixed $case_levels case_levels
     *
     * @return self
     */
    public function setCaseLevels($case_levels)
    {
        if (is_null($case_levels)) {
            array_push($this->openAPINullablesSetToNull, 'case_levels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('case_levels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['case_levels'] = $case_levels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


