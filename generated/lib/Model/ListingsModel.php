<?php
/**
 * ListingsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ListingsModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListingsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListingsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pk' => 'mixed',
        'id' => 'mixed',
        'source' => 'mixed',
        'updated_at' => 'mixed',
        'deleted_at' => 'mixed',
        'href' => 'mixed',
        'title' => 'mixed',
        'description' => 'mixed',
        'unit_type_name' => '\OpenAPI\Client\Model\ListingsUnitTypeEnum',
        'unit_type_id' => 'mixed',
        'owners' => 'mixed',
        'address' => '\OpenAPI\Client\Model\BoligsidenAddress',
        'price' => 'mixed',
        'area_price' => 'mixed',
        'price_change' => 'mixed',
        'price_change_percentage' => 'mixed',
        'monthly_expense' => 'mixed',
        'down_payment' => 'mixed',
        'gross_mortgage' => 'mixed',
        'net_mortgage' => 'mixed',
        'floors' => 'mixed',
        'rooms' => 'mixed',
        'area' => 'mixed',
        'weighted_area' => 'mixed',
        'lot_area' => 'mixed',
        'days_on_market' => 'mixed',
        'energy_label' => 'mixed',
        'status' => 'mixed',
        'year_built' => 'mixed',
        'lon' => 'mixed',
        'lat' => 'mixed',
        'coordinate' => '\OpenAPI\Client\Model\ResightsCoreModelsListingsListingsElasticSearchCoordinateModel',
        'page_views' => 'mixed',
        'click_count' => 'mixed',
        'favourites' => 'mixed',
        'realtor' => '\OpenAPI\Client\Model\Realtor'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pk' => null,
        'id' => null,
        'source' => null,
        'updated_at' => 'date-time',
        'deleted_at' => 'date-time',
        'href' => null,
        'title' => null,
        'description' => null,
        'unit_type_name' => null,
        'unit_type_id' => null,
        'owners' => null,
        'address' => null,
        'price' => null,
        'area_price' => null,
        'price_change' => null,
        'price_change_percentage' => null,
        'monthly_expense' => null,
        'down_payment' => null,
        'gross_mortgage' => null,
        'net_mortgage' => null,
        'floors' => null,
        'rooms' => null,
        'area' => null,
        'weighted_area' => null,
        'lot_area' => null,
        'days_on_market' => null,
        'energy_label' => null,
        'status' => null,
        'year_built' => null,
        'lon' => null,
        'lat' => null,
        'coordinate' => null,
        'page_views' => null,
        'click_count' => null,
        'favourites' => null,
        'realtor' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pk' => true,
		'id' => true,
		'source' => true,
		'updated_at' => true,
		'deleted_at' => true,
		'href' => true,
		'title' => true,
		'description' => true,
		'unit_type_name' => false,
		'unit_type_id' => true,
		'owners' => true,
		'address' => false,
		'price' => true,
		'area_price' => true,
		'price_change' => true,
		'price_change_percentage' => true,
		'monthly_expense' => true,
		'down_payment' => true,
		'gross_mortgage' => true,
		'net_mortgage' => true,
		'floors' => true,
		'rooms' => true,
		'area' => true,
		'weighted_area' => true,
		'lot_area' => true,
		'days_on_market' => true,
		'energy_label' => true,
		'status' => true,
		'year_built' => true,
		'lon' => true,
		'lat' => true,
		'coordinate' => false,
		'page_views' => true,
		'click_count' => true,
		'favourites' => true,
		'realtor' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pk' => 'pk',
        'id' => 'id',
        'source' => 'source',
        'updated_at' => 'updated_at',
        'deleted_at' => 'deleted_at',
        'href' => 'href',
        'title' => 'title',
        'description' => 'description',
        'unit_type_name' => 'unit_type_name',
        'unit_type_id' => 'unit_type_id',
        'owners' => 'owners',
        'address' => 'address',
        'price' => 'price',
        'area_price' => 'area_price',
        'price_change' => 'price_change',
        'price_change_percentage' => 'price_change_percentage',
        'monthly_expense' => 'monthly_expense',
        'down_payment' => 'down_payment',
        'gross_mortgage' => 'gross_mortgage',
        'net_mortgage' => 'net_mortgage',
        'floors' => 'floors',
        'rooms' => 'rooms',
        'area' => 'area',
        'weighted_area' => 'weighted_area',
        'lot_area' => 'lot_area',
        'days_on_market' => 'days_on_market',
        'energy_label' => 'energy_label',
        'status' => 'status',
        'year_built' => 'year_built',
        'lon' => 'lon',
        'lat' => 'lat',
        'coordinate' => 'coordinate',
        'page_views' => 'page_views',
        'click_count' => 'click_count',
        'favourites' => 'favourites',
        'realtor' => 'realtor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pk' => 'setPk',
        'id' => 'setId',
        'source' => 'setSource',
        'updated_at' => 'setUpdatedAt',
        'deleted_at' => 'setDeletedAt',
        'href' => 'setHref',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'unit_type_name' => 'setUnitTypeName',
        'unit_type_id' => 'setUnitTypeId',
        'owners' => 'setOwners',
        'address' => 'setAddress',
        'price' => 'setPrice',
        'area_price' => 'setAreaPrice',
        'price_change' => 'setPriceChange',
        'price_change_percentage' => 'setPriceChangePercentage',
        'monthly_expense' => 'setMonthlyExpense',
        'down_payment' => 'setDownPayment',
        'gross_mortgage' => 'setGrossMortgage',
        'net_mortgage' => 'setNetMortgage',
        'floors' => 'setFloors',
        'rooms' => 'setRooms',
        'area' => 'setArea',
        'weighted_area' => 'setWeightedArea',
        'lot_area' => 'setLotArea',
        'days_on_market' => 'setDaysOnMarket',
        'energy_label' => 'setEnergyLabel',
        'status' => 'setStatus',
        'year_built' => 'setYearBuilt',
        'lon' => 'setLon',
        'lat' => 'setLat',
        'coordinate' => 'setCoordinate',
        'page_views' => 'setPageViews',
        'click_count' => 'setClickCount',
        'favourites' => 'setFavourites',
        'realtor' => 'setRealtor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pk' => 'getPk',
        'id' => 'getId',
        'source' => 'getSource',
        'updated_at' => 'getUpdatedAt',
        'deleted_at' => 'getDeletedAt',
        'href' => 'getHref',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'unit_type_name' => 'getUnitTypeName',
        'unit_type_id' => 'getUnitTypeId',
        'owners' => 'getOwners',
        'address' => 'getAddress',
        'price' => 'getPrice',
        'area_price' => 'getAreaPrice',
        'price_change' => 'getPriceChange',
        'price_change_percentage' => 'getPriceChangePercentage',
        'monthly_expense' => 'getMonthlyExpense',
        'down_payment' => 'getDownPayment',
        'gross_mortgage' => 'getGrossMortgage',
        'net_mortgage' => 'getNetMortgage',
        'floors' => 'getFloors',
        'rooms' => 'getRooms',
        'area' => 'getArea',
        'weighted_area' => 'getWeightedArea',
        'lot_area' => 'getLotArea',
        'days_on_market' => 'getDaysOnMarket',
        'energy_label' => 'getEnergyLabel',
        'status' => 'getStatus',
        'year_built' => 'getYearBuilt',
        'lon' => 'getLon',
        'lat' => 'getLat',
        'coordinate' => 'getCoordinate',
        'page_views' => 'getPageViews',
        'click_count' => 'getClickCount',
        'favourites' => 'getFavourites',
        'realtor' => 'getRealtor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pk', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('href', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('unit_type_name', $data ?? [], null);
        $this->setIfExists('unit_type_id', $data ?? [], null);
        $this->setIfExists('owners', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('area_price', $data ?? [], null);
        $this->setIfExists('price_change', $data ?? [], null);
        $this->setIfExists('price_change_percentage', $data ?? [], null);
        $this->setIfExists('monthly_expense', $data ?? [], null);
        $this->setIfExists('down_payment', $data ?? [], null);
        $this->setIfExists('gross_mortgage', $data ?? [], null);
        $this->setIfExists('net_mortgage', $data ?? [], null);
        $this->setIfExists('floors', $data ?? [], null);
        $this->setIfExists('rooms', $data ?? [], null);
        $this->setIfExists('area', $data ?? [], null);
        $this->setIfExists('weighted_area', $data ?? [], null);
        $this->setIfExists('lot_area', $data ?? [], null);
        $this->setIfExists('days_on_market', $data ?? [], null);
        $this->setIfExists('energy_label', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('year_built', $data ?? [], null);
        $this->setIfExists('lon', $data ?? [], null);
        $this->setIfExists('lat', $data ?? [], null);
        $this->setIfExists('coordinate', $data ?? [], null);
        $this->setIfExists('page_views', $data ?? [], null);
        $this->setIfExists('click_count', $data ?? [], null);
        $this->setIfExists('favourites', $data ?? [], null);
        $this->setIfExists('realtor', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pk'] === null) {
            $invalidProperties[] = "'pk' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['unit_type_name'] === null) {
            $invalidProperties[] = "'unit_type_name' can't be null";
        }
        if ($this->container['unit_type_id'] === null) {
            $invalidProperties[] = "'unit_type_id' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['price_change'] === null) {
            $invalidProperties[] = "'price_change' can't be null";
        }
        if ($this->container['price_change_percentage'] === null) {
            $invalidProperties[] = "'price_change_percentage' can't be null";
        }
        if ($this->container['monthly_expense'] === null) {
            $invalidProperties[] = "'monthly_expense' can't be null";
        }
        if ($this->container['days_on_market'] === null) {
            $invalidProperties[] = "'days_on_market' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['lon'] === null) {
            $invalidProperties[] = "'lon' can't be null";
        }
        if ($this->container['lat'] === null) {
            $invalidProperties[] = "'lat' can't be null";
        }
        if ($this->container['coordinate'] === null) {
            $invalidProperties[] = "'coordinate' can't be null";
        }
        if ($this->container['page_views'] === null) {
            $invalidProperties[] = "'page_views' can't be null";
        }
        if ($this->container['click_count'] === null) {
            $invalidProperties[] = "'click_count' can't be null";
        }
        if ($this->container['favourites'] === null) {
            $invalidProperties[] = "'favourites' can't be null";
        }
        if ($this->container['realtor'] === null) {
            $invalidProperties[] = "'realtor' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pk
     *
     * @return mixed
     */
    public function getPk()
    {
        return $this->container['pk'];
    }

    /**
     * Sets pk
     *
     * @param mixed $pk pk
     *
     * @return self
     */
    public function setPk($pk)
    {
        if (is_null($pk)) {
            array_push($this->openAPINullablesSetToNull, 'pk');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pk', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pk'] = $pk;

        return $this;
    }

    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return mixed
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param mixed $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            array_push($this->openAPINullablesSetToNull, 'source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return mixed|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param mixed|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return mixed|null
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param mixed|null $deleted_at deleted_at
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {
        if (is_null($deleted_at)) {
            array_push($this->openAPINullablesSetToNull, 'deleted_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets href
     *
     * @return mixed|null
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param mixed|null $href href
     *
     * @return self
     */
    public function setHref($href)
    {
        if (is_null($href)) {
            array_push($this->openAPINullablesSetToNull, 'href');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('href', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets title
     *
     * @return mixed|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param mixed|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return mixed|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param mixed|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets unit_type_name
     *
     * @return \OpenAPI\Client\Model\ListingsUnitTypeEnum
     */
    public function getUnitTypeName()
    {
        return $this->container['unit_type_name'];
    }

    /**
     * Sets unit_type_name
     *
     * @param \OpenAPI\Client\Model\ListingsUnitTypeEnum $unit_type_name unit_type_name
     *
     * @return self
     */
    public function setUnitTypeName($unit_type_name)
    {
        if (is_null($unit_type_name)) {
            throw new \InvalidArgumentException('non-nullable unit_type_name cannot be null');
        }
        $this->container['unit_type_name'] = $unit_type_name;

        return $this;
    }

    /**
     * Gets unit_type_id
     *
     * @return mixed
     */
    public function getUnitTypeId()
    {
        return $this->container['unit_type_id'];
    }

    /**
     * Sets unit_type_id
     *
     * @param mixed $unit_type_id unit_type_id
     *
     * @return self
     */
    public function setUnitTypeId($unit_type_id)
    {
        if (is_null($unit_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'unit_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_type_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_type_id'] = $unit_type_id;

        return $this;
    }

    /**
     * Gets owners
     *
     * @return mixed|null
     */
    public function getOwners()
    {
        return $this->container['owners'];
    }

    /**
     * Sets owners
     *
     * @param mixed|null $owners owners
     *
     * @return self
     */
    public function setOwners($owners)
    {
        if (is_null($owners)) {
            array_push($this->openAPINullablesSetToNull, 'owners');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('owners', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['owners'] = $owners;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\BoligsidenAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\BoligsidenAddress $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets price
     *
     * @return mixed
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param mixed $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            array_push($this->openAPINullablesSetToNull, 'price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets area_price
     *
     * @return mixed|null
     */
    public function getAreaPrice()
    {
        return $this->container['area_price'];
    }

    /**
     * Sets area_price
     *
     * @param mixed|null $area_price area_price
     *
     * @return self
     */
    public function setAreaPrice($area_price)
    {
        if (is_null($area_price)) {
            array_push($this->openAPINullablesSetToNull, 'area_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('area_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['area_price'] = $area_price;

        return $this;
    }

    /**
     * Gets price_change
     *
     * @return mixed
     */
    public function getPriceChange()
    {
        return $this->container['price_change'];
    }

    /**
     * Sets price_change
     *
     * @param mixed $price_change price_change
     *
     * @return self
     */
    public function setPriceChange($price_change)
    {
        if (is_null($price_change)) {
            array_push($this->openAPINullablesSetToNull, 'price_change');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_change', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_change'] = $price_change;

        return $this;
    }

    /**
     * Gets price_change_percentage
     *
     * @return mixed
     */
    public function getPriceChangePercentage()
    {
        return $this->container['price_change_percentage'];
    }

    /**
     * Sets price_change_percentage
     *
     * @param mixed $price_change_percentage price_change_percentage
     *
     * @return self
     */
    public function setPriceChangePercentage($price_change_percentage)
    {
        if (is_null($price_change_percentage)) {
            array_push($this->openAPINullablesSetToNull, 'price_change_percentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_change_percentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_change_percentage'] = $price_change_percentage;

        return $this;
    }

    /**
     * Gets monthly_expense
     *
     * @return mixed
     */
    public function getMonthlyExpense()
    {
        return $this->container['monthly_expense'];
    }

    /**
     * Sets monthly_expense
     *
     * @param mixed $monthly_expense monthly_expense
     *
     * @return self
     */
    public function setMonthlyExpense($monthly_expense)
    {
        if (is_null($monthly_expense)) {
            array_push($this->openAPINullablesSetToNull, 'monthly_expense');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('monthly_expense', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['monthly_expense'] = $monthly_expense;

        return $this;
    }

    /**
     * Gets down_payment
     *
     * @return mixed|null
     */
    public function getDownPayment()
    {
        return $this->container['down_payment'];
    }

    /**
     * Sets down_payment
     *
     * @param mixed|null $down_payment down_payment
     *
     * @return self
     */
    public function setDownPayment($down_payment)
    {
        if (is_null($down_payment)) {
            array_push($this->openAPINullablesSetToNull, 'down_payment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('down_payment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['down_payment'] = $down_payment;

        return $this;
    }

    /**
     * Gets gross_mortgage
     *
     * @return mixed|null
     */
    public function getGrossMortgage()
    {
        return $this->container['gross_mortgage'];
    }

    /**
     * Sets gross_mortgage
     *
     * @param mixed|null $gross_mortgage gross_mortgage
     *
     * @return self
     */
    public function setGrossMortgage($gross_mortgage)
    {
        if (is_null($gross_mortgage)) {
            array_push($this->openAPINullablesSetToNull, 'gross_mortgage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gross_mortgage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gross_mortgage'] = $gross_mortgage;

        return $this;
    }

    /**
     * Gets net_mortgage
     *
     * @return mixed|null
     */
    public function getNetMortgage()
    {
        return $this->container['net_mortgage'];
    }

    /**
     * Sets net_mortgage
     *
     * @param mixed|null $net_mortgage net_mortgage
     *
     * @return self
     */
    public function setNetMortgage($net_mortgage)
    {
        if (is_null($net_mortgage)) {
            array_push($this->openAPINullablesSetToNull, 'net_mortgage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('net_mortgage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['net_mortgage'] = $net_mortgage;

        return $this;
    }

    /**
     * Gets floors
     *
     * @return mixed|null
     */
    public function getFloors()
    {
        return $this->container['floors'];
    }

    /**
     * Sets floors
     *
     * @param mixed|null $floors floors
     *
     * @return self
     */
    public function setFloors($floors)
    {
        if (is_null($floors)) {
            array_push($this->openAPINullablesSetToNull, 'floors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('floors', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['floors'] = $floors;

        return $this;
    }

    /**
     * Gets rooms
     *
     * @return mixed|null
     */
    public function getRooms()
    {
        return $this->container['rooms'];
    }

    /**
     * Sets rooms
     *
     * @param mixed|null $rooms rooms
     *
     * @return self
     */
    public function setRooms($rooms)
    {
        if (is_null($rooms)) {
            array_push($this->openAPINullablesSetToNull, 'rooms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rooms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rooms'] = $rooms;

        return $this;
    }

    /**
     * Gets area
     *
     * @return mixed|null
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param mixed|null $area area
     *
     * @return self
     */
    public function setArea($area)
    {
        if (is_null($area)) {
            array_push($this->openAPINullablesSetToNull, 'area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets weighted_area
     *
     * @return mixed|null
     */
    public function getWeightedArea()
    {
        return $this->container['weighted_area'];
    }

    /**
     * Sets weighted_area
     *
     * @param mixed|null $weighted_area weighted_area
     *
     * @return self
     */
    public function setWeightedArea($weighted_area)
    {
        if (is_null($weighted_area)) {
            array_push($this->openAPINullablesSetToNull, 'weighted_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weighted_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weighted_area'] = $weighted_area;

        return $this;
    }

    /**
     * Gets lot_area
     *
     * @return mixed|null
     */
    public function getLotArea()
    {
        return $this->container['lot_area'];
    }

    /**
     * Sets lot_area
     *
     * @param mixed|null $lot_area lot_area
     *
     * @return self
     */
    public function setLotArea($lot_area)
    {
        if (is_null($lot_area)) {
            array_push($this->openAPINullablesSetToNull, 'lot_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lot_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lot_area'] = $lot_area;

        return $this;
    }

    /**
     * Gets days_on_market
     *
     * @return mixed
     */
    public function getDaysOnMarket()
    {
        return $this->container['days_on_market'];
    }

    /**
     * Sets days_on_market
     *
     * @param mixed $days_on_market days_on_market
     *
     * @return self
     */
    public function setDaysOnMarket($days_on_market)
    {
        if (is_null($days_on_market)) {
            array_push($this->openAPINullablesSetToNull, 'days_on_market');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('days_on_market', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['days_on_market'] = $days_on_market;

        return $this;
    }

    /**
     * Gets energy_label
     *
     * @return mixed|null
     */
    public function getEnergyLabel()
    {
        return $this->container['energy_label'];
    }

    /**
     * Sets energy_label
     *
     * @param mixed|null $energy_label energy_label
     *
     * @return self
     */
    public function setEnergyLabel($energy_label)
    {
        if (is_null($energy_label)) {
            array_push($this->openAPINullablesSetToNull, 'energy_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('energy_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['energy_label'] = $energy_label;

        return $this;
    }

    /**
     * Gets status
     *
     * @return mixed
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param mixed $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets year_built
     *
     * @return mixed|null
     */
    public function getYearBuilt()
    {
        return $this->container['year_built'];
    }

    /**
     * Sets year_built
     *
     * @param mixed|null $year_built year_built
     *
     * @return self
     */
    public function setYearBuilt($year_built)
    {
        if (is_null($year_built)) {
            array_push($this->openAPINullablesSetToNull, 'year_built');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('year_built', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['year_built'] = $year_built;

        return $this;
    }

    /**
     * Gets lon
     *
     * @return mixed
     */
    public function getLon()
    {
        return $this->container['lon'];
    }

    /**
     * Sets lon
     *
     * @param mixed $lon lon
     *
     * @return self
     */
    public function setLon($lon)
    {
        if (is_null($lon)) {
            array_push($this->openAPINullablesSetToNull, 'lon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lon'] = $lon;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return mixed
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param mixed $lat lat
     *
     * @return self
     */
    public function setLat($lat)
    {
        if (is_null($lat)) {
            array_push($this->openAPINullablesSetToNull, 'lat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets coordinate
     *
     * @return \OpenAPI\Client\Model\ResightsCoreModelsListingsListingsElasticSearchCoordinateModel
     */
    public function getCoordinate()
    {
        return $this->container['coordinate'];
    }

    /**
     * Sets coordinate
     *
     * @param \OpenAPI\Client\Model\ResightsCoreModelsListingsListingsElasticSearchCoordinateModel $coordinate coordinate
     *
     * @return self
     */
    public function setCoordinate($coordinate)
    {
        if (is_null($coordinate)) {
            throw new \InvalidArgumentException('non-nullable coordinate cannot be null');
        }
        $this->container['coordinate'] = $coordinate;

        return $this;
    }

    /**
     * Gets page_views
     *
     * @return mixed
     */
    public function getPageViews()
    {
        return $this->container['page_views'];
    }

    /**
     * Sets page_views
     *
     * @param mixed $page_views page_views
     *
     * @return self
     */
    public function setPageViews($page_views)
    {
        if (is_null($page_views)) {
            array_push($this->openAPINullablesSetToNull, 'page_views');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('page_views', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['page_views'] = $page_views;

        return $this;
    }

    /**
     * Gets click_count
     *
     * @return mixed
     */
    public function getClickCount()
    {
        return $this->container['click_count'];
    }

    /**
     * Sets click_count
     *
     * @param mixed $click_count click_count
     *
     * @return self
     */
    public function setClickCount($click_count)
    {
        if (is_null($click_count)) {
            array_push($this->openAPINullablesSetToNull, 'click_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('click_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['click_count'] = $click_count;

        return $this;
    }

    /**
     * Gets favourites
     *
     * @return mixed
     */
    public function getFavourites()
    {
        return $this->container['favourites'];
    }

    /**
     * Sets favourites
     *
     * @param mixed $favourites favourites
     *
     * @return self
     */
    public function setFavourites($favourites)
    {
        if (is_null($favourites)) {
            array_push($this->openAPINullablesSetToNull, 'favourites');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('favourites', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['favourites'] = $favourites;

        return $this;
    }

    /**
     * Gets realtor
     *
     * @return \OpenAPI\Client\Model\Realtor
     */
    public function getRealtor()
    {
        return $this->container['realtor'];
    }

    /**
     * Sets realtor
     *
     * @param \OpenAPI\Client\Model\Realtor $realtor realtor
     *
     * @return self
     */
    public function setRealtor($realtor)
    {
        if (is_null($realtor)) {
            throw new \InvalidArgumentException('non-nullable realtor cannot be null');
        }
        $this->container['realtor'] = $realtor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


