<?php
/**
 * DomusProAssociationResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DomusProAssociationResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomusProAssociationResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DomusProAssociationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'association_id' => 'mixed',
        'external_id' => 'mixed',
        'cvr_number' => 'mixed',
        'see_other_identifier' => 'mixed',
        'name' => 'mixed',
        'search_name' => 'mixed',
        'website' => 'mixed',
        'notes' => 'mixed',
        'warnings' => 'mixed',
        'deleted' => 'mixed',
        'zip' => 'mixed',
        'city' => 'mixed',
        'construction_year' => 'mixed',
        'construction_year_not_verified' => 'mixed',
        'established_year' => 'mixed',
        'established_year_not_verified' => 'mixed',
        'accountant_type_id' => 'mixed',
        'accountant_type_name' => 'mixed',
        'administrator_type_id' => 'mixed',
        'administrator_type_name' => 'mixed',
        'degree_published' => 'mixed',
        'latest_update' => 'mixed',
        'accountant' => '\OpenAPI\Client\Model\DomusProAccountantModel',
        'administrator' => '\OpenAPI\Client\Model\DomusProAdministratorModel',
        'fiscal_year' => '\OpenAPI\Client\Model\DomusProFiscalYearModel',
        'fiscal_year_end_date' => 'mixed',
        'annual_reports' => 'mixed',
        'documents' => 'mixed',
        'budgets' => 'mixed',
        'renovation_plans' => 'mixed',
        'properties' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'association_id' => null,
        'external_id' => null,
        'cvr_number' => null,
        'see_other_identifier' => null,
        'name' => null,
        'search_name' => null,
        'website' => null,
        'notes' => null,
        'warnings' => null,
        'deleted' => null,
        'zip' => null,
        'city' => null,
        'construction_year' => null,
        'construction_year_not_verified' => null,
        'established_year' => null,
        'established_year_not_verified' => null,
        'accountant_type_id' => null,
        'accountant_type_name' => null,
        'administrator_type_id' => null,
        'administrator_type_name' => null,
        'degree_published' => null,
        'latest_update' => 'date-time',
        'accountant' => null,
        'administrator' => null,
        'fiscal_year' => null,
        'fiscal_year_end_date' => 'date',
        'annual_reports' => null,
        'documents' => null,
        'budgets' => null,
        'renovation_plans' => null,
        'properties' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'association_id' => true,
		'external_id' => true,
		'cvr_number' => true,
		'see_other_identifier' => true,
		'name' => true,
		'search_name' => true,
		'website' => true,
		'notes' => true,
		'warnings' => true,
		'deleted' => true,
		'zip' => true,
		'city' => true,
		'construction_year' => true,
		'construction_year_not_verified' => true,
		'established_year' => true,
		'established_year_not_verified' => true,
		'accountant_type_id' => true,
		'accountant_type_name' => true,
		'administrator_type_id' => true,
		'administrator_type_name' => true,
		'degree_published' => true,
		'latest_update' => true,
		'accountant' => false,
		'administrator' => false,
		'fiscal_year' => false,
		'fiscal_year_end_date' => true,
		'annual_reports' => true,
		'documents' => true,
		'budgets' => true,
		'renovation_plans' => true,
		'properties' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'association_id' => 'associationId',
        'external_id' => 'externalId',
        'cvr_number' => 'cvrNumber',
        'see_other_identifier' => 'seeOtherIdentifier',
        'name' => 'name',
        'search_name' => 'searchName',
        'website' => 'website',
        'notes' => 'notes',
        'warnings' => 'warnings',
        'deleted' => 'deleted',
        'zip' => 'zip',
        'city' => 'city',
        'construction_year' => 'constructionYear',
        'construction_year_not_verified' => 'constructionYearNotVerified',
        'established_year' => 'establishedYear',
        'established_year_not_verified' => 'establishedYearNotVerified',
        'accountant_type_id' => 'accountantTypeId',
        'accountant_type_name' => 'accountantTypeName',
        'administrator_type_id' => 'administratorTypeId',
        'administrator_type_name' => 'administratorTypeName',
        'degree_published' => 'degreePublished',
        'latest_update' => 'latestUpdate',
        'accountant' => 'accountant',
        'administrator' => 'administrator',
        'fiscal_year' => 'fiscalYear',
        'fiscal_year_end_date' => 'fiscalYearEndDate',
        'annual_reports' => 'annualReports',
        'documents' => 'documents',
        'budgets' => 'budgets',
        'renovation_plans' => 'renovationPlans',
        'properties' => 'properties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'association_id' => 'setAssociationId',
        'external_id' => 'setExternalId',
        'cvr_number' => 'setCvrNumber',
        'see_other_identifier' => 'setSeeOtherIdentifier',
        'name' => 'setName',
        'search_name' => 'setSearchName',
        'website' => 'setWebsite',
        'notes' => 'setNotes',
        'warnings' => 'setWarnings',
        'deleted' => 'setDeleted',
        'zip' => 'setZip',
        'city' => 'setCity',
        'construction_year' => 'setConstructionYear',
        'construction_year_not_verified' => 'setConstructionYearNotVerified',
        'established_year' => 'setEstablishedYear',
        'established_year_not_verified' => 'setEstablishedYearNotVerified',
        'accountant_type_id' => 'setAccountantTypeId',
        'accountant_type_name' => 'setAccountantTypeName',
        'administrator_type_id' => 'setAdministratorTypeId',
        'administrator_type_name' => 'setAdministratorTypeName',
        'degree_published' => 'setDegreePublished',
        'latest_update' => 'setLatestUpdate',
        'accountant' => 'setAccountant',
        'administrator' => 'setAdministrator',
        'fiscal_year' => 'setFiscalYear',
        'fiscal_year_end_date' => 'setFiscalYearEndDate',
        'annual_reports' => 'setAnnualReports',
        'documents' => 'setDocuments',
        'budgets' => 'setBudgets',
        'renovation_plans' => 'setRenovationPlans',
        'properties' => 'setProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'association_id' => 'getAssociationId',
        'external_id' => 'getExternalId',
        'cvr_number' => 'getCvrNumber',
        'see_other_identifier' => 'getSeeOtherIdentifier',
        'name' => 'getName',
        'search_name' => 'getSearchName',
        'website' => 'getWebsite',
        'notes' => 'getNotes',
        'warnings' => 'getWarnings',
        'deleted' => 'getDeleted',
        'zip' => 'getZip',
        'city' => 'getCity',
        'construction_year' => 'getConstructionYear',
        'construction_year_not_verified' => 'getConstructionYearNotVerified',
        'established_year' => 'getEstablishedYear',
        'established_year_not_verified' => 'getEstablishedYearNotVerified',
        'accountant_type_id' => 'getAccountantTypeId',
        'accountant_type_name' => 'getAccountantTypeName',
        'administrator_type_id' => 'getAdministratorTypeId',
        'administrator_type_name' => 'getAdministratorTypeName',
        'degree_published' => 'getDegreePublished',
        'latest_update' => 'getLatestUpdate',
        'accountant' => 'getAccountant',
        'administrator' => 'getAdministrator',
        'fiscal_year' => 'getFiscalYear',
        'fiscal_year_end_date' => 'getFiscalYearEndDate',
        'annual_reports' => 'getAnnualReports',
        'documents' => 'getDocuments',
        'budgets' => 'getBudgets',
        'renovation_plans' => 'getRenovationPlans',
        'properties' => 'getProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('association_id', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('cvr_number', $data ?? [], null);
        $this->setIfExists('see_other_identifier', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('search_name', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('construction_year', $data ?? [], null);
        $this->setIfExists('construction_year_not_verified', $data ?? [], null);
        $this->setIfExists('established_year', $data ?? [], null);
        $this->setIfExists('established_year_not_verified', $data ?? [], null);
        $this->setIfExists('accountant_type_id', $data ?? [], null);
        $this->setIfExists('accountant_type_name', $data ?? [], null);
        $this->setIfExists('administrator_type_id', $data ?? [], null);
        $this->setIfExists('administrator_type_name', $data ?? [], null);
        $this->setIfExists('degree_published', $data ?? [], null);
        $this->setIfExists('latest_update', $data ?? [], null);
        $this->setIfExists('accountant', $data ?? [], null);
        $this->setIfExists('administrator', $data ?? [], null);
        $this->setIfExists('fiscal_year', $data ?? [], null);
        $this->setIfExists('fiscal_year_end_date', $data ?? [], null);
        $this->setIfExists('annual_reports', $data ?? [], null);
        $this->setIfExists('documents', $data ?? [], null);
        $this->setIfExists('budgets', $data ?? [], null);
        $this->setIfExists('renovation_plans', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['association_id'] === null) {
            $invalidProperties[] = "'association_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['search_name'] === null) {
            $invalidProperties[] = "'search_name' can't be null";
        }
        if ($this->container['zip'] === null) {
            $invalidProperties[] = "'zip' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['construction_year_not_verified'] === null) {
            $invalidProperties[] = "'construction_year_not_verified' can't be null";
        }
        if ($this->container['established_year_not_verified'] === null) {
            $invalidProperties[] = "'established_year_not_verified' can't be null";
        }
        if ($this->container['degree_published'] === null) {
            $invalidProperties[] = "'degree_published' can't be null";
        }
        if ($this->container['latest_update'] === null) {
            $invalidProperties[] = "'latest_update' can't be null";
        }
        if ($this->container['fiscal_year'] === null) {
            $invalidProperties[] = "'fiscal_year' can't be null";
        }
        if ($this->container['annual_reports'] === null) {
            $invalidProperties[] = "'annual_reports' can't be null";
        }
        if ($this->container['documents'] === null) {
            $invalidProperties[] = "'documents' can't be null";
        }
        if ($this->container['budgets'] === null) {
            $invalidProperties[] = "'budgets' can't be null";
        }
        if ($this->container['renovation_plans'] === null) {
            $invalidProperties[] = "'renovation_plans' can't be null";
        }
        if ($this->container['properties'] === null) {
            $invalidProperties[] = "'properties' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets association_id
     *
     * @return mixed
     */
    public function getAssociationId()
    {
        return $this->container['association_id'];
    }

    /**
     * Sets association_id
     *
     * @param mixed $association_id Unique identifier
     *
     * @return self
     */
    public function setAssociationId($association_id)
    {
        if (is_null($association_id)) {
            array_push($this->openAPINullablesSetToNull, 'association_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('association_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['association_id'] = $association_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return mixed|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param mixed|null $external_id External id of the association. This ID will be dependant on who is calling the webservice
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets cvr_number
     *
     * @return mixed|null
     */
    public function getCvrNumber()
    {
        return $this->container['cvr_number'];
    }

    /**
     * Sets cvr_number
     *
     * @param mixed|null $cvr_number CVR number
     *
     * @return self
     */
    public function setCvrNumber($cvr_number)
    {
        if (is_null($cvr_number)) {
            array_push($this->openAPINullablesSetToNull, 'cvr_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cvr_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cvr_number'] = $cvr_number;

        return $this;
    }

    /**
     * Gets see_other_identifier
     *
     * @return mixed|null
     */
    public function getSeeOtherIdentifier()
    {
        return $this->container['see_other_identifier'];
    }

    /**
     * Sets see_other_identifier
     *
     * @param mixed|null $see_other_identifier If the association record is superceded by another record, this field contains the reference to the new identifier
     *
     * @return self
     */
    public function setSeeOtherIdentifier($see_other_identifier)
    {
        if (is_null($see_other_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'see_other_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('see_other_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['see_other_identifier'] = $see_other_identifier;

        return $this;
    }

    /**
     * Gets name
     *
     * @return mixed
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param mixed $name Name of the association
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets search_name
     *
     * @return mixed
     */
    public function getSearchName()
    {
        return $this->container['search_name'];
    }

    /**
     * Sets search_name
     *
     * @param mixed $search_name search_name
     *
     * @return self
     */
    public function setSearchName($search_name)
    {
        if (is_null($search_name)) {
            array_push($this->openAPINullablesSetToNull, 'search_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('search_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['search_name'] = $search_name;

        return $this;
    }

    /**
     * Gets website
     *
     * @return mixed|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param mixed|null $website Link to website of the association
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            array_push($this->openAPINullablesSetToNull, 'website');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('website', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return mixed|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param mixed|null $notes Notes regarding this association
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            array_push($this->openAPINullablesSetToNull, 'notes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return mixed|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param mixed|null $warnings Warnings about the association
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            array_push($this->openAPINullablesSetToNull, 'warnings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warnings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return mixed|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param mixed|null $deleted Indicates if this association is deleted.
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            array_push($this->openAPINullablesSetToNull, 'deleted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return mixed
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param mixed $zip Zip code, if association spans across several zip codes, this will contain the lowest one.
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            array_push($this->openAPINullablesSetToNull, 'zip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets city
     *
     * @return mixed
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param mixed $city City. The city of the zip. If the association spans several zip codes, this will be the name of the city with thelowest zip.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            array_push($this->openAPINullablesSetToNull, 'city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets construction_year
     *
     * @return mixed|null
     */
    public function getConstructionYear()
    {
        return $this->container['construction_year'];
    }

    /**
     * Sets construction_year
     *
     * @param mixed|null $construction_year Year of construction
     *
     * @return self
     */
    public function setConstructionYear($construction_year)
    {
        if (is_null($construction_year)) {
            array_push($this->openAPINullablesSetToNull, 'construction_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('construction_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['construction_year'] = $construction_year;

        return $this;
    }

    /**
     * Gets construction_year_not_verified
     *
     * @return mixed
     */
    public function getConstructionYearNotVerified()
    {
        return $this->container['construction_year_not_verified'];
    }

    /**
     * Sets construction_year_not_verified
     *
     * @param mixed $construction_year_not_verified Indicates whether the construction year is verified or not
     *
     * @return self
     */
    public function setConstructionYearNotVerified($construction_year_not_verified)
    {
        if (is_null($construction_year_not_verified)) {
            array_push($this->openAPINullablesSetToNull, 'construction_year_not_verified');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('construction_year_not_verified', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['construction_year_not_verified'] = $construction_year_not_verified;

        return $this;
    }

    /**
     * Gets established_year
     *
     * @return mixed|null
     */
    public function getEstablishedYear()
    {
        return $this->container['established_year'];
    }

    /**
     * Sets established_year
     *
     * @param mixed|null $established_year The year the association is established
     *
     * @return self
     */
    public function setEstablishedYear($established_year)
    {
        if (is_null($established_year)) {
            array_push($this->openAPINullablesSetToNull, 'established_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('established_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['established_year'] = $established_year;

        return $this;
    }

    /**
     * Gets established_year_not_verified
     *
     * @return mixed
     */
    public function getEstablishedYearNotVerified()
    {
        return $this->container['established_year_not_verified'];
    }

    /**
     * Sets established_year_not_verified
     *
     * @param mixed $established_year_not_verified Indicates whether the establishment year is verified or not
     *
     * @return self
     */
    public function setEstablishedYearNotVerified($established_year_not_verified)
    {
        if (is_null($established_year_not_verified)) {
            array_push($this->openAPINullablesSetToNull, 'established_year_not_verified');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('established_year_not_verified', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['established_year_not_verified'] = $established_year_not_verified;

        return $this;
    }

    /**
     * Gets accountant_type_id
     *
     * @return mixed|null
     */
    public function getAccountantTypeId()
    {
        return $this->container['accountant_type_id'];
    }

    /**
     * Sets accountant_type_id
     *
     * @param mixed|null $accountant_type_id Identifier of the accountant type. Even though the labels for accountant type might change, the ID should be constant.
     *
     * @return self
     */
    public function setAccountantTypeId($accountant_type_id)
    {
        if (is_null($accountant_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'accountant_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountant_type_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accountant_type_id'] = $accountant_type_id;

        return $this;
    }

    /**
     * Gets accountant_type_name
     *
     * @return mixed|null
     */
    public function getAccountantTypeName()
    {
        return $this->container['accountant_type_name'];
    }

    /**
     * Sets accountant_type_name
     *
     * @param mixed|null $accountant_type_name Name of the accountant type
     *
     * @return self
     */
    public function setAccountantTypeName($accountant_type_name)
    {
        if (is_null($accountant_type_name)) {
            array_push($this->openAPINullablesSetToNull, 'accountant_type_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountant_type_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accountant_type_name'] = $accountant_type_name;

        return $this;
    }

    /**
     * Gets administrator_type_id
     *
     * @return mixed|null
     */
    public function getAdministratorTypeId()
    {
        return $this->container['administrator_type_id'];
    }

    /**
     * Sets administrator_type_id
     *
     * @param mixed|null $administrator_type_id Identifier of the administrator type. Even though the labels for administrator type might change, the ID should be constant.
     *
     * @return self
     */
    public function setAdministratorTypeId($administrator_type_id)
    {
        if (is_null($administrator_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'administrator_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('administrator_type_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['administrator_type_id'] = $administrator_type_id;

        return $this;
    }

    /**
     * Gets administrator_type_name
     *
     * @return mixed|null
     */
    public function getAdministratorTypeName()
    {
        return $this->container['administrator_type_name'];
    }

    /**
     * Sets administrator_type_name
     *
     * @param mixed|null $administrator_type_name Name of the administrator type
     *
     * @return self
     */
    public function setAdministratorTypeName($administrator_type_name)
    {
        if (is_null($administrator_type_name)) {
            array_push($this->openAPINullablesSetToNull, 'administrator_type_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('administrator_type_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['administrator_type_name'] = $administrator_type_name;

        return $this;
    }

    /**
     * Gets degree_published
     *
     * @return mixed
     */
    public function getDegreePublished()
    {
        return $this->container['degree_published'];
    }

    /**
     * Sets degree_published
     *
     * @param mixed $degree_published Publication degree. Determines the validity of the data. Higher is better.
     *
     * @return self
     */
    public function setDegreePublished($degree_published)
    {
        if (is_null($degree_published)) {
            array_push($this->openAPINullablesSetToNull, 'degree_published');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('degree_published', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['degree_published'] = $degree_published;

        return $this;
    }

    /**
     * Gets latest_update
     *
     * @return mixed
     */
    public function getLatestUpdate()
    {
        return $this->container['latest_update'];
    }

    /**
     * Sets latest_update
     *
     * @param mixed $latest_update Time of the latest update
     *
     * @return self
     */
    public function setLatestUpdate($latest_update)
    {
        if (is_null($latest_update)) {
            array_push($this->openAPINullablesSetToNull, 'latest_update');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('latest_update', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['latest_update'] = $latest_update;

        return $this;
    }

    /**
     * Gets accountant
     *
     * @return \OpenAPI\Client\Model\DomusProAccountantModel|null
     */
    public function getAccountant()
    {
        return $this->container['accountant'];
    }

    /**
     * Sets accountant
     *
     * @param \OpenAPI\Client\Model\DomusProAccountantModel|null $accountant accountant
     *
     * @return self
     */
    public function setAccountant($accountant)
    {
        if (is_null($accountant)) {
            throw new \InvalidArgumentException('non-nullable accountant cannot be null');
        }
        $this->container['accountant'] = $accountant;

        return $this;
    }

    /**
     * Gets administrator
     *
     * @return \OpenAPI\Client\Model\DomusProAdministratorModel|null
     */
    public function getAdministrator()
    {
        return $this->container['administrator'];
    }

    /**
     * Sets administrator
     *
     * @param \OpenAPI\Client\Model\DomusProAdministratorModel|null $administrator administrator
     *
     * @return self
     */
    public function setAdministrator($administrator)
    {
        if (is_null($administrator)) {
            throw new \InvalidArgumentException('non-nullable administrator cannot be null');
        }
        $this->container['administrator'] = $administrator;

        return $this;
    }

    /**
     * Gets fiscal_year
     *
     * @return \OpenAPI\Client\Model\DomusProFiscalYearModel
     */
    public function getFiscalYear()
    {
        return $this->container['fiscal_year'];
    }

    /**
     * Sets fiscal_year
     *
     * @param \OpenAPI\Client\Model\DomusProFiscalYearModel $fiscal_year fiscal_year
     *
     * @return self
     */
    public function setFiscalYear($fiscal_year)
    {
        if (is_null($fiscal_year)) {
            throw new \InvalidArgumentException('non-nullable fiscal_year cannot be null');
        }
        $this->container['fiscal_year'] = $fiscal_year;

        return $this;
    }

    /**
     * Gets fiscal_year_end_date
     *
     * @return mixed|null
     */
    public function getFiscalYearEndDate()
    {
        return $this->container['fiscal_year_end_date'];
    }

    /**
     * Sets fiscal_year_end_date
     *
     * @param mixed|null $fiscal_year_end_date End date of the fiscalYear.
     *
     * @return self
     */
    public function setFiscalYearEndDate($fiscal_year_end_date)
    {
        if (is_null($fiscal_year_end_date)) {
            array_push($this->openAPINullablesSetToNull, 'fiscal_year_end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fiscal_year_end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fiscal_year_end_date'] = $fiscal_year_end_date;

        return $this;
    }

    /**
     * Gets annual_reports
     *
     * @return mixed
     */
    public function getAnnualReports()
    {
        return $this->container['annual_reports'];
    }

    /**
     * Sets annual_reports
     *
     * @param mixed $annual_reports Array of annual reports registered for the association
     *
     * @return self
     */
    public function setAnnualReports($annual_reports)
    {
        if (is_null($annual_reports)) {
            array_push($this->openAPINullablesSetToNull, 'annual_reports');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annual_reports', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annual_reports'] = $annual_reports;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return mixed
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param mixed $documents documents
     *
     * @return self
     */
    public function setDocuments($documents)
    {
        if (is_null($documents)) {
            array_push($this->openAPINullablesSetToNull, 'documents');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('documents', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets budgets
     *
     * @return mixed
     */
    public function getBudgets()
    {
        return $this->container['budgets'];
    }

    /**
     * Sets budgets
     *
     * @param mixed $budgets Array of budgets registered for the association
     *
     * @return self
     */
    public function setBudgets($budgets)
    {
        if (is_null($budgets)) {
            array_push($this->openAPINullablesSetToNull, 'budgets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('budgets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['budgets'] = $budgets;

        return $this;
    }

    /**
     * Gets renovation_plans
     *
     * @return mixed
     */
    public function getRenovationPlans()
    {
        return $this->container['renovation_plans'];
    }

    /**
     * Sets renovation_plans
     *
     * @param mixed $renovation_plans Array of renovation plans for the association
     *
     * @return self
     */
    public function setRenovationPlans($renovation_plans)
    {
        if (is_null($renovation_plans)) {
            array_push($this->openAPINullablesSetToNull, 'renovation_plans');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('renovation_plans', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['renovation_plans'] = $renovation_plans;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return mixed
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param mixed $properties properties
     *
     * @return self
     */
    public function setProperties($properties)
    {
        if (is_null($properties)) {
            array_push($this->openAPINullablesSetToNull, 'properties');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('properties', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['properties'] = $properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


