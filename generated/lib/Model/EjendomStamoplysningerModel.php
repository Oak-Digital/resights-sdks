<?php
/**
 * EjendomStamoplysningerModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EjendomStamoplysningerModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EjendomStamoplysningerModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EjendomStamoplysningerModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'adresse' => '\OpenAPI\Client\Model\AdresseModel',
        'bestemt_fast_ejendom_nummer' => 'mixed',
        'hoved_notering' => '\OpenAPI\Client\Model\HovedNoteringEnum',
        'indskannet_akt_samling' => 'mixed',
        'vurdering_samling' => 'mixed',
        'tillaegstekst_samling' => 'mixed',
        'landbrugsnotering' => 'mixed',
        'matrikel_struktur_samling' => 'mixed',
        'fordelingtal' => '\OpenAPI\Client\Model\BroekModel',
        'notering_tekst_samling' => 'mixed',
        'umatrikuleretareal' => '\OpenAPI\Client\Model\UmatrikuleretArealModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'adresse' => null,
        'bestemt_fast_ejendom_nummer' => null,
        'hoved_notering' => null,
        'indskannet_akt_samling' => null,
        'vurdering_samling' => null,
        'tillaegstekst_samling' => null,
        'landbrugsnotering' => null,
        'matrikel_struktur_samling' => null,
        'fordelingtal' => null,
        'notering_tekst_samling' => null,
        'umatrikuleretareal' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'adresse' => false,
		'bestemt_fast_ejendom_nummer' => true,
		'hoved_notering' => false,
		'indskannet_akt_samling' => true,
		'vurdering_samling' => true,
		'tillaegstekst_samling' => true,
		'landbrugsnotering' => true,
		'matrikel_struktur_samling' => true,
		'fordelingtal' => false,
		'notering_tekst_samling' => true,
		'umatrikuleretareal' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adresse' => 'Adresse',
        'bestemt_fast_ejendom_nummer' => 'BestemtFastEjendomNummer',
        'hoved_notering' => 'HovedNotering',
        'indskannet_akt_samling' => 'IndskannetAktSamling',
        'vurdering_samling' => 'VurderingSamling',
        'tillaegstekst_samling' => 'TillaegstekstSamling',
        'landbrugsnotering' => 'Landbrugsnotering',
        'matrikel_struktur_samling' => 'MatrikelStrukturSamling',
        'fordelingtal' => 'Fordelingtal',
        'notering_tekst_samling' => 'NoteringTekstSamling',
        'umatrikuleretareal' => 'Umatrikuleretareal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adresse' => 'setAdresse',
        'bestemt_fast_ejendom_nummer' => 'setBestemtFastEjendomNummer',
        'hoved_notering' => 'setHovedNotering',
        'indskannet_akt_samling' => 'setIndskannetAktSamling',
        'vurdering_samling' => 'setVurderingSamling',
        'tillaegstekst_samling' => 'setTillaegstekstSamling',
        'landbrugsnotering' => 'setLandbrugsnotering',
        'matrikel_struktur_samling' => 'setMatrikelStrukturSamling',
        'fordelingtal' => 'setFordelingtal',
        'notering_tekst_samling' => 'setNoteringTekstSamling',
        'umatrikuleretareal' => 'setUmatrikuleretareal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adresse' => 'getAdresse',
        'bestemt_fast_ejendom_nummer' => 'getBestemtFastEjendomNummer',
        'hoved_notering' => 'getHovedNotering',
        'indskannet_akt_samling' => 'getIndskannetAktSamling',
        'vurdering_samling' => 'getVurderingSamling',
        'tillaegstekst_samling' => 'getTillaegstekstSamling',
        'landbrugsnotering' => 'getLandbrugsnotering',
        'matrikel_struktur_samling' => 'getMatrikelStrukturSamling',
        'fordelingtal' => 'getFordelingtal',
        'notering_tekst_samling' => 'getNoteringTekstSamling',
        'umatrikuleretareal' => 'getUmatrikuleretareal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('adresse', $data ?? [], null);
        $this->setIfExists('bestemt_fast_ejendom_nummer', $data ?? [], null);
        $this->setIfExists('hoved_notering', $data ?? [], null);
        $this->setIfExists('indskannet_akt_samling', $data ?? [], null);
        $this->setIfExists('vurdering_samling', $data ?? [], null);
        $this->setIfExists('tillaegstekst_samling', $data ?? [], null);
        $this->setIfExists('landbrugsnotering', $data ?? [], null);
        $this->setIfExists('matrikel_struktur_samling', $data ?? [], null);
        $this->setIfExists('fordelingtal', $data ?? [], null);
        $this->setIfExists('notering_tekst_samling', $data ?? [], null);
        $this->setIfExists('umatrikuleretareal', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adresse
     *
     * @return \OpenAPI\Client\Model\AdresseModel|null
     */
    public function getAdresse()
    {
        return $this->container['adresse'];
    }

    /**
     * Sets adresse
     *
     * @param \OpenAPI\Client\Model\AdresseModel|null $adresse adresse
     *
     * @return self
     */
    public function setAdresse($adresse)
    {
        if (is_null($adresse)) {
            throw new \InvalidArgumentException('non-nullable adresse cannot be null');
        }
        $this->container['adresse'] = $adresse;

        return $this;
    }

    /**
     * Gets bestemt_fast_ejendom_nummer
     *
     * @return mixed|null
     */
    public function getBestemtFastEjendomNummer()
    {
        return $this->container['bestemt_fast_ejendom_nummer'];
    }

    /**
     * Sets bestemt_fast_ejendom_nummer
     *
     * @param mixed|null $bestemt_fast_ejendom_nummer BestemtFastEjendomNummer
     *
     * @return self
     */
    public function setBestemtFastEjendomNummer($bestemt_fast_ejendom_nummer)
    {
        if (is_null($bestemt_fast_ejendom_nummer)) {
            array_push($this->openAPINullablesSetToNull, 'bestemt_fast_ejendom_nummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bestemt_fast_ejendom_nummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bestemt_fast_ejendom_nummer'] = $bestemt_fast_ejendom_nummer;

        return $this;
    }

    /**
     * Gets hoved_notering
     *
     * @return \OpenAPI\Client\Model\HovedNoteringEnum|null
     */
    public function getHovedNotering()
    {
        return $this->container['hoved_notering'];
    }

    /**
     * Sets hoved_notering
     *
     * @param \OpenAPI\Client\Model\HovedNoteringEnum|null $hoved_notering hoved_notering
     *
     * @return self
     */
    public function setHovedNotering($hoved_notering)
    {
        if (is_null($hoved_notering)) {
            throw new \InvalidArgumentException('non-nullable hoved_notering cannot be null');
        }
        $this->container['hoved_notering'] = $hoved_notering;

        return $this;
    }

    /**
     * Gets indskannet_akt_samling
     *
     * @return mixed|null
     */
    public function getIndskannetAktSamling()
    {
        return $this->container['indskannet_akt_samling'];
    }

    /**
     * Sets indskannet_akt_samling
     *
     * @param mixed|null $indskannet_akt_samling Samling af identifikatorer paa indskannede akter for en ejendom. Hver identifikator er filnavnet.
     *
     * @return self
     */
    public function setIndskannetAktSamling($indskannet_akt_samling)
    {
        if (is_null($indskannet_akt_samling)) {
            array_push($this->openAPINullablesSetToNull, 'indskannet_akt_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('indskannet_akt_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['indskannet_akt_samling'] = $indskannet_akt_samling;

        return $this;
    }

    /**
     * Gets vurdering_samling
     *
     * @return mixed|null
     */
    public function getVurderingSamling()
    {
        return $this->container['vurdering_samling'];
    }

    /**
     * Sets vurdering_samling
     *
     * @param mixed|null $vurdering_samling Der kan vÃ¦re mere end en ejendomsvurdering knyttet til en ejendom identificeret via EjendomIdentifikator. Dette sker i de situationer, hvor der for en EjendomIdentifikator eksisterer flere BBR numre. Der er en vurdering per BBR nummer (RealPropertyStructure).
     *
     * @return self
     */
    public function setVurderingSamling($vurdering_samling)
    {
        if (is_null($vurdering_samling)) {
            array_push($this->openAPINullablesSetToNull, 'vurdering_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vurdering_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vurdering_samling'] = $vurdering_samling;

        return $this;
    }

    /**
     * Gets tillaegstekst_samling
     *
     * @return mixed|null
     */
    public function getTillaegstekstSamling()
    {
        return $this->container['tillaegstekst_samling'];
    }

    /**
     * Sets tillaegstekst_samling
     *
     * @param mixed|null $tillaegstekst_samling Resulterende tekst fra Tinglysningsrettens behandling af sÃ¦rllige ekspeditionstyper af kategorien meddeleleser. Indholdet er relateret til den interne sagsportal.
     *
     * @return self
     */
    public function setTillaegstekstSamling($tillaegstekst_samling)
    {
        if (is_null($tillaegstekst_samling)) {
            array_push($this->openAPINullablesSetToNull, 'tillaegstekst_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tillaegstekst_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tillaegstekst_samling'] = $tillaegstekst_samling;

        return $this;
    }

    /**
     * Gets landbrugsnotering
     *
     * @return mixed|null
     */
    public function getLandbrugsnotering()
    {
        return $this->container['landbrugsnotering'];
    }

    /**
     * Sets landbrugsnotering
     *
     * @param mixed|null $landbrugsnotering AgriculturalNotationTypeText
     *
     * @return self
     */
    public function setLandbrugsnotering($landbrugsnotering)
    {
        if (is_null($landbrugsnotering)) {
            array_push($this->openAPINullablesSetToNull, 'landbrugsnotering');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('landbrugsnotering', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['landbrugsnotering'] = $landbrugsnotering;

        return $this;
    }

    /**
     * Gets matrikel_struktur_samling
     *
     * @return mixed|null
     */
    public function getMatrikelStrukturSamling()
    {
        return $this->container['matrikel_struktur_samling'];
    }

    /**
     * Sets matrikel_struktur_samling
     *
     * @param mixed|null $matrikel_struktur_samling Indeholder berigede matrikler.
     *
     * @return self
     */
    public function setMatrikelStrukturSamling($matrikel_struktur_samling)
    {
        if (is_null($matrikel_struktur_samling)) {
            array_push($this->openAPINullablesSetToNull, 'matrikel_struktur_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('matrikel_struktur_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['matrikel_struktur_samling'] = $matrikel_struktur_samling;

        return $this;
    }

    /**
     * Gets fordelingtal
     *
     * @return \OpenAPI\Client\Model\BroekModel|null
     */
    public function getFordelingtal()
    {
        return $this->container['fordelingtal'];
    }

    /**
     * Sets fordelingtal
     *
     * @param \OpenAPI\Client\Model\BroekModel|null $fordelingtal fordelingtal
     *
     * @return self
     */
    public function setFordelingtal($fordelingtal)
    {
        if (is_null($fordelingtal)) {
            throw new \InvalidArgumentException('non-nullable fordelingtal cannot be null');
        }
        $this->container['fordelingtal'] = $fordelingtal;

        return $this;
    }

    /**
     * Gets notering_tekst_samling
     *
     * @return mixed|null
     */
    public function getNoteringTekstSamling()
    {
        return $this->container['notering_tekst_samling'];
    }

    /**
     * Sets notering_tekst_samling
     *
     * @param mixed|null $notering_tekst_samling Samling af noteringer pÃ¥ ejendommen
     *
     * @return self
     */
    public function setNoteringTekstSamling($notering_tekst_samling)
    {
        if (is_null($notering_tekst_samling)) {
            array_push($this->openAPINullablesSetToNull, 'notering_tekst_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notering_tekst_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notering_tekst_samling'] = $notering_tekst_samling;

        return $this;
    }

    /**
     * Gets umatrikuleretareal
     *
     * @return \OpenAPI\Client\Model\UmatrikuleretArealModel|null
     */
    public function getUmatrikuleretareal()
    {
        return $this->container['umatrikuleretareal'];
    }

    /**
     * Sets umatrikuleretareal
     *
     * @param \OpenAPI\Client\Model\UmatrikuleretArealModel|null $umatrikuleretareal umatrikuleretareal
     *
     * @return self
     */
    public function setUmatrikuleretareal($umatrikuleretareal)
    {
        if (is_null($umatrikuleretareal)) {
            throw new \InvalidArgumentException('non-nullable umatrikuleretareal cannot be null');
        }
        $this->container['umatrikuleretareal'] = $umatrikuleretareal;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


