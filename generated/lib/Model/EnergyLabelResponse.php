<?php
/**
 * EnergyLabelResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API 👋</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EnergyLabelResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EnergyLabelResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EnergyLabelResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'energy_label_id' => 'mixed',
        'id' => 'mixed',
        'energy_label' => 'mixed',
        'energy_label_based_on' => 'mixed',
        'energy_label_type_usage' => 'mixed',
        'status' => 'mixed',
        'status_code' => 'mixed',
        'esr_number' => 'mixed',
        'muncipality_code' => 'mixed',
        'property_number' => 'mixed',
        'building_number' => 'mixed',
        'usage_code' => 'mixed',
        'construction_year' => 'mixed',
        'heat_supply' => 'mixed',
        'link' => 'mixed',
        'has_pdf' => 'mixed',
        'has_xml' => 'mixed',
        'is_hidden' => 'mixed',
        'is_mixed_usage' => 'mixed',
        'schema_version' => 'mixed',
        'submitter_company_id' => 'mixed',
        'submitter_company_name' => 'mixed',
        'submitter_consultant_name' => 'mixed',
        'valid_from' => 'mixed',
        'valid_to' => 'mixed',
        'street_name' => 'mixed',
        'house_number' => 'mixed',
        'zip_name' => 'mixed',
        'zip_code' => 'mixed',
        'geom' => 'mixed',
        'overview' => '\OpenAPI\Client\Model\EnergyLabelOverviewResponse',
        'calculation' => '\OpenAPI\Client\Model\EnergyLabelCalculation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'energy_label_id' => null,
        'id' => null,
        'energy_label' => null,
        'energy_label_based_on' => null,
        'energy_label_type_usage' => null,
        'status' => null,
        'status_code' => null,
        'esr_number' => null,
        'muncipality_code' => null,
        'property_number' => null,
        'building_number' => null,
        'usage_code' => null,
        'construction_year' => null,
        'heat_supply' => null,
        'link' => null,
        'has_pdf' => null,
        'has_xml' => null,
        'is_hidden' => null,
        'is_mixed_usage' => null,
        'schema_version' => null,
        'submitter_company_id' => null,
        'submitter_company_name' => null,
        'submitter_consultant_name' => null,
        'valid_from' => 'date',
        'valid_to' => 'date',
        'street_name' => null,
        'house_number' => null,
        'zip_name' => null,
        'zip_code' => null,
        'geom' => null,
        'overview' => null,
        'calculation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'energy_label_id' => true,
		'id' => true,
		'energy_label' => true,
		'energy_label_based_on' => true,
		'energy_label_type_usage' => true,
		'status' => true,
		'status_code' => true,
		'esr_number' => true,
		'muncipality_code' => true,
		'property_number' => true,
		'building_number' => true,
		'usage_code' => true,
		'construction_year' => true,
		'heat_supply' => true,
		'link' => true,
		'has_pdf' => true,
		'has_xml' => true,
		'is_hidden' => true,
		'is_mixed_usage' => true,
		'schema_version' => true,
		'submitter_company_id' => true,
		'submitter_company_name' => true,
		'submitter_consultant_name' => true,
		'valid_from' => true,
		'valid_to' => true,
		'street_name' => true,
		'house_number' => true,
		'zip_name' => true,
		'zip_code' => true,
		'geom' => true,
		'overview' => false,
		'calculation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'energy_label_id' => 'energy_label_id',
        'id' => 'id',
        'energy_label' => 'energy_label',
        'energy_label_based_on' => 'energy_label_based_on',
        'energy_label_type_usage' => 'energy_label_type_usage',
        'status' => 'status',
        'status_code' => 'status_code',
        'esr_number' => 'esr_number',
        'muncipality_code' => 'muncipality_code',
        'property_number' => 'property_number',
        'building_number' => 'building_number',
        'usage_code' => 'usage_code',
        'construction_year' => 'construction_year',
        'heat_supply' => 'heat_supply',
        'link' => 'link',
        'has_pdf' => 'has_pdf',
        'has_xml' => 'has_xml',
        'is_hidden' => 'is_hidden',
        'is_mixed_usage' => 'is_mixed_usage',
        'schema_version' => 'schema_version',
        'submitter_company_id' => 'submitter_company_id',
        'submitter_company_name' => 'submitter_company_name',
        'submitter_consultant_name' => 'submitter_consultant_name',
        'valid_from' => 'valid_from',
        'valid_to' => 'valid_to',
        'street_name' => 'street_name',
        'house_number' => 'house_number',
        'zip_name' => 'zip_name',
        'zip_code' => 'zip_code',
        'geom' => 'geom',
        'overview' => 'overview',
        'calculation' => 'calculation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'energy_label_id' => 'setEnergyLabelId',
        'id' => 'setId',
        'energy_label' => 'setEnergyLabel',
        'energy_label_based_on' => 'setEnergyLabelBasedOn',
        'energy_label_type_usage' => 'setEnergyLabelTypeUsage',
        'status' => 'setStatus',
        'status_code' => 'setStatusCode',
        'esr_number' => 'setEsrNumber',
        'muncipality_code' => 'setMuncipalityCode',
        'property_number' => 'setPropertyNumber',
        'building_number' => 'setBuildingNumber',
        'usage_code' => 'setUsageCode',
        'construction_year' => 'setConstructionYear',
        'heat_supply' => 'setHeatSupply',
        'link' => 'setLink',
        'has_pdf' => 'setHasPdf',
        'has_xml' => 'setHasXml',
        'is_hidden' => 'setIsHidden',
        'is_mixed_usage' => 'setIsMixedUsage',
        'schema_version' => 'setSchemaVersion',
        'submitter_company_id' => 'setSubmitterCompanyId',
        'submitter_company_name' => 'setSubmitterCompanyName',
        'submitter_consultant_name' => 'setSubmitterConsultantName',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'street_name' => 'setStreetName',
        'house_number' => 'setHouseNumber',
        'zip_name' => 'setZipName',
        'zip_code' => 'setZipCode',
        'geom' => 'setGeom',
        'overview' => 'setOverview',
        'calculation' => 'setCalculation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'energy_label_id' => 'getEnergyLabelId',
        'id' => 'getId',
        'energy_label' => 'getEnergyLabel',
        'energy_label_based_on' => 'getEnergyLabelBasedOn',
        'energy_label_type_usage' => 'getEnergyLabelTypeUsage',
        'status' => 'getStatus',
        'status_code' => 'getStatusCode',
        'esr_number' => 'getEsrNumber',
        'muncipality_code' => 'getMuncipalityCode',
        'property_number' => 'getPropertyNumber',
        'building_number' => 'getBuildingNumber',
        'usage_code' => 'getUsageCode',
        'construction_year' => 'getConstructionYear',
        'heat_supply' => 'getHeatSupply',
        'link' => 'getLink',
        'has_pdf' => 'getHasPdf',
        'has_xml' => 'getHasXml',
        'is_hidden' => 'getIsHidden',
        'is_mixed_usage' => 'getIsMixedUsage',
        'schema_version' => 'getSchemaVersion',
        'submitter_company_id' => 'getSubmitterCompanyId',
        'submitter_company_name' => 'getSubmitterCompanyName',
        'submitter_consultant_name' => 'getSubmitterConsultantName',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'street_name' => 'getStreetName',
        'house_number' => 'getHouseNumber',
        'zip_name' => 'getZipName',
        'zip_code' => 'getZipCode',
        'geom' => 'getGeom',
        'overview' => 'getOverview',
        'calculation' => 'getCalculation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('energy_label_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('energy_label', $data ?? [], null);
        $this->setIfExists('energy_label_based_on', $data ?? [], null);
        $this->setIfExists('energy_label_type_usage', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_code', $data ?? [], null);
        $this->setIfExists('esr_number', $data ?? [], null);
        $this->setIfExists('muncipality_code', $data ?? [], null);
        $this->setIfExists('property_number', $data ?? [], null);
        $this->setIfExists('building_number', $data ?? [], null);
        $this->setIfExists('usage_code', $data ?? [], null);
        $this->setIfExists('construction_year', $data ?? [], null);
        $this->setIfExists('heat_supply', $data ?? [], null);
        $this->setIfExists('link', $data ?? [], null);
        $this->setIfExists('has_pdf', $data ?? [], null);
        $this->setIfExists('has_xml', $data ?? [], null);
        $this->setIfExists('is_hidden', $data ?? [], null);
        $this->setIfExists('is_mixed_usage', $data ?? [], null);
        $this->setIfExists('schema_version', $data ?? [], null);
        $this->setIfExists('submitter_company_id', $data ?? [], null);
        $this->setIfExists('submitter_company_name', $data ?? [], null);
        $this->setIfExists('submitter_consultant_name', $data ?? [], null);
        $this->setIfExists('valid_from', $data ?? [], null);
        $this->setIfExists('valid_to', $data ?? [], null);
        $this->setIfExists('street_name', $data ?? [], null);
        $this->setIfExists('house_number', $data ?? [], null);
        $this->setIfExists('zip_name', $data ?? [], null);
        $this->setIfExists('zip_code', $data ?? [], null);
        $this->setIfExists('geom', $data ?? [], null);
        $this->setIfExists('overview', $data ?? [], null);
        $this->setIfExists('calculation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['energy_label_id'] === null) {
            $invalidProperties[] = "'energy_label_id' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['energy_label_based_on'] === null) {
            $invalidProperties[] = "'energy_label_based_on' can't be null";
        }
        if ($this->container['energy_label_type_usage'] === null) {
            $invalidProperties[] = "'energy_label_type_usage' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['status_code'] === null) {
            $invalidProperties[] = "'status_code' can't be null";
        }
        if ($this->container['esr_number'] === null) {
            $invalidProperties[] = "'esr_number' can't be null";
        }
        if ($this->container['muncipality_code'] === null) {
            $invalidProperties[] = "'muncipality_code' can't be null";
        }
        if ($this->container['property_number'] === null) {
            $invalidProperties[] = "'property_number' can't be null";
        }
        if ($this->container['building_number'] === null) {
            $invalidProperties[] = "'building_number' can't be null";
        }
        if ($this->container['usage_code'] === null) {
            $invalidProperties[] = "'usage_code' can't be null";
        }
        if ($this->container['construction_year'] === null) {
            $invalidProperties[] = "'construction_year' can't be null";
        }
        if ($this->container['link'] === null) {
            $invalidProperties[] = "'link' can't be null";
        }
        if ($this->container['has_pdf'] === null) {
            $invalidProperties[] = "'has_pdf' can't be null";
        }
        if ($this->container['has_xml'] === null) {
            $invalidProperties[] = "'has_xml' can't be null";
        }
        if ($this->container['is_hidden'] === null) {
            $invalidProperties[] = "'is_hidden' can't be null";
        }
        if ($this->container['is_mixed_usage'] === null) {
            $invalidProperties[] = "'is_mixed_usage' can't be null";
        }
        if ($this->container['schema_version'] === null) {
            $invalidProperties[] = "'schema_version' can't be null";
        }
        if ($this->container['submitter_company_name'] === null) {
            $invalidProperties[] = "'submitter_company_name' can't be null";
        }
        if ($this->container['valid_from'] === null) {
            $invalidProperties[] = "'valid_from' can't be null";
        }
        if ($this->container['valid_to'] === null) {
            $invalidProperties[] = "'valid_to' can't be null";
        }
        if ($this->container['street_name'] === null) {
            $invalidProperties[] = "'street_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets energy_label_id
     *
     * @return mixed
     */
    public function getEnergyLabelId()
    {
        return $this->container['energy_label_id'];
    }

    /**
     * Sets energy_label_id
     *
     * @param mixed $energy_label_id Energimærkningsnummer
     *
     * @return self
     */
    public function setEnergyLabelId($energy_label_id)
    {
        if (is_null($energy_label_id)) {
            array_push($this->openAPINullablesSetToNull, 'energy_label_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('energy_label_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['energy_label_id'] = $energy_label_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id Identitetsstreng på ”entitet” (energimærkning i søgeresultat) Vil være det samme som energimærkningsnummeret, men det kan evt. ændre sig.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets energy_label
     *
     * @return mixed|null
     */
    public function getEnergyLabel()
    {
        return $this->container['energy_label'];
    }

    /**
     * Sets energy_label
     *
     * @param mixed|null $energy_label Energimærket er et udtryk for bygningens energieffektivitet. Energieffektiviteten beskrives på en skala med mærkerne A2020, A2015, A2010, B, C, D, E, F og G.
     *
     * @return self
     */
    public function setEnergyLabel($energy_label)
    {
        if (is_null($energy_label)) {
            array_push($this->openAPINullablesSetToNull, 'energy_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('energy_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['energy_label'] = $energy_label;

        return $this;
    }

    /**
     * Gets energy_label_based_on
     *
     * @return mixed
     */
    public function getEnergyLabelBasedOn()
    {
        return $this->container['energy_label_based_on'];
    }

    /**
     * Sets energy_label_based_on
     *
     * @param mixed $energy_label_based_on Grundlag for energimærkning (fx CalculatedConsumption)
     *
     * @return self
     */
    public function setEnergyLabelBasedOn($energy_label_based_on)
    {
        if (is_null($energy_label_based_on)) {
            array_push($this->openAPINullablesSetToNull, 'energy_label_based_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('energy_label_based_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['energy_label_based_on'] = $energy_label_based_on;

        return $this;
    }

    /**
     * Gets energy_label_type_usage
     *
     * @return mixed
     */
    public function getEnergyLabelTypeUsage()
    {
        return $this->container['energy_label_type_usage'];
    }

    /**
     * Sets energy_label_type_usage
     *
     * @param mixed $energy_label_type_usage Anvendelse (fx SingleFamily)
     *
     * @return self
     */
    public function setEnergyLabelTypeUsage($energy_label_type_usage)
    {
        if (is_null($energy_label_type_usage)) {
            array_push($this->openAPINullablesSetToNull, 'energy_label_type_usage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('energy_label_type_usage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['energy_label_type_usage'] = $energy_label_type_usage;

        return $this;
    }

    /**
     * Gets status
     *
     * @return mixed
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param mixed $status Tekst på enum-værdien af status_code
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return mixed
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param mixed $status_code 0: UNSPECIFIED ERROR - Uspecificeret fejl 1: VALID - Energimærkning er gyldig 2: INCOMPATIBLE - Energimærkning er gyldig, men indberetningsformat et er ikke understøttet 3: EXPIRED - Fås normalt ikke, da udløbne energimærker frasorteres 4: CORRECTED - Der er indsendt en korrektion til energimærket 5: INVALID - Energimærket er ugyldigt 6: INCOMPLETE - Energimærket er ikke komplet
     *
     * @return self
     */
    public function setStatusCode($status_code)
    {
        if (is_null($status_code)) {
            array_push($this->openAPINullablesSetToNull, 'status_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets esr_number
     *
     * @return mixed
     */
    public function getEsrNumber()
    {
        return $this->container['esr_number'];
    }

    /**
     * Sets esr_number
     *
     * @param mixed $esr_number Kommunekode + ejendomsnummer.
     *
     * @return self
     */
    public function setEsrNumber($esr_number)
    {
        if (is_null($esr_number)) {
            array_push($this->openAPINullablesSetToNull, 'esr_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('esr_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['esr_number'] = $esr_number;

        return $this;
    }

    /**
     * Gets muncipality_code
     *
     * @return mixed
     */
    public function getMuncipalityCode()
    {
        return $this->container['muncipality_code'];
    }

    /**
     * Sets muncipality_code
     *
     * @param mixed $muncipality_code Kommunekode i BBR-nummer
     *
     * @return self
     */
    public function setMuncipalityCode($muncipality_code)
    {
        if (is_null($muncipality_code)) {
            array_push($this->openAPINullablesSetToNull, 'muncipality_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('muncipality_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['muncipality_code'] = $muncipality_code;

        return $this;
    }

    /**
     * Gets property_number
     *
     * @return mixed
     */
    public function getPropertyNumber()
    {
        return $this->container['property_number'];
    }

    /**
     * Sets property_number
     *
     * @param mixed $property_number Ejendomsnummer i BBR-nummer. Some property numbers are invalid.
     *
     * @return self
     */
    public function setPropertyNumber($property_number)
    {
        if (is_null($property_number)) {
            array_push($this->openAPINullablesSetToNull, 'property_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_number'] = $property_number;

        return $this;
    }

    /**
     * Gets building_number
     *
     * @return mixed
     */
    public function getBuildingNumber()
    {
        return $this->container['building_number'];
    }

    /**
     * Sets building_number
     *
     * @param mixed $building_number Bygningsnummer i BBR-nummer. Hvis energimærkning omfatter flere bygninger, så angivers alle bygningsnumre adskilt med komma.
     *
     * @return self
     */
    public function setBuildingNumber($building_number)
    {
        if (is_null($building_number)) {
            array_push($this->openAPINullablesSetToNull, 'building_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_number'] = $building_number;

        return $this;
    }

    /**
     * Gets usage_code
     *
     * @return mixed
     */
    public function getUsageCode()
    {
        return $this->container['usage_code'];
    }

    /**
     * Sets usage_code
     *
     * @param mixed $usage_code Anvendelseskode (på indberetningstidspunktet)
     *
     * @return self
     */
    public function setUsageCode($usage_code)
    {
        if (is_null($usage_code)) {
            array_push($this->openAPINullablesSetToNull, 'usage_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage_code'] = $usage_code;

        return $this;
    }

    /**
     * Gets construction_year
     *
     * @return mixed
     */
    public function getConstructionYear()
    {
        return $this->container['construction_year'];
    }

    /**
     * Sets construction_year
     *
     * @param mixed $construction_year Opførelsesår. Hvis energimærkning omfatter flere bygninger, så angives alle opføreslesår adskilt med komma
     *
     * @return self
     */
    public function setConstructionYear($construction_year)
    {
        if (is_null($construction_year)) {
            array_push($this->openAPINullablesSetToNull, 'construction_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('construction_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['construction_year'] = $construction_year;

        return $this;
    }

    /**
     * Gets heat_supply
     *
     * @return mixed|null
     */
    public function getHeatSupply()
    {
        return $this->container['heat_supply'];
    }

    /**
     * Sets heat_supply
     *
     * @param mixed|null $heat_supply Primær energikilde til opvarmning
     *
     * @return self
     */
    public function setHeatSupply($heat_supply)
    {
        if (is_null($heat_supply)) {
            array_push($this->openAPINullablesSetToNull, 'heat_supply');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('heat_supply', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['heat_supply'] = $heat_supply;

        return $this;
    }

    /**
     * Gets link
     *
     * @return mixed
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param mixed $link Hvis anvendelseskoden er 110, 120, eller 130, så angives link til den digitale energimærkningsordning på adressen. I øvrige tilfælde angives link til pdf-dokument på energimærkning.
     *
     * @return self
     */
    public function setLink($link)
    {
        if (is_null($link)) {
            array_push($this->openAPINullablesSetToNull, 'link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets has_pdf
     *
     * @return mixed
     */
    public function getHasPdf()
    {
        return $this->container['has_pdf'];
    }

    /**
     * Sets has_pdf
     *
     * @param mixed $has_pdf PDF rapport er tilgængelig
     *
     * @return self
     */
    public function setHasPdf($has_pdf)
    {
        if (is_null($has_pdf)) {
            array_push($this->openAPINullablesSetToNull, 'has_pdf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_pdf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_pdf'] = $has_pdf;

        return $this;
    }

    /**
     * Gets has_xml
     *
     * @return mixed
     */
    public function getHasXml()
    {
        return $this->container['has_xml'];
    }

    /**
     * Sets has_xml
     *
     * @param mixed $has_xml XML på indberetning er tilgængelig.
     *
     * @return self
     */
    public function setHasXml($has_xml)
    {
        if (is_null($has_xml)) {
            array_push($this->openAPINullablesSetToNull, 'has_xml');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_xml', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_xml'] = $has_xml;

        return $this;
    }

    /**
     * Gets is_hidden
     *
     * @return mixed
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     *
     * @param mixed $is_hidden ??
     *
     * @return self
     */
    public function setIsHidden($is_hidden)
    {
        if (is_null($is_hidden)) {
            array_push($this->openAPINullablesSetToNull, 'is_hidden');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_hidden', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets is_mixed_usage
     *
     * @return mixed
     */
    public function getIsMixedUsage()
    {
        return $this->container['is_mixed_usage'];
    }

    /**
     * Sets is_mixed_usage
     *
     * @param mixed $is_mixed_usage true/false ved ikke hvad det betyder
     *
     * @return self
     */
    public function setIsMixedUsage($is_mixed_usage)
    {
        if (is_null($is_mixed_usage)) {
            array_push($this->openAPINullablesSetToNull, 'is_mixed_usage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_mixed_usage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_mixed_usage'] = $is_mixed_usage;

        return $this;
    }

    /**
     * Gets schema_version
     *
     * @return mixed
     */
    public function getSchemaVersion()
    {
        return $this->container['schema_version'];
    }

    /**
     * Sets schema_version
     *
     * @param mixed $schema_version Indberetningsformat på XML
     *
     * @return self
     */
    public function setSchemaVersion($schema_version)
    {
        if (is_null($schema_version)) {
            array_push($this->openAPINullablesSetToNull, 'schema_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schema_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schema_version'] = $schema_version;

        return $this;
    }

    /**
     * Gets submitter_company_id
     *
     * @return mixed|null
     */
    public function getSubmitterCompanyId()
    {
        return $this->container['submitter_company_id'];
    }

    /**
     * Sets submitter_company_id
     *
     * @param mixed|null $submitter_company_id Id på firma.
     *
     * @return self
     */
    public function setSubmitterCompanyId($submitter_company_id)
    {
        if (is_null($submitter_company_id)) {
            array_push($this->openAPINullablesSetToNull, 'submitter_company_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('submitter_company_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['submitter_company_id'] = $submitter_company_id;

        return $this;
    }

    /**
     * Gets submitter_company_name
     *
     * @return mixed
     */
    public function getSubmitterCompanyName()
    {
        return $this->container['submitter_company_name'];
    }

    /**
     * Sets submitter_company_name
     *
     * @param mixed $submitter_company_name Navn på firma som energikonsulent er tilknyttet.
     *
     * @return self
     */
    public function setSubmitterCompanyName($submitter_company_name)
    {
        if (is_null($submitter_company_name)) {
            array_push($this->openAPINullablesSetToNull, 'submitter_company_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('submitter_company_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['submitter_company_name'] = $submitter_company_name;

        return $this;
    }

    /**
     * Gets submitter_consultant_name
     *
     * @return mixed|null
     */
    public function getSubmitterConsultantName()
    {
        return $this->container['submitter_consultant_name'];
    }

    /**
     * Sets submitter_consultant_name
     *
     * @param mixed|null $submitter_consultant_name Navn på energikonsulent
     *
     * @return self
     */
    public function setSubmitterConsultantName($submitter_consultant_name)
    {
        if (is_null($submitter_consultant_name)) {
            array_push($this->openAPINullablesSetToNull, 'submitter_consultant_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('submitter_consultant_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['submitter_consultant_name'] = $submitter_consultant_name;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return mixed
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param mixed $valid_from Gyldighedsdato fra (YYYY-MM-DD)
     *
     * @return self
     */
    public function setValidFrom($valid_from)
    {
        if (is_null($valid_from)) {
            array_push($this->openAPINullablesSetToNull, 'valid_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valid_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return mixed
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param mixed $valid_to Gyldighedsdato til (YYYY-MM-DD)
     *
     * @return self
     */
    public function setValidTo($valid_to)
    {
        if (is_null($valid_to)) {
            array_push($this->openAPINullablesSetToNull, 'valid_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valid_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return mixed
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param mixed $street_name Vejnavn
     *
     * @return self
     */
    public function setStreetName($street_name)
    {
        if (is_null($street_name)) {
            array_push($this->openAPINullablesSetToNull, 'street_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return mixed|null
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param mixed|null $house_number Husnummer
     *
     * @return self
     */
    public function setHouseNumber($house_number)
    {
        if (is_null($house_number)) {
            array_push($this->openAPINullablesSetToNull, 'house_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('house_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets zip_name
     *
     * @return mixed|null
     */
    public function getZipName()
    {
        return $this->container['zip_name'];
    }

    /**
     * Sets zip_name
     *
     * @param mixed|null $zip_name Bynavn
     *
     * @return self
     */
    public function setZipName($zip_name)
    {
        if (is_null($zip_name)) {
            array_push($this->openAPINullablesSetToNull, 'zip_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zip_name'] = $zip_name;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return mixed|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param mixed|null $zip_code Postnummer
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (is_null($zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets geom
     *
     * @return mixed|null
     */
    public function getGeom()
    {
        return $this->container['geom'];
    }

    /**
     * Sets geom
     *
     * @param mixed|null $geom Angiver koordinatet for bygningen energimærket omhandler.
     *
     * @return self
     */
    public function setGeom($geom)
    {
        if (is_null($geom)) {
            array_push($this->openAPINullablesSetToNull, 'geom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('geom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['geom'] = $geom;

        return $this;
    }

    /**
     * Gets overview
     *
     * @return \OpenAPI\Client\Model\EnergyLabelOverviewResponse|null
     */
    public function getOverview()
    {
        return $this->container['overview'];
    }

    /**
     * Sets overview
     *
     * @param \OpenAPI\Client\Model\EnergyLabelOverviewResponse|null $overview overview
     *
     * @return self
     */
    public function setOverview($overview)
    {
        if (is_null($overview)) {
            throw new \InvalidArgumentException('non-nullable overview cannot be null');
        }
        $this->container['overview'] = $overview;

        return $this;
    }

    /**
     * Gets calculation
     *
     * @return \OpenAPI\Client\Model\EnergyLabelCalculation|null
     */
    public function getCalculation()
    {
        return $this->container['calculation'];
    }

    /**
     * Sets calculation
     *
     * @param \OpenAPI\Client\Model\EnergyLabelCalculation|null $calculation calculation
     *
     * @return self
     */
    public function setCalculation($calculation)
    {
        if (is_null($calculation)) {
            throw new \InvalidArgumentException('non-nullable calculation cannot be null');
        }
        $this->container['calculation'] = $calculation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


