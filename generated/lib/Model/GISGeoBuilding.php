<?php
/**
 * GISGeoBuilding
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GISGeoBuilding Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GISGeoBuilding implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GISGeoBuilding';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'bbr_id' => 'mixed',
        'temporary_id' => 'mixed',
        'namespace' => 'mixed',
        'status' => 'mixed',
        'status_geometry' => 'mixed',
        'registration_specification' => 'mixed',
        'data_responsible' => 'mixed',
        'business_event' => 'mixed',
        'business_area' => 'mixed',
        'business_process' => 'mixed',
        'registration_actor' => 'mixed',
        'registration_from' => 'mixed',
        'registration_to' => 'mixed',
        'effect_actor' => 'mixed',
        'effect_from' => 'mixed',
        'effect_to' => 'mixed',
        'plan_accuracy' => 'mixed',
        'plan_placement_method' => 'mixed',
        'vertical_accuracy' => 'mixed',
        'vertical_plan_placement_method' => 'mixed',
        'application' => 'mixed',
        'comment' => 'mixed',
        'building_type' => 'mixed',
        'measurement_place' => 'mixed',
        'method_3d' => 'mixed',
        'below_minimum_building' => 'mixed',
        'bbr_action' => 'mixed',
        'visible' => 'mixed',
        'overlap' => 'mixed',
        'geom' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'bbr_id' => 'uuid',
        'temporary_id' => null,
        'namespace' => null,
        'status' => null,
        'status_geometry' => null,
        'registration_specification' => null,
        'data_responsible' => null,
        'business_event' => null,
        'business_area' => null,
        'business_process' => null,
        'registration_actor' => null,
        'registration_from' => 'date-time',
        'registration_to' => 'date-time',
        'effect_actor' => null,
        'effect_from' => 'date-time',
        'effect_to' => 'date-time',
        'plan_accuracy' => null,
        'plan_placement_method' => null,
        'vertical_accuracy' => null,
        'vertical_plan_placement_method' => null,
        'application' => null,
        'comment' => null,
        'building_type' => null,
        'measurement_place' => null,
        'method_3d' => null,
        'below_minimum_building' => null,
        'bbr_action' => null,
        'visible' => null,
        'overlap' => null,
        'geom' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'bbr_id' => true,
		'temporary_id' => true,
		'namespace' => true,
		'status' => true,
		'status_geometry' => true,
		'registration_specification' => true,
		'data_responsible' => true,
		'business_event' => true,
		'business_area' => true,
		'business_process' => true,
		'registration_actor' => true,
		'registration_from' => true,
		'registration_to' => true,
		'effect_actor' => true,
		'effect_from' => true,
		'effect_to' => true,
		'plan_accuracy' => true,
		'plan_placement_method' => true,
		'vertical_accuracy' => true,
		'vertical_plan_placement_method' => true,
		'application' => true,
		'comment' => true,
		'building_type' => true,
		'measurement_place' => true,
		'method_3d' => true,
		'below_minimum_building' => true,
		'bbr_action' => true,
		'visible' => true,
		'overlap' => true,
		'geom' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'bbr_id' => 'bbr_id',
        'temporary_id' => 'temporary_id',
        'namespace' => 'namespace',
        'status' => 'status',
        'status_geometry' => 'status_geometry',
        'registration_specification' => 'registration_specification',
        'data_responsible' => 'data_responsible',
        'business_event' => 'business_event',
        'business_area' => 'business_area',
        'business_process' => 'business_process',
        'registration_actor' => 'registration_actor',
        'registration_from' => 'registration_from',
        'registration_to' => 'registration_to',
        'effect_actor' => 'effect_actor',
        'effect_from' => 'effect_from',
        'effect_to' => 'effect_to',
        'plan_accuracy' => 'plan_accuracy',
        'plan_placement_method' => 'plan_placement_method',
        'vertical_accuracy' => 'vertical_accuracy',
        'vertical_plan_placement_method' => 'vertical_plan_placement_method',
        'application' => 'application',
        'comment' => 'comment',
        'building_type' => 'building_type',
        'measurement_place' => 'measurement_place',
        'method_3d' => 'method_3d',
        'below_minimum_building' => 'below_minimum_building',
        'bbr_action' => 'bbr_action',
        'visible' => 'visible',
        'overlap' => 'overlap',
        'geom' => 'geom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'bbr_id' => 'setBbrId',
        'temporary_id' => 'setTemporaryId',
        'namespace' => 'setNamespace',
        'status' => 'setStatus',
        'status_geometry' => 'setStatusGeometry',
        'registration_specification' => 'setRegistrationSpecification',
        'data_responsible' => 'setDataResponsible',
        'business_event' => 'setBusinessEvent',
        'business_area' => 'setBusinessArea',
        'business_process' => 'setBusinessProcess',
        'registration_actor' => 'setRegistrationActor',
        'registration_from' => 'setRegistrationFrom',
        'registration_to' => 'setRegistrationTo',
        'effect_actor' => 'setEffectActor',
        'effect_from' => 'setEffectFrom',
        'effect_to' => 'setEffectTo',
        'plan_accuracy' => 'setPlanAccuracy',
        'plan_placement_method' => 'setPlanPlacementMethod',
        'vertical_accuracy' => 'setVerticalAccuracy',
        'vertical_plan_placement_method' => 'setVerticalPlanPlacementMethod',
        'application' => 'setApplication',
        'comment' => 'setComment',
        'building_type' => 'setBuildingType',
        'measurement_place' => 'setMeasurementPlace',
        'method_3d' => 'setMethod3d',
        'below_minimum_building' => 'setBelowMinimumBuilding',
        'bbr_action' => 'setBbrAction',
        'visible' => 'setVisible',
        'overlap' => 'setOverlap',
        'geom' => 'setGeom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'bbr_id' => 'getBbrId',
        'temporary_id' => 'getTemporaryId',
        'namespace' => 'getNamespace',
        'status' => 'getStatus',
        'status_geometry' => 'getStatusGeometry',
        'registration_specification' => 'getRegistrationSpecification',
        'data_responsible' => 'getDataResponsible',
        'business_event' => 'getBusinessEvent',
        'business_area' => 'getBusinessArea',
        'business_process' => 'getBusinessProcess',
        'registration_actor' => 'getRegistrationActor',
        'registration_from' => 'getRegistrationFrom',
        'registration_to' => 'getRegistrationTo',
        'effect_actor' => 'getEffectActor',
        'effect_from' => 'getEffectFrom',
        'effect_to' => 'getEffectTo',
        'plan_accuracy' => 'getPlanAccuracy',
        'plan_placement_method' => 'getPlanPlacementMethod',
        'vertical_accuracy' => 'getVerticalAccuracy',
        'vertical_plan_placement_method' => 'getVerticalPlanPlacementMethod',
        'application' => 'getApplication',
        'comment' => 'getComment',
        'building_type' => 'getBuildingType',
        'measurement_place' => 'getMeasurementPlace',
        'method_3d' => 'getMethod3d',
        'below_minimum_building' => 'getBelowMinimumBuilding',
        'bbr_action' => 'getBbrAction',
        'visible' => 'getVisible',
        'overlap' => 'getOverlap',
        'geom' => 'getGeom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('bbr_id', $data ?? [], null);
        $this->setIfExists('temporary_id', $data ?? [], null);
        $this->setIfExists('namespace', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_geometry', $data ?? [], null);
        $this->setIfExists('registration_specification', $data ?? [], null);
        $this->setIfExists('data_responsible', $data ?? [], null);
        $this->setIfExists('business_event', $data ?? [], null);
        $this->setIfExists('business_area', $data ?? [], null);
        $this->setIfExists('business_process', $data ?? [], null);
        $this->setIfExists('registration_actor', $data ?? [], null);
        $this->setIfExists('registration_from', $data ?? [], null);
        $this->setIfExists('registration_to', $data ?? [], null);
        $this->setIfExists('effect_actor', $data ?? [], null);
        $this->setIfExists('effect_from', $data ?? [], null);
        $this->setIfExists('effect_to', $data ?? [], null);
        $this->setIfExists('plan_accuracy', $data ?? [], null);
        $this->setIfExists('plan_placement_method', $data ?? [], null);
        $this->setIfExists('vertical_accuracy', $data ?? [], null);
        $this->setIfExists('vertical_plan_placement_method', $data ?? [], null);
        $this->setIfExists('application', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('building_type', $data ?? [], null);
        $this->setIfExists('measurement_place', $data ?? [], null);
        $this->setIfExists('method_3d', $data ?? [], null);
        $this->setIfExists('below_minimum_building', $data ?? [], null);
        $this->setIfExists('bbr_action', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], null);
        $this->setIfExists('overlap', $data ?? [], null);
        $this->setIfExists('geom', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['namespace'] === null) {
            $invalidProperties[] = "'namespace' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['status_geometry'] === null) {
            $invalidProperties[] = "'status_geometry' can't be null";
        }
        if ($this->container['registration_specification'] === null) {
            $invalidProperties[] = "'registration_specification' can't be null";
        }
        if ($this->container['data_responsible'] === null) {
            $invalidProperties[] = "'data_responsible' can't be null";
        }
        if ($this->container['business_event'] === null) {
            $invalidProperties[] = "'business_event' can't be null";
        }
        if ($this->container['business_area'] === null) {
            $invalidProperties[] = "'business_area' can't be null";
        }
        if ($this->container['registration_actor'] === null) {
            $invalidProperties[] = "'registration_actor' can't be null";
        }
        if ($this->container['registration_from'] === null) {
            $invalidProperties[] = "'registration_from' can't be null";
        }
        if ($this->container['effect_actor'] === null) {
            $invalidProperties[] = "'effect_actor' can't be null";
        }
        if ($this->container['effect_from'] === null) {
            $invalidProperties[] = "'effect_from' can't be null";
        }
        if ($this->container['plan_accuracy'] === null) {
            $invalidProperties[] = "'plan_accuracy' can't be null";
        }
        if ($this->container['plan_placement_method'] === null) {
            $invalidProperties[] = "'plan_placement_method' can't be null";
        }
        if ($this->container['vertical_accuracy'] === null) {
            $invalidProperties[] = "'vertical_accuracy' can't be null";
        }
        if ($this->container['vertical_plan_placement_method'] === null) {
            $invalidProperties[] = "'vertical_plan_placement_method' can't be null";
        }
        if ($this->container['application'] === null) {
            $invalidProperties[] = "'application' can't be null";
        }
        if ($this->container['building_type'] === null) {
            $invalidProperties[] = "'building_type' can't be null";
        }
        if ($this->container['measurement_place'] === null) {
            $invalidProperties[] = "'measurement_place' can't be null";
        }
        if ($this->container['method_3d'] === null) {
            $invalidProperties[] = "'method_3d' can't be null";
        }
        if ($this->container['below_minimum_building'] === null) {
            $invalidProperties[] = "'below_minimum_building' can't be null";
        }
        if ($this->container['visible'] === null) {
            $invalidProperties[] = "'visible' can't be null";
        }
        if ($this->container['overlap'] === null) {
            $invalidProperties[] = "'overlap' can't be null";
        }
        if ($this->container['geom'] === null) {
            $invalidProperties[] = "'geom' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id Identifikation af objektet
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets bbr_id
     *
     * @return mixed|null
     */
    public function getBbrId()
    {
        return $this->container['bbr_id'];
    }

    /**
     * Sets bbr_id
     *
     * @param mixed|null $bbr_id Attribut afledt af relationen imellem GeoDanmark element og BygvÃ¦rkselement i Bygninger og boliger. NOTE Den afledte attribut er medtaget for at angive hvorledes relationen i den logiske model skal omsÃ¦ttes til en attribut i det fysiske skema.
     *
     * @return self
     */
    public function setBbrId($bbr_id)
    {
        if (is_null($bbr_id)) {
            array_push($this->openAPINullablesSetToNull, 'bbr_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bbr_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bbr_id'] = $bbr_id;

        return $this;
    }

    /**
     * Gets temporary_id
     *
     * @return mixed|null
     */
    public function getTemporaryId()
    {
        return $this->container['temporary_id'];
    }

    /**
     * Sets temporary_id
     *
     * @param mixed|null $temporary_id Midlertidig nÃ¸gle til kobling af GeoDanmarkobjekter med eksterne databaser
     *
     * @return self
     */
    public function setTemporaryId($temporary_id)
    {
        if (is_null($temporary_id)) {
            array_push($this->openAPINullablesSetToNull, 'temporary_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('temporary_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['temporary_id'] = $temporary_id;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return mixed
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param mixed $namespace Identifikation af et namespace inden for hvilket lokalId er unik
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        if (is_null($namespace)) {
            array_push($this->openAPINullablesSetToNull, 'namespace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('namespace', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets status
     *
     * @return mixed
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param mixed $status Angivelse af hvor et GeoDanmarkobjekt er i sin livscyklus.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_geometry
     *
     * @return mixed
     */
    public function getStatusGeometry()
    {
        return $this->container['status_geometry'];
    }

    /**
     * Sets status_geometry
     *
     * @param mixed $status_geometry Angivelse af status for registrering af geometri.
     *
     * @return self
     */
    public function setStatusGeometry($status_geometry)
    {
        if (is_null($status_geometry)) {
            array_push($this->openAPINullablesSetToNull, 'status_geometry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status_geometry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status_geometry'] = $status_geometry;

        return $this;
    }

    /**
     * Gets registration_specification
     *
     * @return mixed
     */
    public function getRegistrationSpecification()
    {
        return $this->container['registration_specification'];
    }

    /**
     * Sets registration_specification
     *
     * @param mixed $registration_specification Navnet pÃ¥ den specifikation objektet er registreret under eller er opgraderet til.
     *
     * @return self
     */
    public function setRegistrationSpecification($registration_specification)
    {
        if (is_null($registration_specification)) {
            array_push($this->openAPINullablesSetToNull, 'registration_specification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_specification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_specification'] = $registration_specification;

        return $this;
    }

    /**
     * Gets data_responsible
     *
     * @return mixed
     */
    public function getDataResponsible()
    {
        return $this->container['data_responsible'];
    }

    /**
     * Sets data_responsible
     *
     * @param mixed $data_responsible Navnet pÃ¥ den myndighed, der har dataansvaret for objektet.
     *
     * @return self
     */
    public function setDataResponsible($data_responsible)
    {
        if (is_null($data_responsible)) {
            array_push($this->openAPINullablesSetToNull, 'data_responsible');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_responsible', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_responsible'] = $data_responsible;

        return $this;
    }

    /**
     * Gets business_event
     *
     * @return mixed
     */
    public function getBusinessEvent()
    {
        return $this->container['business_event'];
    }

    /**
     * Sets business_event
     *
     * @param mixed $business_event Den forretningshÃ¦ndelse, som afstedkom opdateringen.
     *
     * @return self
     */
    public function setBusinessEvent($business_event)
    {
        if (is_null($business_event)) {
            array_push($this->openAPINullablesSetToNull, 'business_event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_event'] = $business_event;

        return $this;
    }

    /**
     * Gets business_area
     *
     * @return mixed
     */
    public function getBusinessArea()
    {
        return $this->container['business_area'];
    }

    /**
     * Sets business_area
     *
     * @param mixed $business_area FORM-kode for det offentlige forretningsomrÃ¥de som har opdateret dataobjektet.
     *
     * @return self
     */
    public function setBusinessArea($business_area)
    {
        if (is_null($business_area)) {
            array_push($this->openAPINullablesSetToNull, 'business_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_area'] = $business_area;

        return $this;
    }

    /**
     * Gets business_process
     *
     * @return mixed|null
     */
    public function getBusinessProcess()
    {
        return $this->container['business_process'];
    }

    /**
     * Sets business_process
     *
     * @param mixed|null $business_process Den forretningsproces som har opdateret dataobjektet.
     *
     * @return self
     */
    public function setBusinessProcess($business_process)
    {
        if (is_null($business_process)) {
            array_push($this->openAPINullablesSetToNull, 'business_process');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_process', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_process'] = $business_process;

        return $this;
    }

    /**
     * Gets registration_actor
     *
     * @return mixed
     */
    public function getRegistrationActor()
    {
        return $this->container['registration_actor'];
    }

    /**
     * Sets registration_actor
     *
     * @param mixed $registration_actor Den aktÃ¸r der sidst har registreret noget pÃ¥ objektet, sÃ¥ objektet fik ny identitet.
     *
     * @return self
     */
    public function setRegistrationActor($registration_actor)
    {
        if (is_null($registration_actor)) {
            array_push($this->openAPINullablesSetToNull, 'registration_actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_actor'] = $registration_actor;

        return $this;
    }

    /**
     * Gets registration_from
     *
     * @return mixed
     */
    public function getRegistrationFrom()
    {
        return $this->container['registration_from'];
    }

    /**
     * Sets registration_from
     *
     * @param mixed $registration_from Dato og tid for databasesystemets tildeling af en ny ident til objektet og for alle efterfÃ¸lgende Ã¦ndringer af enhver art pÃ¥ objektet.
     *
     * @return self
     */
    public function setRegistrationFrom($registration_from)
    {
        if (is_null($registration_from)) {
            array_push($this->openAPINullablesSetToNull, 'registration_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_from'] = $registration_from;

        return $this;
    }

    /**
     * Gets registration_to
     *
     * @return mixed|null
     */
    public function getRegistrationTo()
    {
        return $this->container['registration_to'];
    }

    /**
     * Sets registration_to
     *
     * @param mixed|null $registration_to Tidspunktet for objektets 'Ã¦ndring' eller 'sletning' i databasen. Ved 'Ã¦ndring' forstÃ¥s Ã¦ndring af enhver art, hvor den hidtidige version af objektet gÃ¸res historisk og en ny version, bliver den aktuelle.
     *
     * @return self
     */
    public function setRegistrationTo($registration_to)
    {
        if (is_null($registration_to)) {
            array_push($this->openAPINullablesSetToNull, 'registration_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_to'] = $registration_to;

        return $this;
    }

    /**
     * Gets effect_actor
     *
     * @return mixed
     */
    public function getEffectActor()
    {
        return $this->container['effect_actor'];
    }

    /**
     * Sets effect_actor
     *
     * @param mixed $effect_actor Den aktÃ¸r der sidst har udfÃ¸rt Ã¦ndringer af enhver art pÃ¥ objektet.
     *
     * @return self
     */
    public function setEffectActor($effect_actor)
    {
        if (is_null($effect_actor)) {
            array_push($this->openAPINullablesSetToNull, 'effect_actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_actor'] = $effect_actor;

        return $this;
    }

    /**
     * Gets effect_from
     *
     * @return mixed
     */
    public function getEffectFrom()
    {
        return $this->container['effect_from'];
    }

    /**
     * Sets effect_from
     *
     * @param mixed $effect_from Tidspunktet hvorfra objektet har virkning. For fotogrammetri: fotodatoen. Ellers kan datoen dateres til fortiden, nutiden eller fremtiden.
     *
     * @return self
     */
    public function setEffectFrom($effect_from)
    {
        if (is_null($effect_from)) {
            array_push($this->openAPINullablesSetToNull, 'effect_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_from'] = $effect_from;

        return $this;
    }

    /**
     * Gets effect_to
     *
     * @return mixed|null
     */
    public function getEffectTo()
    {
        return $this->container['effect_to'];
    }

    /**
     * Sets effect_to
     *
     * @param mixed|null $effect_to Tidspunktet for objektets 'Ã¦ndring' eller 'sletning' i databasen. Ved 'Ã¦ndring' forstÃ¥s Ã¦ndring af enhver art, hvor den hidtidige version af objektet gÃ¸res historisk og en ny version, bliver den aktuelle.
     *
     * @return self
     */
    public function setEffectTo($effect_to)
    {
        if (is_null($effect_to)) {
            array_push($this->openAPINullablesSetToNull, 'effect_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_to'] = $effect_to;

        return $this;
    }

    /**
     * Gets plan_accuracy
     *
     * @return mixed
     */
    public function getPlanAccuracy()
    {
        return $this->container['plan_accuracy'];
    }

    /**
     * Sets plan_accuracy
     *
     * @param mixed $plan_accuracy Den forventede middelfejl pÃ¥ nÃ¸jagtigheden af den registrerede XY-koordinat i forhold til dets placering i virkeligheden. 'Ukendt nÃ¸jagtighed' angives med en nÃ¸jagtighed pÃ¥ '10.00'
     *
     * @return self
     */
    public function setPlanAccuracy($plan_accuracy)
    {
        if (is_null($plan_accuracy)) {
            array_push($this->openAPINullablesSetToNull, 'plan_accuracy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plan_accuracy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['plan_accuracy'] = $plan_accuracy;

        return $this;
    }

    /**
     * Gets plan_placement_method
     *
     * @return mixed
     */
    public function getPlanPlacementMethod()
    {
        return $this->container['plan_placement_method'];
    }

    /**
     * Sets plan_placement_method
     *
     * @param mixed $plan_placement_method Metode til stedfÃ¦stelse af objektets koordinater i XY
     *
     * @return self
     */
    public function setPlanPlacementMethod($plan_placement_method)
    {
        if (is_null($plan_placement_method)) {
            array_push($this->openAPINullablesSetToNull, 'plan_placement_method');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plan_placement_method', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['plan_placement_method'] = $plan_placement_method;

        return $this;
    }

    /**
     * Gets vertical_accuracy
     *
     * @return mixed
     */
    public function getVerticalAccuracy()
    {
        return $this->container['vertical_accuracy'];
    }

    /**
     * Sets vertical_accuracy
     *
     * @param mixed $vertical_accuracy Den forventede middelfejl pÃ¥ nÃ¸jagtigheden af den registrerede Z-koordinat i forhold til dets placering i virkeligheden. 'Ukendt nÃ¸jagtighed' angives med en nÃ¸jagtighed pÃ¥ '10.00'
     *
     * @return self
     */
    public function setVerticalAccuracy($vertical_accuracy)
    {
        if (is_null($vertical_accuracy)) {
            array_push($this->openAPINullablesSetToNull, 'vertical_accuracy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vertical_accuracy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vertical_accuracy'] = $vertical_accuracy;

        return $this;
    }

    /**
     * Gets vertical_plan_placement_method
     *
     * @return mixed
     */
    public function getVerticalPlanPlacementMethod()
    {
        return $this->container['vertical_plan_placement_method'];
    }

    /**
     * Sets vertical_plan_placement_method
     *
     * @param mixed $vertical_plan_placement_method Metode til stedfÃ¦stelse af objektets Z-.koordinater.
     *
     * @return self
     */
    public function setVerticalPlanPlacementMethod($vertical_plan_placement_method)
    {
        if (is_null($vertical_plan_placement_method)) {
            array_push($this->openAPINullablesSetToNull, 'vertical_plan_placement_method');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vertical_plan_placement_method', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vertical_plan_placement_method'] = $vertical_plan_placement_method;

        return $this;
    }

    /**
     * Gets application
     *
     * @return mixed
     */
    public function getApplication()
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param mixed $application Et frit tekstfelt, der angiver den applikation og version, der har indleveret data til databasen
     *
     * @return self
     */
    public function setApplication($application)
    {
        if (is_null($application)) {
            array_push($this->openAPINullablesSetToNull, 'application');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('application', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['application'] = $application;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return mixed|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param mixed|null $comment Et frit tekstfelt, der kan indeholde en valgfri kommentar/beskrivelse af objektets forhold.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets building_type
     *
     * @return mixed
     */
    public function getBuildingType()
    {
        return $this->container['building_type'];
    }

    /**
     * Sets building_type
     *
     * @param mixed $building_type Angiver type af bygning med Ã©n af de anfÃ¸rte vÃ¦rdier.
     *
     * @return self
     */
    public function setBuildingType($building_type)
    {
        if (is_null($building_type)) {
            array_push($this->openAPINullablesSetToNull, 'building_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_type'] = $building_type;

        return $this;
    }

    /**
     * Gets measurement_place
     *
     * @return mixed
     */
    public function getMeasurementPlace()
    {
        return $this->container['measurement_place'];
    }

    /**
     * Sets measurement_place
     *
     * @param mixed $measurement_place Angiver den metode, objektet er stedfÃ¦stet med.
     *
     * @return self
     */
    public function setMeasurementPlace($measurement_place)
    {
        if (is_null($measurement_place)) {
            array_push($this->openAPINullablesSetToNull, 'measurement_place');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('measurement_place', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['measurement_place'] = $measurement_place;

        return $this;
    }

    /**
     * Gets method_3d
     *
     * @return mixed
     */
    public function getMethod3d()
    {
        return $this->container['method_3d'];
    }

    /**
     * Sets method_3d
     *
     * @param mixed $method_3d Angiver efter hvilken metode herunder specifikation z-koordinaten er registreret.
     *
     * @return self
     */
    public function setMethod3d($method_3d)
    {
        if (is_null($method_3d)) {
            array_push($this->openAPINullablesSetToNull, 'method_3d');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('method_3d', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['method_3d'] = $method_3d;

        return $this;
    }

    /**
     * Gets below_minimum_building
     *
     * @return mixed
     */
    public function getBelowMinimumBuilding()
    {
        return $this->container['below_minimum_building'];
    }

    /**
     * Sets below_minimum_building
     *
     * @param mixed $below_minimum_building Angivelse af om arealet er mindre end den minimumstÃ¸rrelse pÃ¥ en Bygning, som er defineret i GeoDanmark-Specifikationen.
     *
     * @return self
     */
    public function setBelowMinimumBuilding($below_minimum_building)
    {
        if (is_null($below_minimum_building)) {
            array_push($this->openAPINullablesSetToNull, 'below_minimum_building');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('below_minimum_building', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['below_minimum_building'] = $below_minimum_building;

        return $this;
    }

    /**
     * Gets bbr_action
     *
     * @return mixed|null
     */
    public function getBbrAction()
    {
        return $this->container['bbr_action'];
    }

    /**
     * Sets bbr_action
     *
     * @param mixed|null $bbr_action Dette er en hjÃ¦lpeattribut i forbindelse med geokodning.
     *
     * @return self
     */
    public function setBbrAction($bbr_action)
    {
        if (is_null($bbr_action)) {
            array_push($this->openAPINullablesSetToNull, 'bbr_action');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bbr_action', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bbr_action'] = $bbr_action;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return mixed
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param mixed $visible Angiver, om en BYGNING er synlig i et ortofoto.
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            array_push($this->openAPINullablesSetToNull, 'visible');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('visible', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets overlap
     *
     * @return mixed
     */
    public function getOverlap()
    {
        return $this->container['overlap'];
    }

    /**
     * Sets overlap
     *
     * @param mixed $overlap Angiver, om en BYGNING overlappes helt eller delvist af en anden BYGNING.
     *
     * @return self
     */
    public function setOverlap($overlap)
    {
        if (is_null($overlap)) {
            array_push($this->openAPINullablesSetToNull, 'overlap');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overlap', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['overlap'] = $overlap;

        return $this;
    }

    /**
     * Gets geom
     *
     * @return mixed
     */
    public function getGeom()
    {
        return $this->container['geom'];
    }

    /**
     * Sets geom
     *
     * @param mixed $geom Objektets geografiske placering.
     *
     * @return self
     */
    public function setGeom($geom)
    {
        if (is_null($geom)) {
            array_push($this->openAPINullablesSetToNull, 'geom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('geom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['geom'] = $geom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


