<?php
/**
 * StatstidendeMessage
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StatstidendeMessage Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StatstidendeMessage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StatstidendeMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'message_number' => 'mixed',
        'href' => 'mixed',
        'publication_date' => 'mixed',
        'message_type_public_key' => 'mixed',
        'field_groups' => 'mixed',
        'correction_of_message_number' => 'mixed',
        'corrected_by_message_number' => 'mixed',
        'is_corrected_by_of_type_reprint' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'message_number' => null,
        'href' => null,
        'publication_date' => null,
        'message_type_public_key' => 'uuid',
        'field_groups' => null,
        'correction_of_message_number' => null,
        'corrected_by_message_number' => null,
        'is_corrected_by_of_type_reprint' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'message_number' => true,
		'href' => true,
		'publication_date' => true,
		'message_type_public_key' => true,
		'field_groups' => true,
		'correction_of_message_number' => true,
		'corrected_by_message_number' => true,
		'is_corrected_by_of_type_reprint' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message_number' => 'message_number',
        'href' => 'href',
        'publication_date' => 'publication_date',
        'message_type_public_key' => 'message_type_public_key',
        'field_groups' => 'field_groups',
        'correction_of_message_number' => 'correction_of_message_number',
        'corrected_by_message_number' => 'corrected_by_message_number',
        'is_corrected_by_of_type_reprint' => 'is_corrected_by_of_type_reprint'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message_number' => 'setMessageNumber',
        'href' => 'setHref',
        'publication_date' => 'setPublicationDate',
        'message_type_public_key' => 'setMessageTypePublicKey',
        'field_groups' => 'setFieldGroups',
        'correction_of_message_number' => 'setCorrectionOfMessageNumber',
        'corrected_by_message_number' => 'setCorrectedByMessageNumber',
        'is_corrected_by_of_type_reprint' => 'setIsCorrectedByOfTypeReprint'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message_number' => 'getMessageNumber',
        'href' => 'getHref',
        'publication_date' => 'getPublicationDate',
        'message_type_public_key' => 'getMessageTypePublicKey',
        'field_groups' => 'getFieldGroups',
        'correction_of_message_number' => 'getCorrectionOfMessageNumber',
        'corrected_by_message_number' => 'getCorrectedByMessageNumber',
        'is_corrected_by_of_type_reprint' => 'getIsCorrectedByOfTypeReprint'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('message_number', $data ?? [], null);
        $this->setIfExists('href', $data ?? [], null);
        $this->setIfExists('publication_date', $data ?? [], null);
        $this->setIfExists('message_type_public_key', $data ?? [], null);
        $this->setIfExists('field_groups', $data ?? [], null);
        $this->setIfExists('correction_of_message_number', $data ?? [], null);
        $this->setIfExists('corrected_by_message_number', $data ?? [], null);
        $this->setIfExists('is_corrected_by_of_type_reprint', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['message_number'] === null) {
            $invalidProperties[] = "'message_number' can't be null";
        }
        if (!preg_match("^S\d{8}-\d{1,5}$", $this->container['message_number'])) {
            $invalidProperties[] = "invalid value for 'message_number', must be conform to the pattern ^S\d{8}-\d{1,5}$.";
        }

        if ($this->container['href'] === null) {
            $invalidProperties[] = "'href' can't be null";
        }
        if ($this->container['publication_date'] === null) {
            $invalidProperties[] = "'publication_date' can't be null";
        }
        if (!preg_match("^\d{4}-\d{2}-\d{2}$", $this->container['publication_date'])) {
            $invalidProperties[] = "invalid value for 'publication_date', must be conform to the pattern ^\d{4}-\d{2}-\d{2}$.";
        }

        if ($this->container['message_type_public_key'] === null) {
            $invalidProperties[] = "'message_type_public_key' can't be null";
        }
        if ($this->container['field_groups'] === null) {
            $invalidProperties[] = "'field_groups' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message_number
     *
     * @return mixed
     */
    public function getMessageNumber()
    {
        return $this->container['message_number'];
    }

    /**
     * Sets message_number
     *
     * @param mixed $message_number message_number
     *
     * @return self
     */
    public function setMessageNumber($message_number)
    {
        if (is_null($message_number)) {
            array_push($this->openAPINullablesSetToNull, 'message_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($message_number) && (!preg_match("^S\d{8}-\d{1,5}$", $message_number))) {
            throw new \InvalidArgumentException("invalid value for \$message_number when calling StatstidendeMessage., must conform to the pattern ^S\d{8}-\d{1,5}$.");
        }

        $this->container['message_number'] = $message_number;

        return $this;
    }

    /**
     * Gets href
     *
     * @return mixed
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param mixed $href href
     *
     * @return self
     */
    public function setHref($href)
    {
        if (is_null($href)) {
            array_push($this->openAPINullablesSetToNull, 'href');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('href', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets publication_date
     *
     * @return mixed
     */
    public function getPublicationDate()
    {
        return $this->container['publication_date'];
    }

    /**
     * Sets publication_date
     *
     * @param mixed $publication_date publication_date
     *
     * @return self
     */
    public function setPublicationDate($publication_date)
    {
        if (is_null($publication_date)) {
            array_push($this->openAPINullablesSetToNull, 'publication_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('publication_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($publication_date) && (!preg_match("^\d{4}-\d{2}-\d{2}$", $publication_date))) {
            throw new \InvalidArgumentException("invalid value for \$publication_date when calling StatstidendeMessage., must conform to the pattern ^\d{4}-\d{2}-\d{2}$.");
        }

        $this->container['publication_date'] = $publication_date;

        return $this;
    }

    /**
     * Gets message_type_public_key
     *
     * @return mixed
     */
    public function getMessageTypePublicKey()
    {
        return $this->container['message_type_public_key'];
    }

    /**
     * Sets message_type_public_key
     *
     * @param mixed $message_type_public_key message_type_public_key
     *
     * @return self
     */
    public function setMessageTypePublicKey($message_type_public_key)
    {
        if (is_null($message_type_public_key)) {
            array_push($this->openAPINullablesSetToNull, 'message_type_public_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message_type_public_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['message_type_public_key'] = $message_type_public_key;

        return $this;
    }

    /**
     * Gets field_groups
     *
     * @return mixed
     */
    public function getFieldGroups()
    {
        return $this->container['field_groups'];
    }

    /**
     * Sets field_groups
     *
     * @param mixed $field_groups field_groups
     *
     * @return self
     */
    public function setFieldGroups($field_groups)
    {
        if (is_null($field_groups)) {
            array_push($this->openAPINullablesSetToNull, 'field_groups');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('field_groups', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['field_groups'] = $field_groups;

        return $this;
    }

    /**
     * Gets correction_of_message_number
     *
     * @return mixed|null
     */
    public function getCorrectionOfMessageNumber()
    {
        return $this->container['correction_of_message_number'];
    }

    /**
     * Sets correction_of_message_number
     *
     * @param mixed|null $correction_of_message_number correction_of_message_number
     *
     * @return self
     */
    public function setCorrectionOfMessageNumber($correction_of_message_number)
    {
        if (is_null($correction_of_message_number)) {
            array_push($this->openAPINullablesSetToNull, 'correction_of_message_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('correction_of_message_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['correction_of_message_number'] = $correction_of_message_number;

        return $this;
    }

    /**
     * Gets corrected_by_message_number
     *
     * @return mixed|null
     */
    public function getCorrectedByMessageNumber()
    {
        return $this->container['corrected_by_message_number'];
    }

    /**
     * Sets corrected_by_message_number
     *
     * @param mixed|null $corrected_by_message_number corrected_by_message_number
     *
     * @return self
     */
    public function setCorrectedByMessageNumber($corrected_by_message_number)
    {
        if (is_null($corrected_by_message_number)) {
            array_push($this->openAPINullablesSetToNull, 'corrected_by_message_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('corrected_by_message_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['corrected_by_message_number'] = $corrected_by_message_number;

        return $this;
    }

    /**
     * Gets is_corrected_by_of_type_reprint
     *
     * @return mixed|null
     */
    public function getIsCorrectedByOfTypeReprint()
    {
        return $this->container['is_corrected_by_of_type_reprint'];
    }

    /**
     * Sets is_corrected_by_of_type_reprint
     *
     * @param mixed|null $is_corrected_by_of_type_reprint is_corrected_by_of_type_reprint
     *
     * @return self
     */
    public function setIsCorrectedByOfTypeReprint($is_corrected_by_of_type_reprint)
    {
        if (is_null($is_corrected_by_of_type_reprint)) {
            array_push($this->openAPINullablesSetToNull, 'is_corrected_by_of_type_reprint');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_corrected_by_of_type_reprint', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_corrected_by_of_type_reprint'] = $is_corrected_by_of_type_reprint;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


