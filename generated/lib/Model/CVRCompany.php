<?php
/**
 * CVRCompany
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CVRCompany Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CVRCompany implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CVRCompany';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cvr_number' => 'mixed',
        'unit_number' => 'mixed',
        'type' => '\OpenAPI\Client\Model\CVRCompanyUnitTypeEnum',
        'name' => 'mixed',
        'marketing_protection' => 'mixed',
        'number_p_units' => 'mixed',
        'status' => '\OpenAPI\Client\Model\CVRCompanyStatusEnum',
        'foundation_date' => 'mixed',
        'effect_date' => 'mixed',
        'status_code' => 'mixed',
        'status_text' => '\OpenAPI\Client\Model\CVRStatusTextEnum',
        'company_type_code' => 'mixed',
        'company_type_text' => '\OpenAPI\Client\Model\CVRCompanyTypeEnum',
        'company_type_description' => 'mixed',
        'responsible_data_provider' => 'mixed',
        'credit_information_code' => 'mixed',
        'credit_information_text' => '\OpenAPI\Client\Model\CVRCreditInformationTextEnum',
        'industry_code' => 'mixed',
        'industry_text' => 'mixed',
        'industry_code_1' => 'mixed',
        'industry_text_1' => 'mixed',
        'industry_code_2' => 'mixed',
        'industry_text_2' => 'mixed',
        'industry_code_3' => 'mixed',
        'industry_text_3' => 'mixed',
        'employees_year' => '\OpenAPI\Client\Model\CVREmployeesYear',
        'employees_quarter' => '\OpenAPI\Client\Model\CVREmployeesQuarter',
        'employees_month' => '\OpenAPI\Client\Model\CVREmployeesMonth',
        'employees_month_erst' => '\OpenAPI\Client\Model\CVREmployeesMonth',
        'address_id' => 'mixed',
        'address' => '\OpenAPI\Client\Model\CVRAddress',
        'addresses' => 'mixed',
        'registration_number' => 'mixed',
        'email' => 'mixed',
        'mandatory_email' => 'mixed',
        'website' => 'mixed',
        'phone_number' => 'mixed',
        'secondary_phone_number' => 'mixed',
        'fax_number' => 'mixed',
        'secondary_fax_number' => 'mixed',
        'effect_actor' => '\OpenAPI\Client\Model\CVREffectActorEnum',
        'industry_responsibility_code' => 'mixed',
        'data_access' => 'mixed',
        'confidential' => 'mixed',
        'error_import' => 'mixed',
        'error_description' => 'mixed',
        'error_registration' => 'mixed',
        'has_future_change' => 'mixed',
        'nearest_future_date' => 'mixed',
        'samt_id' => 'mixed',
        'last_imported' => 'mixed',
        'last_updated' => 'mixed',
        'secondary_name' => 'mixed',
        'contact_info' => 'mixed',
        'names' => 'mixed',
        'secondary_names' => 'mixed',
        'registration_numbers' => 'mixed',
        'statuses' => 'mixed',
        'company_statuses' => 'mixed',
        'company_types' => 'mixed',
        'life_courses' => 'mixed',
        'annual_employment' => 'mixed',
        'quarterly_employment' => 'mixed',
        'monthly_employment' => 'mixed',
        'monthly_employment_erst' => 'mixed',
        'postal_adresses' => 'mixed',
        'p_units' => 'mixed',
        'emails' => 'mixed',
        'mandatory_emails' => 'mixed',
        'websites' => 'mixed',
        'phone_numbers' => 'mixed',
        'secondary_phone_numbers' => 'mixed',
        'fax_numbers' => 'mixed',
        'secondary_fax_numbers' => 'mixed',
        'industries' => 'mixed',
        'industries_1' => 'mixed',
        'industries_2' => 'mixed',
        'industries_3' => 'mixed',
        'mergers' => 'mixed',
        'demergers' => 'mixed',
        'attributes' => 'mixed',
        'members' => 'mixed',
        'key_members' => 'mixed',
        'address_info' => '\OpenAPI\Client\Model\DARAddress',
        'stats' => '\OpenAPI\Client\Model\CVRCompanyStats',
        'portfolio_aggs' => '\OpenAPI\Client\Model\PortfolioAggs',
        'financials' => '\OpenAPI\Client\Model\AnnualReportComplete',
        'timeline' => 'mixed',
        'network' => '\OpenAPI\Client\Model\CVRNetwork'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cvr_number' => null,
        'unit_number' => null,
        'type' => null,
        'name' => null,
        'marketing_protection' => null,
        'number_p_units' => null,
        'status' => null,
        'foundation_date' => 'date',
        'effect_date' => 'date',
        'status_code' => null,
        'status_text' => null,
        'company_type_code' => null,
        'company_type_text' => null,
        'company_type_description' => null,
        'responsible_data_provider' => null,
        'credit_information_code' => null,
        'credit_information_text' => null,
        'industry_code' => null,
        'industry_text' => null,
        'industry_code_1' => null,
        'industry_text_1' => null,
        'industry_code_2' => null,
        'industry_text_2' => null,
        'industry_code_3' => null,
        'industry_text_3' => null,
        'employees_year' => null,
        'employees_quarter' => null,
        'employees_month' => null,
        'employees_month_erst' => null,
        'address_id' => 'uuid',
        'address' => null,
        'addresses' => null,
        'registration_number' => null,
        'email' => null,
        'mandatory_email' => null,
        'website' => null,
        'phone_number' => null,
        'secondary_phone_number' => null,
        'fax_number' => null,
        'secondary_fax_number' => null,
        'effect_actor' => null,
        'industry_responsibility_code' => null,
        'data_access' => null,
        'confidential' => null,
        'error_import' => null,
        'error_description' => null,
        'error_registration' => null,
        'has_future_change' => null,
        'nearest_future_date' => 'date',
        'samt_id' => null,
        'last_imported' => 'date-time',
        'last_updated' => 'date-time',
        'secondary_name' => null,
        'contact_info' => null,
        'names' => null,
        'secondary_names' => null,
        'registration_numbers' => null,
        'statuses' => null,
        'company_statuses' => null,
        'company_types' => null,
        'life_courses' => null,
        'annual_employment' => null,
        'quarterly_employment' => null,
        'monthly_employment' => null,
        'monthly_employment_erst' => null,
        'postal_adresses' => null,
        'p_units' => null,
        'emails' => null,
        'mandatory_emails' => null,
        'websites' => null,
        'phone_numbers' => null,
        'secondary_phone_numbers' => null,
        'fax_numbers' => null,
        'secondary_fax_numbers' => null,
        'industries' => null,
        'industries_1' => null,
        'industries_2' => null,
        'industries_3' => null,
        'mergers' => null,
        'demergers' => null,
        'attributes' => null,
        'members' => null,
        'key_members' => null,
        'address_info' => null,
        'stats' => null,
        'portfolio_aggs' => null,
        'financials' => null,
        'timeline' => null,
        'network' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cvr_number' => true,
		'unit_number' => true,
		'type' => false,
		'name' => true,
		'marketing_protection' => true,
		'number_p_units' => true,
		'status' => false,
		'foundation_date' => true,
		'effect_date' => true,
		'status_code' => true,
		'status_text' => false,
		'company_type_code' => true,
		'company_type_text' => false,
		'company_type_description' => true,
		'responsible_data_provider' => true,
		'credit_information_code' => true,
		'credit_information_text' => false,
		'industry_code' => true,
		'industry_text' => true,
		'industry_code_1' => true,
		'industry_text_1' => true,
		'industry_code_2' => true,
		'industry_text_2' => true,
		'industry_code_3' => true,
		'industry_text_3' => true,
		'employees_year' => false,
		'employees_quarter' => false,
		'employees_month' => false,
		'employees_month_erst' => false,
		'address_id' => true,
		'address' => false,
		'addresses' => true,
		'registration_number' => true,
		'email' => true,
		'mandatory_email' => true,
		'website' => true,
		'phone_number' => true,
		'secondary_phone_number' => true,
		'fax_number' => true,
		'secondary_fax_number' => true,
		'effect_actor' => false,
		'industry_responsibility_code' => true,
		'data_access' => true,
		'confidential' => true,
		'error_import' => true,
		'error_description' => true,
		'error_registration' => true,
		'has_future_change' => true,
		'nearest_future_date' => true,
		'samt_id' => true,
		'last_imported' => true,
		'last_updated' => true,
		'secondary_name' => true,
		'contact_info' => true,
		'names' => true,
		'secondary_names' => true,
		'registration_numbers' => true,
		'statuses' => true,
		'company_statuses' => true,
		'company_types' => true,
		'life_courses' => true,
		'annual_employment' => true,
		'quarterly_employment' => true,
		'monthly_employment' => true,
		'monthly_employment_erst' => true,
		'postal_adresses' => true,
		'p_units' => true,
		'emails' => true,
		'mandatory_emails' => true,
		'websites' => true,
		'phone_numbers' => true,
		'secondary_phone_numbers' => true,
		'fax_numbers' => true,
		'secondary_fax_numbers' => true,
		'industries' => true,
		'industries_1' => true,
		'industries_2' => true,
		'industries_3' => true,
		'mergers' => true,
		'demergers' => true,
		'attributes' => true,
		'members' => true,
		'key_members' => true,
		'address_info' => false,
		'stats' => false,
		'portfolio_aggs' => false,
		'financials' => false,
		'timeline' => true,
		'network' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cvr_number' => 'cvr_number',
        'unit_number' => 'unit_number',
        'type' => 'type',
        'name' => 'name',
        'marketing_protection' => 'marketing_protection',
        'number_p_units' => 'number_p_units',
        'status' => 'status',
        'foundation_date' => 'foundation_date',
        'effect_date' => 'effect_date',
        'status_code' => 'status_code',
        'status_text' => 'status_text',
        'company_type_code' => 'company_type_code',
        'company_type_text' => 'company_type_text',
        'company_type_description' => 'company_type_description',
        'responsible_data_provider' => 'responsible_data_provider',
        'credit_information_code' => 'credit_information_code',
        'credit_information_text' => 'credit_information_text',
        'industry_code' => 'industry_code',
        'industry_text' => 'industry_text',
        'industry_code_1' => 'industry_code_1',
        'industry_text_1' => 'industry_text_1',
        'industry_code_2' => 'industry_code_2',
        'industry_text_2' => 'industry_text_2',
        'industry_code_3' => 'industry_code_3',
        'industry_text_3' => 'industry_text_3',
        'employees_year' => 'employees_year',
        'employees_quarter' => 'employees_quarter',
        'employees_month' => 'employees_month',
        'employees_month_erst' => 'employees_month_erst',
        'address_id' => 'address_id',
        'address' => 'address',
        'addresses' => 'addresses',
        'registration_number' => 'registration_number',
        'email' => 'email',
        'mandatory_email' => 'mandatory_email',
        'website' => 'website',
        'phone_number' => 'phone_number',
        'secondary_phone_number' => 'secondary_phone_number',
        'fax_number' => 'fax_number',
        'secondary_fax_number' => 'secondary_fax_number',
        'effect_actor' => 'effect_actor',
        'industry_responsibility_code' => 'industry_responsibility_code',
        'data_access' => 'data_access',
        'confidential' => 'confidential',
        'error_import' => 'error_import',
        'error_description' => 'error_description',
        'error_registration' => 'error_registration',
        'has_future_change' => 'has_future_change',
        'nearest_future_date' => 'nearest_future_date',
        'samt_id' => 'samt_id',
        'last_imported' => 'last_imported',
        'last_updated' => 'last_updated',
        'secondary_name' => 'secondary_name',
        'contact_info' => 'contact_info',
        'names' => 'names',
        'secondary_names' => 'secondary_names',
        'registration_numbers' => 'registration_numbers',
        'statuses' => 'statuses',
        'company_statuses' => 'company_statuses',
        'company_types' => 'company_types',
        'life_courses' => 'life_courses',
        'annual_employment' => 'annual_employment',
        'quarterly_employment' => 'quarterly_employment',
        'monthly_employment' => 'monthly_employment',
        'monthly_employment_erst' => 'monthly_employment_erst',
        'postal_adresses' => 'postal_adresses',
        'p_units' => 'p_units',
        'emails' => 'emails',
        'mandatory_emails' => 'mandatory_emails',
        'websites' => 'websites',
        'phone_numbers' => 'phone_numbers',
        'secondary_phone_numbers' => 'secondary_phone_numbers',
        'fax_numbers' => 'fax_numbers',
        'secondary_fax_numbers' => 'secondary_fax_numbers',
        'industries' => 'industries',
        'industries_1' => 'industries_1',
        'industries_2' => 'industries_2',
        'industries_3' => 'industries_3',
        'mergers' => 'mergers',
        'demergers' => 'demergers',
        'attributes' => 'attributes',
        'members' => 'members',
        'key_members' => 'key_members',
        'address_info' => 'address_info',
        'stats' => 'stats',
        'portfolio_aggs' => 'portfolio_aggs',
        'financials' => 'financials',
        'timeline' => 'timeline',
        'network' => 'network'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cvr_number' => 'setCvrNumber',
        'unit_number' => 'setUnitNumber',
        'type' => 'setType',
        'name' => 'setName',
        'marketing_protection' => 'setMarketingProtection',
        'number_p_units' => 'setNumberPUnits',
        'status' => 'setStatus',
        'foundation_date' => 'setFoundationDate',
        'effect_date' => 'setEffectDate',
        'status_code' => 'setStatusCode',
        'status_text' => 'setStatusText',
        'company_type_code' => 'setCompanyTypeCode',
        'company_type_text' => 'setCompanyTypeText',
        'company_type_description' => 'setCompanyTypeDescription',
        'responsible_data_provider' => 'setResponsibleDataProvider',
        'credit_information_code' => 'setCreditInformationCode',
        'credit_information_text' => 'setCreditInformationText',
        'industry_code' => 'setIndustryCode',
        'industry_text' => 'setIndustryText',
        'industry_code_1' => 'setIndustryCode1',
        'industry_text_1' => 'setIndustryText1',
        'industry_code_2' => 'setIndustryCode2',
        'industry_text_2' => 'setIndustryText2',
        'industry_code_3' => 'setIndustryCode3',
        'industry_text_3' => 'setIndustryText3',
        'employees_year' => 'setEmployeesYear',
        'employees_quarter' => 'setEmployeesQuarter',
        'employees_month' => 'setEmployeesMonth',
        'employees_month_erst' => 'setEmployeesMonthErst',
        'address_id' => 'setAddressId',
        'address' => 'setAddress',
        'addresses' => 'setAddresses',
        'registration_number' => 'setRegistrationNumber',
        'email' => 'setEmail',
        'mandatory_email' => 'setMandatoryEmail',
        'website' => 'setWebsite',
        'phone_number' => 'setPhoneNumber',
        'secondary_phone_number' => 'setSecondaryPhoneNumber',
        'fax_number' => 'setFaxNumber',
        'secondary_fax_number' => 'setSecondaryFaxNumber',
        'effect_actor' => 'setEffectActor',
        'industry_responsibility_code' => 'setIndustryResponsibilityCode',
        'data_access' => 'setDataAccess',
        'confidential' => 'setConfidential',
        'error_import' => 'setErrorImport',
        'error_description' => 'setErrorDescription',
        'error_registration' => 'setErrorRegistration',
        'has_future_change' => 'setHasFutureChange',
        'nearest_future_date' => 'setNearestFutureDate',
        'samt_id' => 'setSamtId',
        'last_imported' => 'setLastImported',
        'last_updated' => 'setLastUpdated',
        'secondary_name' => 'setSecondaryName',
        'contact_info' => 'setContactInfo',
        'names' => 'setNames',
        'secondary_names' => 'setSecondaryNames',
        'registration_numbers' => 'setRegistrationNumbers',
        'statuses' => 'setStatuses',
        'company_statuses' => 'setCompanyStatuses',
        'company_types' => 'setCompanyTypes',
        'life_courses' => 'setLifeCourses',
        'annual_employment' => 'setAnnualEmployment',
        'quarterly_employment' => 'setQuarterlyEmployment',
        'monthly_employment' => 'setMonthlyEmployment',
        'monthly_employment_erst' => 'setMonthlyEmploymentErst',
        'postal_adresses' => 'setPostalAdresses',
        'p_units' => 'setPUnits',
        'emails' => 'setEmails',
        'mandatory_emails' => 'setMandatoryEmails',
        'websites' => 'setWebsites',
        'phone_numbers' => 'setPhoneNumbers',
        'secondary_phone_numbers' => 'setSecondaryPhoneNumbers',
        'fax_numbers' => 'setFaxNumbers',
        'secondary_fax_numbers' => 'setSecondaryFaxNumbers',
        'industries' => 'setIndustries',
        'industries_1' => 'setIndustries1',
        'industries_2' => 'setIndustries2',
        'industries_3' => 'setIndustries3',
        'mergers' => 'setMergers',
        'demergers' => 'setDemergers',
        'attributes' => 'setAttributes',
        'members' => 'setMembers',
        'key_members' => 'setKeyMembers',
        'address_info' => 'setAddressInfo',
        'stats' => 'setStats',
        'portfolio_aggs' => 'setPortfolioAggs',
        'financials' => 'setFinancials',
        'timeline' => 'setTimeline',
        'network' => 'setNetwork'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cvr_number' => 'getCvrNumber',
        'unit_number' => 'getUnitNumber',
        'type' => 'getType',
        'name' => 'getName',
        'marketing_protection' => 'getMarketingProtection',
        'number_p_units' => 'getNumberPUnits',
        'status' => 'getStatus',
        'foundation_date' => 'getFoundationDate',
        'effect_date' => 'getEffectDate',
        'status_code' => 'getStatusCode',
        'status_text' => 'getStatusText',
        'company_type_code' => 'getCompanyTypeCode',
        'company_type_text' => 'getCompanyTypeText',
        'company_type_description' => 'getCompanyTypeDescription',
        'responsible_data_provider' => 'getResponsibleDataProvider',
        'credit_information_code' => 'getCreditInformationCode',
        'credit_information_text' => 'getCreditInformationText',
        'industry_code' => 'getIndustryCode',
        'industry_text' => 'getIndustryText',
        'industry_code_1' => 'getIndustryCode1',
        'industry_text_1' => 'getIndustryText1',
        'industry_code_2' => 'getIndustryCode2',
        'industry_text_2' => 'getIndustryText2',
        'industry_code_3' => 'getIndustryCode3',
        'industry_text_3' => 'getIndustryText3',
        'employees_year' => 'getEmployeesYear',
        'employees_quarter' => 'getEmployeesQuarter',
        'employees_month' => 'getEmployeesMonth',
        'employees_month_erst' => 'getEmployeesMonthErst',
        'address_id' => 'getAddressId',
        'address' => 'getAddress',
        'addresses' => 'getAddresses',
        'registration_number' => 'getRegistrationNumber',
        'email' => 'getEmail',
        'mandatory_email' => 'getMandatoryEmail',
        'website' => 'getWebsite',
        'phone_number' => 'getPhoneNumber',
        'secondary_phone_number' => 'getSecondaryPhoneNumber',
        'fax_number' => 'getFaxNumber',
        'secondary_fax_number' => 'getSecondaryFaxNumber',
        'effect_actor' => 'getEffectActor',
        'industry_responsibility_code' => 'getIndustryResponsibilityCode',
        'data_access' => 'getDataAccess',
        'confidential' => 'getConfidential',
        'error_import' => 'getErrorImport',
        'error_description' => 'getErrorDescription',
        'error_registration' => 'getErrorRegistration',
        'has_future_change' => 'getHasFutureChange',
        'nearest_future_date' => 'getNearestFutureDate',
        'samt_id' => 'getSamtId',
        'last_imported' => 'getLastImported',
        'last_updated' => 'getLastUpdated',
        'secondary_name' => 'getSecondaryName',
        'contact_info' => 'getContactInfo',
        'names' => 'getNames',
        'secondary_names' => 'getSecondaryNames',
        'registration_numbers' => 'getRegistrationNumbers',
        'statuses' => 'getStatuses',
        'company_statuses' => 'getCompanyStatuses',
        'company_types' => 'getCompanyTypes',
        'life_courses' => 'getLifeCourses',
        'annual_employment' => 'getAnnualEmployment',
        'quarterly_employment' => 'getQuarterlyEmployment',
        'monthly_employment' => 'getMonthlyEmployment',
        'monthly_employment_erst' => 'getMonthlyEmploymentErst',
        'postal_adresses' => 'getPostalAdresses',
        'p_units' => 'getPUnits',
        'emails' => 'getEmails',
        'mandatory_emails' => 'getMandatoryEmails',
        'websites' => 'getWebsites',
        'phone_numbers' => 'getPhoneNumbers',
        'secondary_phone_numbers' => 'getSecondaryPhoneNumbers',
        'fax_numbers' => 'getFaxNumbers',
        'secondary_fax_numbers' => 'getSecondaryFaxNumbers',
        'industries' => 'getIndustries',
        'industries_1' => 'getIndustries1',
        'industries_2' => 'getIndustries2',
        'industries_3' => 'getIndustries3',
        'mergers' => 'getMergers',
        'demergers' => 'getDemergers',
        'attributes' => 'getAttributes',
        'members' => 'getMembers',
        'key_members' => 'getKeyMembers',
        'address_info' => 'getAddressInfo',
        'stats' => 'getStats',
        'portfolio_aggs' => 'getPortfolioAggs',
        'financials' => 'getFinancials',
        'timeline' => 'getTimeline',
        'network' => 'getNetwork'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cvr_number', $data ?? [], null);
        $this->setIfExists('unit_number', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('marketing_protection', $data ?? [], null);
        $this->setIfExists('number_p_units', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('foundation_date', $data ?? [], null);
        $this->setIfExists('effect_date', $data ?? [], null);
        $this->setIfExists('status_code', $data ?? [], null);
        $this->setIfExists('status_text', $data ?? [], null);
        $this->setIfExists('company_type_code', $data ?? [], null);
        $this->setIfExists('company_type_text', $data ?? [], null);
        $this->setIfExists('company_type_description', $data ?? [], null);
        $this->setIfExists('responsible_data_provider', $data ?? [], null);
        $this->setIfExists('credit_information_code', $data ?? [], null);
        $this->setIfExists('credit_information_text', $data ?? [], null);
        $this->setIfExists('industry_code', $data ?? [], null);
        $this->setIfExists('industry_text', $data ?? [], null);
        $this->setIfExists('industry_code_1', $data ?? [], null);
        $this->setIfExists('industry_text_1', $data ?? [], null);
        $this->setIfExists('industry_code_2', $data ?? [], null);
        $this->setIfExists('industry_text_2', $data ?? [], null);
        $this->setIfExists('industry_code_3', $data ?? [], null);
        $this->setIfExists('industry_text_3', $data ?? [], null);
        $this->setIfExists('employees_year', $data ?? [], null);
        $this->setIfExists('employees_quarter', $data ?? [], null);
        $this->setIfExists('employees_month', $data ?? [], null);
        $this->setIfExists('employees_month_erst', $data ?? [], null);
        $this->setIfExists('address_id', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('registration_number', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('mandatory_email', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('secondary_phone_number', $data ?? [], null);
        $this->setIfExists('fax_number', $data ?? [], null);
        $this->setIfExists('secondary_fax_number', $data ?? [], null);
        $this->setIfExists('effect_actor', $data ?? [], null);
        $this->setIfExists('industry_responsibility_code', $data ?? [], null);
        $this->setIfExists('data_access', $data ?? [], null);
        $this->setIfExists('confidential', $data ?? [], null);
        $this->setIfExists('error_import', $data ?? [], null);
        $this->setIfExists('error_description', $data ?? [], null);
        $this->setIfExists('error_registration', $data ?? [], null);
        $this->setIfExists('has_future_change', $data ?? [], null);
        $this->setIfExists('nearest_future_date', $data ?? [], null);
        $this->setIfExists('samt_id', $data ?? [], null);
        $this->setIfExists('last_imported', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('secondary_name', $data ?? [], null);
        $this->setIfExists('contact_info', $data ?? [], null);
        $this->setIfExists('names', $data ?? [], null);
        $this->setIfExists('secondary_names', $data ?? [], null);
        $this->setIfExists('registration_numbers', $data ?? [], null);
        $this->setIfExists('statuses', $data ?? [], null);
        $this->setIfExists('company_statuses', $data ?? [], null);
        $this->setIfExists('company_types', $data ?? [], null);
        $this->setIfExists('life_courses', $data ?? [], null);
        $this->setIfExists('annual_employment', $data ?? [], null);
        $this->setIfExists('quarterly_employment', $data ?? [], null);
        $this->setIfExists('monthly_employment', $data ?? [], null);
        $this->setIfExists('monthly_employment_erst', $data ?? [], null);
        $this->setIfExists('postal_adresses', $data ?? [], null);
        $this->setIfExists('p_units', $data ?? [], null);
        $this->setIfExists('emails', $data ?? [], null);
        $this->setIfExists('mandatory_emails', $data ?? [], null);
        $this->setIfExists('websites', $data ?? [], null);
        $this->setIfExists('phone_numbers', $data ?? [], null);
        $this->setIfExists('secondary_phone_numbers', $data ?? [], null);
        $this->setIfExists('fax_numbers', $data ?? [], null);
        $this->setIfExists('secondary_fax_numbers', $data ?? [], null);
        $this->setIfExists('industries', $data ?? [], null);
        $this->setIfExists('industries_1', $data ?? [], null);
        $this->setIfExists('industries_2', $data ?? [], null);
        $this->setIfExists('industries_3', $data ?? [], null);
        $this->setIfExists('mergers', $data ?? [], null);
        $this->setIfExists('demergers', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('members', $data ?? [], null);
        $this->setIfExists('key_members', $data ?? [], null);
        $this->setIfExists('address_info', $data ?? [], null);
        $this->setIfExists('stats', $data ?? [], null);
        $this->setIfExists('portfolio_aggs', $data ?? [], null);
        $this->setIfExists('financials', $data ?? [], null);
        $this->setIfExists('timeline', $data ?? [], null);
        $this->setIfExists('network', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cvr_number'] === null) {
            $invalidProperties[] = "'cvr_number' can't be null";
        }
        if ($this->container['unit_number'] === null) {
            $invalidProperties[] = "'unit_number' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['marketing_protection'] === null) {
            $invalidProperties[] = "'marketing_protection' can't be null";
        }
        if ($this->container['number_p_units'] === null) {
            $invalidProperties[] = "'number_p_units' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['addresses'] === null) {
            $invalidProperties[] = "'addresses' can't be null";
        }
        if ($this->container['data_access'] === null) {
            $invalidProperties[] = "'data_access' can't be null";
        }
        if ($this->container['error_import'] === null) {
            $invalidProperties[] = "'error_import' can't be null";
        }
        if ($this->container['error_registration'] === null) {
            $invalidProperties[] = "'error_registration' can't be null";
        }
        if ($this->container['samt_id'] === null) {
            $invalidProperties[] = "'samt_id' can't be null";
        }
        if ($this->container['last_imported'] === null) {
            $invalidProperties[] = "'last_imported' can't be null";
        }
        if ($this->container['last_updated'] === null) {
            $invalidProperties[] = "'last_updated' can't be null";
        }
        if ($this->container['contact_info'] === null) {
            $invalidProperties[] = "'contact_info' can't be null";
        }
        if ($this->container['names'] === null) {
            $invalidProperties[] = "'names' can't be null";
        }
        if ($this->container['secondary_names'] === null) {
            $invalidProperties[] = "'secondary_names' can't be null";
        }
        if ($this->container['registration_numbers'] === null) {
            $invalidProperties[] = "'registration_numbers' can't be null";
        }
        if ($this->container['statuses'] === null) {
            $invalidProperties[] = "'statuses' can't be null";
        }
        if ($this->container['company_statuses'] === null) {
            $invalidProperties[] = "'company_statuses' can't be null";
        }
        if ($this->container['company_types'] === null) {
            $invalidProperties[] = "'company_types' can't be null";
        }
        if ($this->container['life_courses'] === null) {
            $invalidProperties[] = "'life_courses' can't be null";
        }
        if ($this->container['postal_adresses'] === null) {
            $invalidProperties[] = "'postal_adresses' can't be null";
        }
        if ($this->container['p_units'] === null) {
            $invalidProperties[] = "'p_units' can't be null";
        }
        if ($this->container['industries'] === null) {
            $invalidProperties[] = "'industries' can't be null";
        }
        if ($this->container['industries_1'] === null) {
            $invalidProperties[] = "'industries_1' can't be null";
        }
        if ($this->container['industries_2'] === null) {
            $invalidProperties[] = "'industries_2' can't be null";
        }
        if ($this->container['industries_3'] === null) {
            $invalidProperties[] = "'industries_3' can't be null";
        }
        if ($this->container['mergers'] === null) {
            $invalidProperties[] = "'mergers' can't be null";
        }
        if ($this->container['demergers'] === null) {
            $invalidProperties[] = "'demergers' can't be null";
        }
        if ($this->container['attributes'] === null) {
            $invalidProperties[] = "'attributes' can't be null";
        }
        if ($this->container['members'] === null) {
            $invalidProperties[] = "'members' can't be null";
        }
        if ($this->container['key_members'] === null) {
            $invalidProperties[] = "'key_members' can't be null";
        }
        if ($this->container['stats'] === null) {
            $invalidProperties[] = "'stats' can't be null";
        }
        if ($this->container['portfolio_aggs'] === null) {
            $invalidProperties[] = "'portfolio_aggs' can't be null";
        }
        if ($this->container['timeline'] === null) {
            $invalidProperties[] = "'timeline' can't be null";
        }
        if ($this->container['network'] === null) {
            $invalidProperties[] = "'network' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cvr_number
     *
     * @return mixed
     */
    public function getCvrNumber()
    {
        return $this->container['cvr_number'];
    }

    /**
     * Sets cvr_number
     *
     * @param mixed $cvr_number cvr_number
     *
     * @return self
     */
    public function setCvrNumber($cvr_number)
    {
        if (is_null($cvr_number)) {
            array_push($this->openAPINullablesSetToNull, 'cvr_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cvr_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cvr_number'] = $cvr_number;

        return $this;
    }

    /**
     * Gets unit_number
     *
     * @return mixed
     */
    public function getUnitNumber()
    {
        return $this->container['unit_number'];
    }

    /**
     * Sets unit_number
     *
     * @param mixed $unit_number unit_number
     *
     * @return self
     */
    public function setUnitNumber($unit_number)
    {
        if (is_null($unit_number)) {
            array_push($this->openAPINullablesSetToNull, 'unit_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_number'] = $unit_number;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\CVRCompanyUnitTypeEnum
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\CVRCompanyUnitTypeEnum $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return mixed|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param mixed|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets marketing_protection
     *
     * @return mixed
     */
    public function getMarketingProtection()
    {
        return $this->container['marketing_protection'];
    }

    /**
     * Sets marketing_protection
     *
     * @param mixed $marketing_protection marketing_protection
     *
     * @return self
     */
    public function setMarketingProtection($marketing_protection)
    {
        if (is_null($marketing_protection)) {
            array_push($this->openAPINullablesSetToNull, 'marketing_protection');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('marketing_protection', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['marketing_protection'] = $marketing_protection;

        return $this;
    }

    /**
     * Gets number_p_units
     *
     * @return mixed
     */
    public function getNumberPUnits()
    {
        return $this->container['number_p_units'];
    }

    /**
     * Sets number_p_units
     *
     * @param mixed $number_p_units number_p_units
     *
     * @return self
     */
    public function setNumberPUnits($number_p_units)
    {
        if (is_null($number_p_units)) {
            array_push($this->openAPINullablesSetToNull, 'number_p_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_p_units', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_p_units'] = $number_p_units;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\CVRCompanyStatusEnum
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\CVRCompanyStatusEnum $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets foundation_date
     *
     * @return mixed|null
     */
    public function getFoundationDate()
    {
        return $this->container['foundation_date'];
    }

    /**
     * Sets foundation_date
     *
     * @param mixed|null $foundation_date foundation_date
     *
     * @return self
     */
    public function setFoundationDate($foundation_date)
    {
        if (is_null($foundation_date)) {
            array_push($this->openAPINullablesSetToNull, 'foundation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('foundation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['foundation_date'] = $foundation_date;

        return $this;
    }

    /**
     * Gets effect_date
     *
     * @return mixed|null
     */
    public function getEffectDate()
    {
        return $this->container['effect_date'];
    }

    /**
     * Sets effect_date
     *
     * @param mixed|null $effect_date effect_date
     *
     * @return self
     */
    public function setEffectDate($effect_date)
    {
        if (is_null($effect_date)) {
            array_push($this->openAPINullablesSetToNull, 'effect_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_date'] = $effect_date;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return mixed|null
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param mixed|null $status_code status_code
     *
     * @return self
     */
    public function setStatusCode($status_code)
    {
        if (is_null($status_code)) {
            array_push($this->openAPINullablesSetToNull, 'status_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets status_text
     *
     * @return \OpenAPI\Client\Model\CVRStatusTextEnum|null
     */
    public function getStatusText()
    {
        return $this->container['status_text'];
    }

    /**
     * Sets status_text
     *
     * @param \OpenAPI\Client\Model\CVRStatusTextEnum|null $status_text status_text
     *
     * @return self
     */
    public function setStatusText($status_text)
    {
        if (is_null($status_text)) {
            throw new \InvalidArgumentException('non-nullable status_text cannot be null');
        }
        $this->container['status_text'] = $status_text;

        return $this;
    }

    /**
     * Gets company_type_code
     *
     * @return mixed|null
     */
    public function getCompanyTypeCode()
    {
        return $this->container['company_type_code'];
    }

    /**
     * Sets company_type_code
     *
     * @param mixed|null $company_type_code company_type_code
     *
     * @return self
     */
    public function setCompanyTypeCode($company_type_code)
    {
        if (is_null($company_type_code)) {
            array_push($this->openAPINullablesSetToNull, 'company_type_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_type_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_type_code'] = $company_type_code;

        return $this;
    }

    /**
     * Gets company_type_text
     *
     * @return \OpenAPI\Client\Model\CVRCompanyTypeEnum|null
     */
    public function getCompanyTypeText()
    {
        return $this->container['company_type_text'];
    }

    /**
     * Sets company_type_text
     *
     * @param \OpenAPI\Client\Model\CVRCompanyTypeEnum|null $company_type_text company_type_text
     *
     * @return self
     */
    public function setCompanyTypeText($company_type_text)
    {
        if (is_null($company_type_text)) {
            throw new \InvalidArgumentException('non-nullable company_type_text cannot be null');
        }
        $this->container['company_type_text'] = $company_type_text;

        return $this;
    }

    /**
     * Gets company_type_description
     *
     * @return mixed|null
     */
    public function getCompanyTypeDescription()
    {
        return $this->container['company_type_description'];
    }

    /**
     * Sets company_type_description
     *
     * @param mixed|null $company_type_description company_type_description
     *
     * @return self
     */
    public function setCompanyTypeDescription($company_type_description)
    {
        if (is_null($company_type_description)) {
            array_push($this->openAPINullablesSetToNull, 'company_type_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_type_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_type_description'] = $company_type_description;

        return $this;
    }

    /**
     * Gets responsible_data_provider
     *
     * @return mixed|null
     */
    public function getResponsibleDataProvider()
    {
        return $this->container['responsible_data_provider'];
    }

    /**
     * Sets responsible_data_provider
     *
     * @param mixed|null $responsible_data_provider responsible_data_provider
     *
     * @return self
     */
    public function setResponsibleDataProvider($responsible_data_provider)
    {
        if (is_null($responsible_data_provider)) {
            array_push($this->openAPINullablesSetToNull, 'responsible_data_provider');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('responsible_data_provider', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['responsible_data_provider'] = $responsible_data_provider;

        return $this;
    }

    /**
     * Gets credit_information_code
     *
     * @return mixed|null
     */
    public function getCreditInformationCode()
    {
        return $this->container['credit_information_code'];
    }

    /**
     * Sets credit_information_code
     *
     * @param mixed|null $credit_information_code credit_information_code
     *
     * @return self
     */
    public function setCreditInformationCode($credit_information_code)
    {
        if (is_null($credit_information_code)) {
            array_push($this->openAPINullablesSetToNull, 'credit_information_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credit_information_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['credit_information_code'] = $credit_information_code;

        return $this;
    }

    /**
     * Gets credit_information_text
     *
     * @return \OpenAPI\Client\Model\CVRCreditInformationTextEnum|null
     */
    public function getCreditInformationText()
    {
        return $this->container['credit_information_text'];
    }

    /**
     * Sets credit_information_text
     *
     * @param \OpenAPI\Client\Model\CVRCreditInformationTextEnum|null $credit_information_text credit_information_text
     *
     * @return self
     */
    public function setCreditInformationText($credit_information_text)
    {
        if (is_null($credit_information_text)) {
            throw new \InvalidArgumentException('non-nullable credit_information_text cannot be null');
        }
        $this->container['credit_information_text'] = $credit_information_text;

        return $this;
    }

    /**
     * Gets industry_code
     *
     * @return mixed|null
     */
    public function getIndustryCode()
    {
        return $this->container['industry_code'];
    }

    /**
     * Sets industry_code
     *
     * @param mixed|null $industry_code industry_code
     *
     * @return self
     */
    public function setIndustryCode($industry_code)
    {
        if (is_null($industry_code)) {
            array_push($this->openAPINullablesSetToNull, 'industry_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industry_code'] = $industry_code;

        return $this;
    }

    /**
     * Gets industry_text
     *
     * @return mixed|null
     */
    public function getIndustryText()
    {
        return $this->container['industry_text'];
    }

    /**
     * Sets industry_text
     *
     * @param mixed|null $industry_text industry_text
     *
     * @return self
     */
    public function setIndustryText($industry_text)
    {
        if (is_null($industry_text)) {
            array_push($this->openAPINullablesSetToNull, 'industry_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industry_text'] = $industry_text;

        return $this;
    }

    /**
     * Gets industry_code_1
     *
     * @return mixed|null
     */
    public function getIndustryCode1()
    {
        return $this->container['industry_code_1'];
    }

    /**
     * Sets industry_code_1
     *
     * @param mixed|null $industry_code_1 industry_code_1
     *
     * @return self
     */
    public function setIndustryCode1($industry_code_1)
    {
        if (is_null($industry_code_1)) {
            array_push($this->openAPINullablesSetToNull, 'industry_code_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_code_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industry_code_1'] = $industry_code_1;

        return $this;
    }

    /**
     * Gets industry_text_1
     *
     * @return mixed|null
     */
    public function getIndustryText1()
    {
        return $this->container['industry_text_1'];
    }

    /**
     * Sets industry_text_1
     *
     * @param mixed|null $industry_text_1 industry_text_1
     *
     * @return self
     */
    public function setIndustryText1($industry_text_1)
    {
        if (is_null($industry_text_1)) {
            array_push($this->openAPINullablesSetToNull, 'industry_text_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_text_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industry_text_1'] = $industry_text_1;

        return $this;
    }

    /**
     * Gets industry_code_2
     *
     * @return mixed|null
     */
    public function getIndustryCode2()
    {
        return $this->container['industry_code_2'];
    }

    /**
     * Sets industry_code_2
     *
     * @param mixed|null $industry_code_2 industry_code_2
     *
     * @return self
     */
    public function setIndustryCode2($industry_code_2)
    {
        if (is_null($industry_code_2)) {
            array_push($this->openAPINullablesSetToNull, 'industry_code_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_code_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industry_code_2'] = $industry_code_2;

        return $this;
    }

    /**
     * Gets industry_text_2
     *
     * @return mixed|null
     */
    public function getIndustryText2()
    {
        return $this->container['industry_text_2'];
    }

    /**
     * Sets industry_text_2
     *
     * @param mixed|null $industry_text_2 industry_text_2
     *
     * @return self
     */
    public function setIndustryText2($industry_text_2)
    {
        if (is_null($industry_text_2)) {
            array_push($this->openAPINullablesSetToNull, 'industry_text_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_text_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industry_text_2'] = $industry_text_2;

        return $this;
    }

    /**
     * Gets industry_code_3
     *
     * @return mixed|null
     */
    public function getIndustryCode3()
    {
        return $this->container['industry_code_3'];
    }

    /**
     * Sets industry_code_3
     *
     * @param mixed|null $industry_code_3 industry_code_3
     *
     * @return self
     */
    public function setIndustryCode3($industry_code_3)
    {
        if (is_null($industry_code_3)) {
            array_push($this->openAPINullablesSetToNull, 'industry_code_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_code_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industry_code_3'] = $industry_code_3;

        return $this;
    }

    /**
     * Gets industry_text_3
     *
     * @return mixed|null
     */
    public function getIndustryText3()
    {
        return $this->container['industry_text_3'];
    }

    /**
     * Sets industry_text_3
     *
     * @param mixed|null $industry_text_3 industry_text_3
     *
     * @return self
     */
    public function setIndustryText3($industry_text_3)
    {
        if (is_null($industry_text_3)) {
            array_push($this->openAPINullablesSetToNull, 'industry_text_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_text_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industry_text_3'] = $industry_text_3;

        return $this;
    }

    /**
     * Gets employees_year
     *
     * @return \OpenAPI\Client\Model\CVREmployeesYear|null
     */
    public function getEmployeesYear()
    {
        return $this->container['employees_year'];
    }

    /**
     * Sets employees_year
     *
     * @param \OpenAPI\Client\Model\CVREmployeesYear|null $employees_year employees_year
     *
     * @return self
     */
    public function setEmployeesYear($employees_year)
    {
        if (is_null($employees_year)) {
            throw new \InvalidArgumentException('non-nullable employees_year cannot be null');
        }
        $this->container['employees_year'] = $employees_year;

        return $this;
    }

    /**
     * Gets employees_quarter
     *
     * @return \OpenAPI\Client\Model\CVREmployeesQuarter|null
     */
    public function getEmployeesQuarter()
    {
        return $this->container['employees_quarter'];
    }

    /**
     * Sets employees_quarter
     *
     * @param \OpenAPI\Client\Model\CVREmployeesQuarter|null $employees_quarter employees_quarter
     *
     * @return self
     */
    public function setEmployeesQuarter($employees_quarter)
    {
        if (is_null($employees_quarter)) {
            throw new \InvalidArgumentException('non-nullable employees_quarter cannot be null');
        }
        $this->container['employees_quarter'] = $employees_quarter;

        return $this;
    }

    /**
     * Gets employees_month
     *
     * @return \OpenAPI\Client\Model\CVREmployeesMonth|null
     */
    public function getEmployeesMonth()
    {
        return $this->container['employees_month'];
    }

    /**
     * Sets employees_month
     *
     * @param \OpenAPI\Client\Model\CVREmployeesMonth|null $employees_month employees_month
     *
     * @return self
     */
    public function setEmployeesMonth($employees_month)
    {
        if (is_null($employees_month)) {
            throw new \InvalidArgumentException('non-nullable employees_month cannot be null');
        }
        $this->container['employees_month'] = $employees_month;

        return $this;
    }

    /**
     * Gets employees_month_erst
     *
     * @return \OpenAPI\Client\Model\CVREmployeesMonth|null
     */
    public function getEmployeesMonthErst()
    {
        return $this->container['employees_month_erst'];
    }

    /**
     * Sets employees_month_erst
     *
     * @param \OpenAPI\Client\Model\CVREmployeesMonth|null $employees_month_erst employees_month_erst
     *
     * @return self
     */
    public function setEmployeesMonthErst($employees_month_erst)
    {
        if (is_null($employees_month_erst)) {
            throw new \InvalidArgumentException('non-nullable employees_month_erst cannot be null');
        }
        $this->container['employees_month_erst'] = $employees_month_erst;

        return $this;
    }

    /**
     * Gets address_id
     *
     * @return mixed|null
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     *
     * @param mixed|null $address_id address_id
     *
     * @return self
     */
    public function setAddressId($address_id)
    {
        if (is_null($address_id)) {
            array_push($this->openAPINullablesSetToNull, 'address_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_id'] = $address_id;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\CVRAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\CVRAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return mixed
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param mixed $addresses addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            array_push($this->openAPINullablesSetToNull, 'addresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addresses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets registration_number
     *
     * @return mixed|null
     */
    public function getRegistrationNumber()
    {
        return $this->container['registration_number'];
    }

    /**
     * Sets registration_number
     *
     * @param mixed|null $registration_number registration_number
     *
     * @return self
     */
    public function setRegistrationNumber($registration_number)
    {
        if (is_null($registration_number)) {
            array_push($this->openAPINullablesSetToNull, 'registration_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_number'] = $registration_number;

        return $this;
    }

    /**
     * Gets email
     *
     * @return mixed|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param mixed|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets mandatory_email
     *
     * @return mixed|null
     */
    public function getMandatoryEmail()
    {
        return $this->container['mandatory_email'];
    }

    /**
     * Sets mandatory_email
     *
     * @param mixed|null $mandatory_email mandatory_email
     *
     * @return self
     */
    public function setMandatoryEmail($mandatory_email)
    {
        if (is_null($mandatory_email)) {
            array_push($this->openAPINullablesSetToNull, 'mandatory_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mandatory_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mandatory_email'] = $mandatory_email;

        return $this;
    }

    /**
     * Gets website
     *
     * @return mixed|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param mixed|null $website website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            array_push($this->openAPINullablesSetToNull, 'website');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('website', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return mixed|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param mixed|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets secondary_phone_number
     *
     * @return mixed|null
     */
    public function getSecondaryPhoneNumber()
    {
        return $this->container['secondary_phone_number'];
    }

    /**
     * Sets secondary_phone_number
     *
     * @param mixed|null $secondary_phone_number secondary_phone_number
     *
     * @return self
     */
    public function setSecondaryPhoneNumber($secondary_phone_number)
    {
        if (is_null($secondary_phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'secondary_phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondary_phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondary_phone_number'] = $secondary_phone_number;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return mixed|null
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param mixed|null $fax_number fax_number
     *
     * @return self
     */
    public function setFaxNumber($fax_number)
    {
        if (is_null($fax_number)) {
            array_push($this->openAPINullablesSetToNull, 'fax_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets secondary_fax_number
     *
     * @return mixed|null
     */
    public function getSecondaryFaxNumber()
    {
        return $this->container['secondary_fax_number'];
    }

    /**
     * Sets secondary_fax_number
     *
     * @param mixed|null $secondary_fax_number secondary_fax_number
     *
     * @return self
     */
    public function setSecondaryFaxNumber($secondary_fax_number)
    {
        if (is_null($secondary_fax_number)) {
            array_push($this->openAPINullablesSetToNull, 'secondary_fax_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondary_fax_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondary_fax_number'] = $secondary_fax_number;

        return $this;
    }

    /**
     * Gets effect_actor
     *
     * @return \OpenAPI\Client\Model\CVREffectActorEnum|null
     */
    public function getEffectActor()
    {
        return $this->container['effect_actor'];
    }

    /**
     * Sets effect_actor
     *
     * @param \OpenAPI\Client\Model\CVREffectActorEnum|null $effect_actor effect_actor
     *
     * @return self
     */
    public function setEffectActor($effect_actor)
    {
        if (is_null($effect_actor)) {
            throw new \InvalidArgumentException('non-nullable effect_actor cannot be null');
        }
        $this->container['effect_actor'] = $effect_actor;

        return $this;
    }

    /**
     * Gets industry_responsibility_code
     *
     * @return mixed|null
     */
    public function getIndustryResponsibilityCode()
    {
        return $this->container['industry_responsibility_code'];
    }

    /**
     * Sets industry_responsibility_code
     *
     * @param mixed|null $industry_responsibility_code industry_responsibility_code
     *
     * @return self
     */
    public function setIndustryResponsibilityCode($industry_responsibility_code)
    {
        if (is_null($industry_responsibility_code)) {
            array_push($this->openAPINullablesSetToNull, 'industry_responsibility_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_responsibility_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industry_responsibility_code'] = $industry_responsibility_code;

        return $this;
    }

    /**
     * Gets data_access
     *
     * @return mixed
     */
    public function getDataAccess()
    {
        return $this->container['data_access'];
    }

    /**
     * Sets data_access
     *
     * @param mixed $data_access data_access
     *
     * @return self
     */
    public function setDataAccess($data_access)
    {
        if (is_null($data_access)) {
            array_push($this->openAPINullablesSetToNull, 'data_access');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_access', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_access'] = $data_access;

        return $this;
    }

    /**
     * Gets confidential
     *
     * @return mixed|null
     */
    public function getConfidential()
    {
        return $this->container['confidential'];
    }

    /**
     * Sets confidential
     *
     * @param mixed|null $confidential confidential
     *
     * @return self
     */
    public function setConfidential($confidential)
    {
        if (is_null($confidential)) {
            array_push($this->openAPINullablesSetToNull, 'confidential');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('confidential', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['confidential'] = $confidential;

        return $this;
    }

    /**
     * Gets error_import
     *
     * @return mixed
     */
    public function getErrorImport()
    {
        return $this->container['error_import'];
    }

    /**
     * Sets error_import
     *
     * @param mixed $error_import error_import
     *
     * @return self
     */
    public function setErrorImport($error_import)
    {
        if (is_null($error_import)) {
            array_push($this->openAPINullablesSetToNull, 'error_import');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_import', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_import'] = $error_import;

        return $this;
    }

    /**
     * Gets error_description
     *
     * @return mixed|null
     */
    public function getErrorDescription()
    {
        return $this->container['error_description'];
    }

    /**
     * Sets error_description
     *
     * @param mixed|null $error_description error_description
     *
     * @return self
     */
    public function setErrorDescription($error_description)
    {
        if (is_null($error_description)) {
            array_push($this->openAPINullablesSetToNull, 'error_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_description'] = $error_description;

        return $this;
    }

    /**
     * Gets error_registration
     *
     * @return mixed
     */
    public function getErrorRegistration()
    {
        return $this->container['error_registration'];
    }

    /**
     * Sets error_registration
     *
     * @param mixed $error_registration Nogle enheder kan ligge med denne vÃ¦rdi, hvis de er blevet registreret som fÃ¸lge af en systemfejl.
     *
     * @return self
     */
    public function setErrorRegistration($error_registration)
    {
        if (is_null($error_registration)) {
            array_push($this->openAPINullablesSetToNull, 'error_registration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_registration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_registration'] = $error_registration;

        return $this;
    }

    /**
     * Gets has_future_change
     *
     * @return mixed|null
     */
    public function getHasFutureChange()
    {
        return $this->container['has_future_change'];
    }

    /**
     * Sets has_future_change
     *
     * @param mixed|null $has_future_change has_future_change
     *
     * @return self
     */
    public function setHasFutureChange($has_future_change)
    {
        if (is_null($has_future_change)) {
            array_push($this->openAPINullablesSetToNull, 'has_future_change');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_future_change', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_future_change'] = $has_future_change;

        return $this;
    }

    /**
     * Gets nearest_future_date
     *
     * @return mixed|null
     */
    public function getNearestFutureDate()
    {
        return $this->container['nearest_future_date'];
    }

    /**
     * Sets nearest_future_date
     *
     * @param mixed|null $nearest_future_date nearest_future_date
     *
     * @return self
     */
    public function setNearestFutureDate($nearest_future_date)
    {
        if (is_null($nearest_future_date)) {
            array_push($this->openAPINullablesSetToNull, 'nearest_future_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nearest_future_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nearest_future_date'] = $nearest_future_date;

        return $this;
    }

    /**
     * Gets samt_id
     *
     * @return mixed
     */
    public function getSamtId()
    {
        return $this->container['samt_id'];
    }

    /**
     * Sets samt_id
     *
     * @param mixed $samt_id samt_id
     *
     * @return self
     */
    public function setSamtId($samt_id)
    {
        if (is_null($samt_id)) {
            array_push($this->openAPINullablesSetToNull, 'samt_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('samt_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['samt_id'] = $samt_id;

        return $this;
    }

    /**
     * Gets last_imported
     *
     * @return mixed
     */
    public function getLastImported()
    {
        return $this->container['last_imported'];
    }

    /**
     * Sets last_imported
     *
     * @param mixed $last_imported last_imported
     *
     * @return self
     */
    public function setLastImported($last_imported)
    {
        if (is_null($last_imported)) {
            array_push($this->openAPINullablesSetToNull, 'last_imported');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_imported', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_imported'] = $last_imported;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return mixed
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param mixed $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            array_push($this->openAPINullablesSetToNull, 'last_updated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_updated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets secondary_name
     *
     * @return mixed|null
     */
    public function getSecondaryName()
    {
        return $this->container['secondary_name'];
    }

    /**
     * Sets secondary_name
     *
     * @param mixed|null $secondary_name secondary_name
     *
     * @return self
     */
    public function setSecondaryName($secondary_name)
    {
        if (is_null($secondary_name)) {
            array_push($this->openAPINullablesSetToNull, 'secondary_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondary_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondary_name'] = $secondary_name;

        return $this;
    }

    /**
     * Gets contact_info
     *
     * @return mixed
     */
    public function getContactInfo()
    {
        return $this->container['contact_info'];
    }

    /**
     * Sets contact_info
     *
     * @param mixed $contact_info contact_info
     *
     * @return self
     */
    public function setContactInfo($contact_info)
    {
        if (is_null($contact_info)) {
            array_push($this->openAPINullablesSetToNull, 'contact_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contact_info'] = $contact_info;

        return $this;
    }

    /**
     * Gets names
     *
     * @return mixed
     */
    public function getNames()
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param mixed $names names
     *
     * @return self
     */
    public function setNames($names)
    {
        if (is_null($names)) {
            array_push($this->openAPINullablesSetToNull, 'names');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('names', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets secondary_names
     *
     * @return mixed
     */
    public function getSecondaryNames()
    {
        return $this->container['secondary_names'];
    }

    /**
     * Sets secondary_names
     *
     * @param mixed $secondary_names secondary_names
     *
     * @return self
     */
    public function setSecondaryNames($secondary_names)
    {
        if (is_null($secondary_names)) {
            array_push($this->openAPINullablesSetToNull, 'secondary_names');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondary_names', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondary_names'] = $secondary_names;

        return $this;
    }

    /**
     * Gets registration_numbers
     *
     * @return mixed
     */
    public function getRegistrationNumbers()
    {
        return $this->container['registration_numbers'];
    }

    /**
     * Sets registration_numbers
     *
     * @param mixed $registration_numbers registration_numbers
     *
     * @return self
     */
    public function setRegistrationNumbers($registration_numbers)
    {
        if (is_null($registration_numbers)) {
            array_push($this->openAPINullablesSetToNull, 'registration_numbers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_numbers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_numbers'] = $registration_numbers;

        return $this;
    }

    /**
     * Gets statuses
     *
     * @return mixed
     */
    public function getStatuses()
    {
        return $this->container['statuses'];
    }

    /**
     * Sets statuses
     *
     * @param mixed $statuses statuses
     *
     * @return self
     */
    public function setStatuses($statuses)
    {
        if (is_null($statuses)) {
            array_push($this->openAPINullablesSetToNull, 'statuses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('statuses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['statuses'] = $statuses;

        return $this;
    }

    /**
     * Gets company_statuses
     *
     * @return mixed
     */
    public function getCompanyStatuses()
    {
        return $this->container['company_statuses'];
    }

    /**
     * Sets company_statuses
     *
     * @param mixed $company_statuses company_statuses
     *
     * @return self
     */
    public function setCompanyStatuses($company_statuses)
    {
        if (is_null($company_statuses)) {
            array_push($this->openAPINullablesSetToNull, 'company_statuses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_statuses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_statuses'] = $company_statuses;

        return $this;
    }

    /**
     * Gets company_types
     *
     * @return mixed
     */
    public function getCompanyTypes()
    {
        return $this->container['company_types'];
    }

    /**
     * Sets company_types
     *
     * @param mixed $company_types company_types
     *
     * @return self
     */
    public function setCompanyTypes($company_types)
    {
        if (is_null($company_types)) {
            array_push($this->openAPINullablesSetToNull, 'company_types');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_types', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_types'] = $company_types;

        return $this;
    }

    /**
     * Gets life_courses
     *
     * @return mixed
     */
    public function getLifeCourses()
    {
        return $this->container['life_courses'];
    }

    /**
     * Sets life_courses
     *
     * @param mixed $life_courses life_courses
     *
     * @return self
     */
    public function setLifeCourses($life_courses)
    {
        if (is_null($life_courses)) {
            array_push($this->openAPINullablesSetToNull, 'life_courses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('life_courses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['life_courses'] = $life_courses;

        return $this;
    }

    /**
     * Gets annual_employment
     *
     * @return mixed|null
     */
    public function getAnnualEmployment()
    {
        return $this->container['annual_employment'];
    }

    /**
     * Sets annual_employment
     *
     * @param mixed|null $annual_employment annual_employment
     *
     * @return self
     */
    public function setAnnualEmployment($annual_employment)
    {
        if (is_null($annual_employment)) {
            array_push($this->openAPINullablesSetToNull, 'annual_employment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('annual_employment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['annual_employment'] = $annual_employment;

        return $this;
    }

    /**
     * Gets quarterly_employment
     *
     * @return mixed|null
     */
    public function getQuarterlyEmployment()
    {
        return $this->container['quarterly_employment'];
    }

    /**
     * Sets quarterly_employment
     *
     * @param mixed|null $quarterly_employment quarterly_employment
     *
     * @return self
     */
    public function setQuarterlyEmployment($quarterly_employment)
    {
        if (is_null($quarterly_employment)) {
            array_push($this->openAPINullablesSetToNull, 'quarterly_employment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quarterly_employment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quarterly_employment'] = $quarterly_employment;

        return $this;
    }

    /**
     * Gets monthly_employment
     *
     * @return mixed|null
     */
    public function getMonthlyEmployment()
    {
        return $this->container['monthly_employment'];
    }

    /**
     * Sets monthly_employment
     *
     * @param mixed|null $monthly_employment monthly_employment
     *
     * @return self
     */
    public function setMonthlyEmployment($monthly_employment)
    {
        if (is_null($monthly_employment)) {
            array_push($this->openAPINullablesSetToNull, 'monthly_employment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('monthly_employment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['monthly_employment'] = $monthly_employment;

        return $this;
    }

    /**
     * Gets monthly_employment_erst
     *
     * @return mixed|null
     */
    public function getMonthlyEmploymentErst()
    {
        return $this->container['monthly_employment_erst'];
    }

    /**
     * Sets monthly_employment_erst
     *
     * @param mixed|null $monthly_employment_erst monthly_employment_erst
     *
     * @return self
     */
    public function setMonthlyEmploymentErst($monthly_employment_erst)
    {
        if (is_null($monthly_employment_erst)) {
            array_push($this->openAPINullablesSetToNull, 'monthly_employment_erst');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('monthly_employment_erst', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['monthly_employment_erst'] = $monthly_employment_erst;

        return $this;
    }

    /**
     * Gets postal_adresses
     *
     * @return mixed
     */
    public function getPostalAdresses()
    {
        return $this->container['postal_adresses'];
    }

    /**
     * Sets postal_adresses
     *
     * @param mixed $postal_adresses postal_adresses
     *
     * @return self
     */
    public function setPostalAdresses($postal_adresses)
    {
        if (is_null($postal_adresses)) {
            array_push($this->openAPINullablesSetToNull, 'postal_adresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postal_adresses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postal_adresses'] = $postal_adresses;

        return $this;
    }

    /**
     * Gets p_units
     *
     * @return mixed
     */
    public function getPUnits()
    {
        return $this->container['p_units'];
    }

    /**
     * Sets p_units
     *
     * @param mixed $p_units p_units
     *
     * @return self
     */
    public function setPUnits($p_units)
    {
        if (is_null($p_units)) {
            array_push($this->openAPINullablesSetToNull, 'p_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('p_units', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['p_units'] = $p_units;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return mixed|null
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param mixed|null $emails emails
     *
     * @return self
     */
    public function setEmails($emails)
    {
        if (is_null($emails)) {
            array_push($this->openAPINullablesSetToNull, 'emails');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emails', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets mandatory_emails
     *
     * @return mixed|null
     */
    public function getMandatoryEmails()
    {
        return $this->container['mandatory_emails'];
    }

    /**
     * Sets mandatory_emails
     *
     * @param mixed|null $mandatory_emails mandatory_emails
     *
     * @return self
     */
    public function setMandatoryEmails($mandatory_emails)
    {
        if (is_null($mandatory_emails)) {
            array_push($this->openAPINullablesSetToNull, 'mandatory_emails');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mandatory_emails', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mandatory_emails'] = $mandatory_emails;

        return $this;
    }

    /**
     * Gets websites
     *
     * @return mixed|null
     */
    public function getWebsites()
    {
        return $this->container['websites'];
    }

    /**
     * Sets websites
     *
     * @param mixed|null $websites websites
     *
     * @return self
     */
    public function setWebsites($websites)
    {
        if (is_null($websites)) {
            array_push($this->openAPINullablesSetToNull, 'websites');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('websites', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['websites'] = $websites;

        return $this;
    }

    /**
     * Gets phone_numbers
     *
     * @return mixed|null
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     *
     * @param mixed|null $phone_numbers phone_numbers
     *
     * @return self
     */
    public function setPhoneNumbers($phone_numbers)
    {
        if (is_null($phone_numbers)) {
            array_push($this->openAPINullablesSetToNull, 'phone_numbers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_numbers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }

    /**
     * Gets secondary_phone_numbers
     *
     * @return mixed|null
     */
    public function getSecondaryPhoneNumbers()
    {
        return $this->container['secondary_phone_numbers'];
    }

    /**
     * Sets secondary_phone_numbers
     *
     * @param mixed|null $secondary_phone_numbers secondary_phone_numbers
     *
     * @return self
     */
    public function setSecondaryPhoneNumbers($secondary_phone_numbers)
    {
        if (is_null($secondary_phone_numbers)) {
            array_push($this->openAPINullablesSetToNull, 'secondary_phone_numbers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondary_phone_numbers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondary_phone_numbers'] = $secondary_phone_numbers;

        return $this;
    }

    /**
     * Gets fax_numbers
     *
     * @return mixed|null
     */
    public function getFaxNumbers()
    {
        return $this->container['fax_numbers'];
    }

    /**
     * Sets fax_numbers
     *
     * @param mixed|null $fax_numbers fax_numbers
     *
     * @return self
     */
    public function setFaxNumbers($fax_numbers)
    {
        if (is_null($fax_numbers)) {
            array_push($this->openAPINullablesSetToNull, 'fax_numbers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax_numbers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fax_numbers'] = $fax_numbers;

        return $this;
    }

    /**
     * Gets secondary_fax_numbers
     *
     * @return mixed|null
     */
    public function getSecondaryFaxNumbers()
    {
        return $this->container['secondary_fax_numbers'];
    }

    /**
     * Sets secondary_fax_numbers
     *
     * @param mixed|null $secondary_fax_numbers secondary_fax_numbers
     *
     * @return self
     */
    public function setSecondaryFaxNumbers($secondary_fax_numbers)
    {
        if (is_null($secondary_fax_numbers)) {
            array_push($this->openAPINullablesSetToNull, 'secondary_fax_numbers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondary_fax_numbers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondary_fax_numbers'] = $secondary_fax_numbers;

        return $this;
    }

    /**
     * Gets industries
     *
     * @return mixed
     */
    public function getIndustries()
    {
        return $this->container['industries'];
    }

    /**
     * Sets industries
     *
     * @param mixed $industries industries
     *
     * @return self
     */
    public function setIndustries($industries)
    {
        if (is_null($industries)) {
            array_push($this->openAPINullablesSetToNull, 'industries');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industries', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industries'] = $industries;

        return $this;
    }

    /**
     * Gets industries_1
     *
     * @return mixed
     */
    public function getIndustries1()
    {
        return $this->container['industries_1'];
    }

    /**
     * Sets industries_1
     *
     * @param mixed $industries_1 industries_1
     *
     * @return self
     */
    public function setIndustries1($industries_1)
    {
        if (is_null($industries_1)) {
            array_push($this->openAPINullablesSetToNull, 'industries_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industries_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industries_1'] = $industries_1;

        return $this;
    }

    /**
     * Gets industries_2
     *
     * @return mixed
     */
    public function getIndustries2()
    {
        return $this->container['industries_2'];
    }

    /**
     * Sets industries_2
     *
     * @param mixed $industries_2 industries_2
     *
     * @return self
     */
    public function setIndustries2($industries_2)
    {
        if (is_null($industries_2)) {
            array_push($this->openAPINullablesSetToNull, 'industries_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industries_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industries_2'] = $industries_2;

        return $this;
    }

    /**
     * Gets industries_3
     *
     * @return mixed
     */
    public function getIndustries3()
    {
        return $this->container['industries_3'];
    }

    /**
     * Sets industries_3
     *
     * @param mixed $industries_3 industries_3
     *
     * @return self
     */
    public function setIndustries3($industries_3)
    {
        if (is_null($industries_3)) {
            array_push($this->openAPINullablesSetToNull, 'industries_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industries_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industries_3'] = $industries_3;

        return $this;
    }

    /**
     * Gets mergers
     *
     * @return mixed
     */
    public function getMergers()
    {
        return $this->container['mergers'];
    }

    /**
     * Sets mergers
     *
     * @param mixed $mergers mergers
     *
     * @return self
     */
    public function setMergers($mergers)
    {
        if (is_null($mergers)) {
            array_push($this->openAPINullablesSetToNull, 'mergers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mergers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mergers'] = $mergers;

        return $this;
    }

    /**
     * Gets demergers
     *
     * @return mixed
     */
    public function getDemergers()
    {
        return $this->container['demergers'];
    }

    /**
     * Sets demergers
     *
     * @param mixed $demergers demergers
     *
     * @return self
     */
    public function setDemergers($demergers)
    {
        if (is_null($demergers)) {
            array_push($this->openAPINullablesSetToNull, 'demergers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('demergers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['demergers'] = $demergers;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return mixed
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param mixed $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            array_push($this->openAPINullablesSetToNull, 'attributes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attributes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets members
     *
     * @return mixed
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param mixed $members members
     *
     * @return self
     */
    public function setMembers($members)
    {
        if (is_null($members)) {
            array_push($this->openAPINullablesSetToNull, 'members');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('members', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets key_members
     *
     * @return mixed
     */
    public function getKeyMembers()
    {
        return $this->container['key_members'];
    }

    /**
     * Sets key_members
     *
     * @param mixed $key_members key_members
     *
     * @return self
     */
    public function setKeyMembers($key_members)
    {
        if (is_null($key_members)) {
            array_push($this->openAPINullablesSetToNull, 'key_members');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('key_members', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['key_members'] = $key_members;

        return $this;
    }

    /**
     * Gets address_info
     *
     * @return \OpenAPI\Client\Model\DARAddress|null
     */
    public function getAddressInfo()
    {
        return $this->container['address_info'];
    }

    /**
     * Sets address_info
     *
     * @param \OpenAPI\Client\Model\DARAddress|null $address_info address_info
     *
     * @return self
     */
    public function setAddressInfo($address_info)
    {
        if (is_null($address_info)) {
            throw new \InvalidArgumentException('non-nullable address_info cannot be null');
        }
        $this->container['address_info'] = $address_info;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \OpenAPI\Client\Model\CVRCompanyStats
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \OpenAPI\Client\Model\CVRCompanyStats $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        if (is_null($stats)) {
            throw new \InvalidArgumentException('non-nullable stats cannot be null');
        }
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets portfolio_aggs
     *
     * @return \OpenAPI\Client\Model\PortfolioAggs
     */
    public function getPortfolioAggs()
    {
        return $this->container['portfolio_aggs'];
    }

    /**
     * Sets portfolio_aggs
     *
     * @param \OpenAPI\Client\Model\PortfolioAggs $portfolio_aggs portfolio_aggs
     *
     * @return self
     */
    public function setPortfolioAggs($portfolio_aggs)
    {
        if (is_null($portfolio_aggs)) {
            throw new \InvalidArgumentException('non-nullable portfolio_aggs cannot be null');
        }
        $this->container['portfolio_aggs'] = $portfolio_aggs;

        return $this;
    }

    /**
     * Gets financials
     *
     * @return \OpenAPI\Client\Model\AnnualReportComplete|null
     */
    public function getFinancials()
    {
        return $this->container['financials'];
    }

    /**
     * Sets financials
     *
     * @param \OpenAPI\Client\Model\AnnualReportComplete|null $financials financials
     *
     * @return self
     */
    public function setFinancials($financials)
    {
        if (is_null($financials)) {
            throw new \InvalidArgumentException('non-nullable financials cannot be null');
        }
        $this->container['financials'] = $financials;

        return $this;
    }

    /**
     * Gets timeline
     *
     * @return mixed
     */
    public function getTimeline()
    {
        return $this->container['timeline'];
    }

    /**
     * Sets timeline
     *
     * @param mixed $timeline timeline
     *
     * @return self
     */
    public function setTimeline($timeline)
    {
        if (is_null($timeline)) {
            array_push($this->openAPINullablesSetToNull, 'timeline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timeline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timeline'] = $timeline;

        return $this;
    }

    /**
     * Gets network
     *
     * @return \OpenAPI\Client\Model\CVRNetwork
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \OpenAPI\Client\Model\CVRNetwork $network network
     *
     * @return self
     */
    public function setNetwork($network)
    {
        if (is_null($network)) {
            throw new \InvalidArgumentException('non-nullable network cannot be null');
        }
        $this->container['network'] = $network;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


