<?php
/**
 * UnderpantrettighedModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UnderpantrettighedModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UnderpantrettighedModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UnderpantrettighedModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'alias_id' => 'mixed',
        'alias_akt_historisk_id' => 'mixed',
        'rettighed_id' => 'mixed',
        'underpant_beloeb' => 'mixed',
        'underpant_valuta' => 'mixed',
        'prioritet_nummer' => 'mixed',
        'underpanthaver_samling' => 'mixed',
        'anmaerkning_samling' => 'mixed',
        'tillaegstekst_samling' => 'mixed',
        'frist_information_samling' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'alias_id' => null,
        'alias_akt_historisk_id' => null,
        'rettighed_id' => null,
        'underpant_beloeb' => null,
        'underpant_valuta' => null,
        'prioritet_nummer' => null,
        'underpanthaver_samling' => null,
        'anmaerkning_samling' => null,
        'tillaegstekst_samling' => null,
        'frist_information_samling' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'alias_id' => true,
		'alias_akt_historisk_id' => true,
		'rettighed_id' => true,
		'underpant_beloeb' => true,
		'underpant_valuta' => true,
		'prioritet_nummer' => true,
		'underpanthaver_samling' => true,
		'anmaerkning_samling' => true,
		'tillaegstekst_samling' => true,
		'frist_information_samling' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'alias_id' => 'AliasId',
        'alias_akt_historisk_id' => 'AliasAktHistoriskId',
        'rettighed_id' => 'RettighedId',
        'underpant_beloeb' => 'UnderpantBeloeb',
        'underpant_valuta' => 'UnderpantValuta',
        'prioritet_nummer' => 'PrioritetNummer',
        'underpanthaver_samling' => 'UnderpanthaverSamling',
        'anmaerkning_samling' => 'AnmaerkningSamling',
        'tillaegstekst_samling' => 'TillaegstekstSamling',
        'frist_information_samling' => 'FristInformationSamling'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'alias_id' => 'setAliasId',
        'alias_akt_historisk_id' => 'setAliasAktHistoriskId',
        'rettighed_id' => 'setRettighedId',
        'underpant_beloeb' => 'setUnderpantBeloeb',
        'underpant_valuta' => 'setUnderpantValuta',
        'prioritet_nummer' => 'setPrioritetNummer',
        'underpanthaver_samling' => 'setUnderpanthaverSamling',
        'anmaerkning_samling' => 'setAnmaerkningSamling',
        'tillaegstekst_samling' => 'setTillaegstekstSamling',
        'frist_information_samling' => 'setFristInformationSamling'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'alias_id' => 'getAliasId',
        'alias_akt_historisk_id' => 'getAliasAktHistoriskId',
        'rettighed_id' => 'getRettighedId',
        'underpant_beloeb' => 'getUnderpantBeloeb',
        'underpant_valuta' => 'getUnderpantValuta',
        'prioritet_nummer' => 'getPrioritetNummer',
        'underpanthaver_samling' => 'getUnderpanthaverSamling',
        'anmaerkning_samling' => 'getAnmaerkningSamling',
        'tillaegstekst_samling' => 'getTillaegstekstSamling',
        'frist_information_samling' => 'getFristInformationSamling'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('alias_id', $data ?? [], null);
        $this->setIfExists('alias_akt_historisk_id', $data ?? [], null);
        $this->setIfExists('rettighed_id', $data ?? [], null);
        $this->setIfExists('underpant_beloeb', $data ?? [], null);
        $this->setIfExists('underpant_valuta', $data ?? [], null);
        $this->setIfExists('prioritet_nummer', $data ?? [], null);
        $this->setIfExists('underpanthaver_samling', $data ?? [], null);
        $this->setIfExists('anmaerkning_samling', $data ?? [], null);
        $this->setIfExists('tillaegstekst_samling', $data ?? [], null);
        $this->setIfExists('frist_information_samling', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id Identifikation af et dokument, som kan vÃ¦re et adkomst-, hÃ¦ftelses- eller servitutdokument.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets alias_id
     *
     * @return mixed|null
     */
    public function getAliasId()
    {
        return $this->container['alias_id'];
    }

    /**
     * Sets alias_id
     *
     * @param mixed|null $alias_id Unikt dokument-alias bestÃ¥ende af dags dato og et lÃ¸benummer. F.eks. 20080304-1234567890
     *
     * @return self
     */
    public function setAliasId($alias_id)
    {
        if (is_null($alias_id)) {
            array_push($this->openAPINullablesSetToNull, 'alias_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alias_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alias_id'] = $alias_id;

        return $this;
    }

    /**
     * Gets alias_akt_historisk_id
     *
     * @return mixed|null
     */
    public function getAliasAktHistoriskId()
    {
        return $this->container['alias_akt_historisk_id'];
    }

    /**
     * Sets alias_akt_historisk_id
     *
     * @param mixed|null $alias_akt_historisk_id For konverterede data er dokument-alias dato, lÃ¸benummer og retskreds for det konverterede dokument. Elementet er opbygget af dato der bestÃ¥r af 8 tal pÃ¥ formen yyyymmdd, herefter kommer bindestreg. LÃ¸benummer indeholder 1 til 6 tal. Der er ikke foranstillede nuller. Herefter kommer en bindestreg. Retskreds bestÃ¥r af 2 tal, f. eks. 01 eller 19. Hvis der findes flere konverteret dokumenter med samme dato/lÃ¸benummer, fÃ¥r disse tilfÃ¸jet et suffix pÃ¥ fem tegn: [-][Ã©t tegns dokumenttype][trecifret lÃ¸benr]. Dokumentypen er enten A (adkomstdokument), H (hÃ¦ftelsesdokument) eller S (servitutdokument). Eksempler: 20060304-123456-19, 19950507-12345-04, 19981209-1234-21-H0001 og 11111111-0-10-H0054
     *
     * @return self
     */
    public function setAliasAktHistoriskId($alias_akt_historisk_id)
    {
        if (is_null($alias_akt_historisk_id)) {
            array_push($this->openAPINullablesSetToNull, 'alias_akt_historisk_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alias_akt_historisk_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alias_akt_historisk_id'] = $alias_akt_historisk_id;

        return $this;
    }

    /**
     * Gets rettighed_id
     *
     * @return mixed|null
     */
    public function getRettighedId()
    {
        return $this->container['rettighed_id'];
    }

    /**
     * Sets rettighed_id
     *
     * @param mixed|null $rettighed_id Identifikation af en rettighed. Betegnelsen rettighed dÃ¦kker alle de former for sammenkoblinger som et rettighedsdokument (DokumentIdentifikator) kan registrere i forhold til et tinglysningsobjekt.
     *
     * @return self
     */
    public function setRettighedId($rettighed_id)
    {
        if (is_null($rettighed_id)) {
            array_push($this->openAPINullablesSetToNull, 'rettighed_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rettighed_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rettighed_id'] = $rettighed_id;

        return $this;
    }

    /**
     * Gets underpant_beloeb
     *
     * @return mixed|null
     */
    public function getUnderpantBeloeb()
    {
        return $this->container['underpant_beloeb'];
    }

    /**
     * Sets underpant_beloeb
     *
     * @param mixed|null $underpant_beloeb BelÃ¸bsvÃ¦rdi. Tallet skal vÃ¦re nul eller positivt tal. Det kan maximalt vÃ¦re pÃ¥ 20 cifre og der kan maksimalt angives 2 decimaler.
     *
     * @return self
     */
    public function setUnderpantBeloeb($underpant_beloeb)
    {
        if (is_null($underpant_beloeb)) {
            array_push($this->openAPINullablesSetToNull, 'underpant_beloeb');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('underpant_beloeb', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['underpant_beloeb'] = $underpant_beloeb;

        return $this;
    }

    /**
     * Gets underpant_valuta
     *
     * @return mixed|null
     */
    public function getUnderpantValuta()
    {
        return $this->container['underpant_valuta'];
    }

    /**
     * Sets underpant_valuta
     *
     * @param mixed|null $underpant_valuta ISO 4217 valutakode.
     *
     * @return self
     */
    public function setUnderpantValuta($underpant_valuta)
    {
        if (is_null($underpant_valuta)) {
            array_push($this->openAPINullablesSetToNull, 'underpant_valuta');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('underpant_valuta', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['underpant_valuta'] = $underpant_valuta;

        return $this;
    }

    /**
     * Gets prioritet_nummer
     *
     * @return mixed|null
     */
    public function getPrioritetNummer()
    {
        return $this->container['prioritet_nummer'];
    }

    /**
     * Sets prioritet_nummer
     *
     * @param mixed|null $prioritet_nummer rioriteten for underpantet, ikke at forveksle med prioriteten for selve pantebrevet.
     *
     * @return self
     */
    public function setPrioritetNummer($prioritet_nummer)
    {
        if (is_null($prioritet_nummer)) {
            array_push($this->openAPINullablesSetToNull, 'prioritet_nummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prioritet_nummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prioritet_nummer'] = $prioritet_nummer;

        return $this;
    }

    /**
     * Gets underpanthaver_samling
     *
     * @return mixed|null
     */
    public function getUnderpanthaverSamling()
    {
        return $this->container['underpanthaver_samling'];
    }

    /**
     * Sets underpanthaver_samling
     *
     * @param mixed|null $underpanthaver_samling Underpanthavere
     *
     * @return self
     */
    public function setUnderpanthaverSamling($underpanthaver_samling)
    {
        if (is_null($underpanthaver_samling)) {
            array_push($this->openAPINullablesSetToNull, 'underpanthaver_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('underpanthaver_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['underpanthaver_samling'] = $underpanthaver_samling;

        return $this;
    }

    /**
     * Gets anmaerkning_samling
     *
     * @return mixed|null
     */
    public function getAnmaerkningSamling()
    {
        return $this->container['anmaerkning_samling'];
    }

    /**
     * Sets anmaerkning_samling
     *
     * @param mixed|null $anmaerkning_samling Samling af anmaerkninger. Det kan vÃ¦re anmaerkninger om servitutter og hÃ¦ftelser angivet ved nummer. AnmÃ¦rkninger vedrÃ¸rer altid respekter. Mangler der i en anmeldelse respekt for en eller flere hÃ¦ftelser eller servitutter, giver sagsbehandlingen anledning til anmÃ¦rkninger herom. AnmÃ¦rkning for servitutter indeholder kode for yderligere oplysninger om servitutten.
     *
     * @return self
     */
    public function setAnmaerkningSamling($anmaerkning_samling)
    {
        if (is_null($anmaerkning_samling)) {
            array_push($this->openAPINullablesSetToNull, 'anmaerkning_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('anmaerkning_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['anmaerkning_samling'] = $anmaerkning_samling;

        return $this;
    }

    /**
     * Gets tillaegstekst_samling
     *
     * @return mixed|null
     */
    public function getTillaegstekstSamling()
    {
        return $this->container['tillaegstekst_samling'];
    }

    /**
     * Sets tillaegstekst_samling
     *
     * @param mixed|null $tillaegstekst_samling Samling af TekstAngivelse.
     *
     * @return self
     */
    public function setTillaegstekstSamling($tillaegstekst_samling)
    {
        if (is_null($tillaegstekst_samling)) {
            array_push($this->openAPINullablesSetToNull, 'tillaegstekst_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tillaegstekst_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tillaegstekst_samling'] = $tillaegstekst_samling;

        return $this;
    }

    /**
     * Gets frist_information_samling
     *
     * @return mixed|null
     */
    public function getFristInformationSamling()
    {
        return $this->container['frist_information_samling'];
    }

    /**
     * Sets frist_information_samling
     *
     * @param mixed|null $frist_information_samling FristInformation ved tinglysning med frist. Her oplyses Ã¥rsag og fristdato.
     *
     * @return self
     */
    public function setFristInformationSamling($frist_information_samling)
    {
        if (is_null($frist_information_samling)) {
            array_push($this->openAPINullablesSetToNull, 'frist_information_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('frist_information_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['frist_information_samling'] = $frist_information_samling;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


