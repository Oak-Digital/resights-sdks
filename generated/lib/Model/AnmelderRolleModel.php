<?php
/**
 * AnmelderRolleModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AnmelderRolleModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AnmelderRolleModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AnmelderRolleModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'type' => '\OpenAPI\Client\Model\RolleTypeEnum',
        'rolle_id' => 'mixed',
        'rolle_type' => '\OpenAPI\Client\Model\AnmelderTypeEnum',
        'navn' => 'mixed',
        'stilling' => 'mixed',
        'telefon' => 'mixed',
        'email' => 'mixed',
        'email_samling' => 'mixed',
        'adresse' => '\OpenAPI\Client\Model\RolleAdresseModel',
        'adresse_tekst' => 'mixed',
        'ejendom_paataleberettiget' => '\OpenAPI\Client\Model\EjendomIdentifikatorModel',
        'herskende_ejendom' => 'mixed',
        'saelger_andel' => '\OpenAPI\Client\Model\BroekModel',
        'koeber_andel' => '\OpenAPI\Client\Model\BroekModel',
        'rolle_reference_samling' => 'mixed',
        'underskrift_ikke_noedvendig_indikator' => 'mixed',
        'underskrift_ikke_noedvendig_begrundelse' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'rolle_id' => null,
        'rolle_type' => null,
        'navn' => null,
        'stilling' => null,
        'telefon' => null,
        'email' => null,
        'email_samling' => null,
        'adresse' => null,
        'adresse_tekst' => null,
        'ejendom_paataleberettiget' => null,
        'herskende_ejendom' => null,
        'saelger_andel' => null,
        'koeber_andel' => null,
        'rolle_reference_samling' => null,
        'underskrift_ikke_noedvendig_indikator' => null,
        'underskrift_ikke_noedvendig_begrundelse' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'type' => false,
		'rolle_id' => true,
		'rolle_type' => false,
		'navn' => true,
		'stilling' => true,
		'telefon' => true,
		'email' => true,
		'email_samling' => true,
		'adresse' => false,
		'adresse_tekst' => true,
		'ejendom_paataleberettiget' => false,
		'herskende_ejendom' => true,
		'saelger_andel' => false,
		'koeber_andel' => false,
		'rolle_reference_samling' => true,
		'underskrift_ikke_noedvendig_indikator' => true,
		'underskrift_ikke_noedvendig_begrundelse' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'type' => 'Type',
        'rolle_id' => 'RolleId',
        'rolle_type' => 'RolleType',
        'navn' => 'Navn',
        'stilling' => 'Stilling',
        'telefon' => 'Telefon',
        'email' => 'Email',
        'email_samling' => 'EmailSamling',
        'adresse' => 'Adresse',
        'adresse_tekst' => 'AdresseTekst',
        'ejendom_paataleberettiget' => 'EjendomPaataleberettiget',
        'herskende_ejendom' => 'HerskendeEjendom',
        'saelger_andel' => 'SaelgerAndel',
        'koeber_andel' => 'KoeberAndel',
        'rolle_reference_samling' => 'RolleReferenceSamling',
        'underskrift_ikke_noedvendig_indikator' => 'UnderskriftIkkeNoedvendigIndikator',
        'underskrift_ikke_noedvendig_begrundelse' => 'UnderskriftIkkeNoedvendigBegrundelse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'rolle_id' => 'setRolleId',
        'rolle_type' => 'setRolleType',
        'navn' => 'setNavn',
        'stilling' => 'setStilling',
        'telefon' => 'setTelefon',
        'email' => 'setEmail',
        'email_samling' => 'setEmailSamling',
        'adresse' => 'setAdresse',
        'adresse_tekst' => 'setAdresseTekst',
        'ejendom_paataleberettiget' => 'setEjendomPaataleberettiget',
        'herskende_ejendom' => 'setHerskendeEjendom',
        'saelger_andel' => 'setSaelgerAndel',
        'koeber_andel' => 'setKoeberAndel',
        'rolle_reference_samling' => 'setRolleReferenceSamling',
        'underskrift_ikke_noedvendig_indikator' => 'setUnderskriftIkkeNoedvendigIndikator',
        'underskrift_ikke_noedvendig_begrundelse' => 'setUnderskriftIkkeNoedvendigBegrundelse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'rolle_id' => 'getRolleId',
        'rolle_type' => 'getRolleType',
        'navn' => 'getNavn',
        'stilling' => 'getStilling',
        'telefon' => 'getTelefon',
        'email' => 'getEmail',
        'email_samling' => 'getEmailSamling',
        'adresse' => 'getAdresse',
        'adresse_tekst' => 'getAdresseTekst',
        'ejendom_paataleberettiget' => 'getEjendomPaataleberettiget',
        'herskende_ejendom' => 'getHerskendeEjendom',
        'saelger_andel' => 'getSaelgerAndel',
        'koeber_andel' => 'getKoeberAndel',
        'rolle_reference_samling' => 'getRolleReferenceSamling',
        'underskrift_ikke_noedvendig_indikator' => 'getUnderskriftIkkeNoedvendigIndikator',
        'underskrift_ikke_noedvendig_begrundelse' => 'getUnderskriftIkkeNoedvendigBegrundelse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('rolle_id', $data ?? [], null);
        $this->setIfExists('rolle_type', $data ?? [], null);
        $this->setIfExists('navn', $data ?? [], null);
        $this->setIfExists('stilling', $data ?? [], null);
        $this->setIfExists('telefon', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('email_samling', $data ?? [], null);
        $this->setIfExists('adresse', $data ?? [], null);
        $this->setIfExists('adresse_tekst', $data ?? [], null);
        $this->setIfExists('ejendom_paataleberettiget', $data ?? [], null);
        $this->setIfExists('herskende_ejendom', $data ?? [], null);
        $this->setIfExists('saelger_andel', $data ?? [], null);
        $this->setIfExists('koeber_andel', $data ?? [], null);
        $this->setIfExists('rolle_reference_samling', $data ?? [], null);
        $this->setIfExists('underskrift_ikke_noedvendig_indikator', $data ?? [], null);
        $this->setIfExists('underskrift_ikke_noedvendig_begrundelse', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id CprNummer eller CvrNummer eller Myndighedskode
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\RolleTypeEnum|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\RolleTypeEnum|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets rolle_id
     *
     * @return mixed|null
     */
    public function getRolleId()
    {
        return $this->container['rolle_id'];
    }

    /**
     * Sets rolle_id
     *
     * @param mixed|null $rolle_id CprNummer eller CvrNummer eller Myndighedskode
     *
     * @return self
     */
    public function setRolleId($rolle_id)
    {
        if (is_null($rolle_id)) {
            array_push($this->openAPINullablesSetToNull, 'rolle_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rolle_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rolle_id'] = $rolle_id;

        return $this;
    }

    /**
     * Gets rolle_type
     *
     * @return \OpenAPI\Client\Model\AnmelderTypeEnum|null
     */
    public function getRolleType()
    {
        return $this->container['rolle_type'];
    }

    /**
     * Sets rolle_type
     *
     * @param \OpenAPI\Client\Model\AnmelderTypeEnum|null $rolle_type rolle_type
     *
     * @return self
     */
    public function setRolleType($rolle_type)
    {
        if (is_null($rolle_type)) {
            throw new \InvalidArgumentException('non-nullable rolle_type cannot be null');
        }
        $this->container['rolle_type'] = $rolle_type;

        return $this;
    }

    /**
     * Gets navn
     *
     * @return mixed|null
     */
    public function getNavn()
    {
        return $this->container['navn'];
    }

    /**
     * Sets navn
     *
     * @param mixed|null $navn Navn
     *
     * @return self
     */
    public function setNavn($navn)
    {
        if (is_null($navn)) {
            array_push($this->openAPINullablesSetToNull, 'navn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('navn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['navn'] = $navn;

        return $this;
    }

    /**
     * Gets stilling
     *
     * @return mixed|null
     */
    public function getStilling()
    {
        return $this->container['stilling'];
    }

    /**
     * Sets stilling
     *
     * @param mixed|null $stilling Stillingsbetegnelse
     *
     * @return self
     */
    public function setStilling($stilling)
    {
        if (is_null($stilling)) {
            array_push($this->openAPINullablesSetToNull, 'stilling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stilling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stilling'] = $stilling;

        return $this;
    }

    /**
     * Gets telefon
     *
     * @return mixed|null
     */
    public function getTelefon()
    {
        return $this->container['telefon'];
    }

    /**
     * Sets telefon
     *
     * @param mixed|null $telefon Telefon
     *
     * @return self
     */
    public function setTelefon($telefon)
    {
        if (is_null($telefon)) {
            array_push($this->openAPINullablesSetToNull, 'telefon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('telefon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['telefon'] = $telefon;

        return $this;
    }

    /**
     * Gets email
     *
     * @return mixed|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param mixed|null $email Email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets email_samling
     *
     * @return mixed|null
     */
    public function getEmailSamling()
    {
        return $this->container['email_samling'];
    }

    /**
     * Sets email_samling
     *
     * @param mixed|null $email_samling Samling af maksimalt 10 Email af referencer
     *
     * @return self
     */
    public function setEmailSamling($email_samling)
    {
        if (is_null($email_samling)) {
            array_push($this->openAPINullablesSetToNull, 'email_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_samling'] = $email_samling;

        return $this;
    }

    /**
     * Gets adresse
     *
     * @return \OpenAPI\Client\Model\RolleAdresseModel|null
     */
    public function getAdresse()
    {
        return $this->container['adresse'];
    }

    /**
     * Sets adresse
     *
     * @param \OpenAPI\Client\Model\RolleAdresseModel|null $adresse adresse
     *
     * @return self
     */
    public function setAdresse($adresse)
    {
        if (is_null($adresse)) {
            throw new \InvalidArgumentException('non-nullable adresse cannot be null');
        }
        $this->container['adresse'] = $adresse;

        return $this;
    }

    /**
     * Gets adresse_tekst
     *
     * @return mixed|null
     */
    public function getAdresseTekst()
    {
        return $this->container['adresse_tekst'];
    }

    /**
     * Sets adresse_tekst
     *
     * @param mixed|null $adresse_tekst Addressetekst
     *
     * @return self
     */
    public function setAdresseTekst($adresse_tekst)
    {
        if (is_null($adresse_tekst)) {
            array_push($this->openAPINullablesSetToNull, 'adresse_tekst');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('adresse_tekst', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['adresse_tekst'] = $adresse_tekst;

        return $this;
    }

    /**
     * Gets ejendom_paataleberettiget
     *
     * @return \OpenAPI\Client\Model\EjendomIdentifikatorModel|null
     */
    public function getEjendomPaataleberettiget()
    {
        return $this->container['ejendom_paataleberettiget'];
    }

    /**
     * Sets ejendom_paataleberettiget
     *
     * @param \OpenAPI\Client\Model\EjendomIdentifikatorModel|null $ejendom_paataleberettiget ejendom_paataleberettiget
     *
     * @return self
     */
    public function setEjendomPaataleberettiget($ejendom_paataleberettiget)
    {
        if (is_null($ejendom_paataleberettiget)) {
            throw new \InvalidArgumentException('non-nullable ejendom_paataleberettiget cannot be null');
        }
        $this->container['ejendom_paataleberettiget'] = $ejendom_paataleberettiget;

        return $this;
    }

    /**
     * Gets herskende_ejendom
     *
     * @return mixed|null
     */
    public function getHerskendeEjendom()
    {
        return $this->container['herskende_ejendom'];
    }

    /**
     * Sets herskende_ejendom
     *
     * @param mixed|null $herskende_ejendom True betyder at den pÃ¥talende ejendom er herskende. False angiver at den pÃ¥talende ikke er herskende.
     *
     * @return self
     */
    public function setHerskendeEjendom($herskende_ejendom)
    {
        if (is_null($herskende_ejendom)) {
            array_push($this->openAPINullablesSetToNull, 'herskende_ejendom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('herskende_ejendom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['herskende_ejendom'] = $herskende_ejendom;

        return $this;
    }

    /**
     * Gets saelger_andel
     *
     * @return \OpenAPI\Client\Model\BroekModel|null
     */
    public function getSaelgerAndel()
    {
        return $this->container['saelger_andel'];
    }

    /**
     * Sets saelger_andel
     *
     * @param \OpenAPI\Client\Model\BroekModel|null $saelger_andel saelger_andel
     *
     * @return self
     */
    public function setSaelgerAndel($saelger_andel)
    {
        if (is_null($saelger_andel)) {
            throw new \InvalidArgumentException('non-nullable saelger_andel cannot be null');
        }
        $this->container['saelger_andel'] = $saelger_andel;

        return $this;
    }

    /**
     * Gets koeber_andel
     *
     * @return \OpenAPI\Client\Model\BroekModel|null
     */
    public function getKoeberAndel()
    {
        return $this->container['koeber_andel'];
    }

    /**
     * Sets koeber_andel
     *
     * @param \OpenAPI\Client\Model\BroekModel|null $koeber_andel koeber_andel
     *
     * @return self
     */
    public function setKoeberAndel($koeber_andel)
    {
        if (is_null($koeber_andel)) {
            throw new \InvalidArgumentException('non-nullable koeber_andel cannot be null');
        }
        $this->container['koeber_andel'] = $koeber_andel;

        return $this;
    }

    /**
     * Gets rolle_reference_samling
     *
     * @return mixed|null
     */
    public function getRolleReferenceSamling()
    {
        return $this->container['rolle_reference_samling'];
    }

    /**
     * Sets rolle_reference_samling
     *
     * @param mixed|null $rolle_reference_samling Angiver en reference til en Rolle i anmeldelsen via id atributten pÃ¥ Rolle elementet.
     *
     * @return self
     */
    public function setRolleReferenceSamling($rolle_reference_samling)
    {
        if (is_null($rolle_reference_samling)) {
            array_push($this->openAPINullablesSetToNull, 'rolle_reference_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rolle_reference_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rolle_reference_samling'] = $rolle_reference_samling;

        return $this;
    }

    /**
     * Gets underskrift_ikke_noedvendig_indikator
     *
     * @return mixed|null
     */
    public function getUnderskriftIkkeNoedvendigIndikator()
    {
        return $this->container['underskrift_ikke_noedvendig_indikator'];
    }

    /**
     * Sets underskrift_ikke_noedvendig_indikator
     *
     * @param mixed|null $underskrift_ikke_noedvendig_indikator True, betyder at rollen ikke skal signere og derved ikke vil fremgÃ¥ i rollens underskriftsmappe. False, betyder at rollen skal signere og derved vil fremgÃ¥ i rollens underskriftsmappe.
     *
     * @return self
     */
    public function setUnderskriftIkkeNoedvendigIndikator($underskrift_ikke_noedvendig_indikator)
    {
        if (is_null($underskrift_ikke_noedvendig_indikator)) {
            array_push($this->openAPINullablesSetToNull, 'underskrift_ikke_noedvendig_indikator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('underskrift_ikke_noedvendig_indikator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['underskrift_ikke_noedvendig_indikator'] = $underskrift_ikke_noedvendig_indikator;

        return $this;
    }

    /**
     * Gets underskrift_ikke_noedvendig_begrundelse
     *
     * @return mixed|null
     */
    public function getUnderskriftIkkeNoedvendigBegrundelse()
    {
        return $this->container['underskrift_ikke_noedvendig_begrundelse'];
    }

    /**
     * Sets underskrift_ikke_noedvendig_begrundelse
     *
     * @param mixed|null $underskrift_ikke_noedvendig_begrundelse Begrundelse for, hvorfor der ikke skal skrives under.
     *
     * @return self
     */
    public function setUnderskriftIkkeNoedvendigBegrundelse($underskrift_ikke_noedvendig_begrundelse)
    {
        if (is_null($underskrift_ikke_noedvendig_begrundelse)) {
            array_push($this->openAPINullablesSetToNull, 'underskrift_ikke_noedvendig_begrundelse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('underskrift_ikke_noedvendig_begrundelse', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['underskrift_ikke_noedvendig_begrundelse'] = $underskrift_ikke_noedvendig_begrundelse;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


