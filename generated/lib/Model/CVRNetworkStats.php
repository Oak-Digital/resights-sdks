<?php
/**
 * CVRNetworkStats
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CVRNetworkStats Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CVRNetworkStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CVRNetworkStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_nodes' => 'mixed',
        'total_edges' => 'mixed',
        'total_nodes_upstream' => 'mixed',
        'total_nodes_downstream' => 'mixed',
        'total_nodes_active' => 'mixed',
        'total_edges_active' => 'mixed',
        'total_nodes_upstream_active' => 'mixed',
        'total_nodes_downstream_active' => 'mixed',
        'total_companies_upstream_active' => 'mixed',
        'total_companies_downstream_active' => 'mixed',
        'total_nodes_inactive' => 'mixed',
        'total_edges_inactive' => 'mixed',
        'total_nodes_upstream_inactive' => 'mixed',
        'total_nodes_downstream_inactive' => 'mixed',
        'depth_diff' => 'mixed',
        'depth_min' => 'mixed',
        'depth_max' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_nodes' => null,
        'total_edges' => null,
        'total_nodes_upstream' => null,
        'total_nodes_downstream' => null,
        'total_nodes_active' => null,
        'total_edges_active' => null,
        'total_nodes_upstream_active' => null,
        'total_nodes_downstream_active' => null,
        'total_companies_upstream_active' => null,
        'total_companies_downstream_active' => null,
        'total_nodes_inactive' => null,
        'total_edges_inactive' => null,
        'total_nodes_upstream_inactive' => null,
        'total_nodes_downstream_inactive' => null,
        'depth_diff' => null,
        'depth_min' => null,
        'depth_max' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total_nodes' => true,
		'total_edges' => true,
		'total_nodes_upstream' => true,
		'total_nodes_downstream' => true,
		'total_nodes_active' => true,
		'total_edges_active' => true,
		'total_nodes_upstream_active' => true,
		'total_nodes_downstream_active' => true,
		'total_companies_upstream_active' => true,
		'total_companies_downstream_active' => true,
		'total_nodes_inactive' => true,
		'total_edges_inactive' => true,
		'total_nodes_upstream_inactive' => true,
		'total_nodes_downstream_inactive' => true,
		'depth_diff' => true,
		'depth_min' => true,
		'depth_max' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_nodes' => 'total_nodes',
        'total_edges' => 'total_edges',
        'total_nodes_upstream' => 'total_nodes_upstream',
        'total_nodes_downstream' => 'total_nodes_downstream',
        'total_nodes_active' => 'total_nodes_active',
        'total_edges_active' => 'total_edges_active',
        'total_nodes_upstream_active' => 'total_nodes_upstream_active',
        'total_nodes_downstream_active' => 'total_nodes_downstream_active',
        'total_companies_upstream_active' => 'total_companies_upstream_active',
        'total_companies_downstream_active' => 'total_companies_downstream_active',
        'total_nodes_inactive' => 'total_nodes_inactive',
        'total_edges_inactive' => 'total_edges_inactive',
        'total_nodes_upstream_inactive' => 'total_nodes_upstream_inactive',
        'total_nodes_downstream_inactive' => 'total_nodes_downstream_inactive',
        'depth_diff' => 'depth_diff',
        'depth_min' => 'depth_min',
        'depth_max' => 'depth_max'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_nodes' => 'setTotalNodes',
        'total_edges' => 'setTotalEdges',
        'total_nodes_upstream' => 'setTotalNodesUpstream',
        'total_nodes_downstream' => 'setTotalNodesDownstream',
        'total_nodes_active' => 'setTotalNodesActive',
        'total_edges_active' => 'setTotalEdgesActive',
        'total_nodes_upstream_active' => 'setTotalNodesUpstreamActive',
        'total_nodes_downstream_active' => 'setTotalNodesDownstreamActive',
        'total_companies_upstream_active' => 'setTotalCompaniesUpstreamActive',
        'total_companies_downstream_active' => 'setTotalCompaniesDownstreamActive',
        'total_nodes_inactive' => 'setTotalNodesInactive',
        'total_edges_inactive' => 'setTotalEdgesInactive',
        'total_nodes_upstream_inactive' => 'setTotalNodesUpstreamInactive',
        'total_nodes_downstream_inactive' => 'setTotalNodesDownstreamInactive',
        'depth_diff' => 'setDepthDiff',
        'depth_min' => 'setDepthMin',
        'depth_max' => 'setDepthMax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_nodes' => 'getTotalNodes',
        'total_edges' => 'getTotalEdges',
        'total_nodes_upstream' => 'getTotalNodesUpstream',
        'total_nodes_downstream' => 'getTotalNodesDownstream',
        'total_nodes_active' => 'getTotalNodesActive',
        'total_edges_active' => 'getTotalEdgesActive',
        'total_nodes_upstream_active' => 'getTotalNodesUpstreamActive',
        'total_nodes_downstream_active' => 'getTotalNodesDownstreamActive',
        'total_companies_upstream_active' => 'getTotalCompaniesUpstreamActive',
        'total_companies_downstream_active' => 'getTotalCompaniesDownstreamActive',
        'total_nodes_inactive' => 'getTotalNodesInactive',
        'total_edges_inactive' => 'getTotalEdgesInactive',
        'total_nodes_upstream_inactive' => 'getTotalNodesUpstreamInactive',
        'total_nodes_downstream_inactive' => 'getTotalNodesDownstreamInactive',
        'depth_diff' => 'getDepthDiff',
        'depth_min' => 'getDepthMin',
        'depth_max' => 'getDepthMax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('total_nodes', $data ?? [], null);
        $this->setIfExists('total_edges', $data ?? [], null);
        $this->setIfExists('total_nodes_upstream', $data ?? [], null);
        $this->setIfExists('total_nodes_downstream', $data ?? [], null);
        $this->setIfExists('total_nodes_active', $data ?? [], null);
        $this->setIfExists('total_edges_active', $data ?? [], null);
        $this->setIfExists('total_nodes_upstream_active', $data ?? [], null);
        $this->setIfExists('total_nodes_downstream_active', $data ?? [], null);
        $this->setIfExists('total_companies_upstream_active', $data ?? [], null);
        $this->setIfExists('total_companies_downstream_active', $data ?? [], null);
        $this->setIfExists('total_nodes_inactive', $data ?? [], null);
        $this->setIfExists('total_edges_inactive', $data ?? [], null);
        $this->setIfExists('total_nodes_upstream_inactive', $data ?? [], null);
        $this->setIfExists('total_nodes_downstream_inactive', $data ?? [], null);
        $this->setIfExists('depth_diff', $data ?? [], null);
        $this->setIfExists('depth_min', $data ?? [], null);
        $this->setIfExists('depth_max', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['total_nodes'] === null) {
            $invalidProperties[] = "'total_nodes' can't be null";
        }
        if ($this->container['total_edges'] === null) {
            $invalidProperties[] = "'total_edges' can't be null";
        }
        if ($this->container['total_nodes_upstream'] === null) {
            $invalidProperties[] = "'total_nodes_upstream' can't be null";
        }
        if ($this->container['total_nodes_downstream'] === null) {
            $invalidProperties[] = "'total_nodes_downstream' can't be null";
        }
        if ($this->container['total_nodes_active'] === null) {
            $invalidProperties[] = "'total_nodes_active' can't be null";
        }
        if ($this->container['total_edges_active'] === null) {
            $invalidProperties[] = "'total_edges_active' can't be null";
        }
        if ($this->container['total_nodes_upstream_active'] === null) {
            $invalidProperties[] = "'total_nodes_upstream_active' can't be null";
        }
        if ($this->container['total_nodes_downstream_active'] === null) {
            $invalidProperties[] = "'total_nodes_downstream_active' can't be null";
        }
        if ($this->container['total_companies_upstream_active'] === null) {
            $invalidProperties[] = "'total_companies_upstream_active' can't be null";
        }
        if ($this->container['total_companies_downstream_active'] === null) {
            $invalidProperties[] = "'total_companies_downstream_active' can't be null";
        }
        if ($this->container['total_nodes_inactive'] === null) {
            $invalidProperties[] = "'total_nodes_inactive' can't be null";
        }
        if ($this->container['total_edges_inactive'] === null) {
            $invalidProperties[] = "'total_edges_inactive' can't be null";
        }
        if ($this->container['total_nodes_upstream_inactive'] === null) {
            $invalidProperties[] = "'total_nodes_upstream_inactive' can't be null";
        }
        if ($this->container['total_nodes_downstream_inactive'] === null) {
            $invalidProperties[] = "'total_nodes_downstream_inactive' can't be null";
        }
        if ($this->container['depth_diff'] === null) {
            $invalidProperties[] = "'depth_diff' can't be null";
        }
        if ($this->container['depth_min'] === null) {
            $invalidProperties[] = "'depth_min' can't be null";
        }
        if ($this->container['depth_max'] === null) {
            $invalidProperties[] = "'depth_max' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_nodes
     *
     * @return mixed
     */
    public function getTotalNodes()
    {
        return $this->container['total_nodes'];
    }

    /**
     * Sets total_nodes
     *
     * @param mixed $total_nodes total_nodes
     *
     * @return self
     */
    public function setTotalNodes($total_nodes)
    {
        if (is_null($total_nodes)) {
            array_push($this->openAPINullablesSetToNull, 'total_nodes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_nodes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_nodes'] = $total_nodes;

        return $this;
    }

    /**
     * Gets total_edges
     *
     * @return mixed
     */
    public function getTotalEdges()
    {
        return $this->container['total_edges'];
    }

    /**
     * Sets total_edges
     *
     * @param mixed $total_edges total_edges
     *
     * @return self
     */
    public function setTotalEdges($total_edges)
    {
        if (is_null($total_edges)) {
            array_push($this->openAPINullablesSetToNull, 'total_edges');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_edges', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_edges'] = $total_edges;

        return $this;
    }

    /**
     * Gets total_nodes_upstream
     *
     * @return mixed
     */
    public function getTotalNodesUpstream()
    {
        return $this->container['total_nodes_upstream'];
    }

    /**
     * Sets total_nodes_upstream
     *
     * @param mixed $total_nodes_upstream total_nodes_upstream
     *
     * @return self
     */
    public function setTotalNodesUpstream($total_nodes_upstream)
    {
        if (is_null($total_nodes_upstream)) {
            array_push($this->openAPINullablesSetToNull, 'total_nodes_upstream');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_nodes_upstream', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_nodes_upstream'] = $total_nodes_upstream;

        return $this;
    }

    /**
     * Gets total_nodes_downstream
     *
     * @return mixed
     */
    public function getTotalNodesDownstream()
    {
        return $this->container['total_nodes_downstream'];
    }

    /**
     * Sets total_nodes_downstream
     *
     * @param mixed $total_nodes_downstream total_nodes_downstream
     *
     * @return self
     */
    public function setTotalNodesDownstream($total_nodes_downstream)
    {
        if (is_null($total_nodes_downstream)) {
            array_push($this->openAPINullablesSetToNull, 'total_nodes_downstream');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_nodes_downstream', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_nodes_downstream'] = $total_nodes_downstream;

        return $this;
    }

    /**
     * Gets total_nodes_active
     *
     * @return mixed
     */
    public function getTotalNodesActive()
    {
        return $this->container['total_nodes_active'];
    }

    /**
     * Sets total_nodes_active
     *
     * @param mixed $total_nodes_active total_nodes_active
     *
     * @return self
     */
    public function setTotalNodesActive($total_nodes_active)
    {
        if (is_null($total_nodes_active)) {
            array_push($this->openAPINullablesSetToNull, 'total_nodes_active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_nodes_active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_nodes_active'] = $total_nodes_active;

        return $this;
    }

    /**
     * Gets total_edges_active
     *
     * @return mixed
     */
    public function getTotalEdgesActive()
    {
        return $this->container['total_edges_active'];
    }

    /**
     * Sets total_edges_active
     *
     * @param mixed $total_edges_active total_edges_active
     *
     * @return self
     */
    public function setTotalEdgesActive($total_edges_active)
    {
        if (is_null($total_edges_active)) {
            array_push($this->openAPINullablesSetToNull, 'total_edges_active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_edges_active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_edges_active'] = $total_edges_active;

        return $this;
    }

    /**
     * Gets total_nodes_upstream_active
     *
     * @return mixed
     */
    public function getTotalNodesUpstreamActive()
    {
        return $this->container['total_nodes_upstream_active'];
    }

    /**
     * Sets total_nodes_upstream_active
     *
     * @param mixed $total_nodes_upstream_active total_nodes_upstream_active
     *
     * @return self
     */
    public function setTotalNodesUpstreamActive($total_nodes_upstream_active)
    {
        if (is_null($total_nodes_upstream_active)) {
            array_push($this->openAPINullablesSetToNull, 'total_nodes_upstream_active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_nodes_upstream_active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_nodes_upstream_active'] = $total_nodes_upstream_active;

        return $this;
    }

    /**
     * Gets total_nodes_downstream_active
     *
     * @return mixed
     */
    public function getTotalNodesDownstreamActive()
    {
        return $this->container['total_nodes_downstream_active'];
    }

    /**
     * Sets total_nodes_downstream_active
     *
     * @param mixed $total_nodes_downstream_active total_nodes_downstream_active
     *
     * @return self
     */
    public function setTotalNodesDownstreamActive($total_nodes_downstream_active)
    {
        if (is_null($total_nodes_downstream_active)) {
            array_push($this->openAPINullablesSetToNull, 'total_nodes_downstream_active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_nodes_downstream_active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_nodes_downstream_active'] = $total_nodes_downstream_active;

        return $this;
    }

    /**
     * Gets total_companies_upstream_active
     *
     * @return mixed
     */
    public function getTotalCompaniesUpstreamActive()
    {
        return $this->container['total_companies_upstream_active'];
    }

    /**
     * Sets total_companies_upstream_active
     *
     * @param mixed $total_companies_upstream_active total_companies_upstream_active
     *
     * @return self
     */
    public function setTotalCompaniesUpstreamActive($total_companies_upstream_active)
    {
        if (is_null($total_companies_upstream_active)) {
            array_push($this->openAPINullablesSetToNull, 'total_companies_upstream_active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_companies_upstream_active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_companies_upstream_active'] = $total_companies_upstream_active;

        return $this;
    }

    /**
     * Gets total_companies_downstream_active
     *
     * @return mixed
     */
    public function getTotalCompaniesDownstreamActive()
    {
        return $this->container['total_companies_downstream_active'];
    }

    /**
     * Sets total_companies_downstream_active
     *
     * @param mixed $total_companies_downstream_active total_companies_downstream_active
     *
     * @return self
     */
    public function setTotalCompaniesDownstreamActive($total_companies_downstream_active)
    {
        if (is_null($total_companies_downstream_active)) {
            array_push($this->openAPINullablesSetToNull, 'total_companies_downstream_active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_companies_downstream_active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_companies_downstream_active'] = $total_companies_downstream_active;

        return $this;
    }

    /**
     * Gets total_nodes_inactive
     *
     * @return mixed
     */
    public function getTotalNodesInactive()
    {
        return $this->container['total_nodes_inactive'];
    }

    /**
     * Sets total_nodes_inactive
     *
     * @param mixed $total_nodes_inactive total_nodes_inactive
     *
     * @return self
     */
    public function setTotalNodesInactive($total_nodes_inactive)
    {
        if (is_null($total_nodes_inactive)) {
            array_push($this->openAPINullablesSetToNull, 'total_nodes_inactive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_nodes_inactive', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_nodes_inactive'] = $total_nodes_inactive;

        return $this;
    }

    /**
     * Gets total_edges_inactive
     *
     * @return mixed
     */
    public function getTotalEdgesInactive()
    {
        return $this->container['total_edges_inactive'];
    }

    /**
     * Sets total_edges_inactive
     *
     * @param mixed $total_edges_inactive total_edges_inactive
     *
     * @return self
     */
    public function setTotalEdgesInactive($total_edges_inactive)
    {
        if (is_null($total_edges_inactive)) {
            array_push($this->openAPINullablesSetToNull, 'total_edges_inactive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_edges_inactive', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_edges_inactive'] = $total_edges_inactive;

        return $this;
    }

    /**
     * Gets total_nodes_upstream_inactive
     *
     * @return mixed
     */
    public function getTotalNodesUpstreamInactive()
    {
        return $this->container['total_nodes_upstream_inactive'];
    }

    /**
     * Sets total_nodes_upstream_inactive
     *
     * @param mixed $total_nodes_upstream_inactive total_nodes_upstream_inactive
     *
     * @return self
     */
    public function setTotalNodesUpstreamInactive($total_nodes_upstream_inactive)
    {
        if (is_null($total_nodes_upstream_inactive)) {
            array_push($this->openAPINullablesSetToNull, 'total_nodes_upstream_inactive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_nodes_upstream_inactive', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_nodes_upstream_inactive'] = $total_nodes_upstream_inactive;

        return $this;
    }

    /**
     * Gets total_nodes_downstream_inactive
     *
     * @return mixed
     */
    public function getTotalNodesDownstreamInactive()
    {
        return $this->container['total_nodes_downstream_inactive'];
    }

    /**
     * Sets total_nodes_downstream_inactive
     *
     * @param mixed $total_nodes_downstream_inactive total_nodes_downstream_inactive
     *
     * @return self
     */
    public function setTotalNodesDownstreamInactive($total_nodes_downstream_inactive)
    {
        if (is_null($total_nodes_downstream_inactive)) {
            array_push($this->openAPINullablesSetToNull, 'total_nodes_downstream_inactive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_nodes_downstream_inactive', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_nodes_downstream_inactive'] = $total_nodes_downstream_inactive;

        return $this;
    }

    /**
     * Gets depth_diff
     *
     * @return mixed
     */
    public function getDepthDiff()
    {
        return $this->container['depth_diff'];
    }

    /**
     * Sets depth_diff
     *
     * @param mixed $depth_diff depth_diff
     *
     * @return self
     */
    public function setDepthDiff($depth_diff)
    {
        if (is_null($depth_diff)) {
            array_push($this->openAPINullablesSetToNull, 'depth_diff');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('depth_diff', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['depth_diff'] = $depth_diff;

        return $this;
    }

    /**
     * Gets depth_min
     *
     * @return mixed
     */
    public function getDepthMin()
    {
        return $this->container['depth_min'];
    }

    /**
     * Sets depth_min
     *
     * @param mixed $depth_min depth_min
     *
     * @return self
     */
    public function setDepthMin($depth_min)
    {
        if (is_null($depth_min)) {
            array_push($this->openAPINullablesSetToNull, 'depth_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('depth_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['depth_min'] = $depth_min;

        return $this;
    }

    /**
     * Gets depth_max
     *
     * @return mixed
     */
    public function getDepthMax()
    {
        return $this->container['depth_max'];
    }

    /**
     * Sets depth_max
     *
     * @param mixed $depth_max depth_max
     *
     * @return self
     */
    public function setDepthMax($depth_max)
    {
        if (is_null($depth_max)) {
            array_push($this->openAPINullablesSetToNull, 'depth_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('depth_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['depth_max'] = $depth_max;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


