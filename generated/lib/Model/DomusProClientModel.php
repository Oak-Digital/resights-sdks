<?php
/**
 * DomusProClientModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DomusProClientModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomusProClientModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DomusProClientModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'all_as_portfolio' => 'mixed',
        'comment_internal' => 'mixed',
        'true_value' => 'mixed',
        'stress_performance_rate' => 'mixed',
        'total_updated_at' => 'mixed',
        'mail_delayed_minutes' => 'mixed',
        'allow_transfers' => 'mixed',
        'hidden' => 'mixed',
        'created_at' => 'mixed',
        'created_by' => 'mixed',
        'updated_at' => 'mixed',
        'updated_by' => 'mixed',
        'mark_internal' => 'mixed',
        'changed_timestamp' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'all_as_portfolio' => null,
        'comment_internal' => null,
        'true_value' => null,
        'stress_performance_rate' => null,
        'total_updated_at' => 'date-time',
        'mail_delayed_minutes' => null,
        'allow_transfers' => null,
        'hidden' => null,
        'created_at' => 'date-time',
        'created_by' => null,
        'updated_at' => 'date-time',
        'updated_by' => null,
        'mark_internal' => null,
        'changed_timestamp' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'all_as_portfolio' => true,
		'comment_internal' => true,
		'true_value' => true,
		'stress_performance_rate' => true,
		'total_updated_at' => true,
		'mail_delayed_minutes' => true,
		'allow_transfers' => true,
		'hidden' => true,
		'created_at' => true,
		'created_by' => true,
		'updated_at' => true,
		'updated_by' => true,
		'mark_internal' => true,
		'changed_timestamp' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'all_as_portfolio' => 'all_as_portfolio',
        'comment_internal' => 'comment_internal',
        'true_value' => 'true_value',
        'stress_performance_rate' => 'stress_performance_rate',
        'total_updated_at' => 'total_updated_at',
        'mail_delayed_minutes' => 'mail_delayed_minutes',
        'allow_transfers' => 'allow_transfers',
        'hidden' => 'hidden',
        'created_at' => 'created_at',
        'created_by' => 'created_by',
        'updated_at' => 'updated_at',
        'updated_by' => 'updated_by',
        'mark_internal' => 'mark_internal',
        'changed_timestamp' => 'changed_timestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'all_as_portfolio' => 'setAllAsPortfolio',
        'comment_internal' => 'setCommentInternal',
        'true_value' => 'setTrueValue',
        'stress_performance_rate' => 'setStressPerformanceRate',
        'total_updated_at' => 'setTotalUpdatedAt',
        'mail_delayed_minutes' => 'setMailDelayedMinutes',
        'allow_transfers' => 'setAllowTransfers',
        'hidden' => 'setHidden',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'updated_at' => 'setUpdatedAt',
        'updated_by' => 'setUpdatedBy',
        'mark_internal' => 'setMarkInternal',
        'changed_timestamp' => 'setChangedTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'all_as_portfolio' => 'getAllAsPortfolio',
        'comment_internal' => 'getCommentInternal',
        'true_value' => 'getTrueValue',
        'stress_performance_rate' => 'getStressPerformanceRate',
        'total_updated_at' => 'getTotalUpdatedAt',
        'mail_delayed_minutes' => 'getMailDelayedMinutes',
        'allow_transfers' => 'getAllowTransfers',
        'hidden' => 'getHidden',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'updated_at' => 'getUpdatedAt',
        'updated_by' => 'getUpdatedBy',
        'mark_internal' => 'getMarkInternal',
        'changed_timestamp' => 'getChangedTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('all_as_portfolio', $data ?? [], null);
        $this->setIfExists('comment_internal', $data ?? [], null);
        $this->setIfExists('true_value', $data ?? [], null);
        $this->setIfExists('stress_performance_rate', $data ?? [], null);
        $this->setIfExists('total_updated_at', $data ?? [], null);
        $this->setIfExists('mail_delayed_minutes', $data ?? [], null);
        $this->setIfExists('allow_transfers', $data ?? [], null);
        $this->setIfExists('hidden', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
        $this->setIfExists('mark_internal', $data ?? [], null);
        $this->setIfExists('changed_timestamp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['all_as_portfolio'] === null) {
            $invalidProperties[] = "'all_as_portfolio' can't be null";
        }
        if ($this->container['comment_internal'] === null) {
            $invalidProperties[] = "'comment_internal' can't be null";
        }
        if ($this->container['true_value'] === null) {
            $invalidProperties[] = "'true_value' can't be null";
        }
        if ($this->container['stress_performance_rate'] === null) {
            $invalidProperties[] = "'stress_performance_rate' can't be null";
        }
        if ($this->container['mail_delayed_minutes'] === null) {
            $invalidProperties[] = "'mail_delayed_minutes' can't be null";
        }
        if ($this->container['allow_transfers'] === null) {
            $invalidProperties[] = "'allow_transfers' can't be null";
        }
        if ($this->container['hidden'] === null) {
            $invalidProperties[] = "'hidden' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['created_by'] === null) {
            $invalidProperties[] = "'created_by' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['updated_by'] === null) {
            $invalidProperties[] = "'updated_by' can't be null";
        }
        if ($this->container['changed_timestamp'] === null) {
            $invalidProperties[] = "'changed_timestamp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id KundeID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets all_as_portfolio
     *
     * @return mixed
     */
    public function getAllAsPortfolio()
    {
        return $this->container['all_as_portfolio'];
    }

    /**
     * Sets all_as_portfolio
     *
     * @param mixed $all_as_portfolio AlleSomPortefoelje
     *
     * @return self
     */
    public function setAllAsPortfolio($all_as_portfolio)
    {
        if (is_null($all_as_portfolio)) {
            array_push($this->openAPINullablesSetToNull, 'all_as_portfolio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('all_as_portfolio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['all_as_portfolio'] = $all_as_portfolio;

        return $this;
    }

    /**
     * Gets comment_internal
     *
     * @return mixed
     */
    public function getCommentInternal()
    {
        return $this->container['comment_internal'];
    }

    /**
     * Sets comment_internal
     *
     * @param mixed $comment_internal KommentarIntern
     *
     * @return self
     */
    public function setCommentInternal($comment_internal)
    {
        if (is_null($comment_internal)) {
            array_push($this->openAPINullablesSetToNull, 'comment_internal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment_internal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment_internal'] = $comment_internal;

        return $this;
    }

    /**
     * Gets true_value
     *
     * @return mixed
     */
    public function getTrueValue()
    {
        return $this->container['true_value'];
    }

    /**
     * Sets true_value
     *
     * @param mixed $true_value TrueValue
     *
     * @return self
     */
    public function setTrueValue($true_value)
    {
        if (is_null($true_value)) {
            array_push($this->openAPINullablesSetToNull, 'true_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('true_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['true_value'] = $true_value;

        return $this;
    }

    /**
     * Gets stress_performance_rate
     *
     * @return mixed
     */
    public function getStressPerformanceRate()
    {
        return $this->container['stress_performance_rate'];
    }

    /**
     * Sets stress_performance_rate
     *
     * @param mixed $stress_performance_rate Stressydelsesssats
     *
     * @return self
     */
    public function setStressPerformanceRate($stress_performance_rate)
    {
        if (is_null($stress_performance_rate)) {
            array_push($this->openAPINullablesSetToNull, 'stress_performance_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stress_performance_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stress_performance_rate'] = $stress_performance_rate;

        return $this;
    }

    /**
     * Gets total_updated_at
     *
     * @return mixed|null
     */
    public function getTotalUpdatedAt()
    {
        return $this->container['total_updated_at'];
    }

    /**
     * Sets total_updated_at
     *
     * @param mixed|null $total_updated_at TotalOpdatDT
     *
     * @return self
     */
    public function setTotalUpdatedAt($total_updated_at)
    {
        if (is_null($total_updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'total_updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_updated_at'] = $total_updated_at;

        return $this;
    }

    /**
     * Gets mail_delayed_minutes
     *
     * @return mixed
     */
    public function getMailDelayedMinutes()
    {
        return $this->container['mail_delayed_minutes'];
    }

    /**
     * Sets mail_delayed_minutes
     *
     * @param mixed $mail_delayed_minutes MailForsinkMinutt
     *
     * @return self
     */
    public function setMailDelayedMinutes($mail_delayed_minutes)
    {
        if (is_null($mail_delayed_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'mail_delayed_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mail_delayed_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mail_delayed_minutes'] = $mail_delayed_minutes;

        return $this;
    }

    /**
     * Gets allow_transfers
     *
     * @return mixed
     */
    public function getAllowTransfers()
    {
        return $this->container['allow_transfers'];
    }

    /**
     * Sets allow_transfers
     *
     * @param mixed $allow_transfers AllowTransfers
     *
     * @return self
     */
    public function setAllowTransfers($allow_transfers)
    {
        if (is_null($allow_transfers)) {
            array_push($this->openAPINullablesSetToNull, 'allow_transfers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allow_transfers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allow_transfers'] = $allow_transfers;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return mixed
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param mixed $hidden hidden
     *
     * @return self
     */
    public function setHidden($hidden)
    {
        if (is_null($hidden)) {
            array_push($this->openAPINullablesSetToNull, 'hidden');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hidden', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return mixed
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param mixed $created_at Oprettet
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return mixed
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param mixed $created_by OprettetAf
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            array_push($this->openAPINullablesSetToNull, 'created_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return mixed
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param mixed $updated_at Aendret
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return mixed
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param mixed $updated_by AendretAf
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            array_push($this->openAPINullablesSetToNull, 'updated_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets mark_internal
     *
     * @return mixed|null
     */
    public function getMarkInternal()
    {
        return $this->container['mark_internal'];
    }

    /**
     * Sets mark_internal
     *
     * @param mixed|null $mark_internal MaerkerIntern
     *
     * @return self
     */
    public function setMarkInternal($mark_internal)
    {
        if (is_null($mark_internal)) {
            array_push($this->openAPINullablesSetToNull, 'mark_internal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mark_internal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mark_internal'] = $mark_internal;

        return $this;
    }

    /**
     * Gets changed_timestamp
     *
     * @return mixed
     */
    public function getChangedTimestamp()
    {
        return $this->container['changed_timestamp'];
    }

    /**
     * Sets changed_timestamp
     *
     * @param mixed $changed_timestamp AendretTimestamp
     *
     * @return self
     */
    public function setChangedTimestamp($changed_timestamp)
    {
        if (is_null($changed_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'changed_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('changed_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['changed_timestamp'] = $changed_timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


