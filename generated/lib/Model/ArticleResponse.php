<?php
/**
 * ArticleResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ArticleResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ArticleResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ArticleResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'header30c' => 'mixed',
        'subheader1' => 'mixed',
        'subheader2' => 'mixed',
        'subheader3' => 'mixed',
        'subheader4' => 'mixed',
        'metatitle' => 'mixed',
        'metadescription' => 'mixed',
        'summary' => 'mixed',
        'body1' => 'mixed',
        'body2' => 'mixed',
        'body3' => 'mixed',
        'body4' => 'mixed',
        'a1' => 'mixed',
        'a2' => 'mixed',
        'a3' => 'mixed',
        'a4' => 'mixed',
        'a5' => 'mixed',
        'q1' => 'mixed',
        'q2' => 'mixed',
        'q3' => 'mixed',
        'q4' => 'mixed',
        'q5' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'header30c' => null,
        'subheader1' => null,
        'subheader2' => null,
        'subheader3' => null,
        'subheader4' => null,
        'metatitle' => null,
        'metadescription' => null,
        'summary' => null,
        'body1' => null,
        'body2' => null,
        'body3' => null,
        'body4' => null,
        'a1' => null,
        'a2' => null,
        'a3' => null,
        'a4' => null,
        'a5' => null,
        'q1' => null,
        'q2' => null,
        'q3' => null,
        'q4' => null,
        'q5' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'header30c' => true,
		'subheader1' => true,
		'subheader2' => true,
		'subheader3' => true,
		'subheader4' => true,
		'metatitle' => true,
		'metadescription' => true,
		'summary' => true,
		'body1' => true,
		'body2' => true,
		'body3' => true,
		'body4' => true,
		'a1' => true,
		'a2' => true,
		'a3' => true,
		'a4' => true,
		'a5' => true,
		'q1' => true,
		'q2' => true,
		'q3' => true,
		'q4' => true,
		'q5' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'header30c' => 'header30c',
        'subheader1' => 'subheader1',
        'subheader2' => 'subheader2',
        'subheader3' => 'subheader3',
        'subheader4' => 'subheader4',
        'metatitle' => 'metatitle',
        'metadescription' => 'metadescription',
        'summary' => 'summary',
        'body1' => 'body1',
        'body2' => 'body2',
        'body3' => 'body3',
        'body4' => 'body4',
        'a1' => 'a1',
        'a2' => 'a2',
        'a3' => 'a3',
        'a4' => 'a4',
        'a5' => 'a5',
        'q1' => 'q1',
        'q2' => 'q2',
        'q3' => 'q3',
        'q4' => 'q4',
        'q5' => 'q5'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'header30c' => 'setHeader30c',
        'subheader1' => 'setSubheader1',
        'subheader2' => 'setSubheader2',
        'subheader3' => 'setSubheader3',
        'subheader4' => 'setSubheader4',
        'metatitle' => 'setMetatitle',
        'metadescription' => 'setMetadescription',
        'summary' => 'setSummary',
        'body1' => 'setBody1',
        'body2' => 'setBody2',
        'body3' => 'setBody3',
        'body4' => 'setBody4',
        'a1' => 'setA1',
        'a2' => 'setA2',
        'a3' => 'setA3',
        'a4' => 'setA4',
        'a5' => 'setA5',
        'q1' => 'setQ1',
        'q2' => 'setQ2',
        'q3' => 'setQ3',
        'q4' => 'setQ4',
        'q5' => 'setQ5'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'header30c' => 'getHeader30c',
        'subheader1' => 'getSubheader1',
        'subheader2' => 'getSubheader2',
        'subheader3' => 'getSubheader3',
        'subheader4' => 'getSubheader4',
        'metatitle' => 'getMetatitle',
        'metadescription' => 'getMetadescription',
        'summary' => 'getSummary',
        'body1' => 'getBody1',
        'body2' => 'getBody2',
        'body3' => 'getBody3',
        'body4' => 'getBody4',
        'a1' => 'getA1',
        'a2' => 'getA2',
        'a3' => 'getA3',
        'a4' => 'getA4',
        'a5' => 'getA5',
        'q1' => 'getQ1',
        'q2' => 'getQ2',
        'q3' => 'getQ3',
        'q4' => 'getQ4',
        'q5' => 'getQ5'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('header30c', $data ?? [], null);
        $this->setIfExists('subheader1', $data ?? [], null);
        $this->setIfExists('subheader2', $data ?? [], null);
        $this->setIfExists('subheader3', $data ?? [], null);
        $this->setIfExists('subheader4', $data ?? [], null);
        $this->setIfExists('metatitle', $data ?? [], null);
        $this->setIfExists('metadescription', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('body1', $data ?? [], null);
        $this->setIfExists('body2', $data ?? [], null);
        $this->setIfExists('body3', $data ?? [], null);
        $this->setIfExists('body4', $data ?? [], null);
        $this->setIfExists('a1', $data ?? [], null);
        $this->setIfExists('a2', $data ?? [], null);
        $this->setIfExists('a3', $data ?? [], null);
        $this->setIfExists('a4', $data ?? [], null);
        $this->setIfExists('a5', $data ?? [], null);
        $this->setIfExists('q1', $data ?? [], null);
        $this->setIfExists('q2', $data ?? [], null);
        $this->setIfExists('q3', $data ?? [], null);
        $this->setIfExists('q4', $data ?? [], null);
        $this->setIfExists('q5', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['header30c'] === null) {
            $invalidProperties[] = "'header30c' can't be null";
        }
        if ($this->container['subheader1'] === null) {
            $invalidProperties[] = "'subheader1' can't be null";
        }
        if ($this->container['subheader2'] === null) {
            $invalidProperties[] = "'subheader2' can't be null";
        }
        if ($this->container['subheader3'] === null) {
            $invalidProperties[] = "'subheader3' can't be null";
        }
        if ($this->container['subheader4'] === null) {
            $invalidProperties[] = "'subheader4' can't be null";
        }
        if ($this->container['metatitle'] === null) {
            $invalidProperties[] = "'metatitle' can't be null";
        }
        if ($this->container['metadescription'] === null) {
            $invalidProperties[] = "'metadescription' can't be null";
        }
        if ($this->container['summary'] === null) {
            $invalidProperties[] = "'summary' can't be null";
        }
        if ($this->container['body1'] === null) {
            $invalidProperties[] = "'body1' can't be null";
        }
        if ($this->container['body2'] === null) {
            $invalidProperties[] = "'body2' can't be null";
        }
        if ($this->container['body3'] === null) {
            $invalidProperties[] = "'body3' can't be null";
        }
        if ($this->container['body4'] === null) {
            $invalidProperties[] = "'body4' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets header30c
     *
     * @return mixed
     */
    public function getHeader30c()
    {
        return $this->container['header30c'];
    }

    /**
     * Sets header30c
     *
     * @param mixed $header30c header30c
     *
     * @return self
     */
    public function setHeader30c($header30c)
    {
        if (is_null($header30c)) {
            array_push($this->openAPINullablesSetToNull, 'header30c');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header30c', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['header30c'] = $header30c;

        return $this;
    }

    /**
     * Gets subheader1
     *
     * @return mixed
     */
    public function getSubheader1()
    {
        return $this->container['subheader1'];
    }

    /**
     * Sets subheader1
     *
     * @param mixed $subheader1 subheader1
     *
     * @return self
     */
    public function setSubheader1($subheader1)
    {
        if (is_null($subheader1)) {
            array_push($this->openAPINullablesSetToNull, 'subheader1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subheader1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subheader1'] = $subheader1;

        return $this;
    }

    /**
     * Gets subheader2
     *
     * @return mixed
     */
    public function getSubheader2()
    {
        return $this->container['subheader2'];
    }

    /**
     * Sets subheader2
     *
     * @param mixed $subheader2 subheader2
     *
     * @return self
     */
    public function setSubheader2($subheader2)
    {
        if (is_null($subheader2)) {
            array_push($this->openAPINullablesSetToNull, 'subheader2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subheader2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subheader2'] = $subheader2;

        return $this;
    }

    /**
     * Gets subheader3
     *
     * @return mixed
     */
    public function getSubheader3()
    {
        return $this->container['subheader3'];
    }

    /**
     * Sets subheader3
     *
     * @param mixed $subheader3 subheader3
     *
     * @return self
     */
    public function setSubheader3($subheader3)
    {
        if (is_null($subheader3)) {
            array_push($this->openAPINullablesSetToNull, 'subheader3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subheader3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subheader3'] = $subheader3;

        return $this;
    }

    /**
     * Gets subheader4
     *
     * @return mixed
     */
    public function getSubheader4()
    {
        return $this->container['subheader4'];
    }

    /**
     * Sets subheader4
     *
     * @param mixed $subheader4 subheader4
     *
     * @return self
     */
    public function setSubheader4($subheader4)
    {
        if (is_null($subheader4)) {
            array_push($this->openAPINullablesSetToNull, 'subheader4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subheader4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subheader4'] = $subheader4;

        return $this;
    }

    /**
     * Gets metatitle
     *
     * @return mixed
     */
    public function getMetatitle()
    {
        return $this->container['metatitle'];
    }

    /**
     * Sets metatitle
     *
     * @param mixed $metatitle metatitle
     *
     * @return self
     */
    public function setMetatitle($metatitle)
    {
        if (is_null($metatitle)) {
            array_push($this->openAPINullablesSetToNull, 'metatitle');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metatitle', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metatitle'] = $metatitle;

        return $this;
    }

    /**
     * Gets metadescription
     *
     * @return mixed
     */
    public function getMetadescription()
    {
        return $this->container['metadescription'];
    }

    /**
     * Sets metadescription
     *
     * @param mixed $metadescription metadescription
     *
     * @return self
     */
    public function setMetadescription($metadescription)
    {
        if (is_null($metadescription)) {
            array_push($this->openAPINullablesSetToNull, 'metadescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadescription', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadescription'] = $metadescription;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return mixed
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param mixed $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            array_push($this->openAPINullablesSetToNull, 'summary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('summary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets body1
     *
     * @return mixed
     */
    public function getBody1()
    {
        return $this->container['body1'];
    }

    /**
     * Sets body1
     *
     * @param mixed $body1 body1
     *
     * @return self
     */
    public function setBody1($body1)
    {
        if (is_null($body1)) {
            array_push($this->openAPINullablesSetToNull, 'body1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('body1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['body1'] = $body1;

        return $this;
    }

    /**
     * Gets body2
     *
     * @return mixed
     */
    public function getBody2()
    {
        return $this->container['body2'];
    }

    /**
     * Sets body2
     *
     * @param mixed $body2 body2
     *
     * @return self
     */
    public function setBody2($body2)
    {
        if (is_null($body2)) {
            array_push($this->openAPINullablesSetToNull, 'body2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('body2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['body2'] = $body2;

        return $this;
    }

    /**
     * Gets body3
     *
     * @return mixed
     */
    public function getBody3()
    {
        return $this->container['body3'];
    }

    /**
     * Sets body3
     *
     * @param mixed $body3 body3
     *
     * @return self
     */
    public function setBody3($body3)
    {
        if (is_null($body3)) {
            array_push($this->openAPINullablesSetToNull, 'body3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('body3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['body3'] = $body3;

        return $this;
    }

    /**
     * Gets body4
     *
     * @return mixed
     */
    public function getBody4()
    {
        return $this->container['body4'];
    }

    /**
     * Sets body4
     *
     * @param mixed $body4 body4
     *
     * @return self
     */
    public function setBody4($body4)
    {
        if (is_null($body4)) {
            array_push($this->openAPINullablesSetToNull, 'body4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('body4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['body4'] = $body4;

        return $this;
    }

    /**
     * Gets a1
     *
     * @return mixed|null
     */
    public function getA1()
    {
        return $this->container['a1'];
    }

    /**
     * Sets a1
     *
     * @param mixed|null $a1 a1
     *
     * @return self
     */
    public function setA1($a1)
    {
        if (is_null($a1)) {
            array_push($this->openAPINullablesSetToNull, 'a1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('a1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['a1'] = $a1;

        return $this;
    }

    /**
     * Gets a2
     *
     * @return mixed|null
     */
    public function getA2()
    {
        return $this->container['a2'];
    }

    /**
     * Sets a2
     *
     * @param mixed|null $a2 a2
     *
     * @return self
     */
    public function setA2($a2)
    {
        if (is_null($a2)) {
            array_push($this->openAPINullablesSetToNull, 'a2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('a2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['a2'] = $a2;

        return $this;
    }

    /**
     * Gets a3
     *
     * @return mixed|null
     */
    public function getA3()
    {
        return $this->container['a3'];
    }

    /**
     * Sets a3
     *
     * @param mixed|null $a3 a3
     *
     * @return self
     */
    public function setA3($a3)
    {
        if (is_null($a3)) {
            array_push($this->openAPINullablesSetToNull, 'a3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('a3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['a3'] = $a3;

        return $this;
    }

    /**
     * Gets a4
     *
     * @return mixed|null
     */
    public function getA4()
    {
        return $this->container['a4'];
    }

    /**
     * Sets a4
     *
     * @param mixed|null $a4 a4
     *
     * @return self
     */
    public function setA4($a4)
    {
        if (is_null($a4)) {
            array_push($this->openAPINullablesSetToNull, 'a4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('a4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['a4'] = $a4;

        return $this;
    }

    /**
     * Gets a5
     *
     * @return mixed|null
     */
    public function getA5()
    {
        return $this->container['a5'];
    }

    /**
     * Sets a5
     *
     * @param mixed|null $a5 a5
     *
     * @return self
     */
    public function setA5($a5)
    {
        if (is_null($a5)) {
            array_push($this->openAPINullablesSetToNull, 'a5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('a5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['a5'] = $a5;

        return $this;
    }

    /**
     * Gets q1
     *
     * @return mixed|null
     */
    public function getQ1()
    {
        return $this->container['q1'];
    }

    /**
     * Sets q1
     *
     * @param mixed|null $q1 q1
     *
     * @return self
     */
    public function setQ1($q1)
    {
        if (is_null($q1)) {
            array_push($this->openAPINullablesSetToNull, 'q1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('q1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['q1'] = $q1;

        return $this;
    }

    /**
     * Gets q2
     *
     * @return mixed|null
     */
    public function getQ2()
    {
        return $this->container['q2'];
    }

    /**
     * Sets q2
     *
     * @param mixed|null $q2 q2
     *
     * @return self
     */
    public function setQ2($q2)
    {
        if (is_null($q2)) {
            array_push($this->openAPINullablesSetToNull, 'q2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('q2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['q2'] = $q2;

        return $this;
    }

    /**
     * Gets q3
     *
     * @return mixed|null
     */
    public function getQ3()
    {
        return $this->container['q3'];
    }

    /**
     * Sets q3
     *
     * @param mixed|null $q3 q3
     *
     * @return self
     */
    public function setQ3($q3)
    {
        if (is_null($q3)) {
            array_push($this->openAPINullablesSetToNull, 'q3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('q3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['q3'] = $q3;

        return $this;
    }

    /**
     * Gets q4
     *
     * @return mixed|null
     */
    public function getQ4()
    {
        return $this->container['q4'];
    }

    /**
     * Sets q4
     *
     * @param mixed|null $q4 q4
     *
     * @return self
     */
    public function setQ4($q4)
    {
        if (is_null($q4)) {
            array_push($this->openAPINullablesSetToNull, 'q4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('q4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['q4'] = $q4;

        return $this;
    }

    /**
     * Gets q5
     *
     * @return mixed|null
     */
    public function getQ5()
    {
        return $this->container['q5'];
    }

    /**
     * Sets q5
     *
     * @param mixed|null $q5 q5
     *
     * @return self
     */
    public function setQ5($q5)
    {
        if (is_null($q5)) {
            array_push($this->openAPINullablesSetToNull, 'q5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('q5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['q5'] = $q5;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


