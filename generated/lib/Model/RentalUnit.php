<?php
/**
 * RentalUnit
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RentalUnit Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RentalUnit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RentalUnit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'bfe_number' => 'mixed',
        'ownership_code' => 'mixed',
        'municipality_code' => 'mixed',
        'status' => 'mixed',
        'usage' => 'mixed',
        'rooms' => 'mixed',
        'area' => 'mixed',
        'residential_area' => 'mixed',
        'commercial_area' => 'mixed',
        'building_id' => 'mixed',
        'building_status' => 'mixed',
        'building_units_residential' => 'mixed',
        'building_units_commercial' => 'mixed',
        'building_construction_year' => 'mixed',
        'building_rebuilding_year' => 'mixed',
        'building_floor_area' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'bfe_number' => null,
        'ownership_code' => null,
        'municipality_code' => null,
        'status' => null,
        'usage' => null,
        'rooms' => null,
        'area' => null,
        'residential_area' => null,
        'commercial_area' => null,
        'building_id' => null,
        'building_status' => null,
        'building_units_residential' => null,
        'building_units_commercial' => null,
        'building_construction_year' => null,
        'building_rebuilding_year' => null,
        'building_floor_area' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'bfe_number' => true,
		'ownership_code' => true,
		'municipality_code' => true,
		'status' => true,
		'usage' => true,
		'rooms' => true,
		'area' => true,
		'residential_area' => true,
		'commercial_area' => true,
		'building_id' => true,
		'building_status' => true,
		'building_units_residential' => true,
		'building_units_commercial' => true,
		'building_construction_year' => true,
		'building_rebuilding_year' => true,
		'building_floor_area' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'bfe_number' => 'bfe_number',
        'ownership_code' => 'ownership_code',
        'municipality_code' => 'municipality_code',
        'status' => 'status',
        'usage' => 'usage',
        'rooms' => 'rooms',
        'area' => 'area',
        'residential_area' => 'residential_area',
        'commercial_area' => 'commercial_area',
        'building_id' => 'building_id',
        'building_status' => 'building_status',
        'building_units_residential' => 'building_units_residential',
        'building_units_commercial' => 'building_units_commercial',
        'building_construction_year' => 'building_construction_year',
        'building_rebuilding_year' => 'building_rebuilding_year',
        'building_floor_area' => 'building_floor_area'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'bfe_number' => 'setBfeNumber',
        'ownership_code' => 'setOwnershipCode',
        'municipality_code' => 'setMunicipalityCode',
        'status' => 'setStatus',
        'usage' => 'setUsage',
        'rooms' => 'setRooms',
        'area' => 'setArea',
        'residential_area' => 'setResidentialArea',
        'commercial_area' => 'setCommercialArea',
        'building_id' => 'setBuildingId',
        'building_status' => 'setBuildingStatus',
        'building_units_residential' => 'setBuildingUnitsResidential',
        'building_units_commercial' => 'setBuildingUnitsCommercial',
        'building_construction_year' => 'setBuildingConstructionYear',
        'building_rebuilding_year' => 'setBuildingRebuildingYear',
        'building_floor_area' => 'setBuildingFloorArea'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'bfe_number' => 'getBfeNumber',
        'ownership_code' => 'getOwnershipCode',
        'municipality_code' => 'getMunicipalityCode',
        'status' => 'getStatus',
        'usage' => 'getUsage',
        'rooms' => 'getRooms',
        'area' => 'getArea',
        'residential_area' => 'getResidentialArea',
        'commercial_area' => 'getCommercialArea',
        'building_id' => 'getBuildingId',
        'building_status' => 'getBuildingStatus',
        'building_units_residential' => 'getBuildingUnitsResidential',
        'building_units_commercial' => 'getBuildingUnitsCommercial',
        'building_construction_year' => 'getBuildingConstructionYear',
        'building_rebuilding_year' => 'getBuildingRebuildingYear',
        'building_floor_area' => 'getBuildingFloorArea'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('bfe_number', $data ?? [], null);
        $this->setIfExists('ownership_code', $data ?? [], null);
        $this->setIfExists('municipality_code', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('usage', $data ?? [], null);
        $this->setIfExists('rooms', $data ?? [], null);
        $this->setIfExists('area', $data ?? [], null);
        $this->setIfExists('residential_area', $data ?? [], null);
        $this->setIfExists('commercial_area', $data ?? [], null);
        $this->setIfExists('building_id', $data ?? [], null);
        $this->setIfExists('building_status', $data ?? [], null);
        $this->setIfExists('building_units_residential', $data ?? [], null);
        $this->setIfExists('building_units_commercial', $data ?? [], null);
        $this->setIfExists('building_construction_year', $data ?? [], null);
        $this->setIfExists('building_rebuilding_year', $data ?? [], null);
        $this->setIfExists('building_floor_area', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['bfe_number'] === null) {
            $invalidProperties[] = "'bfe_number' can't be null";
        }
        if ($this->container['municipality_code'] === null) {
            $invalidProperties[] = "'municipality_code' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['rooms'] === null) {
            $invalidProperties[] = "'rooms' can't be null";
        }
        if ($this->container['area'] === null) {
            $invalidProperties[] = "'area' can't be null";
        }
        if ($this->container['residential_area'] === null) {
            $invalidProperties[] = "'residential_area' can't be null";
        }
        if ($this->container['commercial_area'] === null) {
            $invalidProperties[] = "'commercial_area' can't be null";
        }
        if ($this->container['building_id'] === null) {
            $invalidProperties[] = "'building_id' can't be null";
        }
        if ($this->container['building_status'] === null) {
            $invalidProperties[] = "'building_status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets bfe_number
     *
     * @return mixed
     */
    public function getBfeNumber()
    {
        return $this->container['bfe_number'];
    }

    /**
     * Sets bfe_number
     *
     * @param mixed $bfe_number bfe_number
     *
     * @return self
     */
    public function setBfeNumber($bfe_number)
    {
        if (is_null($bfe_number)) {
            array_push($this->openAPINullablesSetToNull, 'bfe_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bfe_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bfe_number'] = $bfe_number;

        return $this;
    }

    /**
     * Gets ownership_code
     *
     * @return mixed|null
     */
    public function getOwnershipCode()
    {
        return $this->container['ownership_code'];
    }

    /**
     * Sets ownership_code
     *
     * @param mixed|null $ownership_code ownership_code
     *
     * @return self
     */
    public function setOwnershipCode($ownership_code)
    {
        if (is_null($ownership_code)) {
            array_push($this->openAPINullablesSetToNull, 'ownership_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ownership_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ownership_code'] = $ownership_code;

        return $this;
    }

    /**
     * Gets municipality_code
     *
     * @return mixed
     */
    public function getMunicipalityCode()
    {
        return $this->container['municipality_code'];
    }

    /**
     * Sets municipality_code
     *
     * @param mixed $municipality_code municipality_code
     *
     * @return self
     */
    public function setMunicipalityCode($municipality_code)
    {
        if (is_null($municipality_code)) {
            array_push($this->openAPINullablesSetToNull, 'municipality_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('municipality_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['municipality_code'] = $municipality_code;

        return $this;
    }

    /**
     * Gets status
     *
     * @return mixed
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param mixed $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return mixed|null
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param mixed|null $usage usage
     *
     * @return self
     */
    public function setUsage($usage)
    {
        if (is_null($usage)) {
            array_push($this->openAPINullablesSetToNull, 'usage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usage'] = $usage;

        return $this;
    }

    /**
     * Gets rooms
     *
     * @return mixed
     */
    public function getRooms()
    {
        return $this->container['rooms'];
    }

    /**
     * Sets rooms
     *
     * @param mixed $rooms rooms
     *
     * @return self
     */
    public function setRooms($rooms)
    {
        if (is_null($rooms)) {
            array_push($this->openAPINullablesSetToNull, 'rooms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rooms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rooms'] = $rooms;

        return $this;
    }

    /**
     * Gets area
     *
     * @return mixed
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param mixed $area area
     *
     * @return self
     */
    public function setArea($area)
    {
        if (is_null($area)) {
            array_push($this->openAPINullablesSetToNull, 'area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets residential_area
     *
     * @return mixed
     */
    public function getResidentialArea()
    {
        return $this->container['residential_area'];
    }

    /**
     * Sets residential_area
     *
     * @param mixed $residential_area residential_area
     *
     * @return self
     */
    public function setResidentialArea($residential_area)
    {
        if (is_null($residential_area)) {
            array_push($this->openAPINullablesSetToNull, 'residential_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('residential_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['residential_area'] = $residential_area;

        return $this;
    }

    /**
     * Gets commercial_area
     *
     * @return mixed
     */
    public function getCommercialArea()
    {
        return $this->container['commercial_area'];
    }

    /**
     * Sets commercial_area
     *
     * @param mixed $commercial_area commercial_area
     *
     * @return self
     */
    public function setCommercialArea($commercial_area)
    {
        if (is_null($commercial_area)) {
            array_push($this->openAPINullablesSetToNull, 'commercial_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commercial_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['commercial_area'] = $commercial_area;

        return $this;
    }

    /**
     * Gets building_id
     *
     * @return mixed
     */
    public function getBuildingId()
    {
        return $this->container['building_id'];
    }

    /**
     * Sets building_id
     *
     * @param mixed $building_id building_id
     *
     * @return self
     */
    public function setBuildingId($building_id)
    {
        if (is_null($building_id)) {
            array_push($this->openAPINullablesSetToNull, 'building_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_id'] = $building_id;

        return $this;
    }

    /**
     * Gets building_status
     *
     * @return mixed
     */
    public function getBuildingStatus()
    {
        return $this->container['building_status'];
    }

    /**
     * Sets building_status
     *
     * @param mixed $building_status building_status
     *
     * @return self
     */
    public function setBuildingStatus($building_status)
    {
        if (is_null($building_status)) {
            array_push($this->openAPINullablesSetToNull, 'building_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_status'] = $building_status;

        return $this;
    }

    /**
     * Gets building_units_residential
     *
     * @return mixed|null
     */
    public function getBuildingUnitsResidential()
    {
        return $this->container['building_units_residential'];
    }

    /**
     * Sets building_units_residential
     *
     * @param mixed|null $building_units_residential building_units_residential
     *
     * @return self
     */
    public function setBuildingUnitsResidential($building_units_residential)
    {
        if (is_null($building_units_residential)) {
            array_push($this->openAPINullablesSetToNull, 'building_units_residential');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_units_residential', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_units_residential'] = $building_units_residential;

        return $this;
    }

    /**
     * Gets building_units_commercial
     *
     * @return mixed|null
     */
    public function getBuildingUnitsCommercial()
    {
        return $this->container['building_units_commercial'];
    }

    /**
     * Sets building_units_commercial
     *
     * @param mixed|null $building_units_commercial building_units_commercial
     *
     * @return self
     */
    public function setBuildingUnitsCommercial($building_units_commercial)
    {
        if (is_null($building_units_commercial)) {
            array_push($this->openAPINullablesSetToNull, 'building_units_commercial');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_units_commercial', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_units_commercial'] = $building_units_commercial;

        return $this;
    }

    /**
     * Gets building_construction_year
     *
     * @return mixed|null
     */
    public function getBuildingConstructionYear()
    {
        return $this->container['building_construction_year'];
    }

    /**
     * Sets building_construction_year
     *
     * @param mixed|null $building_construction_year building_construction_year
     *
     * @return self
     */
    public function setBuildingConstructionYear($building_construction_year)
    {
        if (is_null($building_construction_year)) {
            array_push($this->openAPINullablesSetToNull, 'building_construction_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_construction_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_construction_year'] = $building_construction_year;

        return $this;
    }

    /**
     * Gets building_rebuilding_year
     *
     * @return mixed|null
     */
    public function getBuildingRebuildingYear()
    {
        return $this->container['building_rebuilding_year'];
    }

    /**
     * Sets building_rebuilding_year
     *
     * @param mixed|null $building_rebuilding_year building_rebuilding_year
     *
     * @return self
     */
    public function setBuildingRebuildingYear($building_rebuilding_year)
    {
        if (is_null($building_rebuilding_year)) {
            array_push($this->openAPINullablesSetToNull, 'building_rebuilding_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_rebuilding_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_rebuilding_year'] = $building_rebuilding_year;

        return $this;
    }

    /**
     * Gets building_floor_area
     *
     * @return mixed|null
     */
    public function getBuildingFloorArea()
    {
        return $this->container['building_floor_area'];
    }

    /**
     * Sets building_floor_area
     *
     * @param mixed|null $building_floor_area building_floor_area
     *
     * @return self
     */
    public function setBuildingFloorArea($building_floor_area)
    {
        if (is_null($building_floor_area)) {
            array_push($this->openAPINullablesSetToNull, 'building_floor_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_floor_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_floor_area'] = $building_floor_area;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


