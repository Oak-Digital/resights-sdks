<?php
/**
 * DomusProAnnualReportModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DomusProAnnualReportModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomusProAnnualReportModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DomusProAnnualReportModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'loans' => 'mixed',
        'fiscal_year' => '\OpenAPI\Client\Model\DomusProFiscalYearModel',
        'allocation_of_share_value_id' => 'mixed',
        'allocation_of_share_value_name' => 'mixed',
        'commercial_leases_square_meters' => 'mixed',
        'residential_leases_square_meters' => 'mixed',
        'cooperative_housings_square_meters' => 'mixed',
        'acquisition_price_per_square_meter_total' => 'mixed',
        'acquisition_price_per_square_meter_cooperative_housing' => 'mixed',
        'average_property_charge_per_square_meter_cooperative_housing' => 'mixed',
        'debt_less_assets_per_square_meter_cooperative_housing' => 'mixed',
        'income_per_square_meter_commercial_lease' => 'mixed',
        'distributional_sum' => 'mixed',
        'file_token' => 'mixed',
        'comments' => 'mixed',
        'number_of_commercial_leases' => 'mixed',
        'number_of_residential_leases' => 'mixed',
        'number_of_cooperative_housings' => 'mixed',
        'official_assessment' => 'mixed',
        'official_assessment_per_square_meter_cooperative_housing' => 'mixed',
        'official_assessment_per_square_meter_total' => 'mixed',
        'valuer_assessment_per_square_meter_total' => 'mixed',
        'other_costs_percentage' => 'mixed',
        'property_charge_percentage' => 'mixed',
        'property_value' => 'mixed',
        'repayments_percentage' => 'mixed',
        'share_value' => 'mixed',
        'suggested_share_value_per_square_meter_cooperative_housing' => 'mixed',
        'total_square_meters' => 'mixed',
        'total_units' => 'mixed',
        'value_principle_id' => 'mixed',
        'value_principle_name' => 'mixed',
        'balance' => 'mixed',
        'equity' => 'mixed',
        'general_assembly_date' => 'mixed',
        'property_charges' => 'mixed',
        'report_end_date' => 'mixed',
        'report_start_date' => 'mixed',
        'result' => 'mixed',
        'total_debt' => 'mixed',
        'total_income' => 'mixed',
        'financial_expenses_budget' => 'mixed',
        'maintenance_budget' => 'mixed',
        'property_charges_budget' => 'mixed',
        'repayments_budget' => 'mixed',
        'total_income_budget' => 'mixed',
        'general_assembly_share_value' => 'mixed',
        'average_ongoing_maintenance_costs_per_square_meter' => 'mixed',
        'average_rebuilding_maintenance_costs_per_square_meter' => 'mixed',
        'buy_back_clause_registered' => 'mixed',
        'equity_release_percentage' => 'mixed',
        'financial_expenses' => 'mixed',
        'expenses_extraordinary' => 'mixed',
        'maintenance' => 'mixed',
        'more_debt_than_share_value' => 'mixed',
        'must_return_grants_if_dissolved' => 'mixed',
        'repayments_per_square_meter_cooperative_housing' => 'mixed',
        'reserves_per_general_assembly' => 'mixed',
        'subsidy_provisions_imposed' => 'mixed',
        'report_standard_version' => 'mixed',
        'report_standard_name' => 'mixed',
        'new_average_property_charge_per_square_meter_cooperative_housing' => 'mixed',
        'market_value_of_mortgage_debt' => 'mixed',
        'ongoing_trials' => 'mixed',
        'payments_on_mortgage_debt' => 'mixed',
        'current_assets' => 'mixed',
        'accommodation_charge' => 'mixed',
        'price_per_square_meter_share' => 'mixed',
        'per_distribution_number' => 'mixed',
        'repayments_regular' => 'mixed',
        'adjusted_liquidity_earnings' => 'mixed',
        'stress_performance_rate' => 'mixed',
        'stress_test_mandatory' => 'mixed',
        'stress_test_anyway' => 'mixed',
        'stress_missing_info' => 'mixed',
        'stress_impact_association' => 'mixed',
        'stress_optimistic_risk' => 'mixed',
        'stress_optimistic_note' => 'mixed',
        'net_stressful_influences' => 'mixed',
        'number_of_other_leases' => 'mixed',
        'other_leases_square_meters' => 'mixed',
        'valuer_assessment_per_square_meter_cooperative_housing' => 'mixed',
        'maintenance_rebuilding' => 'mixed',
        'maintenance_rebuilding_budget' => 'mixed',
        'new_income_per_square_meter_commercial_lease' => 'mixed',
        'new_income_per_square_meter_residential_lease' => 'mixed',
        'income_per_square_meter_residential_lease' => 'mixed',
        'commercial_cooperative_share_square_meters' => 'mixed',
        'number_of_commercial_cooperative_shares' => 'mixed',
        'expenses_large_construction' => 'mixed',
        'extraordinary_income' => 'mixed',
        'income_sale' => 'mixed',
        'market_value_of_index_loans' => 'mixed',
        'market_value_of_swap_agreement' => 'mixed',
        'liquid_corrections' => 'mixed',
        'nominal_value_of_index_loans' => 'mixed',
        'financial_costs_percentage' => 'mixed',
        'maintenance_costs_percentage' => 'mixed',
        'result_budget' => 'mixed',
        'approved_by_general_assembly' => 'mixed',
        'is_association_creation' => 'mixed',
        'public_allowed' => 'mixed',
        'deleted' => 'mixed',
        'published_date' => 'mixed',
        'reserves_per_general_assembly_per_square_meter' => 'mixed',
        'percentage_reserves_less_property_value' => 'mixed',
        'maintenance_budget_per_square_meter' => 'mixed',
        'cooperate_crown' => 'mixed',
        'debt_excluding_assets' => 'mixed',
        'mortgaging_ratio' => 'mixed',
        'reserves_per_square_meter_cooperative_housing' => 'mixed',
        'property_value_per_square_meter' => 'mixed',
        'gearing' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'loans' => null,
        'fiscal_year' => null,
        'allocation_of_share_value_id' => null,
        'allocation_of_share_value_name' => null,
        'commercial_leases_square_meters' => null,
        'residential_leases_square_meters' => null,
        'cooperative_housings_square_meters' => null,
        'acquisition_price_per_square_meter_total' => null,
        'acquisition_price_per_square_meter_cooperative_housing' => null,
        'average_property_charge_per_square_meter_cooperative_housing' => null,
        'debt_less_assets_per_square_meter_cooperative_housing' => null,
        'income_per_square_meter_commercial_lease' => null,
        'distributional_sum' => null,
        'file_token' => null,
        'comments' => null,
        'number_of_commercial_leases' => null,
        'number_of_residential_leases' => null,
        'number_of_cooperative_housings' => null,
        'official_assessment' => null,
        'official_assessment_per_square_meter_cooperative_housing' => null,
        'official_assessment_per_square_meter_total' => null,
        'valuer_assessment_per_square_meter_total' => null,
        'other_costs_percentage' => null,
        'property_charge_percentage' => null,
        'property_value' => null,
        'repayments_percentage' => null,
        'share_value' => null,
        'suggested_share_value_per_square_meter_cooperative_housing' => null,
        'total_square_meters' => null,
        'total_units' => null,
        'value_principle_id' => null,
        'value_principle_name' => null,
        'balance' => null,
        'equity' => null,
        'general_assembly_date' => 'date',
        'property_charges' => null,
        'report_end_date' => 'date',
        'report_start_date' => 'date',
        'result' => null,
        'total_debt' => null,
        'total_income' => null,
        'financial_expenses_budget' => null,
        'maintenance_budget' => null,
        'property_charges_budget' => null,
        'repayments_budget' => null,
        'total_income_budget' => null,
        'general_assembly_share_value' => null,
        'average_ongoing_maintenance_costs_per_square_meter' => null,
        'average_rebuilding_maintenance_costs_per_square_meter' => null,
        'buy_back_clause_registered' => null,
        'equity_release_percentage' => null,
        'financial_expenses' => null,
        'expenses_extraordinary' => null,
        'maintenance' => null,
        'more_debt_than_share_value' => null,
        'must_return_grants_if_dissolved' => null,
        'repayments_per_square_meter_cooperative_housing' => null,
        'reserves_per_general_assembly' => null,
        'subsidy_provisions_imposed' => null,
        'report_standard_version' => null,
        'report_standard_name' => null,
        'new_average_property_charge_per_square_meter_cooperative_housing' => null,
        'market_value_of_mortgage_debt' => null,
        'ongoing_trials' => null,
        'payments_on_mortgage_debt' => null,
        'current_assets' => null,
        'accommodation_charge' => null,
        'price_per_square_meter_share' => null,
        'per_distribution_number' => null,
        'repayments_regular' => null,
        'adjusted_liquidity_earnings' => null,
        'stress_performance_rate' => null,
        'stress_test_mandatory' => null,
        'stress_test_anyway' => null,
        'stress_missing_info' => null,
        'stress_impact_association' => null,
        'stress_optimistic_risk' => null,
        'stress_optimistic_note' => null,
        'net_stressful_influences' => null,
        'number_of_other_leases' => null,
        'other_leases_square_meters' => null,
        'valuer_assessment_per_square_meter_cooperative_housing' => null,
        'maintenance_rebuilding' => null,
        'maintenance_rebuilding_budget' => null,
        'new_income_per_square_meter_commercial_lease' => null,
        'new_income_per_square_meter_residential_lease' => null,
        'income_per_square_meter_residential_lease' => null,
        'commercial_cooperative_share_square_meters' => null,
        'number_of_commercial_cooperative_shares' => null,
        'expenses_large_construction' => null,
        'extraordinary_income' => null,
        'income_sale' => null,
        'market_value_of_index_loans' => null,
        'market_value_of_swap_agreement' => null,
        'liquid_corrections' => null,
        'nominal_value_of_index_loans' => null,
        'financial_costs_percentage' => null,
        'maintenance_costs_percentage' => null,
        'result_budget' => null,
        'approved_by_general_assembly' => null,
        'is_association_creation' => null,
        'public_allowed' => null,
        'deleted' => null,
        'published_date' => 'date',
        'reserves_per_general_assembly_per_square_meter' => null,
        'percentage_reserves_less_property_value' => null,
        'maintenance_budget_per_square_meter' => null,
        'cooperate_crown' => null,
        'debt_excluding_assets' => null,
        'mortgaging_ratio' => null,
        'reserves_per_square_meter_cooperative_housing' => null,
        'property_value_per_square_meter' => null,
        'gearing' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'loans' => true,
		'fiscal_year' => false,
		'allocation_of_share_value_id' => true,
		'allocation_of_share_value_name' => true,
		'commercial_leases_square_meters' => true,
		'residential_leases_square_meters' => true,
		'cooperative_housings_square_meters' => true,
		'acquisition_price_per_square_meter_total' => true,
		'acquisition_price_per_square_meter_cooperative_housing' => true,
		'average_property_charge_per_square_meter_cooperative_housing' => true,
		'debt_less_assets_per_square_meter_cooperative_housing' => true,
		'income_per_square_meter_commercial_lease' => true,
		'distributional_sum' => true,
		'file_token' => true,
		'comments' => true,
		'number_of_commercial_leases' => true,
		'number_of_residential_leases' => true,
		'number_of_cooperative_housings' => true,
		'official_assessment' => true,
		'official_assessment_per_square_meter_cooperative_housing' => true,
		'official_assessment_per_square_meter_total' => true,
		'valuer_assessment_per_square_meter_total' => true,
		'other_costs_percentage' => true,
		'property_charge_percentage' => true,
		'property_value' => true,
		'repayments_percentage' => true,
		'share_value' => true,
		'suggested_share_value_per_square_meter_cooperative_housing' => true,
		'total_square_meters' => true,
		'total_units' => true,
		'value_principle_id' => true,
		'value_principle_name' => true,
		'balance' => true,
		'equity' => true,
		'general_assembly_date' => true,
		'property_charges' => true,
		'report_end_date' => true,
		'report_start_date' => true,
		'result' => true,
		'total_debt' => true,
		'total_income' => true,
		'financial_expenses_budget' => true,
		'maintenance_budget' => true,
		'property_charges_budget' => true,
		'repayments_budget' => true,
		'total_income_budget' => true,
		'general_assembly_share_value' => true,
		'average_ongoing_maintenance_costs_per_square_meter' => true,
		'average_rebuilding_maintenance_costs_per_square_meter' => true,
		'buy_back_clause_registered' => true,
		'equity_release_percentage' => true,
		'financial_expenses' => true,
		'expenses_extraordinary' => true,
		'maintenance' => true,
		'more_debt_than_share_value' => true,
		'must_return_grants_if_dissolved' => true,
		'repayments_per_square_meter_cooperative_housing' => true,
		'reserves_per_general_assembly' => true,
		'subsidy_provisions_imposed' => true,
		'report_standard_version' => true,
		'report_standard_name' => true,
		'new_average_property_charge_per_square_meter_cooperative_housing' => true,
		'market_value_of_mortgage_debt' => true,
		'ongoing_trials' => true,
		'payments_on_mortgage_debt' => true,
		'current_assets' => true,
		'accommodation_charge' => true,
		'price_per_square_meter_share' => true,
		'per_distribution_number' => true,
		'repayments_regular' => true,
		'adjusted_liquidity_earnings' => true,
		'stress_performance_rate' => true,
		'stress_test_mandatory' => true,
		'stress_test_anyway' => true,
		'stress_missing_info' => true,
		'stress_impact_association' => true,
		'stress_optimistic_risk' => true,
		'stress_optimistic_note' => true,
		'net_stressful_influences' => true,
		'number_of_other_leases' => true,
		'other_leases_square_meters' => true,
		'valuer_assessment_per_square_meter_cooperative_housing' => true,
		'maintenance_rebuilding' => true,
		'maintenance_rebuilding_budget' => true,
		'new_income_per_square_meter_commercial_lease' => true,
		'new_income_per_square_meter_residential_lease' => true,
		'income_per_square_meter_residential_lease' => true,
		'commercial_cooperative_share_square_meters' => true,
		'number_of_commercial_cooperative_shares' => true,
		'expenses_large_construction' => true,
		'extraordinary_income' => true,
		'income_sale' => true,
		'market_value_of_index_loans' => true,
		'market_value_of_swap_agreement' => true,
		'liquid_corrections' => true,
		'nominal_value_of_index_loans' => true,
		'financial_costs_percentage' => true,
		'maintenance_costs_percentage' => true,
		'result_budget' => true,
		'approved_by_general_assembly' => true,
		'is_association_creation' => true,
		'public_allowed' => true,
		'deleted' => true,
		'published_date' => true,
		'reserves_per_general_assembly_per_square_meter' => true,
		'percentage_reserves_less_property_value' => true,
		'maintenance_budget_per_square_meter' => true,
		'cooperate_crown' => true,
		'debt_excluding_assets' => true,
		'mortgaging_ratio' => true,
		'reserves_per_square_meter_cooperative_housing' => true,
		'property_value_per_square_meter' => true,
		'gearing' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'loans' => 'loans',
        'fiscal_year' => 'fiscalYear',
        'allocation_of_share_value_id' => 'allocationOfShareValueId',
        'allocation_of_share_value_name' => 'allocationOfShareValueName',
        'commercial_leases_square_meters' => 'commercialLeasesSquareMeters',
        'residential_leases_square_meters' => 'residentialLeasesSquareMeters',
        'cooperative_housings_square_meters' => 'cooperativeHousingsSquareMeters',
        'acquisition_price_per_square_meter_total' => 'acquisitionPricePerSquareMeterTotal',
        'acquisition_price_per_square_meter_cooperative_housing' => 'acquisitionPricePerSquareMeterCooperativeHousing',
        'average_property_charge_per_square_meter_cooperative_housing' => 'averagePropertyChargePerSquareMeterCooperativeHousing',
        'debt_less_assets_per_square_meter_cooperative_housing' => 'debtLessAssetsPerSquareMeterCooperativeHousing',
        'income_per_square_meter_commercial_lease' => 'incomePerSquareMeterCommercialLease',
        'distributional_sum' => 'distributionalSum',
        'file_token' => 'fileToken',
        'comments' => 'comments',
        'number_of_commercial_leases' => 'numberOfCommercialLeases',
        'number_of_residential_leases' => 'numberOfResidentialLeases',
        'number_of_cooperative_housings' => 'numberOfCooperativeHousings',
        'official_assessment' => 'officialAssessment',
        'official_assessment_per_square_meter_cooperative_housing' => 'officialAssessmentPerSquareMeterCooperativeHousing',
        'official_assessment_per_square_meter_total' => 'officialAssessmentPerSquareMeterTotal',
        'valuer_assessment_per_square_meter_total' => 'valuerAssessmentPerSquareMeterTotal',
        'other_costs_percentage' => 'otherCostsPercentage',
        'property_charge_percentage' => 'propertyChargePercentage',
        'property_value' => 'propertyValue',
        'repayments_percentage' => 'repaymentsPercentage',
        'share_value' => 'shareValue',
        'suggested_share_value_per_square_meter_cooperative_housing' => 'suggestedShareValuePerSquareMeterCooperativeHousing',
        'total_square_meters' => 'totalSquareMeters',
        'total_units' => 'totalUnits',
        'value_principle_id' => 'valuePrincipleId',
        'value_principle_name' => 'valuePrincipleName',
        'balance' => 'balance',
        'equity' => 'equity',
        'general_assembly_date' => 'generalAssemblyDate',
        'property_charges' => 'propertyCharges',
        'report_end_date' => 'reportEndDate',
        'report_start_date' => 'reportStartDate',
        'result' => 'result',
        'total_debt' => 'totalDebt',
        'total_income' => 'totalIncome',
        'financial_expenses_budget' => 'financialExpensesBudget',
        'maintenance_budget' => 'maintenanceBudget',
        'property_charges_budget' => 'propertyChargesBudget',
        'repayments_budget' => 'repaymentsBudget',
        'total_income_budget' => 'totalIncomeBudget',
        'general_assembly_share_value' => 'generalAssemblyShareValue',
        'average_ongoing_maintenance_costs_per_square_meter' => 'averageOngoingMaintenanceCostsPerSquareMeter',
        'average_rebuilding_maintenance_costs_per_square_meter' => 'averageRebuildingMaintenanceCostsPerSquareMeter',
        'buy_back_clause_registered' => 'buyBackClauseRegistered',
        'equity_release_percentage' => 'equityReleasePercentage',
        'financial_expenses' => 'financialExpenses',
        'expenses_extraordinary' => 'expensesExtraordinary',
        'maintenance' => 'maintenance',
        'more_debt_than_share_value' => 'moreDebtThanShareValue',
        'must_return_grants_if_dissolved' => 'mustReturnGrantsIfDissolved',
        'repayments_per_square_meter_cooperative_housing' => 'repaymentsPerSquareMeterCooperativeHousing',
        'reserves_per_general_assembly' => 'reservesPerGeneralAssembly',
        'subsidy_provisions_imposed' => 'subsidyProvisionsImposed',
        'report_standard_version' => 'reportStandardVersion',
        'report_standard_name' => 'reportStandardName',
        'new_average_property_charge_per_square_meter_cooperative_housing' => 'newAveragePropertyChargePerSquareMeterCooperativeHousing',
        'market_value_of_mortgage_debt' => 'marketValueOfMortgageDebt',
        'ongoing_trials' => 'ongoingTrials',
        'payments_on_mortgage_debt' => 'paymentsOnMortgageDebt',
        'current_assets' => 'currentAssets',
        'accommodation_charge' => 'accommodationCharge',
        'price_per_square_meter_share' => 'pricePerSquareMeterShare',
        'per_distribution_number' => 'perDistributionNumber',
        'repayments_regular' => 'repaymentsRegular',
        'adjusted_liquidity_earnings' => 'adjustedLiquidityEarnings',
        'stress_performance_rate' => 'stressPerformanceRate',
        'stress_test_mandatory' => 'stressTestMandatory',
        'stress_test_anyway' => 'stressTestAnyway',
        'stress_missing_info' => 'stressMissingInfo',
        'stress_impact_association' => 'stressImpactAssociation',
        'stress_optimistic_risk' => 'stressOptimisticRisk',
        'stress_optimistic_note' => 'stressOptimisticNote',
        'net_stressful_influences' => 'netStressfulInfluences',
        'number_of_other_leases' => 'numberOfOtherLeases',
        'other_leases_square_meters' => 'otherLeasesSquareMeters',
        'valuer_assessment_per_square_meter_cooperative_housing' => 'valuerAssessmentPerSquareMeterCooperativeHousing',
        'maintenance_rebuilding' => 'maintenanceRebuilding',
        'maintenance_rebuilding_budget' => 'maintenanceRebuildingBudget',
        'new_income_per_square_meter_commercial_lease' => 'newIncomePerSquareMeterCommercialLease',
        'new_income_per_square_meter_residential_lease' => 'newIncomePerSquareMeterResidentialLease',
        'income_per_square_meter_residential_lease' => 'incomePerSquareMeterResidentialLease',
        'commercial_cooperative_share_square_meters' => 'commercialCooperativeShareSquareMeters',
        'number_of_commercial_cooperative_shares' => 'numberOfCommercialCooperativeShares',
        'expenses_large_construction' => 'expensesLargeConstruction',
        'extraordinary_income' => 'extraordinaryIncome',
        'income_sale' => 'incomeSale',
        'market_value_of_index_loans' => 'marketValueOfIndexLoans',
        'market_value_of_swap_agreement' => 'marketValueOfSwapAgreement',
        'liquid_corrections' => 'liquidCorrections',
        'nominal_value_of_index_loans' => 'nominalValueOfIndexLoans',
        'financial_costs_percentage' => 'financialCostsPercentage',
        'maintenance_costs_percentage' => 'maintenanceCostsPercentage',
        'result_budget' => 'resultBudget',
        'approved_by_general_assembly' => 'approvedByGeneralAssembly',
        'is_association_creation' => 'isAssociationCreation',
        'public_allowed' => 'publicAllowed',
        'deleted' => 'deleted',
        'published_date' => 'publishedDate',
        'reserves_per_general_assembly_per_square_meter' => 'reservesPerGeneralAssemblyPerSquareMeter',
        'percentage_reserves_less_property_value' => 'percentageReservesLessPropertyValue',
        'maintenance_budget_per_square_meter' => 'maintenanceBudgetPerSquareMeter',
        'cooperate_crown' => 'cooperateCrown',
        'debt_excluding_assets' => 'debtExcludingAssets',
        'mortgaging_ratio' => 'mortgagingRatio',
        'reserves_per_square_meter_cooperative_housing' => 'reservesPerSquareMeterCooperativeHousing',
        'property_value_per_square_meter' => 'propertyValuePerSquareMeter',
        'gearing' => 'gearing'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'loans' => 'setLoans',
        'fiscal_year' => 'setFiscalYear',
        'allocation_of_share_value_id' => 'setAllocationOfShareValueId',
        'allocation_of_share_value_name' => 'setAllocationOfShareValueName',
        'commercial_leases_square_meters' => 'setCommercialLeasesSquareMeters',
        'residential_leases_square_meters' => 'setResidentialLeasesSquareMeters',
        'cooperative_housings_square_meters' => 'setCooperativeHousingsSquareMeters',
        'acquisition_price_per_square_meter_total' => 'setAcquisitionPricePerSquareMeterTotal',
        'acquisition_price_per_square_meter_cooperative_housing' => 'setAcquisitionPricePerSquareMeterCooperativeHousing',
        'average_property_charge_per_square_meter_cooperative_housing' => 'setAveragePropertyChargePerSquareMeterCooperativeHousing',
        'debt_less_assets_per_square_meter_cooperative_housing' => 'setDebtLessAssetsPerSquareMeterCooperativeHousing',
        'income_per_square_meter_commercial_lease' => 'setIncomePerSquareMeterCommercialLease',
        'distributional_sum' => 'setDistributionalSum',
        'file_token' => 'setFileToken',
        'comments' => 'setComments',
        'number_of_commercial_leases' => 'setNumberOfCommercialLeases',
        'number_of_residential_leases' => 'setNumberOfResidentialLeases',
        'number_of_cooperative_housings' => 'setNumberOfCooperativeHousings',
        'official_assessment' => 'setOfficialAssessment',
        'official_assessment_per_square_meter_cooperative_housing' => 'setOfficialAssessmentPerSquareMeterCooperativeHousing',
        'official_assessment_per_square_meter_total' => 'setOfficialAssessmentPerSquareMeterTotal',
        'valuer_assessment_per_square_meter_total' => 'setValuerAssessmentPerSquareMeterTotal',
        'other_costs_percentage' => 'setOtherCostsPercentage',
        'property_charge_percentage' => 'setPropertyChargePercentage',
        'property_value' => 'setPropertyValue',
        'repayments_percentage' => 'setRepaymentsPercentage',
        'share_value' => 'setShareValue',
        'suggested_share_value_per_square_meter_cooperative_housing' => 'setSuggestedShareValuePerSquareMeterCooperativeHousing',
        'total_square_meters' => 'setTotalSquareMeters',
        'total_units' => 'setTotalUnits',
        'value_principle_id' => 'setValuePrincipleId',
        'value_principle_name' => 'setValuePrincipleName',
        'balance' => 'setBalance',
        'equity' => 'setEquity',
        'general_assembly_date' => 'setGeneralAssemblyDate',
        'property_charges' => 'setPropertyCharges',
        'report_end_date' => 'setReportEndDate',
        'report_start_date' => 'setReportStartDate',
        'result' => 'setResult',
        'total_debt' => 'setTotalDebt',
        'total_income' => 'setTotalIncome',
        'financial_expenses_budget' => 'setFinancialExpensesBudget',
        'maintenance_budget' => 'setMaintenanceBudget',
        'property_charges_budget' => 'setPropertyChargesBudget',
        'repayments_budget' => 'setRepaymentsBudget',
        'total_income_budget' => 'setTotalIncomeBudget',
        'general_assembly_share_value' => 'setGeneralAssemblyShareValue',
        'average_ongoing_maintenance_costs_per_square_meter' => 'setAverageOngoingMaintenanceCostsPerSquareMeter',
        'average_rebuilding_maintenance_costs_per_square_meter' => 'setAverageRebuildingMaintenanceCostsPerSquareMeter',
        'buy_back_clause_registered' => 'setBuyBackClauseRegistered',
        'equity_release_percentage' => 'setEquityReleasePercentage',
        'financial_expenses' => 'setFinancialExpenses',
        'expenses_extraordinary' => 'setExpensesExtraordinary',
        'maintenance' => 'setMaintenance',
        'more_debt_than_share_value' => 'setMoreDebtThanShareValue',
        'must_return_grants_if_dissolved' => 'setMustReturnGrantsIfDissolved',
        'repayments_per_square_meter_cooperative_housing' => 'setRepaymentsPerSquareMeterCooperativeHousing',
        'reserves_per_general_assembly' => 'setReservesPerGeneralAssembly',
        'subsidy_provisions_imposed' => 'setSubsidyProvisionsImposed',
        'report_standard_version' => 'setReportStandardVersion',
        'report_standard_name' => 'setReportStandardName',
        'new_average_property_charge_per_square_meter_cooperative_housing' => 'setNewAveragePropertyChargePerSquareMeterCooperativeHousing',
        'market_value_of_mortgage_debt' => 'setMarketValueOfMortgageDebt',
        'ongoing_trials' => 'setOngoingTrials',
        'payments_on_mortgage_debt' => 'setPaymentsOnMortgageDebt',
        'current_assets' => 'setCurrentAssets',
        'accommodation_charge' => 'setAccommodationCharge',
        'price_per_square_meter_share' => 'setPricePerSquareMeterShare',
        'per_distribution_number' => 'setPerDistributionNumber',
        'repayments_regular' => 'setRepaymentsRegular',
        'adjusted_liquidity_earnings' => 'setAdjustedLiquidityEarnings',
        'stress_performance_rate' => 'setStressPerformanceRate',
        'stress_test_mandatory' => 'setStressTestMandatory',
        'stress_test_anyway' => 'setStressTestAnyway',
        'stress_missing_info' => 'setStressMissingInfo',
        'stress_impact_association' => 'setStressImpactAssociation',
        'stress_optimistic_risk' => 'setStressOptimisticRisk',
        'stress_optimistic_note' => 'setStressOptimisticNote',
        'net_stressful_influences' => 'setNetStressfulInfluences',
        'number_of_other_leases' => 'setNumberOfOtherLeases',
        'other_leases_square_meters' => 'setOtherLeasesSquareMeters',
        'valuer_assessment_per_square_meter_cooperative_housing' => 'setValuerAssessmentPerSquareMeterCooperativeHousing',
        'maintenance_rebuilding' => 'setMaintenanceRebuilding',
        'maintenance_rebuilding_budget' => 'setMaintenanceRebuildingBudget',
        'new_income_per_square_meter_commercial_lease' => 'setNewIncomePerSquareMeterCommercialLease',
        'new_income_per_square_meter_residential_lease' => 'setNewIncomePerSquareMeterResidentialLease',
        'income_per_square_meter_residential_lease' => 'setIncomePerSquareMeterResidentialLease',
        'commercial_cooperative_share_square_meters' => 'setCommercialCooperativeShareSquareMeters',
        'number_of_commercial_cooperative_shares' => 'setNumberOfCommercialCooperativeShares',
        'expenses_large_construction' => 'setExpensesLargeConstruction',
        'extraordinary_income' => 'setExtraordinaryIncome',
        'income_sale' => 'setIncomeSale',
        'market_value_of_index_loans' => 'setMarketValueOfIndexLoans',
        'market_value_of_swap_agreement' => 'setMarketValueOfSwapAgreement',
        'liquid_corrections' => 'setLiquidCorrections',
        'nominal_value_of_index_loans' => 'setNominalValueOfIndexLoans',
        'financial_costs_percentage' => 'setFinancialCostsPercentage',
        'maintenance_costs_percentage' => 'setMaintenanceCostsPercentage',
        'result_budget' => 'setResultBudget',
        'approved_by_general_assembly' => 'setApprovedByGeneralAssembly',
        'is_association_creation' => 'setIsAssociationCreation',
        'public_allowed' => 'setPublicAllowed',
        'deleted' => 'setDeleted',
        'published_date' => 'setPublishedDate',
        'reserves_per_general_assembly_per_square_meter' => 'setReservesPerGeneralAssemblyPerSquareMeter',
        'percentage_reserves_less_property_value' => 'setPercentageReservesLessPropertyValue',
        'maintenance_budget_per_square_meter' => 'setMaintenanceBudgetPerSquareMeter',
        'cooperate_crown' => 'setCooperateCrown',
        'debt_excluding_assets' => 'setDebtExcludingAssets',
        'mortgaging_ratio' => 'setMortgagingRatio',
        'reserves_per_square_meter_cooperative_housing' => 'setReservesPerSquareMeterCooperativeHousing',
        'property_value_per_square_meter' => 'setPropertyValuePerSquareMeter',
        'gearing' => 'setGearing'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'loans' => 'getLoans',
        'fiscal_year' => 'getFiscalYear',
        'allocation_of_share_value_id' => 'getAllocationOfShareValueId',
        'allocation_of_share_value_name' => 'getAllocationOfShareValueName',
        'commercial_leases_square_meters' => 'getCommercialLeasesSquareMeters',
        'residential_leases_square_meters' => 'getResidentialLeasesSquareMeters',
        'cooperative_housings_square_meters' => 'getCooperativeHousingsSquareMeters',
        'acquisition_price_per_square_meter_total' => 'getAcquisitionPricePerSquareMeterTotal',
        'acquisition_price_per_square_meter_cooperative_housing' => 'getAcquisitionPricePerSquareMeterCooperativeHousing',
        'average_property_charge_per_square_meter_cooperative_housing' => 'getAveragePropertyChargePerSquareMeterCooperativeHousing',
        'debt_less_assets_per_square_meter_cooperative_housing' => 'getDebtLessAssetsPerSquareMeterCooperativeHousing',
        'income_per_square_meter_commercial_lease' => 'getIncomePerSquareMeterCommercialLease',
        'distributional_sum' => 'getDistributionalSum',
        'file_token' => 'getFileToken',
        'comments' => 'getComments',
        'number_of_commercial_leases' => 'getNumberOfCommercialLeases',
        'number_of_residential_leases' => 'getNumberOfResidentialLeases',
        'number_of_cooperative_housings' => 'getNumberOfCooperativeHousings',
        'official_assessment' => 'getOfficialAssessment',
        'official_assessment_per_square_meter_cooperative_housing' => 'getOfficialAssessmentPerSquareMeterCooperativeHousing',
        'official_assessment_per_square_meter_total' => 'getOfficialAssessmentPerSquareMeterTotal',
        'valuer_assessment_per_square_meter_total' => 'getValuerAssessmentPerSquareMeterTotal',
        'other_costs_percentage' => 'getOtherCostsPercentage',
        'property_charge_percentage' => 'getPropertyChargePercentage',
        'property_value' => 'getPropertyValue',
        'repayments_percentage' => 'getRepaymentsPercentage',
        'share_value' => 'getShareValue',
        'suggested_share_value_per_square_meter_cooperative_housing' => 'getSuggestedShareValuePerSquareMeterCooperativeHousing',
        'total_square_meters' => 'getTotalSquareMeters',
        'total_units' => 'getTotalUnits',
        'value_principle_id' => 'getValuePrincipleId',
        'value_principle_name' => 'getValuePrincipleName',
        'balance' => 'getBalance',
        'equity' => 'getEquity',
        'general_assembly_date' => 'getGeneralAssemblyDate',
        'property_charges' => 'getPropertyCharges',
        'report_end_date' => 'getReportEndDate',
        'report_start_date' => 'getReportStartDate',
        'result' => 'getResult',
        'total_debt' => 'getTotalDebt',
        'total_income' => 'getTotalIncome',
        'financial_expenses_budget' => 'getFinancialExpensesBudget',
        'maintenance_budget' => 'getMaintenanceBudget',
        'property_charges_budget' => 'getPropertyChargesBudget',
        'repayments_budget' => 'getRepaymentsBudget',
        'total_income_budget' => 'getTotalIncomeBudget',
        'general_assembly_share_value' => 'getGeneralAssemblyShareValue',
        'average_ongoing_maintenance_costs_per_square_meter' => 'getAverageOngoingMaintenanceCostsPerSquareMeter',
        'average_rebuilding_maintenance_costs_per_square_meter' => 'getAverageRebuildingMaintenanceCostsPerSquareMeter',
        'buy_back_clause_registered' => 'getBuyBackClauseRegistered',
        'equity_release_percentage' => 'getEquityReleasePercentage',
        'financial_expenses' => 'getFinancialExpenses',
        'expenses_extraordinary' => 'getExpensesExtraordinary',
        'maintenance' => 'getMaintenance',
        'more_debt_than_share_value' => 'getMoreDebtThanShareValue',
        'must_return_grants_if_dissolved' => 'getMustReturnGrantsIfDissolved',
        'repayments_per_square_meter_cooperative_housing' => 'getRepaymentsPerSquareMeterCooperativeHousing',
        'reserves_per_general_assembly' => 'getReservesPerGeneralAssembly',
        'subsidy_provisions_imposed' => 'getSubsidyProvisionsImposed',
        'report_standard_version' => 'getReportStandardVersion',
        'report_standard_name' => 'getReportStandardName',
        'new_average_property_charge_per_square_meter_cooperative_housing' => 'getNewAveragePropertyChargePerSquareMeterCooperativeHousing',
        'market_value_of_mortgage_debt' => 'getMarketValueOfMortgageDebt',
        'ongoing_trials' => 'getOngoingTrials',
        'payments_on_mortgage_debt' => 'getPaymentsOnMortgageDebt',
        'current_assets' => 'getCurrentAssets',
        'accommodation_charge' => 'getAccommodationCharge',
        'price_per_square_meter_share' => 'getPricePerSquareMeterShare',
        'per_distribution_number' => 'getPerDistributionNumber',
        'repayments_regular' => 'getRepaymentsRegular',
        'adjusted_liquidity_earnings' => 'getAdjustedLiquidityEarnings',
        'stress_performance_rate' => 'getStressPerformanceRate',
        'stress_test_mandatory' => 'getStressTestMandatory',
        'stress_test_anyway' => 'getStressTestAnyway',
        'stress_missing_info' => 'getStressMissingInfo',
        'stress_impact_association' => 'getStressImpactAssociation',
        'stress_optimistic_risk' => 'getStressOptimisticRisk',
        'stress_optimistic_note' => 'getStressOptimisticNote',
        'net_stressful_influences' => 'getNetStressfulInfluences',
        'number_of_other_leases' => 'getNumberOfOtherLeases',
        'other_leases_square_meters' => 'getOtherLeasesSquareMeters',
        'valuer_assessment_per_square_meter_cooperative_housing' => 'getValuerAssessmentPerSquareMeterCooperativeHousing',
        'maintenance_rebuilding' => 'getMaintenanceRebuilding',
        'maintenance_rebuilding_budget' => 'getMaintenanceRebuildingBudget',
        'new_income_per_square_meter_commercial_lease' => 'getNewIncomePerSquareMeterCommercialLease',
        'new_income_per_square_meter_residential_lease' => 'getNewIncomePerSquareMeterResidentialLease',
        'income_per_square_meter_residential_lease' => 'getIncomePerSquareMeterResidentialLease',
        'commercial_cooperative_share_square_meters' => 'getCommercialCooperativeShareSquareMeters',
        'number_of_commercial_cooperative_shares' => 'getNumberOfCommercialCooperativeShares',
        'expenses_large_construction' => 'getExpensesLargeConstruction',
        'extraordinary_income' => 'getExtraordinaryIncome',
        'income_sale' => 'getIncomeSale',
        'market_value_of_index_loans' => 'getMarketValueOfIndexLoans',
        'market_value_of_swap_agreement' => 'getMarketValueOfSwapAgreement',
        'liquid_corrections' => 'getLiquidCorrections',
        'nominal_value_of_index_loans' => 'getNominalValueOfIndexLoans',
        'financial_costs_percentage' => 'getFinancialCostsPercentage',
        'maintenance_costs_percentage' => 'getMaintenanceCostsPercentage',
        'result_budget' => 'getResultBudget',
        'approved_by_general_assembly' => 'getApprovedByGeneralAssembly',
        'is_association_creation' => 'getIsAssociationCreation',
        'public_allowed' => 'getPublicAllowed',
        'deleted' => 'getDeleted',
        'published_date' => 'getPublishedDate',
        'reserves_per_general_assembly_per_square_meter' => 'getReservesPerGeneralAssemblyPerSquareMeter',
        'percentage_reserves_less_property_value' => 'getPercentageReservesLessPropertyValue',
        'maintenance_budget_per_square_meter' => 'getMaintenanceBudgetPerSquareMeter',
        'cooperate_crown' => 'getCooperateCrown',
        'debt_excluding_assets' => 'getDebtExcludingAssets',
        'mortgaging_ratio' => 'getMortgagingRatio',
        'reserves_per_square_meter_cooperative_housing' => 'getReservesPerSquareMeterCooperativeHousing',
        'property_value_per_square_meter' => 'getPropertyValuePerSquareMeter',
        'gearing' => 'getGearing'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('loans', $data ?? [], null);
        $this->setIfExists('fiscal_year', $data ?? [], null);
        $this->setIfExists('allocation_of_share_value_id', $data ?? [], null);
        $this->setIfExists('allocation_of_share_value_name', $data ?? [], null);
        $this->setIfExists('commercial_leases_square_meters', $data ?? [], null);
        $this->setIfExists('residential_leases_square_meters', $data ?? [], null);
        $this->setIfExists('cooperative_housings_square_meters', $data ?? [], null);
        $this->setIfExists('acquisition_price_per_square_meter_total', $data ?? [], null);
        $this->setIfExists('acquisition_price_per_square_meter_cooperative_housing', $data ?? [], null);
        $this->setIfExists('average_property_charge_per_square_meter_cooperative_housing', $data ?? [], null);
        $this->setIfExists('debt_less_assets_per_square_meter_cooperative_housing', $data ?? [], null);
        $this->setIfExists('income_per_square_meter_commercial_lease', $data ?? [], null);
        $this->setIfExists('distributional_sum', $data ?? [], null);
        $this->setIfExists('file_token', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('number_of_commercial_leases', $data ?? [], null);
        $this->setIfExists('number_of_residential_leases', $data ?? [], null);
        $this->setIfExists('number_of_cooperative_housings', $data ?? [], null);
        $this->setIfExists('official_assessment', $data ?? [], null);
        $this->setIfExists('official_assessment_per_square_meter_cooperative_housing', $data ?? [], null);
        $this->setIfExists('official_assessment_per_square_meter_total', $data ?? [], null);
        $this->setIfExists('valuer_assessment_per_square_meter_total', $data ?? [], null);
        $this->setIfExists('other_costs_percentage', $data ?? [], null);
        $this->setIfExists('property_charge_percentage', $data ?? [], null);
        $this->setIfExists('property_value', $data ?? [], null);
        $this->setIfExists('repayments_percentage', $data ?? [], null);
        $this->setIfExists('share_value', $data ?? [], null);
        $this->setIfExists('suggested_share_value_per_square_meter_cooperative_housing', $data ?? [], null);
        $this->setIfExists('total_square_meters', $data ?? [], null);
        $this->setIfExists('total_units', $data ?? [], null);
        $this->setIfExists('value_principle_id', $data ?? [], null);
        $this->setIfExists('value_principle_name', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('equity', $data ?? [], null);
        $this->setIfExists('general_assembly_date', $data ?? [], null);
        $this->setIfExists('property_charges', $data ?? [], null);
        $this->setIfExists('report_end_date', $data ?? [], null);
        $this->setIfExists('report_start_date', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('total_debt', $data ?? [], null);
        $this->setIfExists('total_income', $data ?? [], null);
        $this->setIfExists('financial_expenses_budget', $data ?? [], null);
        $this->setIfExists('maintenance_budget', $data ?? [], null);
        $this->setIfExists('property_charges_budget', $data ?? [], null);
        $this->setIfExists('repayments_budget', $data ?? [], null);
        $this->setIfExists('total_income_budget', $data ?? [], null);
        $this->setIfExists('general_assembly_share_value', $data ?? [], null);
        $this->setIfExists('average_ongoing_maintenance_costs_per_square_meter', $data ?? [], null);
        $this->setIfExists('average_rebuilding_maintenance_costs_per_square_meter', $data ?? [], null);
        $this->setIfExists('buy_back_clause_registered', $data ?? [], null);
        $this->setIfExists('equity_release_percentage', $data ?? [], null);
        $this->setIfExists('financial_expenses', $data ?? [], null);
        $this->setIfExists('expenses_extraordinary', $data ?? [], null);
        $this->setIfExists('maintenance', $data ?? [], null);
        $this->setIfExists('more_debt_than_share_value', $data ?? [], null);
        $this->setIfExists('must_return_grants_if_dissolved', $data ?? [], null);
        $this->setIfExists('repayments_per_square_meter_cooperative_housing', $data ?? [], null);
        $this->setIfExists('reserves_per_general_assembly', $data ?? [], null);
        $this->setIfExists('subsidy_provisions_imposed', $data ?? [], null);
        $this->setIfExists('report_standard_version', $data ?? [], null);
        $this->setIfExists('report_standard_name', $data ?? [], null);
        $this->setIfExists('new_average_property_charge_per_square_meter_cooperative_housing', $data ?? [], null);
        $this->setIfExists('market_value_of_mortgage_debt', $data ?? [], null);
        $this->setIfExists('ongoing_trials', $data ?? [], null);
        $this->setIfExists('payments_on_mortgage_debt', $data ?? [], null);
        $this->setIfExists('current_assets', $data ?? [], null);
        $this->setIfExists('accommodation_charge', $data ?? [], null);
        $this->setIfExists('price_per_square_meter_share', $data ?? [], null);
        $this->setIfExists('per_distribution_number', $data ?? [], null);
        $this->setIfExists('repayments_regular', $data ?? [], null);
        $this->setIfExists('adjusted_liquidity_earnings', $data ?? [], null);
        $this->setIfExists('stress_performance_rate', $data ?? [], null);
        $this->setIfExists('stress_test_mandatory', $data ?? [], null);
        $this->setIfExists('stress_test_anyway', $data ?? [], null);
        $this->setIfExists('stress_missing_info', $data ?? [], null);
        $this->setIfExists('stress_impact_association', $data ?? [], null);
        $this->setIfExists('stress_optimistic_risk', $data ?? [], null);
        $this->setIfExists('stress_optimistic_note', $data ?? [], null);
        $this->setIfExists('net_stressful_influences', $data ?? [], null);
        $this->setIfExists('number_of_other_leases', $data ?? [], null);
        $this->setIfExists('other_leases_square_meters', $data ?? [], null);
        $this->setIfExists('valuer_assessment_per_square_meter_cooperative_housing', $data ?? [], null);
        $this->setIfExists('maintenance_rebuilding', $data ?? [], null);
        $this->setIfExists('maintenance_rebuilding_budget', $data ?? [], null);
        $this->setIfExists('new_income_per_square_meter_commercial_lease', $data ?? [], null);
        $this->setIfExists('new_income_per_square_meter_residential_lease', $data ?? [], null);
        $this->setIfExists('income_per_square_meter_residential_lease', $data ?? [], null);
        $this->setIfExists('commercial_cooperative_share_square_meters', $data ?? [], null);
        $this->setIfExists('number_of_commercial_cooperative_shares', $data ?? [], null);
        $this->setIfExists('expenses_large_construction', $data ?? [], null);
        $this->setIfExists('extraordinary_income', $data ?? [], null);
        $this->setIfExists('income_sale', $data ?? [], null);
        $this->setIfExists('market_value_of_index_loans', $data ?? [], null);
        $this->setIfExists('market_value_of_swap_agreement', $data ?? [], null);
        $this->setIfExists('liquid_corrections', $data ?? [], null);
        $this->setIfExists('nominal_value_of_index_loans', $data ?? [], null);
        $this->setIfExists('financial_costs_percentage', $data ?? [], null);
        $this->setIfExists('maintenance_costs_percentage', $data ?? [], null);
        $this->setIfExists('result_budget', $data ?? [], null);
        $this->setIfExists('approved_by_general_assembly', $data ?? [], null);
        $this->setIfExists('is_association_creation', $data ?? [], null);
        $this->setIfExists('public_allowed', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('published_date', $data ?? [], null);
        $this->setIfExists('reserves_per_general_assembly_per_square_meter', $data ?? [], null);
        $this->setIfExists('percentage_reserves_less_property_value', $data ?? [], null);
        $this->setIfExists('maintenance_budget_per_square_meter', $data ?? [], null);
        $this->setIfExists('cooperate_crown', $data ?? [], null);
        $this->setIfExists('debt_excluding_assets', $data ?? [], null);
        $this->setIfExists('mortgaging_ratio', $data ?? [], null);
        $this->setIfExists('reserves_per_square_meter_cooperative_housing', $data ?? [], null);
        $this->setIfExists('property_value_per_square_meter', $data ?? [], null);
        $this->setIfExists('gearing', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['loans'] === null) {
            $invalidProperties[] = "'loans' can't be null";
        }
        if ($this->container['fiscal_year'] === null) {
            $invalidProperties[] = "'fiscal_year' can't be null";
        }
        if ($this->container['allocation_of_share_value_id'] === null) {
            $invalidProperties[] = "'allocation_of_share_value_id' can't be null";
        }
        if ($this->container['allocation_of_share_value_name'] === null) {
            $invalidProperties[] = "'allocation_of_share_value_name' can't be null";
        }
        if ($this->container['file_token'] === null) {
            $invalidProperties[] = "'file_token' can't be null";
        }
        if ($this->container['property_value'] === null) {
            $invalidProperties[] = "'property_value' can't be null";
        }
        if ($this->container['value_principle_id'] === null) {
            $invalidProperties[] = "'value_principle_id' can't be null";
        }
        if ($this->container['value_principle_name'] === null) {
            $invalidProperties[] = "'value_principle_name' can't be null";
        }
        if ($this->container['balance'] === null) {
            $invalidProperties[] = "'balance' can't be null";
        }
        if ($this->container['report_end_date'] === null) {
            $invalidProperties[] = "'report_end_date' can't be null";
        }
        if ($this->container['report_start_date'] === null) {
            $invalidProperties[] = "'report_start_date' can't be null";
        }
        if ($this->container['result'] === null) {
            $invalidProperties[] = "'result' can't be null";
        }
        if ($this->container['total_income'] === null) {
            $invalidProperties[] = "'total_income' can't be null";
        }
        if ($this->container['report_standard_version'] === null) {
            $invalidProperties[] = "'report_standard_version' can't be null";
        }
        if ($this->container['report_standard_name'] === null) {
            $invalidProperties[] = "'report_standard_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets loans
     *
     * @return mixed
     */
    public function getLoans()
    {
        return $this->container['loans'];
    }

    /**
     * Sets loans
     *
     * @param mixed $loans loans
     *
     * @return self
     */
    public function setLoans($loans)
    {
        if (is_null($loans)) {
            array_push($this->openAPINullablesSetToNull, 'loans');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loans', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loans'] = $loans;

        return $this;
    }

    /**
     * Gets fiscal_year
     *
     * @return \OpenAPI\Client\Model\DomusProFiscalYearModel
     */
    public function getFiscalYear()
    {
        return $this->container['fiscal_year'];
    }

    /**
     * Sets fiscal_year
     *
     * @param \OpenAPI\Client\Model\DomusProFiscalYearModel $fiscal_year fiscal_year
     *
     * @return self
     */
    public function setFiscalYear($fiscal_year)
    {
        if (is_null($fiscal_year)) {
            throw new \InvalidArgumentException('non-nullable fiscal_year cannot be null');
        }
        $this->container['fiscal_year'] = $fiscal_year;

        return $this;
    }

    /**
     * Gets allocation_of_share_value_id
     *
     * @return mixed
     */
    public function getAllocationOfShareValueId()
    {
        return $this->container['allocation_of_share_value_id'];
    }

    /**
     * Sets allocation_of_share_value_id
     *
     * @param mixed $allocation_of_share_value_id allocation_of_share_value_id
     *
     * @return self
     */
    public function setAllocationOfShareValueId($allocation_of_share_value_id)
    {
        if (is_null($allocation_of_share_value_id)) {
            array_push($this->openAPINullablesSetToNull, 'allocation_of_share_value_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allocation_of_share_value_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allocation_of_share_value_id'] = $allocation_of_share_value_id;

        return $this;
    }

    /**
     * Gets allocation_of_share_value_name
     *
     * @return mixed
     */
    public function getAllocationOfShareValueName()
    {
        return $this->container['allocation_of_share_value_name'];
    }

    /**
     * Sets allocation_of_share_value_name
     *
     * @param mixed $allocation_of_share_value_name Princip for fordeling af AndelsVaerdi mellem andelshavere. M2, indskud, m.m. samt evt. knÃ¦k
     *
     * @return self
     */
    public function setAllocationOfShareValueName($allocation_of_share_value_name)
    {
        if (is_null($allocation_of_share_value_name)) {
            array_push($this->openAPINullablesSetToNull, 'allocation_of_share_value_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allocation_of_share_value_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allocation_of_share_value_name'] = $allocation_of_share_value_name;

        return $this;
    }

    /**
     * Gets commercial_leases_square_meters
     *
     * @return mixed|null
     */
    public function getCommercialLeasesSquareMeters()
    {
        return $this->container['commercial_leases_square_meters'];
    }

    /**
     * Sets commercial_leases_square_meters
     *
     * @param mixed|null $commercial_leases_square_meters B4 ErhvervslejemÃ¥l - m2
     *
     * @return self
     */
    public function setCommercialLeasesSquareMeters($commercial_leases_square_meters)
    {
        if (is_null($commercial_leases_square_meters)) {
            array_push($this->openAPINullablesSetToNull, 'commercial_leases_square_meters');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commercial_leases_square_meters', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['commercial_leases_square_meters'] = $commercial_leases_square_meters;

        return $this;
    }

    /**
     * Gets residential_leases_square_meters
     *
     * @return mixed|null
     */
    public function getResidentialLeasesSquareMeters()
    {
        return $this->container['residential_leases_square_meters'];
    }

    /**
     * Sets residential_leases_square_meters
     *
     * @param mixed|null $residential_leases_square_meters B3 BoliglejemÃ¥l - m2
     *
     * @return self
     */
    public function setResidentialLeasesSquareMeters($residential_leases_square_meters)
    {
        if (is_null($residential_leases_square_meters)) {
            array_push($this->openAPINullablesSetToNull, 'residential_leases_square_meters');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('residential_leases_square_meters', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['residential_leases_square_meters'] = $residential_leases_square_meters;

        return $this;
    }

    /**
     * Gets cooperative_housings_square_meters
     *
     * @return mixed|null
     */
    public function getCooperativeHousingsSquareMeters()
    {
        return $this->container['cooperative_housings_square_meters'];
    }

    /**
     * Sets cooperative_housings_square_meters
     *
     * @param mixed|null $cooperative_housings_square_meters B1 Andelsboliger - m2
     *
     * @return self
     */
    public function setCooperativeHousingsSquareMeters($cooperative_housings_square_meters)
    {
        if (is_null($cooperative_housings_square_meters)) {
            array_push($this->openAPINullablesSetToNull, 'cooperative_housings_square_meters');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cooperative_housings_square_meters', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cooperative_housings_square_meters'] = $cooperative_housings_square_meters;

        return $this;
    }

    /**
     * Gets acquisition_price_per_square_meter_total
     *
     * @return mixed|null
     */
    public function getAcquisitionPricePerSquareMeterTotal()
    {
        return $this->container['acquisition_price_per_square_meter_total'];
    }

    /**
     * Sets acquisition_price_per_square_meter_total
     *
     * @param mixed|null $acquisition_price_per_square_meter_total EjdVAnskPerM2Total
     *
     * @return self
     */
    public function setAcquisitionPricePerSquareMeterTotal($acquisition_price_per_square_meter_total)
    {
        if (is_null($acquisition_price_per_square_meter_total)) {
            array_push($this->openAPINullablesSetToNull, 'acquisition_price_per_square_meter_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('acquisition_price_per_square_meter_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['acquisition_price_per_square_meter_total'] = $acquisition_price_per_square_meter_total;

        return $this;
    }

    /**
     * Gets acquisition_price_per_square_meter_cooperative_housing
     *
     * @return mixed|null
     */
    public function getAcquisitionPricePerSquareMeterCooperativeHousing()
    {
        return $this->container['acquisition_price_per_square_meter_cooperative_housing'];
    }

    /**
     * Sets acquisition_price_per_square_meter_cooperative_housing
     *
     * @param mixed|null $acquisition_price_per_square_meter_cooperative_housing EjdVAnskPerM2Andel
     *
     * @return self
     */
    public function setAcquisitionPricePerSquareMeterCooperativeHousing($acquisition_price_per_square_meter_cooperative_housing)
    {
        if (is_null($acquisition_price_per_square_meter_cooperative_housing)) {
            array_push($this->openAPINullablesSetToNull, 'acquisition_price_per_square_meter_cooperative_housing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('acquisition_price_per_square_meter_cooperative_housing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['acquisition_price_per_square_meter_cooperative_housing'] = $acquisition_price_per_square_meter_cooperative_housing;

        return $this;
    }

    /**
     * Gets average_property_charge_per_square_meter_cooperative_housing
     *
     * @return mixed|null
     */
    public function getAveragePropertyChargePerSquareMeterCooperativeHousing()
    {
        return $this->container['average_property_charge_per_square_meter_cooperative_housing'];
    }

    /**
     * Sets average_property_charge_per_square_meter_cooperative_housing
     *
     * @param mixed|null $average_property_charge_per_square_meter_cooperative_housing BoafgPerM2Andel
     *
     * @return self
     */
    public function setAveragePropertyChargePerSquareMeterCooperativeHousing($average_property_charge_per_square_meter_cooperative_housing)
    {
        if (is_null($average_property_charge_per_square_meter_cooperative_housing)) {
            array_push($this->openAPINullablesSetToNull, 'average_property_charge_per_square_meter_cooperative_housing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('average_property_charge_per_square_meter_cooperative_housing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['average_property_charge_per_square_meter_cooperative_housing'] = $average_property_charge_per_square_meter_cooperative_housing;

        return $this;
    }

    /**
     * Gets debt_less_assets_per_square_meter_cooperative_housing
     *
     * @return mixed|null
     */
    public function getDebtLessAssetsPerSquareMeterCooperativeHousing()
    {
        return $this->container['debt_less_assets_per_square_meter_cooperative_housing'];
    }

    /**
     * Sets debt_less_assets_per_square_meter_cooperative_housing
     *
     * @param mixed|null $debt_less_assets_per_square_meter_cooperative_housing GFOAPerM2Andel
     *
     * @return self
     */
    public function setDebtLessAssetsPerSquareMeterCooperativeHousing($debt_less_assets_per_square_meter_cooperative_housing)
    {
        if (is_null($debt_less_assets_per_square_meter_cooperative_housing)) {
            array_push($this->openAPINullablesSetToNull, 'debt_less_assets_per_square_meter_cooperative_housing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('debt_less_assets_per_square_meter_cooperative_housing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['debt_less_assets_per_square_meter_cooperative_housing'] = $debt_less_assets_per_square_meter_cooperative_housing;

        return $this;
    }

    /**
     * Gets income_per_square_meter_commercial_lease
     *
     * @return mixed|null
     */
    public function getIncomePerSquareMeterCommercialLease()
    {
        return $this->container['income_per_square_meter_commercial_lease'];
    }

    /**
     * Sets income_per_square_meter_commercial_lease
     *
     * @param mixed|null $income_per_square_meter_commercial_lease Boligleje pr. mÂ² boliglejemÃ¥l
     *
     * @return self
     */
    public function setIncomePerSquareMeterCommercialLease($income_per_square_meter_commercial_lease)
    {
        if (is_null($income_per_square_meter_commercial_lease)) {
            array_push($this->openAPINullablesSetToNull, 'income_per_square_meter_commercial_lease');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('income_per_square_meter_commercial_lease', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['income_per_square_meter_commercial_lease'] = $income_per_square_meter_commercial_lease;

        return $this;
    }

    /**
     * Gets distributional_sum
     *
     * @return mixed|null
     */
    public function getDistributionalSum()
    {
        return $this->container['distributional_sum'];
    }

    /**
     * Sets distributional_sum
     *
     * @param mixed|null $distributional_sum FordelingstalSum
     *
     * @return self
     */
    public function setDistributionalSum($distributional_sum)
    {
        if (is_null($distributional_sum)) {
            array_push($this->openAPINullablesSetToNull, 'distributional_sum');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('distributional_sum', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['distributional_sum'] = $distributional_sum;

        return $this;
    }

    /**
     * Gets file_token
     *
     * @return mixed
     */
    public function getFileToken()
    {
        return $this->container['file_token'];
    }

    /**
     * Sets file_token
     *
     * @param mixed $file_token Filetoken which can be used in fetchFile method of documentWebservice
     *
     * @return self
     */
    public function setFileToken($file_token)
    {
        if (is_null($file_token)) {
            array_push($this->openAPINullablesSetToNull, 'file_token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_token'] = $file_token;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return mixed|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param mixed|null $comments Comments from DomusPro
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            array_push($this->openAPINullablesSetToNull, 'comments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets number_of_commercial_leases
     *
     * @return mixed|null
     */
    public function getNumberOfCommercialLeases()
    {
        return $this->container['number_of_commercial_leases'];
    }

    /**
     * Sets number_of_commercial_leases
     *
     * @param mixed|null $number_of_commercial_leases B4 ErhvervslejemÃ¥l - antal
     *
     * @return self
     */
    public function setNumberOfCommercialLeases($number_of_commercial_leases)
    {
        if (is_null($number_of_commercial_leases)) {
            array_push($this->openAPINullablesSetToNull, 'number_of_commercial_leases');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_of_commercial_leases', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_of_commercial_leases'] = $number_of_commercial_leases;

        return $this;
    }

    /**
     * Gets number_of_residential_leases
     *
     * @return mixed|null
     */
    public function getNumberOfResidentialLeases()
    {
        return $this->container['number_of_residential_leases'];
    }

    /**
     * Sets number_of_residential_leases
     *
     * @param mixed|null $number_of_residential_leases B3 BoliglejemÃ¥l - antal
     *
     * @return self
     */
    public function setNumberOfResidentialLeases($number_of_residential_leases)
    {
        if (is_null($number_of_residential_leases)) {
            array_push($this->openAPINullablesSetToNull, 'number_of_residential_leases');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_of_residential_leases', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_of_residential_leases'] = $number_of_residential_leases;

        return $this;
    }

    /**
     * Gets number_of_cooperative_housings
     *
     * @return mixed|null
     */
    public function getNumberOfCooperativeHousings()
    {
        return $this->container['number_of_cooperative_housings'];
    }

    /**
     * Sets number_of_cooperative_housings
     *
     * @param mixed|null $number_of_cooperative_housings B1 Andelsboliger - antal
     *
     * @return self
     */
    public function setNumberOfCooperativeHousings($number_of_cooperative_housings)
    {
        if (is_null($number_of_cooperative_housings)) {
            array_push($this->openAPINullablesSetToNull, 'number_of_cooperative_housings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_of_cooperative_housings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_of_cooperative_housings'] = $number_of_cooperative_housings;

        return $this;
    }

    /**
     * Gets official_assessment
     *
     * @return mixed|null
     */
    public function getOfficialAssessment()
    {
        return $this->container['official_assessment'];
    }

    /**
     * Sets official_assessment
     *
     * @param mixed|null $official_assessment EjdVaerdiOffVurd
     *
     * @return self
     */
    public function setOfficialAssessment($official_assessment)
    {
        if (is_null($official_assessment)) {
            array_push($this->openAPINullablesSetToNull, 'official_assessment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('official_assessment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['official_assessment'] = $official_assessment;

        return $this;
    }

    /**
     * Gets official_assessment_per_square_meter_cooperative_housing
     *
     * @return mixed|null
     */
    public function getOfficialAssessmentPerSquareMeterCooperativeHousing()
    {
        return $this->container['official_assessment_per_square_meter_cooperative_housing'];
    }

    /**
     * Sets official_assessment_per_square_meter_cooperative_housing
     *
     * @param mixed|null $official_assessment_per_square_meter_cooperative_housing EjdVOffPerM2Andel
     *
     * @return self
     */
    public function setOfficialAssessmentPerSquareMeterCooperativeHousing($official_assessment_per_square_meter_cooperative_housing)
    {
        if (is_null($official_assessment_per_square_meter_cooperative_housing)) {
            array_push($this->openAPINullablesSetToNull, 'official_assessment_per_square_meter_cooperative_housing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('official_assessment_per_square_meter_cooperative_housing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['official_assessment_per_square_meter_cooperative_housing'] = $official_assessment_per_square_meter_cooperative_housing;

        return $this;
    }

    /**
     * Gets official_assessment_per_square_meter_total
     *
     * @return mixed|null
     */
    public function getOfficialAssessmentPerSquareMeterTotal()
    {
        return $this->container['official_assessment_per_square_meter_total'];
    }

    /**
     * Sets official_assessment_per_square_meter_total
     *
     * @param mixed|null $official_assessment_per_square_meter_total EjdVOffPerM2Total
     *
     * @return self
     */
    public function setOfficialAssessmentPerSquareMeterTotal($official_assessment_per_square_meter_total)
    {
        if (is_null($official_assessment_per_square_meter_total)) {
            array_push($this->openAPINullablesSetToNull, 'official_assessment_per_square_meter_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('official_assessment_per_square_meter_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['official_assessment_per_square_meter_total'] = $official_assessment_per_square_meter_total;

        return $this;
    }

    /**
     * Gets valuer_assessment_per_square_meter_total
     *
     * @return mixed|null
     */
    public function getValuerAssessmentPerSquareMeterTotal()
    {
        return $this->container['valuer_assessment_per_square_meter_total'];
    }

    /**
     * Sets valuer_assessment_per_square_meter_total
     *
     * @param mixed|null $valuer_assessment_per_square_meter_total EjdVABPerM2Total
     *
     * @return self
     */
    public function setValuerAssessmentPerSquareMeterTotal($valuer_assessment_per_square_meter_total)
    {
        if (is_null($valuer_assessment_per_square_meter_total)) {
            array_push($this->openAPINullablesSetToNull, 'valuer_assessment_per_square_meter_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valuer_assessment_per_square_meter_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valuer_assessment_per_square_meter_total'] = $valuer_assessment_per_square_meter_total;

        return $this;
    }

    /**
     * Gets other_costs_percentage
     *
     * @return mixed|null
     */
    public function getOtherCostsPercentage()
    {
        return $this->container['other_costs_percentage'];
    }

    /**
     * Sets other_costs_percentage
     *
     * @param mixed|null $other_costs_percentage OevrigeOmkPerOFA
     *
     * @return self
     */
    public function setOtherCostsPercentage($other_costs_percentage)
    {
        if (is_null($other_costs_percentage)) {
            array_push($this->openAPINullablesSetToNull, 'other_costs_percentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_costs_percentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['other_costs_percentage'] = $other_costs_percentage;

        return $this;
    }

    /**
     * Gets property_charge_percentage
     *
     * @return mixed|null
     */
    public function getPropertyChargePercentage()
    {
        return $this->container['property_charge_percentage'];
    }

    /**
     * Sets property_charge_percentage
     *
     * @param mixed|null $property_charge_percentage BoafgPerIndtIAlt
     *
     * @return self
     */
    public function setPropertyChargePercentage($property_charge_percentage)
    {
        if (is_null($property_charge_percentage)) {
            array_push($this->openAPINullablesSetToNull, 'property_charge_percentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_charge_percentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_charge_percentage'] = $property_charge_percentage;

        return $this;
    }

    /**
     * Gets property_value
     *
     * @return mixed
     */
    public function getPropertyValue()
    {
        return $this->container['property_value'];
    }

    /**
     * Sets property_value
     *
     * @param mixed $property_value EjdVaerdiABKr. Selve ejendommens vÃ¦rdi sÃ¥dan som den indgÃ¥r i beregningen af AB- krone. ***** AKTIVER OG PASSIVER (IDEELT SET EFTER ANDELSBOLIGFORENINGSLOVEN) M.M. *****
     *
     * @return self
     */
    public function setPropertyValue($property_value)
    {
        if (is_null($property_value)) {
            array_push($this->openAPINullablesSetToNull, 'property_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_value'] = $property_value;

        return $this;
    }

    /**
     * Gets repayments_percentage
     *
     * @return mixed|null
     */
    public function getRepaymentsPercentage()
    {
        return $this->container['repayments_percentage'];
    }

    /**
     * Sets repayments_percentage
     *
     * @param mixed|null $repayments_percentage AfdragPerOFA
     *
     * @return self
     */
    public function setRepaymentsPercentage($repayments_percentage)
    {
        if (is_null($repayments_percentage)) {
            array_push($this->openAPINullablesSetToNull, 'repayments_percentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repayments_percentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repayments_percentage'] = $repayments_percentage;

        return $this;
    }

    /**
     * Gets share_value
     *
     * @return mixed|null
     */
    public function getShareValue()
    {
        return $this->container['share_value'];
    }

    /**
     * Sets share_value
     *
     * @param mixed|null $share_value AndelsVaerdi. Samlet AndelsvÃ¦rdi jf. Regnskab
     *
     * @return self
     */
    public function setShareValue($share_value)
    {
        if (is_null($share_value)) {
            array_push($this->openAPINullablesSetToNull, 'share_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('share_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['share_value'] = $share_value;

        return $this;
    }

    /**
     * Gets suggested_share_value_per_square_meter_cooperative_housing
     *
     * @return mixed|null
     */
    public function getSuggestedShareValuePerSquareMeterCooperativeHousing()
    {
        return $this->container['suggested_share_value_per_square_meter_cooperative_housing'];
    }

    /**
     * Sets suggested_share_value_per_square_meter_cooperative_housing
     *
     * @param mixed|null $suggested_share_value_per_square_meter_cooperative_housing AndelsVPerM2Andel
     *
     * @return self
     */
    public function setSuggestedShareValuePerSquareMeterCooperativeHousing($suggested_share_value_per_square_meter_cooperative_housing)
    {
        if (is_null($suggested_share_value_per_square_meter_cooperative_housing)) {
            array_push($this->openAPINullablesSetToNull, 'suggested_share_value_per_square_meter_cooperative_housing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suggested_share_value_per_square_meter_cooperative_housing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suggested_share_value_per_square_meter_cooperative_housing'] = $suggested_share_value_per_square_meter_cooperative_housing;

        return $this;
    }

    /**
     * Gets total_square_meters
     *
     * @return mixed|null
     */
    public function getTotalSquareMeters()
    {
        return $this->container['total_square_meters'];
    }

    /**
     * Sets total_square_meters
     *
     * @param mixed|null $total_square_meters B6 Enheder i alt - m2
     *
     * @return self
     */
    public function setTotalSquareMeters($total_square_meters)
    {
        if (is_null($total_square_meters)) {
            array_push($this->openAPINullablesSetToNull, 'total_square_meters');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_square_meters', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_square_meters'] = $total_square_meters;

        return $this;
    }

    /**
     * Gets total_units
     *
     * @return mixed|null
     */
    public function getTotalUnits()
    {
        return $this->container['total_units'];
    }

    /**
     * Sets total_units
     *
     * @param mixed|null $total_units B6 Enheder i alt - antal
     *
     * @return self
     */
    public function setTotalUnits($total_units)
    {
        if (is_null($total_units)) {
            array_push($this->openAPINullablesSetToNull, 'total_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_units', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_units'] = $total_units;

        return $this;
    }

    /**
     * Gets value_principle_id
     *
     * @return mixed
     */
    public function getValuePrincipleId()
    {
        return $this->container['value_principle_id'];
    }

    /**
     * Sets value_principle_id
     *
     * @param mixed $value_principle_id value_principle_id
     *
     * @return self
     */
    public function setValuePrincipleId($value_principle_id)
    {
        if (is_null($value_principle_id)) {
            array_push($this->openAPINullablesSetToNull, 'value_principle_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('value_principle_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['value_principle_id'] = $value_principle_id;

        return $this;
    }

    /**
     * Gets value_principle_name
     *
     * @return mixed
     */
    public function getValuePrincipleName()
    {
        return $this->container['value_principle_name'];
    }

    /**
     * Sets value_principle_name
     *
     * @param mixed $value_principle_name Methodname of how the property is valued
     *
     * @return self
     */
    public function setValuePrincipleName($value_principle_name)
    {
        if (is_null($value_principle_name)) {
            array_push($this->openAPINullablesSetToNull, 'value_principle_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('value_principle_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['value_principle_name'] = $value_principle_name;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return mixed
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param mixed $balance Balancesum
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            array_push($this->openAPINullablesSetToNull, 'balance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('balance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets equity
     *
     * @return mixed|null
     */
    public function getEquity()
    {
        return $this->container['equity'];
    }

    /**
     * Sets equity
     *
     * @param mixed|null $equity Egenkapital
     *
     * @return self
     */
    public function setEquity($equity)
    {
        if (is_null($equity)) {
            array_push($this->openAPINullablesSetToNull, 'equity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('equity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['equity'] = $equity;

        return $this;
    }

    /**
     * Gets general_assembly_date
     *
     * @return mixed|null
     */
    public function getGeneralAssemblyDate()
    {
        return $this->container['general_assembly_date'];
    }

    /**
     * Sets general_assembly_date
     *
     * @param mixed|null $general_assembly_date GeneralforsDato
     *
     * @return self
     */
    public function setGeneralAssemblyDate($general_assembly_date)
    {
        if (is_null($general_assembly_date)) {
            array_push($this->openAPINullablesSetToNull, 'general_assembly_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('general_assembly_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['general_assembly_date'] = $general_assembly_date;

        return $this;
    }

    /**
     * Gets property_charges
     *
     * @return mixed|null
     */
    public function getPropertyCharges()
    {
        return $this->container['property_charges'];
    }

    /**
     * Sets property_charges
     *
     * @param mixed|null $property_charges IndtBoligafgift
     *
     * @return self
     */
    public function setPropertyCharges($property_charges)
    {
        if (is_null($property_charges)) {
            array_push($this->openAPINullablesSetToNull, 'property_charges');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_charges', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_charges'] = $property_charges;

        return $this;
    }

    /**
     * Gets report_end_date
     *
     * @return mixed
     */
    public function getReportEndDate()
    {
        return $this->container['report_end_date'];
    }

    /**
     * Sets report_end_date
     *
     * @param mixed $report_end_date RegnskabSlutDato
     *
     * @return self
     */
    public function setReportEndDate($report_end_date)
    {
        if (is_null($report_end_date)) {
            array_push($this->openAPINullablesSetToNull, 'report_end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['report_end_date'] = $report_end_date;

        return $this;
    }

    /**
     * Gets report_start_date
     *
     * @return mixed
     */
    public function getReportStartDate()
    {
        return $this->container['report_start_date'];
    }

    /**
     * Sets report_start_date
     *
     * @param mixed $report_start_date RegnskabStartDato
     *
     * @return self
     */
    public function setReportStartDate($report_start_date)
    {
        if (is_null($report_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'report_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['report_start_date'] = $report_start_date;

        return $this;
    }

    /**
     * Gets result
     *
     * @return mixed
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param mixed $result Resultat
     *
     * @return self
     */
    public function setResult($result)
    {
        if (is_null($result)) {
            array_push($this->openAPINullablesSetToNull, 'result');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('result', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets total_debt
     *
     * @return mixed|null
     */
    public function getTotalDebt()
    {
        return $this->container['total_debt'];
    }

    /**
     * Sets total_debt
     *
     * @param mixed|null $total_debt GaeldIAlt
     *
     * @return self
     */
    public function setTotalDebt($total_debt)
    {
        if (is_null($total_debt)) {
            array_push($this->openAPINullablesSetToNull, 'total_debt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_debt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_debt'] = $total_debt;

        return $this;
    }

    /**
     * Gets total_income
     *
     * @return mixed
     */
    public function getTotalIncome()
    {
        return $this->container['total_income'];
    }

    /**
     * Sets total_income
     *
     * @param mixed $total_income IndtIAlt
     *
     * @return self
     */
    public function setTotalIncome($total_income)
    {
        if (is_null($total_income)) {
            array_push($this->openAPINullablesSetToNull, 'total_income');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_income', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_income'] = $total_income;

        return $this;
    }

    /**
     * Gets financial_expenses_budget
     *
     * @return mixed|null
     */
    public function getFinancialExpensesBudget()
    {
        return $this->container['financial_expenses_budget'];
    }

    /**
     * Sets financial_expenses_budget
     *
     * @param mixed|null $financial_expenses_budget financial_expenses_budget
     *
     * @return self
     */
    public function setFinancialExpensesBudget($financial_expenses_budget)
    {
        if (is_null($financial_expenses_budget)) {
            array_push($this->openAPINullablesSetToNull, 'financial_expenses_budget');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('financial_expenses_budget', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['financial_expenses_budget'] = $financial_expenses_budget;

        return $this;
    }

    /**
     * Gets maintenance_budget
     *
     * @return mixed|null
     */
    public function getMaintenanceBudget()
    {
        return $this->container['maintenance_budget'];
    }

    /**
     * Sets maintenance_budget
     *
     * @param mixed|null $maintenance_budget maintenance_budget
     *
     * @return self
     */
    public function setMaintenanceBudget($maintenance_budget)
    {
        if (is_null($maintenance_budget)) {
            array_push($this->openAPINullablesSetToNull, 'maintenance_budget');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maintenance_budget', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maintenance_budget'] = $maintenance_budget;

        return $this;
    }

    /**
     * Gets property_charges_budget
     *
     * @return mixed|null
     */
    public function getPropertyChargesBudget()
    {
        return $this->container['property_charges_budget'];
    }

    /**
     * Sets property_charges_budget
     *
     * @param mixed|null $property_charges_budget property_charges_budget
     *
     * @return self
     */
    public function setPropertyChargesBudget($property_charges_budget)
    {
        if (is_null($property_charges_budget)) {
            array_push($this->openAPINullablesSetToNull, 'property_charges_budget');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_charges_budget', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_charges_budget'] = $property_charges_budget;

        return $this;
    }

    /**
     * Gets repayments_budget
     *
     * @return mixed|null
     */
    public function getRepaymentsBudget()
    {
        return $this->container['repayments_budget'];
    }

    /**
     * Sets repayments_budget
     *
     * @param mixed|null $repayments_budget repayments_budget
     *
     * @return self
     */
    public function setRepaymentsBudget($repayments_budget)
    {
        if (is_null($repayments_budget)) {
            array_push($this->openAPINullablesSetToNull, 'repayments_budget');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repayments_budget', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repayments_budget'] = $repayments_budget;

        return $this;
    }

    /**
     * Gets total_income_budget
     *
     * @return mixed|null
     */
    public function getTotalIncomeBudget()
    {
        return $this->container['total_income_budget'];
    }

    /**
     * Sets total_income_budget
     *
     * @param mixed|null $total_income_budget total_income_budget
     *
     * @return self
     */
    public function setTotalIncomeBudget($total_income_budget)
    {
        if (is_null($total_income_budget)) {
            array_push($this->openAPINullablesSetToNull, 'total_income_budget');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_income_budget', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_income_budget'] = $total_income_budget;

        return $this;
    }

    /**
     * Gets general_assembly_share_value
     *
     * @return mixed|null
     */
    public function getGeneralAssemblyShareValue()
    {
        return $this->container['general_assembly_share_value'];
    }

    /**
     * Sets general_assembly_share_value
     *
     * @param mixed|null $general_assembly_share_value AndelsVaerdiJfGen. Samlet AndelsvÃ¦rdi jf. Generalforsamling
     *
     * @return self
     */
    public function setGeneralAssemblyShareValue($general_assembly_share_value)
    {
        if (is_null($general_assembly_share_value)) {
            array_push($this->openAPINullablesSetToNull, 'general_assembly_share_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('general_assembly_share_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['general_assembly_share_value'] = $general_assembly_share_value;

        return $this;
    }

    /**
     * Gets average_ongoing_maintenance_costs_per_square_meter
     *
     * @return mixed|null
     */
    public function getAverageOngoingMaintenanceCostsPerSquareMeter()
    {
        return $this->container['average_ongoing_maintenance_costs_per_square_meter'];
    }

    /**
     * Sets average_ongoing_maintenance_costs_per_square_meter
     *
     * @param mixed|null $average_ongoing_maintenance_costs_per_square_meter M1 Vedligeholdelse, lÃ¸bende (gns. kr. pr. mÂ²)
     *
     * @return self
     */
    public function setAverageOngoingMaintenanceCostsPerSquareMeter($average_ongoing_maintenance_costs_per_square_meter)
    {
        if (is_null($average_ongoing_maintenance_costs_per_square_meter)) {
            array_push($this->openAPINullablesSetToNull, 'average_ongoing_maintenance_costs_per_square_meter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('average_ongoing_maintenance_costs_per_square_meter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['average_ongoing_maintenance_costs_per_square_meter'] = $average_ongoing_maintenance_costs_per_square_meter;

        return $this;
    }

    /**
     * Gets average_rebuilding_maintenance_costs_per_square_meter
     *
     * @return mixed|null
     */
    public function getAverageRebuildingMaintenanceCostsPerSquareMeter()
    {
        return $this->container['average_rebuilding_maintenance_costs_per_square_meter'];
    }

    /**
     * Sets average_rebuilding_maintenance_costs_per_square_meter
     *
     * @param mixed|null $average_rebuilding_maintenance_costs_per_square_meter M2 Vedligeholdelse, genopretning og renovering (gns. kr. pr. mÂ²)
     *
     * @return self
     */
    public function setAverageRebuildingMaintenanceCostsPerSquareMeter($average_rebuilding_maintenance_costs_per_square_meter)
    {
        if (is_null($average_rebuilding_maintenance_costs_per_square_meter)) {
            array_push($this->openAPINullablesSetToNull, 'average_rebuilding_maintenance_costs_per_square_meter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('average_rebuilding_maintenance_costs_per_square_meter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['average_rebuilding_maintenance_costs_per_square_meter'] = $average_rebuilding_maintenance_costs_per_square_meter;

        return $this;
    }

    /**
     * Gets buy_back_clause_registered
     *
     * @return mixed|null
     */
    public function getBuyBackClauseRegistered()
    {
        return $this->container['buy_back_clause_registered'];
    }

    /**
     * Sets buy_back_clause_registered
     *
     * @param mixed|null $buy_back_clause_registered G3 Er der tinglyst en tilbagekÃ¸bsklausul (hjemfaldspligt) pÃ¥ foreningens ejendom
     *
     * @return self
     */
    public function setBuyBackClauseRegistered($buy_back_clause_registered)
    {
        if (is_null($buy_back_clause_registered)) {
            array_push($this->openAPINullablesSetToNull, 'buy_back_clause_registered');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buy_back_clause_registered', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buy_back_clause_registered'] = $buy_back_clause_registered;

        return $this;
    }

    /**
     * Gets equity_release_percentage
     *
     * @return mixed|null
     */
    public function getEquityReleasePercentage()
    {
        return $this->container['equity_release_percentage'];
    }

    /**
     * Sets equity_release_percentage
     *
     * @param mixed|null $equity_release_percentage P FrivÃ¦rdi (gÃ¦ldsforpligtelser sammenholdt med ejendommens regnskabsmÃ¦ssige vÃ¦rdi)
     *
     * @return self
     */
    public function setEquityReleasePercentage($equity_release_percentage)
    {
        if (is_null($equity_release_percentage)) {
            array_push($this->openAPINullablesSetToNull, 'equity_release_percentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('equity_release_percentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['equity_release_percentage'] = $equity_release_percentage;

        return $this;
    }

    /**
     * Gets financial_expenses
     *
     * @return mixed|null
     */
    public function getFinancialExpenses()
    {
        return $this->container['financial_expenses'];
    }

    /**
     * Sets financial_expenses
     *
     * @param mixed|null $financial_expenses financial_expenses
     *
     * @return self
     */
    public function setFinancialExpenses($financial_expenses)
    {
        if (is_null($financial_expenses)) {
            array_push($this->openAPINullablesSetToNull, 'financial_expenses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('financial_expenses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['financial_expenses'] = $financial_expenses;

        return $this;
    }

    /**
     * Gets expenses_extraordinary
     *
     * @return mixed|null
     */
    public function getExpensesExtraordinary()
    {
        return $this->container['expenses_extraordinary'];
    }

    /**
     * Sets expenses_extraordinary
     *
     * @param mixed|null $expenses_extraordinary Andre ekstraordinÃ¦re udgifter
     *
     * @return self
     */
    public function setExpensesExtraordinary($expenses_extraordinary)
    {
        if (is_null($expenses_extraordinary)) {
            array_push($this->openAPINullablesSetToNull, 'expenses_extraordinary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expenses_extraordinary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expenses_extraordinary'] = $expenses_extraordinary;

        return $this;
    }

    /**
     * Gets maintenance
     *
     * @return mixed|null
     */
    public function getMaintenance()
    {
        return $this->container['maintenance'];
    }

    /**
     * Sets maintenance
     *
     * @param mixed|null $maintenance Vedligeholdelsesomkostninger, lÃ¸bende
     *
     * @return self
     */
    public function setMaintenance($maintenance)
    {
        if (is_null($maintenance)) {
            array_push($this->openAPINullablesSetToNull, 'maintenance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maintenance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maintenance'] = $maintenance;

        return $this;
    }

    /**
     * Gets more_debt_than_share_value
     *
     * @return mixed|null
     */
    public function getMoreDebtThanShareValue()
    {
        return $this->container['more_debt_than_share_value'];
    }

    /**
     * Sets more_debt_than_share_value
     *
     * @param mixed|null $more_debt_than_share_value E1 HÃ¦fter den enkelte andelshaver for mere, end det der er betalt for andelen
     *
     * @return self
     */
    public function setMoreDebtThanShareValue($more_debt_than_share_value)
    {
        if (is_null($more_debt_than_share_value)) {
            array_push($this->openAPINullablesSetToNull, 'more_debt_than_share_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('more_debt_than_share_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['more_debt_than_share_value'] = $more_debt_than_share_value;

        return $this;
    }

    /**
     * Gets must_return_grants_if_dissolved
     *
     * @return mixed|null
     */
    public function getMustReturnGrantsIfDissolved()
    {
        return $this->container['must_return_grants_if_dissolved'];
    }

    /**
     * Sets must_return_grants_if_dissolved
     *
     * @param mixed|null $must_return_grants_if_dissolved G1 Har foreningen modtaget offentligt tilskud, som skal tilbagebetales ved foreningens oplÃ¸sning
     *
     * @return self
     */
    public function setMustReturnGrantsIfDissolved($must_return_grants_if_dissolved)
    {
        if (is_null($must_return_grants_if_dissolved)) {
            array_push($this->openAPINullablesSetToNull, 'must_return_grants_if_dissolved');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('must_return_grants_if_dissolved', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['must_return_grants_if_dissolved'] = $must_return_grants_if_dissolved;

        return $this;
    }

    /**
     * Gets repayments_per_square_meter_cooperative_housing
     *
     * @return mixed|null
     */
    public function getRepaymentsPerSquareMeterCooperativeHousing()
    {
        return $this->container['repayments_per_square_meter_cooperative_housing'];
    }

    /**
     * Sets repayments_per_square_meter_cooperative_housing
     *
     * @param mixed|null $repayments_per_square_meter_cooperative_housing R Ã…rets afdrag pr. andels-mÂ²
     *
     * @return self
     */
    public function setRepaymentsPerSquareMeterCooperativeHousing($repayments_per_square_meter_cooperative_housing)
    {
        if (is_null($repayments_per_square_meter_cooperative_housing)) {
            array_push($this->openAPINullablesSetToNull, 'repayments_per_square_meter_cooperative_housing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repayments_per_square_meter_cooperative_housing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repayments_per_square_meter_cooperative_housing'] = $repayments_per_square_meter_cooperative_housing;

        return $this;
    }

    /**
     * Gets reserves_per_general_assembly
     *
     * @return mixed|null
     */
    public function getReservesPerGeneralAssembly()
    {
        return $this->container['reserves_per_general_assembly'];
    }

    /**
     * Sets reserves_per_general_assembly
     *
     * @param mixed|null $reserves_per_general_assembly F3 Generalforsamlingsbestemte reserver
     *
     * @return self
     */
    public function setReservesPerGeneralAssembly($reserves_per_general_assembly)
    {
        if (is_null($reserves_per_general_assembly)) {
            array_push($this->openAPINullablesSetToNull, 'reserves_per_general_assembly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reserves_per_general_assembly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reserves_per_general_assembly'] = $reserves_per_general_assembly;

        return $this;
    }

    /**
     * Gets subsidy_provisions_imposed
     *
     * @return mixed|null
     */
    public function getSubsidyProvisionsImposed()
    {
        return $this->container['subsidy_provisions_imposed'];
    }

    /**
     * Sets subsidy_provisions_imposed
     *
     * @param mixed|null $subsidy_provisions_imposed G2 Er foreningens ejendom pÃ¥lagt tilskudsbestemmelser, jf. lov om frigÃ¸relse for visse tilskudsbestemmelser m.v. (lovbekendtgÃ¸relse nr. 978 af 19. oktober 2009)
     *
     * @return self
     */
    public function setSubsidyProvisionsImposed($subsidy_provisions_imposed)
    {
        if (is_null($subsidy_provisions_imposed)) {
            array_push($this->openAPINullablesSetToNull, 'subsidy_provisions_imposed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subsidy_provisions_imposed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subsidy_provisions_imposed'] = $subsidy_provisions_imposed;

        return $this;
    }

    /**
     * Gets report_standard_version
     *
     * @return mixed
     */
    public function getReportStandardVersion()
    {
        return $this->container['report_standard_version'];
    }

    /**
     * Sets report_standard_version
     *
     * @param mixed $report_standard_version Regnskabsstandards version
     *
     * @return self
     */
    public function setReportStandardVersion($report_standard_version)
    {
        if (is_null($report_standard_version)) {
            array_push($this->openAPINullablesSetToNull, 'report_standard_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_standard_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['report_standard_version'] = $report_standard_version;

        return $this;
    }

    /**
     * Gets report_standard_name
     *
     * @return mixed
     */
    public function getReportStandardName()
    {
        return $this->container['report_standard_name'];
    }

    /**
     * Sets report_standard_name
     *
     * @param mixed $report_standard_name Regnskabsstandards forklaring
     *
     * @return self
     */
    public function setReportStandardName($report_standard_name)
    {
        if (is_null($report_standard_name)) {
            array_push($this->openAPINullablesSetToNull, 'report_standard_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_standard_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['report_standard_name'] = $report_standard_name;

        return $this;
    }

    /**
     * Gets new_average_property_charge_per_square_meter_cooperative_housing
     *
     * @return mixed|null
     */
    public function getNewAveragePropertyChargePerSquareMeterCooperativeHousing()
    {
        return $this->container['new_average_property_charge_per_square_meter_cooperative_housing'];
    }

    /**
     * Sets new_average_property_charge_per_square_meter_cooperative_housing
     *
     * @param mixed|null $new_average_property_charge_per_square_meter_cooperative_housing H1 Boligafgift kr pr. m2 andel
     *
     * @return self
     */
    public function setNewAveragePropertyChargePerSquareMeterCooperativeHousing($new_average_property_charge_per_square_meter_cooperative_housing)
    {
        if (is_null($new_average_property_charge_per_square_meter_cooperative_housing)) {
            array_push($this->openAPINullablesSetToNull, 'new_average_property_charge_per_square_meter_cooperative_housing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('new_average_property_charge_per_square_meter_cooperative_housing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['new_average_property_charge_per_square_meter_cooperative_housing'] = $new_average_property_charge_per_square_meter_cooperative_housing;

        return $this;
    }

    /**
     * Gets market_value_of_mortgage_debt
     *
     * @return mixed|null
     */
    public function getMarketValueOfMortgageDebt()
    {
        return $this->container['market_value_of_mortgage_debt'];
    }

    /**
     * Sets market_value_of_mortgage_debt
     *
     * @param mixed|null $market_value_of_mortgage_debt KursvÃ¦rdi af prioritetsgÃ¦ld
     *
     * @return self
     */
    public function setMarketValueOfMortgageDebt($market_value_of_mortgage_debt)
    {
        if (is_null($market_value_of_mortgage_debt)) {
            array_push($this->openAPINullablesSetToNull, 'market_value_of_mortgage_debt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('market_value_of_mortgage_debt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['market_value_of_mortgage_debt'] = $market_value_of_mortgage_debt;

        return $this;
    }

    /**
     * Gets ongoing_trials
     *
     * @return mixed|null
     */
    public function getOngoingTrials()
    {
        return $this->container['ongoing_trials'];
    }

    /**
     * Sets ongoing_trials
     *
     * @param mixed|null $ongoing_trials IgangvÃ¦rende retssager
     *
     * @return self
     */
    public function setOngoingTrials($ongoing_trials)
    {
        if (is_null($ongoing_trials)) {
            array_push($this->openAPINullablesSetToNull, 'ongoing_trials');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ongoing_trials', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ongoing_trials'] = $ongoing_trials;

        return $this;
    }

    /**
     * Gets payments_on_mortgage_debt
     *
     * @return mixed|null
     */
    public function getPaymentsOnMortgageDebt()
    {
        return $this->container['payments_on_mortgage_debt'];
    }

    /**
     * Sets payments_on_mortgage_debt
     *
     * @param mixed|null $payments_on_mortgage_debt Ydelser pÃ¥ prioritetsgÃ¦ld
     *
     * @return self
     */
    public function setPaymentsOnMortgageDebt($payments_on_mortgage_debt)
    {
        if (is_null($payments_on_mortgage_debt)) {
            array_push($this->openAPINullablesSetToNull, 'payments_on_mortgage_debt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payments_on_mortgage_debt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payments_on_mortgage_debt'] = $payments_on_mortgage_debt;

        return $this;
    }

    /**
     * Gets current_assets
     *
     * @return mixed|null
     */
    public function getCurrentAssets()
    {
        return $this->container['current_assets'];
    }

    /**
     * Sets current_assets
     *
     * @param mixed|null $current_assets OmsÃ¦tningsaktiver
     *
     * @return self
     */
    public function setCurrentAssets($current_assets)
    {
        if (is_null($current_assets)) {
            array_push($this->openAPINullablesSetToNull, 'current_assets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_assets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_assets'] = $current_assets;

        return $this;
    }

    /**
     * Gets accommodation_charge
     *
     * @return mixed|null
     */
    public function getAccommodationCharge()
    {
        return $this->container['accommodation_charge'];
    }

    /**
     * Sets accommodation_charge
     *
     * @param mixed|null $accommodation_charge % af boligafgift
     *
     * @return self
     */
    public function setAccommodationCharge($accommodation_charge)
    {
        if (is_null($accommodation_charge)) {
            array_push($this->openAPINullablesSetToNull, 'accommodation_charge');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accommodation_charge', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accommodation_charge'] = $accommodation_charge;

        return $this;
    }

    /**
     * Gets price_per_square_meter_share
     *
     * @return mixed|null
     */
    public function getPricePerSquareMeterShare()
    {
        return $this->container['price_per_square_meter_share'];
    }

    /**
     * Sets price_per_square_meter_share
     *
     * @param mixed|null $price_per_square_meter_share Kr. pr m^2 andel
     *
     * @return self
     */
    public function setPricePerSquareMeterShare($price_per_square_meter_share)
    {
        if (is_null($price_per_square_meter_share)) {
            array_push($this->openAPINullablesSetToNull, 'price_per_square_meter_share');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_per_square_meter_share', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_per_square_meter_share'] = $price_per_square_meter_share;

        return $this;
    }

    /**
     * Gets per_distribution_number
     *
     * @return mixed|null
     */
    public function getPerDistributionNumber()
    {
        return $this->container['per_distribution_number'];
    }

    /**
     * Sets per_distribution_number
     *
     * @param mixed|null $per_distribution_number Pr. fordelingstal
     *
     * @return self
     */
    public function setPerDistributionNumber($per_distribution_number)
    {
        if (is_null($per_distribution_number)) {
            array_push($this->openAPINullablesSetToNull, 'per_distribution_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('per_distribution_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['per_distribution_number'] = $per_distribution_number;

        return $this;
    }

    /**
     * Gets repayments_regular
     *
     * @return mixed|null
     */
    public function getRepaymentsRegular()
    {
        return $this->container['repayments_regular'];
    }

    /**
     * Sets repayments_regular
     *
     * @param mixed|null $repayments_regular Ã…rets afdrag (ordinÃ¦re)
     *
     * @return self
     */
    public function setRepaymentsRegular($repayments_regular)
    {
        if (is_null($repayments_regular)) {
            array_push($this->openAPINullablesSetToNull, 'repayments_regular');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repayments_regular', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repayments_regular'] = $repayments_regular;

        return $this;
    }

    /**
     * Gets adjusted_liquidity_earnings
     *
     * @return mixed|null
     */
    public function getAdjustedLiquidityEarnings()
    {
        return $this->container['adjusted_liquidity_earnings'];
    }

    /**
     * Sets adjusted_liquidity_earnings
     *
     * @param mixed|null $adjusted_liquidity_earnings Korrigeret likviditetsresultat
     *
     * @return self
     */
    public function setAdjustedLiquidityEarnings($adjusted_liquidity_earnings)
    {
        if (is_null($adjusted_liquidity_earnings)) {
            array_push($this->openAPINullablesSetToNull, 'adjusted_liquidity_earnings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('adjusted_liquidity_earnings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['adjusted_liquidity_earnings'] = $adjusted_liquidity_earnings;

        return $this;
    }

    /**
     * Gets stress_performance_rate
     *
     * @return mixed|null
     */
    public function getStressPerformanceRate()
    {
        return $this->container['stress_performance_rate'];
    }

    /**
     * Sets stress_performance_rate
     *
     * @param mixed|null $stress_performance_rate Stressydelsesssats
     *
     * @return self
     */
    public function setStressPerformanceRate($stress_performance_rate)
    {
        if (is_null($stress_performance_rate)) {
            array_push($this->openAPINullablesSetToNull, 'stress_performance_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stress_performance_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stress_performance_rate'] = $stress_performance_rate;

        return $this;
    }

    /**
     * Gets stress_test_mandatory
     *
     * @return mixed|null
     */
    public function getStressTestMandatory()
    {
        return $this->container['stress_test_mandatory'];
    }

    /**
     * Sets stress_test_mandatory
     *
     * @param mixed|null $stress_test_mandatory Indicates if stress test is mandatory for this annual report or not.
     *
     * @return self
     */
    public function setStressTestMandatory($stress_test_mandatory)
    {
        if (is_null($stress_test_mandatory)) {
            array_push($this->openAPINullablesSetToNull, 'stress_test_mandatory');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stress_test_mandatory', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stress_test_mandatory'] = $stress_test_mandatory;

        return $this;
    }

    /**
     * Gets stress_test_anyway
     *
     * @return mixed|null
     */
    public function getStressTestAnyway()
    {
        return $this->container['stress_test_anyway'];
    }

    /**
     * Sets stress_test_anyway
     *
     * @param mixed|null $stress_test_anyway Stresstest alligevel
     *
     * @return self
     */
    public function setStressTestAnyway($stress_test_anyway)
    {
        if (is_null($stress_test_anyway)) {
            array_push($this->openAPINullablesSetToNull, 'stress_test_anyway');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stress_test_anyway', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stress_test_anyway'] = $stress_test_anyway;

        return $this;
    }

    /**
     * Gets stress_missing_info
     *
     * @return mixed|null
     */
    public function getStressMissingInfo()
    {
        return $this->container['stress_missing_info'];
    }

    /**
     * Sets stress_missing_info
     *
     * @param mixed|null $stress_missing_info StressManglerInfo
     *
     * @return self
     */
    public function setStressMissingInfo($stress_missing_info)
    {
        if (is_null($stress_missing_info)) {
            array_push($this->openAPINullablesSetToNull, 'stress_missing_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stress_missing_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stress_missing_info'] = $stress_missing_info;

        return $this;
    }

    /**
     * Gets stress_impact_association
     *
     * @return mixed|null
     */
    public function getStressImpactAssociation()
    {
        return $this->container['stress_impact_association'];
    }

    /**
     * Sets stress_impact_association
     *
     * @param mixed|null $stress_impact_association Streskonsekvens forening
     *
     * @return self
     */
    public function setStressImpactAssociation($stress_impact_association)
    {
        if (is_null($stress_impact_association)) {
            array_push($this->openAPINullablesSetToNull, 'stress_impact_association');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stress_impact_association', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stress_impact_association'] = $stress_impact_association;

        return $this;
    }

    /**
     * Gets stress_optimistic_risk
     *
     * @return mixed|null
     */
    public function getStressOptimisticRisk()
    {
        return $this->container['stress_optimistic_risk'];
    }

    /**
     * Sets stress_optimistic_risk
     *
     * @param mixed|null $stress_optimistic_risk Der findes bemÃ¦rkninger vedr. stressberegningen
     *
     * @return self
     */
    public function setStressOptimisticRisk($stress_optimistic_risk)
    {
        if (is_null($stress_optimistic_risk)) {
            array_push($this->openAPINullablesSetToNull, 'stress_optimistic_risk');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stress_optimistic_risk', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stress_optimistic_risk'] = $stress_optimistic_risk;

        return $this;
    }

    /**
     * Gets stress_optimistic_note
     *
     * @return mixed|null
     */
    public function getStressOptimisticNote()
    {
        return $this->container['stress_optimistic_note'];
    }

    /**
     * Sets stress_optimistic_note
     *
     * @param mixed|null $stress_optimistic_note BemÃ¦rkninger til stressudregning
     *
     * @return self
     */
    public function setStressOptimisticNote($stress_optimistic_note)
    {
        if (is_null($stress_optimistic_note)) {
            array_push($this->openAPINullablesSetToNull, 'stress_optimistic_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stress_optimistic_note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stress_optimistic_note'] = $stress_optimistic_note;

        return $this;
    }

    /**
     * Gets net_stressful_influences
     *
     * @return mixed|null
     */
    public function getNetStressfulInfluences()
    {
        return $this->container['net_stressful_influences'];
    }

    /**
     * Sets net_stressful_influences
     *
     * @param mixed|null $net_stressful_influences Netto stresspÃ¥virkning
     *
     * @return self
     */
    public function setNetStressfulInfluences($net_stressful_influences)
    {
        if (is_null($net_stressful_influences)) {
            array_push($this->openAPINullablesSetToNull, 'net_stressful_influences');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('net_stressful_influences', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['net_stressful_influences'] = $net_stressful_influences;

        return $this;
    }

    /**
     * Gets number_of_other_leases
     *
     * @return mixed|null
     */
    public function getNumberOfOtherLeases()
    {
        return $this->container['number_of_other_leases'];
    }

    /**
     * Sets number_of_other_leases
     *
     * @param mixed|null $number_of_other_leases B5 Ã˜vrige lejemÃ¥l, kÃ¦ldre, garager m.v. - antal
     *
     * @return self
     */
    public function setNumberOfOtherLeases($number_of_other_leases)
    {
        if (is_null($number_of_other_leases)) {
            array_push($this->openAPINullablesSetToNull, 'number_of_other_leases');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_of_other_leases', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_of_other_leases'] = $number_of_other_leases;

        return $this;
    }

    /**
     * Gets other_leases_square_meters
     *
     * @return mixed|null
     */
    public function getOtherLeasesSquareMeters()
    {
        return $this->container['other_leases_square_meters'];
    }

    /**
     * Sets other_leases_square_meters
     *
     * @param mixed|null $other_leases_square_meters B5 Ã˜vrige lejemÃ¥l, kÃ¦ldre, garager m.v. - m2
     *
     * @return self
     */
    public function setOtherLeasesSquareMeters($other_leases_square_meters)
    {
        if (is_null($other_leases_square_meters)) {
            array_push($this->openAPINullablesSetToNull, 'other_leases_square_meters');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_leases_square_meters', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['other_leases_square_meters'] = $other_leases_square_meters;

        return $this;
    }

    /**
     * Gets valuer_assessment_per_square_meter_cooperative_housing
     *
     * @return mixed|null
     */
    public function getValuerAssessmentPerSquareMeterCooperativeHousing()
    {
        return $this->container['valuer_assessment_per_square_meter_cooperative_housing'];
    }

    /**
     * Sets valuer_assessment_per_square_meter_cooperative_housing
     *
     * @param mixed|null $valuer_assessment_per_square_meter_cooperative_housing EjdVABPerM2Andel
     *
     * @return self
     */
    public function setValuerAssessmentPerSquareMeterCooperativeHousing($valuer_assessment_per_square_meter_cooperative_housing)
    {
        if (is_null($valuer_assessment_per_square_meter_cooperative_housing)) {
            array_push($this->openAPINullablesSetToNull, 'valuer_assessment_per_square_meter_cooperative_housing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valuer_assessment_per_square_meter_cooperative_housing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valuer_assessment_per_square_meter_cooperative_housing'] = $valuer_assessment_per_square_meter_cooperative_housing;

        return $this;
    }

    /**
     * Gets maintenance_rebuilding
     *
     * @return mixed|null
     */
    public function getMaintenanceRebuilding()
    {
        return $this->container['maintenance_rebuilding'];
    }

    /**
     * Sets maintenance_rebuilding
     *
     * @param mixed|null $maintenance_rebuilding Vedligeholdelsesomkostninger, genopretning og renovering
     *
     * @return self
     */
    public function setMaintenanceRebuilding($maintenance_rebuilding)
    {
        if (is_null($maintenance_rebuilding)) {
            array_push($this->openAPINullablesSetToNull, 'maintenance_rebuilding');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maintenance_rebuilding', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maintenance_rebuilding'] = $maintenance_rebuilding;

        return $this;
    }

    /**
     * Gets maintenance_rebuilding_budget
     *
     * @return mixed|null
     */
    public function getMaintenanceRebuildingBudget()
    {
        return $this->container['maintenance_rebuilding_budget'];
    }

    /**
     * Sets maintenance_rebuilding_budget
     *
     * @param mixed|null $maintenance_rebuilding_budget Budgetterede vedligeholdelsesomkostninger, lÃ¸bende
     *
     * @return self
     */
    public function setMaintenanceRebuildingBudget($maintenance_rebuilding_budget)
    {
        if (is_null($maintenance_rebuilding_budget)) {
            array_push($this->openAPINullablesSetToNull, 'maintenance_rebuilding_budget');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maintenance_rebuilding_budget', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maintenance_rebuilding_budget'] = $maintenance_rebuilding_budget;

        return $this;
    }

    /**
     * Gets new_income_per_square_meter_commercial_lease
     *
     * @return mixed|null
     */
    public function getNewIncomePerSquareMeterCommercialLease()
    {
        return $this->container['new_income_per_square_meter_commercial_lease'];
    }

    /**
     * Sets new_income_per_square_meter_commercial_lease
     *
     * @param mixed|null $new_income_per_square_meter_commercial_lease H2 ErhvervslejeindtÃ¦gt kr pr. m2 andel
     *
     * @return self
     */
    public function setNewIncomePerSquareMeterCommercialLease($new_income_per_square_meter_commercial_lease)
    {
        if (is_null($new_income_per_square_meter_commercial_lease)) {
            array_push($this->openAPINullablesSetToNull, 'new_income_per_square_meter_commercial_lease');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('new_income_per_square_meter_commercial_lease', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['new_income_per_square_meter_commercial_lease'] = $new_income_per_square_meter_commercial_lease;

        return $this;
    }

    /**
     * Gets new_income_per_square_meter_residential_lease
     *
     * @return mixed|null
     */
    public function getNewIncomePerSquareMeterResidentialLease()
    {
        return $this->container['new_income_per_square_meter_residential_lease'];
    }

    /**
     * Sets new_income_per_square_meter_residential_lease
     *
     * @param mixed|null $new_income_per_square_meter_residential_lease H3 BoliglejeindtÃ¦gt kr pr. m2 andel
     *
     * @return self
     */
    public function setNewIncomePerSquareMeterResidentialLease($new_income_per_square_meter_residential_lease)
    {
        if (is_null($new_income_per_square_meter_residential_lease)) {
            array_push($this->openAPINullablesSetToNull, 'new_income_per_square_meter_residential_lease');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('new_income_per_square_meter_residential_lease', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['new_income_per_square_meter_residential_lease'] = $new_income_per_square_meter_residential_lease;

        return $this;
    }

    /**
     * Gets income_per_square_meter_residential_lease
     *
     * @return mixed|null
     */
    public function getIncomePerSquareMeterResidentialLease()
    {
        return $this->container['income_per_square_meter_residential_lease'];
    }

    /**
     * Sets income_per_square_meter_residential_lease
     *
     * @param mixed|null $income_per_square_meter_residential_lease Boligafgift pr. mÂ² andel
     *
     * @return self
     */
    public function setIncomePerSquareMeterResidentialLease($income_per_square_meter_residential_lease)
    {
        if (is_null($income_per_square_meter_residential_lease)) {
            array_push($this->openAPINullablesSetToNull, 'income_per_square_meter_residential_lease');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('income_per_square_meter_residential_lease', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['income_per_square_meter_residential_lease'] = $income_per_square_meter_residential_lease;

        return $this;
    }

    /**
     * Gets commercial_cooperative_share_square_meters
     *
     * @return mixed|null
     */
    public function getCommercialCooperativeShareSquareMeters()
    {
        return $this->container['commercial_cooperative_share_square_meters'];
    }

    /**
     * Sets commercial_cooperative_share_square_meters
     *
     * @param mixed|null $commercial_cooperative_share_square_meters B2 Erhvervsandele i mÂ²
     *
     * @return self
     */
    public function setCommercialCooperativeShareSquareMeters($commercial_cooperative_share_square_meters)
    {
        if (is_null($commercial_cooperative_share_square_meters)) {
            array_push($this->openAPINullablesSetToNull, 'commercial_cooperative_share_square_meters');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commercial_cooperative_share_square_meters', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['commercial_cooperative_share_square_meters'] = $commercial_cooperative_share_square_meters;

        return $this;
    }

    /**
     * Gets number_of_commercial_cooperative_shares
     *
     * @return mixed|null
     */
    public function getNumberOfCommercialCooperativeShares()
    {
        return $this->container['number_of_commercial_cooperative_shares'];
    }

    /**
     * Sets number_of_commercial_cooperative_shares
     *
     * @param mixed|null $number_of_commercial_cooperative_shares B2 Antal erhvervsandele
     *
     * @return self
     */
    public function setNumberOfCommercialCooperativeShares($number_of_commercial_cooperative_shares)
    {
        if (is_null($number_of_commercial_cooperative_shares)) {
            array_push($this->openAPINullablesSetToNull, 'number_of_commercial_cooperative_shares');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_of_commercial_cooperative_shares', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_of_commercial_cooperative_shares'] = $number_of_commercial_cooperative_shares;

        return $this;
    }

    /**
     * Gets expenses_large_construction
     *
     * @return mixed|null
     */
    public function getExpensesLargeConstruction()
    {
        return $this->container['expenses_large_construction'];
    }

    /**
     * Sets expenses_large_construction
     *
     * @param mixed|null $expenses_large_construction StÃ¸rre byggesager
     *
     * @return self
     */
    public function setExpensesLargeConstruction($expenses_large_construction)
    {
        if (is_null($expenses_large_construction)) {
            array_push($this->openAPINullablesSetToNull, 'expenses_large_construction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expenses_large_construction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expenses_large_construction'] = $expenses_large_construction;

        return $this;
    }

    /**
     * Gets extraordinary_income
     *
     * @return mixed|null
     */
    public function getExtraordinaryIncome()
    {
        return $this->container['extraordinary_income'];
    }

    /**
     * Sets extraordinary_income
     *
     * @param mixed|null $extraordinary_income extraordinary_income
     *
     * @return self
     */
    public function setExtraordinaryIncome($extraordinary_income)
    {
        if (is_null($extraordinary_income)) {
            array_push($this->openAPINullablesSetToNull, 'extraordinary_income');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('extraordinary_income', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['extraordinary_income'] = $extraordinary_income;

        return $this;
    }

    /**
     * Gets income_sale
     *
     * @return mixed|null
     */
    public function getIncomeSale()
    {
        return $this->container['income_sale'];
    }

    /**
     * Sets income_sale
     *
     * @param mixed|null $income_sale Lejlighedssalg
     *
     * @return self
     */
    public function setIncomeSale($income_sale)
    {
        if (is_null($income_sale)) {
            array_push($this->openAPINullablesSetToNull, 'income_sale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('income_sale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['income_sale'] = $income_sale;

        return $this;
    }

    /**
     * Gets market_value_of_index_loans
     *
     * @return mixed|null
     */
    public function getMarketValueOfIndexLoans()
    {
        return $this->container['market_value_of_index_loans'];
    }

    /**
     * Sets market_value_of_index_loans
     *
     * @param mixed|null $market_value_of_index_loans KursvÃ¦rdi af indexlÃ¥n
     *
     * @return self
     */
    public function setMarketValueOfIndexLoans($market_value_of_index_loans)
    {
        if (is_null($market_value_of_index_loans)) {
            array_push($this->openAPINullablesSetToNull, 'market_value_of_index_loans');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('market_value_of_index_loans', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['market_value_of_index_loans'] = $market_value_of_index_loans;

        return $this;
    }

    /**
     * Gets market_value_of_swap_agreement
     *
     * @return mixed|null
     */
    public function getMarketValueOfSwapAgreement()
    {
        return $this->container['market_value_of_swap_agreement'];
    }

    /**
     * Sets market_value_of_swap_agreement
     *
     * @param mixed|null $market_value_of_swap_agreement KursvÃ¦rdi af swapaftale
     *
     * @return self
     */
    public function setMarketValueOfSwapAgreement($market_value_of_swap_agreement)
    {
        if (is_null($market_value_of_swap_agreement)) {
            array_push($this->openAPINullablesSetToNull, 'market_value_of_swap_agreement');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('market_value_of_swap_agreement', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['market_value_of_swap_agreement'] = $market_value_of_swap_agreement;

        return $this;
    }

    /**
     * Gets liquid_corrections
     *
     * @return mixed|null
     */
    public function getLiquidCorrections()
    {
        return $this->container['liquid_corrections'];
    }

    /**
     * Sets liquid_corrections
     *
     * @param mixed|null $liquid_corrections Ã˜vrige likviditetskorrektioner
     *
     * @return self
     */
    public function setLiquidCorrections($liquid_corrections)
    {
        if (is_null($liquid_corrections)) {
            array_push($this->openAPINullablesSetToNull, 'liquid_corrections');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('liquid_corrections', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['liquid_corrections'] = $liquid_corrections;

        return $this;
    }

    /**
     * Gets nominal_value_of_index_loans
     *
     * @return mixed|null
     */
    public function getNominalValueOfIndexLoans()
    {
        return $this->container['nominal_value_of_index_loans'];
    }

    /**
     * Sets nominal_value_of_index_loans
     *
     * @param mixed|null $nominal_value_of_index_loans Nominel vÃ¦rdi af indexlÃ¥n
     *
     * @return self
     */
    public function setNominalValueOfIndexLoans($nominal_value_of_index_loans)
    {
        if (is_null($nominal_value_of_index_loans)) {
            array_push($this->openAPINullablesSetToNull, 'nominal_value_of_index_loans');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nominal_value_of_index_loans', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nominal_value_of_index_loans'] = $nominal_value_of_index_loans;

        return $this;
    }

    /**
     * Gets financial_costs_percentage
     *
     * @return mixed|null
     */
    public function getFinancialCostsPercentage()
    {
        return $this->container['financial_costs_percentage'];
    }

    /**
     * Sets financial_costs_percentage
     *
     * @param mixed|null $financial_costs_percentage FinansOmkNetPerOFA
     *
     * @return self
     */
    public function setFinancialCostsPercentage($financial_costs_percentage)
    {
        if (is_null($financial_costs_percentage)) {
            array_push($this->openAPINullablesSetToNull, 'financial_costs_percentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('financial_costs_percentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['financial_costs_percentage'] = $financial_costs_percentage;

        return $this;
    }

    /**
     * Gets maintenance_costs_percentage
     *
     * @return mixed|null
     */
    public function getMaintenanceCostsPercentage()
    {
        return $this->container['maintenance_costs_percentage'];
    }

    /**
     * Sets maintenance_costs_percentage
     *
     * @param mixed|null $maintenance_costs_percentage VedligeholdPerOFA
     *
     * @return self
     */
    public function setMaintenanceCostsPercentage($maintenance_costs_percentage)
    {
        if (is_null($maintenance_costs_percentage)) {
            array_push($this->openAPINullablesSetToNull, 'maintenance_costs_percentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maintenance_costs_percentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maintenance_costs_percentage'] = $maintenance_costs_percentage;

        return $this;
    }

    /**
     * Gets result_budget
     *
     * @return mixed|null
     */
    public function getResultBudget()
    {
        return $this->container['result_budget'];
    }

    /**
     * Sets result_budget
     *
     * @param mixed|null $result_budget ResultatBud
     *
     * @return self
     */
    public function setResultBudget($result_budget)
    {
        if (is_null($result_budget)) {
            array_push($this->openAPINullablesSetToNull, 'result_budget');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('result_budget', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['result_budget'] = $result_budget;

        return $this;
    }

    /**
     * Gets approved_by_general_assembly
     *
     * @return mixed|null
     */
    public function getApprovedByGeneralAssembly()
    {
        return $this->container['approved_by_general_assembly'];
    }

    /**
     * Sets approved_by_general_assembly
     *
     * @param mixed|null $approved_by_general_assembly ErGodkentPaGen
     *
     * @return self
     */
    public function setApprovedByGeneralAssembly($approved_by_general_assembly)
    {
        if (is_null($approved_by_general_assembly)) {
            array_push($this->openAPINullablesSetToNull, 'approved_by_general_assembly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approved_by_general_assembly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approved_by_general_assembly'] = $approved_by_general_assembly;

        return $this;
    }

    /**
     * Gets is_association_creation
     *
     * @return mixed|null
     */
    public function getIsAssociationCreation()
    {
        return $this->container['is_association_creation'];
    }

    /**
     * Sets is_association_creation
     *
     * @param mixed|null $is_association_creation Er stiftelse. Kan antage vÃ¦rdierne Sand eller falsk eller null. Angiver om foreningen for dette regnskab er under stiftelse.
     *
     * @return self
     */
    public function setIsAssociationCreation($is_association_creation)
    {
        if (is_null($is_association_creation)) {
            array_push($this->openAPINullablesSetToNull, 'is_association_creation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_association_creation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_association_creation'] = $is_association_creation;

        return $this;
    }

    /**
     * Gets public_allowed
     *
     * @return mixed|null
     */
    public function getPublicAllowed()
    {
        return $this->container['public_allowed'];
    }

    /**
     * Sets public_allowed
     *
     * @param mixed|null $public_allowed Angiver om oplysninger fra dette regnsskab mÃ¥ bruges pÃ¥ offentlige portaler.
     *
     * @return self
     */
    public function setPublicAllowed($public_allowed)
    {
        if (is_null($public_allowed)) {
            array_push($this->openAPINullablesSetToNull, 'public_allowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('public_allowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['public_allowed'] = $public_allowed;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return mixed|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param mixed|null $deleted deleted
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            array_push($this->openAPINullablesSetToNull, 'deleted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets published_date
     *
     * @return mixed|null
     */
    public function getPublishedDate()
    {
        return $this->container['published_date'];
    }

    /**
     * Sets published_date
     *
     * @param mixed|null $published_date published_date
     *
     * @return self
     */
    public function setPublishedDate($published_date)
    {
        if (is_null($published_date)) {
            array_push($this->openAPINullablesSetToNull, 'published_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('published_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['published_date'] = $published_date;

        return $this;
    }

    /**
     * Gets reserves_per_general_assembly_per_square_meter
     *
     * @return mixed|null
     */
    public function getReservesPerGeneralAssemblyPerSquareMeter()
    {
        return $this->container['reserves_per_general_assembly_per_square_meter'];
    }

    /**
     * Sets reserves_per_general_assembly_per_square_meter
     *
     * @param mixed|null $reserves_per_general_assembly_per_square_meter reserves_per_general_assembly_per_square_meter
     *
     * @return self
     */
    public function setReservesPerGeneralAssemblyPerSquareMeter($reserves_per_general_assembly_per_square_meter)
    {
        if (is_null($reserves_per_general_assembly_per_square_meter)) {
            array_push($this->openAPINullablesSetToNull, 'reserves_per_general_assembly_per_square_meter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reserves_per_general_assembly_per_square_meter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reserves_per_general_assembly_per_square_meter'] = $reserves_per_general_assembly_per_square_meter;

        return $this;
    }

    /**
     * Gets percentage_reserves_less_property_value
     *
     * @return mixed|null
     */
    public function getPercentageReservesLessPropertyValue()
    {
        return $this->container['percentage_reserves_less_property_value'];
    }

    /**
     * Sets percentage_reserves_less_property_value
     *
     * @param mixed|null $percentage_reserves_less_property_value percentage_reserves_less_property_value
     *
     * @return self
     */
    public function setPercentageReservesLessPropertyValue($percentage_reserves_less_property_value)
    {
        if (is_null($percentage_reserves_less_property_value)) {
            array_push($this->openAPINullablesSetToNull, 'percentage_reserves_less_property_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('percentage_reserves_less_property_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['percentage_reserves_less_property_value'] = $percentage_reserves_less_property_value;

        return $this;
    }

    /**
     * Gets maintenance_budget_per_square_meter
     *
     * @return mixed|null
     */
    public function getMaintenanceBudgetPerSquareMeter()
    {
        return $this->container['maintenance_budget_per_square_meter'];
    }

    /**
     * Sets maintenance_budget_per_square_meter
     *
     * @param mixed|null $maintenance_budget_per_square_meter maintenance_budget_per_square_meter
     *
     * @return self
     */
    public function setMaintenanceBudgetPerSquareMeter($maintenance_budget_per_square_meter)
    {
        if (is_null($maintenance_budget_per_square_meter)) {
            array_push($this->openAPINullablesSetToNull, 'maintenance_budget_per_square_meter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maintenance_budget_per_square_meter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maintenance_budget_per_square_meter'] = $maintenance_budget_per_square_meter;

        return $this;
    }

    /**
     * Gets cooperate_crown
     *
     * @return mixed|null
     */
    public function getCooperateCrown()
    {
        return $this->container['cooperate_crown'];
    }

    /**
     * Sets cooperate_crown
     *
     * @param mixed|null $cooperate_crown cooperate_crown
     *
     * @return self
     */
    public function setCooperateCrown($cooperate_crown)
    {
        if (is_null($cooperate_crown)) {
            array_push($this->openAPINullablesSetToNull, 'cooperate_crown');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cooperate_crown', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cooperate_crown'] = $cooperate_crown;

        return $this;
    }

    /**
     * Gets debt_excluding_assets
     *
     * @return mixed|null
     */
    public function getDebtExcludingAssets()
    {
        return $this->container['debt_excluding_assets'];
    }

    /**
     * Sets debt_excluding_assets
     *
     * @param mixed|null $debt_excluding_assets debt_excluding_assets
     *
     * @return self
     */
    public function setDebtExcludingAssets($debt_excluding_assets)
    {
        if (is_null($debt_excluding_assets)) {
            array_push($this->openAPINullablesSetToNull, 'debt_excluding_assets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('debt_excluding_assets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['debt_excluding_assets'] = $debt_excluding_assets;

        return $this;
    }

    /**
     * Gets mortgaging_ratio
     *
     * @return mixed|null
     */
    public function getMortgagingRatio()
    {
        return $this->container['mortgaging_ratio'];
    }

    /**
     * Sets mortgaging_ratio
     *
     * @param mixed|null $mortgaging_ratio mortgaging_ratio
     *
     * @return self
     */
    public function setMortgagingRatio($mortgaging_ratio)
    {
        if (is_null($mortgaging_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'mortgaging_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mortgaging_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mortgaging_ratio'] = $mortgaging_ratio;

        return $this;
    }

    /**
     * Gets reserves_per_square_meter_cooperative_housing
     *
     * @return mixed|null
     */
    public function getReservesPerSquareMeterCooperativeHousing()
    {
        return $this->container['reserves_per_square_meter_cooperative_housing'];
    }

    /**
     * Sets reserves_per_square_meter_cooperative_housing
     *
     * @param mixed|null $reserves_per_square_meter_cooperative_housing ReservUAPerM2Andel
     *
     * @return self
     */
    public function setReservesPerSquareMeterCooperativeHousing($reserves_per_square_meter_cooperative_housing)
    {
        if (is_null($reserves_per_square_meter_cooperative_housing)) {
            array_push($this->openAPINullablesSetToNull, 'reserves_per_square_meter_cooperative_housing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reserves_per_square_meter_cooperative_housing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reserves_per_square_meter_cooperative_housing'] = $reserves_per_square_meter_cooperative_housing;

        return $this;
    }

    /**
     * Gets property_value_per_square_meter
     *
     * @return mixed|null
     */
    public function getPropertyValuePerSquareMeter()
    {
        return $this->container['property_value_per_square_meter'];
    }

    /**
     * Sets property_value_per_square_meter
     *
     * @param mixed|null $property_value_per_square_meter property_value_per_square_meter
     *
     * @return self
     */
    public function setPropertyValuePerSquareMeter($property_value_per_square_meter)
    {
        if (is_null($property_value_per_square_meter)) {
            array_push($this->openAPINullablesSetToNull, 'property_value_per_square_meter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_value_per_square_meter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_value_per_square_meter'] = $property_value_per_square_meter;

        return $this;
    }

    /**
     * Gets gearing
     *
     * @return mixed|null
     */
    public function getGearing()
    {
        return $this->container['gearing'];
    }

    /**
     * Sets gearing
     *
     * @param mixed|null $gearing gearing
     *
     * @return self
     */
    public function setGearing($gearing)
    {
        if (is_null($gearing)) {
            array_push($this->openAPINullablesSetToNull, 'gearing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gearing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gearing'] = $gearing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


