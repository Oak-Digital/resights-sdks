<?php
/**
 * AnalysisStatsMeasureResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AnalysisStatsMeasureResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AnalysisStatsMeasureResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AnalysisStatsMeasureResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'mixed',
        'count' => 'mixed',
        'sum' => 'mixed',
        'min' => 'mixed',
        'max' => 'mixed',
        'avg' => 'mixed',
        'median_5' => 'mixed',
        'median_25' => 'mixed',
        'median_50' => 'mixed',
        'median_75' => 'mixed',
        'median_95' => 'mixed',
        'title' => 'mixed',
        'measures' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'key' => null,
        'count' => null,
        'sum' => null,
        'min' => null,
        'max' => null,
        'avg' => null,
        'median_5' => null,
        'median_25' => null,
        'median_50' => null,
        'median_75' => null,
        'median_95' => null,
        'title' => null,
        'measures' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'key' => true,
		'count' => true,
		'sum' => true,
		'min' => true,
		'max' => true,
		'avg' => true,
		'median_5' => true,
		'median_25' => true,
		'median_50' => true,
		'median_75' => true,
		'median_95' => true,
		'title' => true,
		'measures' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'count' => 'count',
        'sum' => 'sum',
        'min' => 'min',
        'max' => 'max',
        'avg' => 'avg',
        'median_5' => 'median_5',
        'median_25' => 'median_25',
        'median_50' => 'median_50',
        'median_75' => 'median_75',
        'median_95' => 'median_95',
        'title' => 'title',
        'measures' => 'measures'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'count' => 'setCount',
        'sum' => 'setSum',
        'min' => 'setMin',
        'max' => 'setMax',
        'avg' => 'setAvg',
        'median_5' => 'setMedian5',
        'median_25' => 'setMedian25',
        'median_50' => 'setMedian50',
        'median_75' => 'setMedian75',
        'median_95' => 'setMedian95',
        'title' => 'setTitle',
        'measures' => 'setMeasures'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'count' => 'getCount',
        'sum' => 'getSum',
        'min' => 'getMin',
        'max' => 'getMax',
        'avg' => 'getAvg',
        'median_5' => 'getMedian5',
        'median_25' => 'getMedian25',
        'median_50' => 'getMedian50',
        'median_75' => 'getMedian75',
        'median_95' => 'getMedian95',
        'title' => 'getTitle',
        'measures' => 'getMeasures'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('count', $data ?? [], null);
        $this->setIfExists('sum', $data ?? [], null);
        $this->setIfExists('min', $data ?? [], null);
        $this->setIfExists('max', $data ?? [], null);
        $this->setIfExists('avg', $data ?? [], null);
        $this->setIfExists('median_5', $data ?? [], null);
        $this->setIfExists('median_25', $data ?? [], null);
        $this->setIfExists('median_50', $data ?? [], null);
        $this->setIfExists('median_75', $data ?? [], null);
        $this->setIfExists('median_95', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('measures', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['key'] === null) {
            $invalidProperties[] = "'key' can't be null";
        }
        if ($this->container['count'] === null) {
            $invalidProperties[] = "'count' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return mixed
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param mixed $key key
     *
     * @return self
     */
    public function setKey($key)
    {
        if (is_null($key)) {
            array_push($this->openAPINullablesSetToNull, 'key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets count
     *
     * @return mixed
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param mixed $count count
     *
     * @return self
     */
    public function setCount($count)
    {
        if (is_null($count)) {
            array_push($this->openAPINullablesSetToNull, 'count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets sum
     *
     * @return mixed|null
     */
    public function getSum()
    {
        return $this->container['sum'];
    }

    /**
     * Sets sum
     *
     * @param mixed|null $sum sum
     *
     * @return self
     */
    public function setSum($sum)
    {
        if (is_null($sum)) {
            array_push($this->openAPINullablesSetToNull, 'sum');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sum', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sum'] = $sum;

        return $this;
    }

    /**
     * Gets min
     *
     * @return mixed|null
     */
    public function getMin()
    {
        return $this->container['min'];
    }

    /**
     * Sets min
     *
     * @param mixed|null $min min
     *
     * @return self
     */
    public function setMin($min)
    {
        if (is_null($min)) {
            array_push($this->openAPINullablesSetToNull, 'min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min'] = $min;

        return $this;
    }

    /**
     * Gets max
     *
     * @return mixed|null
     */
    public function getMax()
    {
        return $this->container['max'];
    }

    /**
     * Sets max
     *
     * @param mixed|null $max max
     *
     * @return self
     */
    public function setMax($max)
    {
        if (is_null($max)) {
            array_push($this->openAPINullablesSetToNull, 'max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max'] = $max;

        return $this;
    }

    /**
     * Gets avg
     *
     * @return mixed|null
     */
    public function getAvg()
    {
        return $this->container['avg'];
    }

    /**
     * Sets avg
     *
     * @param mixed|null $avg avg
     *
     * @return self
     */
    public function setAvg($avg)
    {
        if (is_null($avg)) {
            array_push($this->openAPINullablesSetToNull, 'avg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avg'] = $avg;

        return $this;
    }

    /**
     * Gets median_5
     *
     * @return mixed|null
     */
    public function getMedian5()
    {
        return $this->container['median_5'];
    }

    /**
     * Sets median_5
     *
     * @param mixed|null $median_5 median_5
     *
     * @return self
     */
    public function setMedian5($median_5)
    {
        if (is_null($median_5)) {
            array_push($this->openAPINullablesSetToNull, 'median_5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('median_5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['median_5'] = $median_5;

        return $this;
    }

    /**
     * Gets median_25
     *
     * @return mixed|null
     */
    public function getMedian25()
    {
        return $this->container['median_25'];
    }

    /**
     * Sets median_25
     *
     * @param mixed|null $median_25 median_25
     *
     * @return self
     */
    public function setMedian25($median_25)
    {
        if (is_null($median_25)) {
            array_push($this->openAPINullablesSetToNull, 'median_25');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('median_25', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['median_25'] = $median_25;

        return $this;
    }

    /**
     * Gets median_50
     *
     * @return mixed|null
     */
    public function getMedian50()
    {
        return $this->container['median_50'];
    }

    /**
     * Sets median_50
     *
     * @param mixed|null $median_50 median_50
     *
     * @return self
     */
    public function setMedian50($median_50)
    {
        if (is_null($median_50)) {
            array_push($this->openAPINullablesSetToNull, 'median_50');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('median_50', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['median_50'] = $median_50;

        return $this;
    }

    /**
     * Gets median_75
     *
     * @return mixed|null
     */
    public function getMedian75()
    {
        return $this->container['median_75'];
    }

    /**
     * Sets median_75
     *
     * @param mixed|null $median_75 median_75
     *
     * @return self
     */
    public function setMedian75($median_75)
    {
        if (is_null($median_75)) {
            array_push($this->openAPINullablesSetToNull, 'median_75');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('median_75', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['median_75'] = $median_75;

        return $this;
    }

    /**
     * Gets median_95
     *
     * @return mixed|null
     */
    public function getMedian95()
    {
        return $this->container['median_95'];
    }

    /**
     * Sets median_95
     *
     * @param mixed|null $median_95 median_95
     *
     * @return self
     */
    public function setMedian95($median_95)
    {
        if (is_null($median_95)) {
            array_push($this->openAPINullablesSetToNull, 'median_95');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('median_95', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['median_95'] = $median_95;

        return $this;
    }

    /**
     * Gets title
     *
     * @return mixed
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param mixed $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets measures
     *
     * @return mixed|null
     */
    public function getMeasures()
    {
        return $this->container['measures'];
    }

    /**
     * Sets measures
     *
     * @param mixed|null $measures measures
     *
     * @return self
     */
    public function setMeasures($measures)
    {
        if (is_null($measures)) {
            array_push($this->openAPINullablesSetToNull, 'measures');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('measures', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['measures'] = $measures;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


