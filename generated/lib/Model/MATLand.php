<?php
/**
 * MATLand
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MATLand Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MATLand implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MATLand';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'namespace' => 'mixed',
        'status' => '\OpenAPI\Client\Model\MATStatusEnum',
        'business_process' => 'mixed',
        'business_area' => 'mixed',
        'business_event' => 'mixed',
        'latest_case_id' => 'mixed',
        'intended_action' => 'mixed',
        'registration_from' => 'mixed',
        'registration_to' => 'mixed',
        'registration_actor' => 'mixed',
        'effect_from' => 'mixed',
        'effect_to' => 'mixed',
        'effect_actor' => 'mixed',
        'daf_updated_at' => 'mixed',
        'sfe_number' => 'mixed',
        'area_calculation_method' => 'mixed',
        'area_definition' => 'mixed',
        'area_type' => 'mixed',
        'area_use_right' => 'mixed',
        'part_number' => 'mixed',
        'land_lot_code' => 'mixed',
        'cadastre_number' => 'mixed',
        'is_common_lot' => 'mixed',
        'municipality_code' => 'mixed',
        'region_code' => 'mixed',
        'registered_area' => 'mixed',
        'boundary_business_case_id' => 'mixed',
        'parish_code' => 'mixed',
        'originates_from_land_id' => 'mixed',
        'supplementary_measurement_case_id' => 'mixed',
        'water_area_inclusion' => 'mixed',
        'street_area' => 'mixed',
        'street_area_calculation_status' => 'mixed',
        'forest_reserve_area' => 'mixed',
        'forest_reserve_scope' => 'mixed',
        'land_rent_scope' => 'mixed',
        'preservation_dunes_area' => 'mixed',
        'preservation_dunes_scope' => 'mixed',
        'forest_majorat_number' => 'mixed',
        'forest_majorat_scope' => 'mixed',
        'beach_protection_area' => 'mixed',
        'beach_protection_scope' => 'mixed',
        'land_lot_name' => 'mixed',
        'centroid' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'namespace' => null,
        'status' => null,
        'business_process' => null,
        'business_area' => null,
        'business_event' => null,
        'latest_case_id' => null,
        'intended_action' => null,
        'registration_from' => 'date-time',
        'registration_to' => 'date-time',
        'registration_actor' => null,
        'effect_from' => 'date-time',
        'effect_to' => 'date-time',
        'effect_actor' => null,
        'daf_updated_at' => 'date-time',
        'sfe_number' => null,
        'area_calculation_method' => null,
        'area_definition' => null,
        'area_type' => null,
        'area_use_right' => null,
        'part_number' => null,
        'land_lot_code' => null,
        'cadastre_number' => null,
        'is_common_lot' => null,
        'municipality_code' => null,
        'region_code' => null,
        'registered_area' => null,
        'boundary_business_case_id' => null,
        'parish_code' => null,
        'originates_from_land_id' => null,
        'supplementary_measurement_case_id' => null,
        'water_area_inclusion' => null,
        'street_area' => null,
        'street_area_calculation_status' => null,
        'forest_reserve_area' => null,
        'forest_reserve_scope' => null,
        'land_rent_scope' => null,
        'preservation_dunes_area' => null,
        'preservation_dunes_scope' => null,
        'forest_majorat_number' => null,
        'forest_majorat_scope' => null,
        'beach_protection_area' => null,
        'beach_protection_scope' => null,
        'land_lot_name' => null,
        'centroid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'namespace' => true,
		'status' => false,
		'business_process' => true,
		'business_area' => true,
		'business_event' => true,
		'latest_case_id' => true,
		'intended_action' => true,
		'registration_from' => true,
		'registration_to' => true,
		'registration_actor' => true,
		'effect_from' => true,
		'effect_to' => true,
		'effect_actor' => true,
		'daf_updated_at' => true,
		'sfe_number' => true,
		'area_calculation_method' => true,
		'area_definition' => true,
		'area_type' => true,
		'area_use_right' => true,
		'part_number' => true,
		'land_lot_code' => true,
		'cadastre_number' => true,
		'is_common_lot' => true,
		'municipality_code' => true,
		'region_code' => true,
		'registered_area' => true,
		'boundary_business_case_id' => true,
		'parish_code' => true,
		'originates_from_land_id' => true,
		'supplementary_measurement_case_id' => true,
		'water_area_inclusion' => true,
		'street_area' => true,
		'street_area_calculation_status' => true,
		'forest_reserve_area' => true,
		'forest_reserve_scope' => true,
		'land_rent_scope' => true,
		'preservation_dunes_area' => true,
		'preservation_dunes_scope' => true,
		'forest_majorat_number' => true,
		'forest_majorat_scope' => true,
		'beach_protection_area' => true,
		'beach_protection_scope' => true,
		'land_lot_name' => true,
		'centroid' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'namespace' => 'namespace',
        'status' => 'status',
        'business_process' => 'business_process',
        'business_area' => 'business_area',
        'business_event' => 'business_event',
        'latest_case_id' => 'latest_case_id',
        'intended_action' => 'intended_action',
        'registration_from' => 'registration_from',
        'registration_to' => 'registration_to',
        'registration_actor' => 'registration_actor',
        'effect_from' => 'effect_from',
        'effect_to' => 'effect_to',
        'effect_actor' => 'effect_actor',
        'daf_updated_at' => 'daf_updated_at',
        'sfe_number' => 'sfe_number',
        'area_calculation_method' => 'area_calculation_method',
        'area_definition' => 'area_definition',
        'area_type' => 'area_type',
        'area_use_right' => 'area_use_right',
        'part_number' => 'part_number',
        'land_lot_code' => 'land_lot_code',
        'cadastre_number' => 'cadastre_number',
        'is_common_lot' => 'is_common_lot',
        'municipality_code' => 'municipality_code',
        'region_code' => 'region_code',
        'registered_area' => 'registered_area',
        'boundary_business_case_id' => 'boundary_business_case_id',
        'parish_code' => 'parish_code',
        'originates_from_land_id' => 'originates_from_land_id',
        'supplementary_measurement_case_id' => 'supplementary_measurement_case_id',
        'water_area_inclusion' => 'water_area_inclusion',
        'street_area' => 'street_area',
        'street_area_calculation_status' => 'street_area_calculation_status',
        'forest_reserve_area' => 'forest_reserve_area',
        'forest_reserve_scope' => 'forest_reserve_scope',
        'land_rent_scope' => 'land_rent_scope',
        'preservation_dunes_area' => 'preservation_dunes_area',
        'preservation_dunes_scope' => 'preservation_dunes_scope',
        'forest_majorat_number' => 'forest_majorat_number',
        'forest_majorat_scope' => 'forest_majorat_scope',
        'beach_protection_area' => 'beach_protection_area',
        'beach_protection_scope' => 'beach_protection_scope',
        'land_lot_name' => 'land_lot_name',
        'centroid' => 'centroid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'namespace' => 'setNamespace',
        'status' => 'setStatus',
        'business_process' => 'setBusinessProcess',
        'business_area' => 'setBusinessArea',
        'business_event' => 'setBusinessEvent',
        'latest_case_id' => 'setLatestCaseId',
        'intended_action' => 'setIntendedAction',
        'registration_from' => 'setRegistrationFrom',
        'registration_to' => 'setRegistrationTo',
        'registration_actor' => 'setRegistrationActor',
        'effect_from' => 'setEffectFrom',
        'effect_to' => 'setEffectTo',
        'effect_actor' => 'setEffectActor',
        'daf_updated_at' => 'setDafUpdatedAt',
        'sfe_number' => 'setSfeNumber',
        'area_calculation_method' => 'setAreaCalculationMethod',
        'area_definition' => 'setAreaDefinition',
        'area_type' => 'setAreaType',
        'area_use_right' => 'setAreaUseRight',
        'part_number' => 'setPartNumber',
        'land_lot_code' => 'setLandLotCode',
        'cadastre_number' => 'setCadastreNumber',
        'is_common_lot' => 'setIsCommonLot',
        'municipality_code' => 'setMunicipalityCode',
        'region_code' => 'setRegionCode',
        'registered_area' => 'setRegisteredArea',
        'boundary_business_case_id' => 'setBoundaryBusinessCaseId',
        'parish_code' => 'setParishCode',
        'originates_from_land_id' => 'setOriginatesFromLandId',
        'supplementary_measurement_case_id' => 'setSupplementaryMeasurementCaseId',
        'water_area_inclusion' => 'setWaterAreaInclusion',
        'street_area' => 'setStreetArea',
        'street_area_calculation_status' => 'setStreetAreaCalculationStatus',
        'forest_reserve_area' => 'setForestReserveArea',
        'forest_reserve_scope' => 'setForestReserveScope',
        'land_rent_scope' => 'setLandRentScope',
        'preservation_dunes_area' => 'setPreservationDunesArea',
        'preservation_dunes_scope' => 'setPreservationDunesScope',
        'forest_majorat_number' => 'setForestMajoratNumber',
        'forest_majorat_scope' => 'setForestMajoratScope',
        'beach_protection_area' => 'setBeachProtectionArea',
        'beach_protection_scope' => 'setBeachProtectionScope',
        'land_lot_name' => 'setLandLotName',
        'centroid' => 'setCentroid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'namespace' => 'getNamespace',
        'status' => 'getStatus',
        'business_process' => 'getBusinessProcess',
        'business_area' => 'getBusinessArea',
        'business_event' => 'getBusinessEvent',
        'latest_case_id' => 'getLatestCaseId',
        'intended_action' => 'getIntendedAction',
        'registration_from' => 'getRegistrationFrom',
        'registration_to' => 'getRegistrationTo',
        'registration_actor' => 'getRegistrationActor',
        'effect_from' => 'getEffectFrom',
        'effect_to' => 'getEffectTo',
        'effect_actor' => 'getEffectActor',
        'daf_updated_at' => 'getDafUpdatedAt',
        'sfe_number' => 'getSfeNumber',
        'area_calculation_method' => 'getAreaCalculationMethod',
        'area_definition' => 'getAreaDefinition',
        'area_type' => 'getAreaType',
        'area_use_right' => 'getAreaUseRight',
        'part_number' => 'getPartNumber',
        'land_lot_code' => 'getLandLotCode',
        'cadastre_number' => 'getCadastreNumber',
        'is_common_lot' => 'getIsCommonLot',
        'municipality_code' => 'getMunicipalityCode',
        'region_code' => 'getRegionCode',
        'registered_area' => 'getRegisteredArea',
        'boundary_business_case_id' => 'getBoundaryBusinessCaseId',
        'parish_code' => 'getParishCode',
        'originates_from_land_id' => 'getOriginatesFromLandId',
        'supplementary_measurement_case_id' => 'getSupplementaryMeasurementCaseId',
        'water_area_inclusion' => 'getWaterAreaInclusion',
        'street_area' => 'getStreetArea',
        'street_area_calculation_status' => 'getStreetAreaCalculationStatus',
        'forest_reserve_area' => 'getForestReserveArea',
        'forest_reserve_scope' => 'getForestReserveScope',
        'land_rent_scope' => 'getLandRentScope',
        'preservation_dunes_area' => 'getPreservationDunesArea',
        'preservation_dunes_scope' => 'getPreservationDunesScope',
        'forest_majorat_number' => 'getForestMajoratNumber',
        'forest_majorat_scope' => 'getForestMajoratScope',
        'beach_protection_area' => 'getBeachProtectionArea',
        'beach_protection_scope' => 'getBeachProtectionScope',
        'land_lot_name' => 'getLandLotName',
        'centroid' => 'getCentroid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('namespace', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('business_process', $data ?? [], null);
        $this->setIfExists('business_area', $data ?? [], null);
        $this->setIfExists('business_event', $data ?? [], null);
        $this->setIfExists('latest_case_id', $data ?? [], null);
        $this->setIfExists('intended_action', $data ?? [], null);
        $this->setIfExists('registration_from', $data ?? [], null);
        $this->setIfExists('registration_to', $data ?? [], null);
        $this->setIfExists('registration_actor', $data ?? [], null);
        $this->setIfExists('effect_from', $data ?? [], null);
        $this->setIfExists('effect_to', $data ?? [], null);
        $this->setIfExists('effect_actor', $data ?? [], null);
        $this->setIfExists('daf_updated_at', $data ?? [], null);
        $this->setIfExists('sfe_number', $data ?? [], null);
        $this->setIfExists('area_calculation_method', $data ?? [], null);
        $this->setIfExists('area_definition', $data ?? [], null);
        $this->setIfExists('area_type', $data ?? [], null);
        $this->setIfExists('area_use_right', $data ?? [], null);
        $this->setIfExists('part_number', $data ?? [], null);
        $this->setIfExists('land_lot_code', $data ?? [], null);
        $this->setIfExists('cadastre_number', $data ?? [], null);
        $this->setIfExists('is_common_lot', $data ?? [], null);
        $this->setIfExists('municipality_code', $data ?? [], null);
        $this->setIfExists('region_code', $data ?? [], null);
        $this->setIfExists('registered_area', $data ?? [], null);
        $this->setIfExists('boundary_business_case_id', $data ?? [], null);
        $this->setIfExists('parish_code', $data ?? [], null);
        $this->setIfExists('originates_from_land_id', $data ?? [], null);
        $this->setIfExists('supplementary_measurement_case_id', $data ?? [], null);
        $this->setIfExists('water_area_inclusion', $data ?? [], null);
        $this->setIfExists('street_area', $data ?? [], null);
        $this->setIfExists('street_area_calculation_status', $data ?? [], null);
        $this->setIfExists('forest_reserve_area', $data ?? [], null);
        $this->setIfExists('forest_reserve_scope', $data ?? [], null);
        $this->setIfExists('land_rent_scope', $data ?? [], null);
        $this->setIfExists('preservation_dunes_area', $data ?? [], null);
        $this->setIfExists('preservation_dunes_scope', $data ?? [], null);
        $this->setIfExists('forest_majorat_number', $data ?? [], null);
        $this->setIfExists('forest_majorat_scope', $data ?? [], null);
        $this->setIfExists('beach_protection_area', $data ?? [], null);
        $this->setIfExists('beach_protection_scope', $data ?? [], null);
        $this->setIfExists('land_lot_name', $data ?? [], null);
        $this->setIfExists('centroid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['namespace'] === null) {
            $invalidProperties[] = "'namespace' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['business_process'] === null) {
            $invalidProperties[] = "'business_process' can't be null";
        }
        if ($this->container['business_area'] === null) {
            $invalidProperties[] = "'business_area' can't be null";
        }
        if ($this->container['business_event'] === null) {
            $invalidProperties[] = "'business_event' can't be null";
        }
        if ($this->container['latest_case_id'] === null) {
            $invalidProperties[] = "'latest_case_id' can't be null";
        }
        if ($this->container['registration_from'] === null) {
            $invalidProperties[] = "'registration_from' can't be null";
        }
        if ($this->container['registration_actor'] === null) {
            $invalidProperties[] = "'registration_actor' can't be null";
        }
        if ($this->container['effect_from'] === null) {
            $invalidProperties[] = "'effect_from' can't be null";
        }
        if ($this->container['effect_actor'] === null) {
            $invalidProperties[] = "'effect_actor' can't be null";
        }
        if ($this->container['sfe_number'] === null) {
            $invalidProperties[] = "'sfe_number' can't be null";
        }
        if ($this->container['area_calculation_method'] === null) {
            $invalidProperties[] = "'area_calculation_method' can't be null";
        }
        if ($this->container['land_lot_code'] === null) {
            $invalidProperties[] = "'land_lot_code' can't be null";
        }
        if ($this->container['cadastre_number'] === null) {
            $invalidProperties[] = "'cadastre_number' can't be null";
        }
        if ($this->container['is_common_lot'] === null) {
            $invalidProperties[] = "'is_common_lot' can't be null";
        }
        if ($this->container['municipality_code'] === null) {
            $invalidProperties[] = "'municipality_code' can't be null";
        }
        if ($this->container['region_code'] === null) {
            $invalidProperties[] = "'region_code' can't be null";
        }
        if ($this->container['registered_area'] === null) {
            $invalidProperties[] = "'registered_area' can't be null";
        }
        if ($this->container['parish_code'] === null) {
            $invalidProperties[] = "'parish_code' can't be null";
        }
        if ($this->container['water_area_inclusion'] === null) {
            $invalidProperties[] = "'water_area_inclusion' can't be null";
        }
        if ($this->container['street_area'] === null) {
            $invalidProperties[] = "'street_area' can't be null";
        }
        if ($this->container['street_area_calculation_status'] === null) {
            $invalidProperties[] = "'street_area_calculation_status' can't be null";
        }
        if ($this->container['land_lot_name'] === null) {
            $invalidProperties[] = "'land_lot_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id Persistent unik nÃ¸gle.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return mixed
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param mixed $namespace namespace
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        if (is_null($namespace)) {
            array_push($this->openAPINullablesSetToNull, 'namespace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('namespace', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\MATStatusEnum
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\MATStatusEnum $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets business_process
     *
     * @return mixed
     */
    public function getBusinessProcess()
    {
        return $this->container['business_process'];
    }

    /**
     * Sets business_process
     *
     * @param mixed $business_process Den manuelle eller IT-understÃ¸ttede proces hvori forretningsomrÃ¥det hÃ¥ndterer hÃ¦ndelsen.
     *
     * @return self
     */
    public function setBusinessProcess($business_process)
    {
        if (is_null($business_process)) {
            array_push($this->openAPINullablesSetToNull, 'business_process');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_process', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_process'] = $business_process;

        return $this;
    }

    /**
     * Gets business_area
     *
     * @return mixed
     */
    public function getBusinessArea()
    {
        return $this->container['business_area'];
    }

    /**
     * Sets business_area
     *
     * @param mixed $business_area Den del af den offentlige forretning der hÃ¥ndterer hÃ¦ndelsen og derved udvirker Ã¦ndringen i data.
     *
     * @return self
     */
    public function setBusinessArea($business_area)
    {
        if (is_null($business_area)) {
            array_push($this->openAPINullablesSetToNull, 'business_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_area'] = $business_area;

        return $this;
    }

    /**
     * Gets business_event
     *
     * @return mixed
     */
    public function getBusinessEvent()
    {
        return $this->container['business_event'];
    }

    /**
     * Sets business_event
     *
     * @param mixed $business_event Den primÃ¦re begivenhed i virkeligheden som udlÃ¸ste Ã¦ndringen i data.
     *
     * @return self
     */
    public function setBusinessEvent($business_event)
    {
        if (is_null($business_event)) {
            array_push($this->openAPINullablesSetToNull, 'business_event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_event'] = $business_event;

        return $this;
    }

    /**
     * Gets latest_case_id
     *
     * @return mixed
     */
    public function getLatestCaseId()
    {
        return $this->container['latest_case_id'];
    }

    /**
     * Sets latest_case_id
     *
     * @param mixed $latest_case_id Unik identifikation af den sag som sidst har foretaget opdatering af det pÃ¥gÃ¦ldende matrikulÃ¦re element.
     *
     * @return self
     */
    public function setLatestCaseId($latest_case_id)
    {
        if (is_null($latest_case_id)) {
            array_push($this->openAPINullablesSetToNull, 'latest_case_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('latest_case_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['latest_case_id'] = $latest_case_id;

        return $this;
    }

    /**
     * Gets intended_action
     *
     * @return mixed|null
     */
    public function getIntendedAction()
    {
        return $this->container['intended_action'];
    }

    /**
     * Sets intended_action
     *
     * @param mixed|null $intended_action Den pÃ¥tÃ¦nkte handling for objekter med status 'Under udarbejdelse' og 'ForelÃ¸big'
     *
     * @return self
     */
    public function setIntendedAction($intended_action)
    {
        if (is_null($intended_action)) {
            array_push($this->openAPINullablesSetToNull, 'intended_action');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intended_action', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['intended_action'] = $intended_action;

        return $this;
    }

    /**
     * Gets registration_from
     *
     * @return mixed
     */
    public function getRegistrationFrom()
    {
        return $this->container['registration_from'];
    }

    /**
     * Sets registration_from
     *
     * @param mixed $registration_from Tidspunktet hvor registreringen er foretaget.
     *
     * @return self
     */
    public function setRegistrationFrom($registration_from)
    {
        if (is_null($registration_from)) {
            array_push($this->openAPINullablesSetToNull, 'registration_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_from'] = $registration_from;

        return $this;
    }

    /**
     * Gets registration_to
     *
     * @return mixed|null
     */
    public function getRegistrationTo()
    {
        return $this->container['registration_to'];
    }

    /**
     * Sets registration_to
     *
     * @param mixed|null $registration_to Tidspunktet hvor en ny registrering er foretaget pÃ¥ objektet, og hvor denne version sÃ¥ledes ikke lÃ¦ngere er den seneste.
     *
     * @return self
     */
    public function setRegistrationTo($registration_to)
    {
        if (is_null($registration_to)) {
            array_push($this->openAPINullablesSetToNull, 'registration_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_to'] = $registration_to;

        return $this;
    }

    /**
     * Gets registration_actor
     *
     * @return mixed
     */
    public function getRegistrationActor()
    {
        return $this->container['registration_actor'];
    }

    /**
     * Sets registration_actor
     *
     * @param mixed $registration_actor Den aktÃ¸r der har foretaget registreringen.
     *
     * @return self
     */
    public function setRegistrationActor($registration_actor)
    {
        if (is_null($registration_actor)) {
            array_push($this->openAPINullablesSetToNull, 'registration_actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_actor'] = $registration_actor;

        return $this;
    }

    /**
     * Gets effect_from
     *
     * @return mixed
     */
    public function getEffectFrom()
    {
        return $this->container['effect_from'];
    }

    /**
     * Sets effect_from
     *
     * @param mixed $effect_from Tidspunktet hvorfra objektet har virkning.
     *
     * @return self
     */
    public function setEffectFrom($effect_from)
    {
        if (is_null($effect_from)) {
            array_push($this->openAPINullablesSetToNull, 'effect_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_from'] = $effect_from;

        return $this;
    }

    /**
     * Gets effect_to
     *
     * @return mixed|null
     */
    public function getEffectTo()
    {
        return $this->container['effect_to'];
    }

    /**
     * Sets effect_to
     *
     * @param mixed|null $effect_to Tidspunktet hvor objektets virkning ophÃ¸rer.
     *
     * @return self
     */
    public function setEffectTo($effect_to)
    {
        if (is_null($effect_to)) {
            array_push($this->openAPINullablesSetToNull, 'effect_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_to'] = $effect_to;

        return $this;
    }

    /**
     * Gets effect_actor
     *
     * @return mixed
     */
    public function getEffectActor()
    {
        return $this->container['effect_actor'];
    }

    /**
     * Sets effect_actor
     *
     * @param mixed $effect_actor Den aktÃ¸r der har afstedkommet objektets virkning.
     *
     * @return self
     */
    public function setEffectActor($effect_actor)
    {
        if (is_null($effect_actor)) {
            array_push($this->openAPINullablesSetToNull, 'effect_actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_actor'] = $effect_actor;

        return $this;
    }

    /**
     * Gets daf_updated_at
     *
     * @return mixed|null
     */
    public function getDafUpdatedAt()
    {
        return $this->container['daf_updated_at'];
    }

    /**
     * Sets daf_updated_at
     *
     * @param mixed|null $daf_updated_at Datafordeler opdateringstid
     *
     * @return self
     */
    public function setDafUpdatedAt($daf_updated_at)
    {
        if (is_null($daf_updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'daf_updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('daf_updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['daf_updated_at'] = $daf_updated_at;

        return $this;
    }

    /**
     * Gets sfe_number
     *
     * @return mixed
     */
    public function getSfeNumber()
    {
        return $this->container['sfe_number'];
    }

    /**
     * Sets sfe_number
     *
     * @param mixed $sfe_number Samlet fast ejendom - BFE-nr.
     *
     * @return self
     */
    public function setSfeNumber($sfe_number)
    {
        if (is_null($sfe_number)) {
            array_push($this->openAPINullablesSetToNull, 'sfe_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sfe_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sfe_number'] = $sfe_number;

        return $this;
    }

    /**
     * Gets area_calculation_method
     *
     * @return mixed
     */
    public function getAreaCalculationMethod()
    {
        return $this->container['area_calculation_method'];
    }

    /**
     * Sets area_calculation_method
     *
     * @param mixed $area_calculation_method Angivelse af beregningsmetoden for arealet pÃ¥ det pÃ¥gÃ¦ldende jordstykke.
     *
     * @return self
     */
    public function setAreaCalculationMethod($area_calculation_method)
    {
        if (is_null($area_calculation_method)) {
            array_push($this->openAPINullablesSetToNull, 'area_calculation_method');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('area_calculation_method', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['area_calculation_method'] = $area_calculation_method;

        return $this;
    }

    /**
     * Gets area_definition
     *
     * @return mixed|null
     */
    public function getAreaDefinition()
    {
        return $this->container['area_definition'];
    }

    /**
     * Sets area_definition
     *
     * @param mixed|null $area_definition Tekstlig beskrivelse af arealets art eller type.
     *
     * @return self
     */
    public function setAreaDefinition($area_definition)
    {
        if (is_null($area_definition)) {
            array_push($this->openAPINullablesSetToNull, 'area_definition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('area_definition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['area_definition'] = $area_definition;

        return $this;
    }

    /**
     * Gets area_type
     *
     * @return mixed|null
     */
    public function getAreaType()
    {
        return $this->container['area_type'];
    }

    /**
     * Sets area_type
     *
     * @param mixed|null $area_type Den registrerede type for arealet.
     *
     * @return self
     */
    public function setAreaType($area_type)
    {
        if (is_null($area_type)) {
            array_push($this->openAPINullablesSetToNull, 'area_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('area_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['area_type'] = $area_type;

        return $this;
    }

    /**
     * Gets area_use_right
     *
     * @return mixed|null
     */
    public function getAreaUseRight()
    {
        return $this->container['area_use_right'];
    }

    /**
     * Sets area_use_right
     *
     * @param mixed|null $area_use_right Et areal, der er stiftet en brugsret over for hÃ¸jest 30 Ã¥r, sÃ¥fremt arealet udgÃ¸r en del af en samlet fast ejendom, eller for hÃ¸jest 10 Ã¥r, sÃ¥fremt arealet udgÃ¸r en del af en umatrikuleret ejendom.
     *
     * @return self
     */
    public function setAreaUseRight($area_use_right)
    {
        if (is_null($area_use_right)) {
            array_push($this->openAPINullablesSetToNull, 'area_use_right');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('area_use_right', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['area_use_right'] = $area_use_right;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return mixed|null
     */
    public function getPartNumber()
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param mixed|null $part_number Midlertidigt nummer tildelt jordstykket inden det fÃ¥r tildelt det endelige matrikelnummer.
     *
     * @return self
     */
    public function setPartNumber($part_number)
    {
        if (is_null($part_number)) {
            array_push($this->openAPINullablesSetToNull, 'part_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('part_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets land_lot_code
     *
     * @return mixed
     */
    public function getLandLotCode()
    {
        return $this->container['land_lot_code'];
    }

    /**
     * Sets land_lot_code
     *
     * @param mixed $land_lot_code Den unikke identifikation af det specifikke ejerlav.
     *
     * @return self
     */
    public function setLandLotCode($land_lot_code)
    {
        if (is_null($land_lot_code)) {
            array_push($this->openAPINullablesSetToNull, 'land_lot_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('land_lot_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['land_lot_code'] = $land_lot_code;

        return $this;
    }

    /**
     * Gets cadastre_number
     *
     * @return mixed
     */
    public function getCadastreNumber()
    {
        return $this->container['cadastre_number'];
    }

    /**
     * Sets cadastre_number
     *
     * @param mixed $cadastre_number Entydig identifikation af et jordstykke inden for et ejerlav.
     *
     * @return self
     */
    public function setCadastreNumber($cadastre_number)
    {
        if (is_null($cadastre_number)) {
            array_push($this->openAPINullablesSetToNull, 'cadastre_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cadastre_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cadastre_number'] = $cadastre_number;

        return $this;
    }

    /**
     * Gets is_common_lot
     *
     * @return mixed
     */
    public function getIsCommonLot()
    {
        return $this->container['is_common_lot'];
    }

    /**
     * Sets is_common_lot
     *
     * @param mixed $is_common_lot Angiver om jordstykket er et fÃ¦lleslod og dermed indgÃ¥r i flere faste ejendomme.
     *
     * @return self
     */
    public function setIsCommonLot($is_common_lot)
    {
        if (is_null($is_common_lot)) {
            array_push($this->openAPINullablesSetToNull, 'is_common_lot');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_common_lot', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_common_lot'] = $is_common_lot;

        return $this;
    }

    /**
     * Gets municipality_code
     *
     * @return mixed
     */
    public function getMunicipalityCode()
    {
        return $this->container['municipality_code'];
    }

    /**
     * Sets municipality_code
     *
     * @param mixed $municipality_code Unik identifikation for den specifikke kommune.
     *
     * @return self
     */
    public function setMunicipalityCode($municipality_code)
    {
        if (is_null($municipality_code)) {
            array_push($this->openAPINullablesSetToNull, 'municipality_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('municipality_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['municipality_code'] = $municipality_code;

        return $this;
    }

    /**
     * Gets region_code
     *
     * @return mixed
     */
    public function getRegionCode()
    {
        return $this->container['region_code'];
    }

    /**
     * Sets region_code
     *
     * @param mixed $region_code Unik identifikation tildelt en specifik region.
     *
     * @return self
     */
    public function setRegionCode($region_code)
    {
        if (is_null($region_code)) {
            array_push($this->openAPINullablesSetToNull, 'region_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('region_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['region_code'] = $region_code;

        return $this;
    }

    /**
     * Gets registered_area
     *
     * @return mixed
     */
    public function getRegisteredArea()
    {
        return $this->container['registered_area'];
    }

    /**
     * Sets registered_area
     *
     * @param mixed $registered_area Jordstykkets registrerede areal i Matriklen.
     *
     * @return self
     */
    public function setRegisteredArea($registered_area)
    {
        if (is_null($registered_area)) {
            array_push($this->openAPINullablesSetToNull, 'registered_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registered_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registered_area'] = $registered_area;

        return $this;
    }

    /**
     * Gets boundary_business_case_id
     *
     * @return mixed|null
     */
    public function getBoundaryBusinessCaseId()
    {
        return $this->container['boundary_business_case_id'];
    }

    /**
     * Sets boundary_business_case_id
     *
     * @param mixed|null $boundary_business_case_id Identifikation af den seneste skelforretningssag som er gennemfÃ¸rt pÃ¥ jordstykket.
     *
     * @return self
     */
    public function setBoundaryBusinessCaseId($boundary_business_case_id)
    {
        if (is_null($boundary_business_case_id)) {
            array_push($this->openAPINullablesSetToNull, 'boundary_business_case_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('boundary_business_case_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['boundary_business_case_id'] = $boundary_business_case_id;

        return $this;
    }

    /**
     * Gets parish_code
     *
     * @return mixed
     */
    public function getParishCode()
    {
        return $this->container['parish_code'];
    }

    /**
     * Sets parish_code
     *
     * @param mixed $parish_code Kode for det sogn som jordstykket hÃ¸rer under.
     *
     * @return self
     */
    public function setParishCode($parish_code)
    {
        if (is_null($parish_code)) {
            array_push($this->openAPINullablesSetToNull, 'parish_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parish_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parish_code'] = $parish_code;

        return $this;
    }

    /**
     * Gets originates_from_land_id
     *
     * @return mixed|null
     */
    public function getOriginatesFromLandId()
    {
        return $this->container['originates_from_land_id'];
    }

    /**
     * Sets originates_from_land_id
     *
     * @param mixed|null $originates_from_land_id Angiver det jordstykke, som det pÃ¥gÃ¦ldende jordstykke oprinder fra.
     *
     * @return self
     */
    public function setOriginatesFromLandId($originates_from_land_id)
    {
        if (is_null($originates_from_land_id)) {
            array_push($this->openAPINullablesSetToNull, 'originates_from_land_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('originates_from_land_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['originates_from_land_id'] = $originates_from_land_id;

        return $this;
    }

    /**
     * Gets supplementary_measurement_case_id
     *
     * @return mixed|null
     */
    public function getSupplementaryMeasurementCaseId()
    {
        return $this->container['supplementary_measurement_case_id'];
    }

    /**
     * Sets supplementary_measurement_case_id
     *
     * @param mixed|null $supplementary_measurement_case_id Identifikation af seneste sag som indeholder supplerende mÃ¥loplysninger.
     *
     * @return self
     */
    public function setSupplementaryMeasurementCaseId($supplementary_measurement_case_id)
    {
        if (is_null($supplementary_measurement_case_id)) {
            array_push($this->openAPINullablesSetToNull, 'supplementary_measurement_case_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplementary_measurement_case_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplementary_measurement_case_id'] = $supplementary_measurement_case_id;

        return $this;
    }

    /**
     * Gets water_area_inclusion
     *
     * @return mixed
     */
    public function getWaterAreaInclusion()
    {
        return $this->container['water_area_inclusion'];
    }

    /**
     * Sets water_area_inclusion
     *
     * @param mixed $water_area_inclusion Angivelse af om et eventuelt vandareal indenfor jordstykket indgÃ¥r i det registrerede areal for jordstykket.
     *
     * @return self
     */
    public function setWaterAreaInclusion($water_area_inclusion)
    {
        if (is_null($water_area_inclusion)) {
            array_push($this->openAPINullablesSetToNull, 'water_area_inclusion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('water_area_inclusion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['water_area_inclusion'] = $water_area_inclusion;

        return $this;
    }

    /**
     * Gets street_area
     *
     * @return mixed
     */
    public function getStreetArea()
    {
        return $this->container['street_area'];
    }

    /**
     * Sets street_area
     *
     * @param mixed $street_area Det i matriklen registrerede areal for en ikke udskilt vej pÃ¥ Jordstykket.
     *
     * @return self
     */
    public function setStreetArea($street_area)
    {
        if (is_null($street_area)) {
            array_push($this->openAPINullablesSetToNull, 'street_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_area'] = $street_area;

        return $this;
    }

    /**
     * Gets street_area_calculation_status
     *
     * @return mixed
     */
    public function getStreetAreaCalculationStatus()
    {
        return $this->container['street_area_calculation_status'];
    }

    /**
     * Sets street_area_calculation_status
     *
     * @param mixed $street_area_calculation_status Angiver hvorvidt et eventuelt vejareal pÃ¥ jordstykket er beregnet.
     *
     * @return self
     */
    public function setStreetAreaCalculationStatus($street_area_calculation_status)
    {
        if (is_null($street_area_calculation_status)) {
            array_push($this->openAPINullablesSetToNull, 'street_area_calculation_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_area_calculation_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_area_calculation_status'] = $street_area_calculation_status;

        return $this;
    }

    /**
     * Gets forest_reserve_area
     *
     * @return mixed|null
     */
    public function getForestReserveArea()
    {
        return $this->container['forest_reserve_area'];
    }

    /**
     * Sets forest_reserve_area
     *
     * @param mixed|null $forest_reserve_area Registrering af om der er fredskovspligt, pÃ¥ et jordstykke der er skov.
     *
     * @return self
     */
    public function setForestReserveArea($forest_reserve_area)
    {
        if (is_null($forest_reserve_area)) {
            array_push($this->openAPINullablesSetToNull, 'forest_reserve_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forest_reserve_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['forest_reserve_area'] = $forest_reserve_area;

        return $this;
    }

    /**
     * Gets forest_reserve_scope
     *
     * @return mixed|null
     */
    public function getForestReserveScope()
    {
        return $this->container['forest_reserve_scope'];
    }

    /**
     * Sets forest_reserve_scope
     *
     * @param mixed|null $forest_reserve_scope Registrering af om der er fredskovspligt, pÃ¥ et jordstykke der er skov.
     *
     * @return self
     */
    public function setForestReserveScope($forest_reserve_scope)
    {
        if (is_null($forest_reserve_scope)) {
            array_push($this->openAPINullablesSetToNull, 'forest_reserve_scope');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forest_reserve_scope', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['forest_reserve_scope'] = $forest_reserve_scope;

        return $this;
    }

    /**
     * Gets land_rent_scope
     *
     * @return mixed|null
     */
    public function getLandRentScope()
    {
        return $this->container['land_rent_scope'];
    }

    /**
     * Sets land_rent_scope
     *
     * @param mixed|null $land_rent_scope Registrering af om der pÃ¥ jordstykket hviler jordrenteforpligtigelse i henhold til BekendtgÃ¸relse om statshusmandsbrug m.m. og jordrente.
     *
     * @return self
     */
    public function setLandRentScope($land_rent_scope)
    {
        if (is_null($land_rent_scope)) {
            array_push($this->openAPINullablesSetToNull, 'land_rent_scope');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('land_rent_scope', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['land_rent_scope'] = $land_rent_scope;

        return $this;
    }

    /**
     * Gets preservation_dunes_area
     *
     * @return mixed|null
     */
    public function getPreservationDunesArea()
    {
        return $this->container['preservation_dunes_area'];
    }

    /**
     * Sets preservation_dunes_area
     *
     * @param mixed|null $preservation_dunes_area Registrering af, om der pÃ¥ jordstykket er klitfredning jf. naturbeskyttelsesloven.
     *
     * @return self
     */
    public function setPreservationDunesArea($preservation_dunes_area)
    {
        if (is_null($preservation_dunes_area)) {
            array_push($this->openAPINullablesSetToNull, 'preservation_dunes_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preservation_dunes_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preservation_dunes_area'] = $preservation_dunes_area;

        return $this;
    }

    /**
     * Gets preservation_dunes_scope
     *
     * @return mixed|null
     */
    public function getPreservationDunesScope()
    {
        return $this->container['preservation_dunes_scope'];
    }

    /**
     * Sets preservation_dunes_scope
     *
     * @param mixed|null $preservation_dunes_scope Registrering af, om der pÃ¥ jordstykket er klitfredning jf. naturbeskyttelsesloven.
     *
     * @return self
     */
    public function setPreservationDunesScope($preservation_dunes_scope)
    {
        if (is_null($preservation_dunes_scope)) {
            array_push($this->openAPINullablesSetToNull, 'preservation_dunes_scope');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preservation_dunes_scope', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preservation_dunes_scope'] = $preservation_dunes_scope;

        return $this;
    }

    /**
     * Gets forest_majorat_number
     *
     * @return mixed|null
     */
    public function getForestMajoratNumber()
    {
        return $this->container['forest_majorat_number'];
    }

    /**
     * Sets forest_majorat_number
     *
     * @param mixed|null $forest_majorat_number Registrering af, om den fredskov som er registreret pÃ¥ jordstykket er noteret som majoratsskov i henhold til Skovloven.
     *
     * @return self
     */
    public function setForestMajoratNumber($forest_majorat_number)
    {
        if (is_null($forest_majorat_number)) {
            array_push($this->openAPINullablesSetToNull, 'forest_majorat_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forest_majorat_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['forest_majorat_number'] = $forest_majorat_number;

        return $this;
    }

    /**
     * Gets forest_majorat_scope
     *
     * @return mixed|null
     */
    public function getForestMajoratScope()
    {
        return $this->container['forest_majorat_scope'];
    }

    /**
     * Sets forest_majorat_scope
     *
     * @param mixed|null $forest_majorat_scope Registrering af, om den fredskov som er registreret pÃ¥ jordstykket er noteret som majoratsskov i henhold til Skovloven.
     *
     * @return self
     */
    public function setForestMajoratScope($forest_majorat_scope)
    {
        if (is_null($forest_majorat_scope)) {
            array_push($this->openAPINullablesSetToNull, 'forest_majorat_scope');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forest_majorat_scope', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['forest_majorat_scope'] = $forest_majorat_scope;

        return $this;
    }

    /**
     * Gets beach_protection_area
     *
     * @return mixed|null
     */
    public function getBeachProtectionArea()
    {
        return $this->container['beach_protection_area'];
    }

    /**
     * Sets beach_protection_area
     *
     * @param mixed|null $beach_protection_area Registrering af, om der pÃ¥ jordstykket er strandbeskyttelse jf. naturbeskyttelsesloven.
     *
     * @return self
     */
    public function setBeachProtectionArea($beach_protection_area)
    {
        if (is_null($beach_protection_area)) {
            array_push($this->openAPINullablesSetToNull, 'beach_protection_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('beach_protection_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['beach_protection_area'] = $beach_protection_area;

        return $this;
    }

    /**
     * Gets beach_protection_scope
     *
     * @return mixed|null
     */
    public function getBeachProtectionScope()
    {
        return $this->container['beach_protection_scope'];
    }

    /**
     * Sets beach_protection_scope
     *
     * @param mixed|null $beach_protection_scope Registrering af, om der pÃ¥ jordstykket er strandbeskyttelse jf. naturbeskyttelsesloven.
     *
     * @return self
     */
    public function setBeachProtectionScope($beach_protection_scope)
    {
        if (is_null($beach_protection_scope)) {
            array_push($this->openAPINullablesSetToNull, 'beach_protection_scope');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('beach_protection_scope', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['beach_protection_scope'] = $beach_protection_scope;

        return $this;
    }

    /**
     * Gets land_lot_name
     *
     * @return mixed
     */
    public function getLandLotName()
    {
        return $this->container['land_lot_name'];
    }

    /**
     * Sets land_lot_name
     *
     * @param mixed $land_lot_name Angiver det ejerlav som et jordstykke ligger indenfor.
     *
     * @return self
     */
    public function setLandLotName($land_lot_name)
    {
        if (is_null($land_lot_name)) {
            array_push($this->openAPINullablesSetToNull, 'land_lot_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('land_lot_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['land_lot_name'] = $land_lot_name;

        return $this;
    }

    /**
     * Gets centroid
     *
     * @return mixed|null
     */
    public function getCentroid()
    {
        return $this->container['centroid'];
    }

    /**
     * Sets centroid
     *
     * @param mixed|null $centroid centroid
     *
     * @return self
     */
    public function setCentroid($centroid)
    {
        if (is_null($centroid)) {
            array_push($this->openAPINullablesSetToNull, 'centroid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('centroid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['centroid'] = $centroid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


