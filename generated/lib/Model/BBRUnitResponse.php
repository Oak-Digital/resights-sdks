<?php
/**
 * BBRUnitResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API üëã</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BBRUnitResponse Class Doc Comment
 *
 * @category Class
 * @description Definition: En Enhed er betegnelsen for en bolig i et parcelhus, en lejlighed eller f.eks. et erhvervslejem√•l. En Enhed ligger altid inde i en Bygning.  Beskrivelse: Enfamiliehuse har typisk en boligenhed, etageboligbebyggelse har √©n boligenhed for hver lejlighed, og erhvervsbygninger har √©n eller flere enheder til erhverv. En enhed har typisk sin egen selvst√¶ndige indgang. Under enheder registreres bl.a. samlet areal, areal til beboelse/erhverv samt anvendelsen. Enheden skal v√¶re afgr√¶nset og skal v√¶re fysisk adskilt fra andre enheder. En Enhed kan v√¶re et k√¶lderrum eller et loftsrum.  Bem√¶rkninger: En Enhed har kun √©n relation til √©n Opgang og √©n Etage og ikke en direkte relation til en Bygning.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BBRUnitResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BBRUnitResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'namespace' => 'mixed',
        'status' => 'mixed',
        'business_process' => 'mixed',
        'business_area' => 'mixed',
        'business_event' => 'mixed',
        'registration_from' => 'mixed',
        'registration_to' => 'mixed',
        'registration_actor' => 'mixed',
        'effect_from' => 'mixed',
        'effect_to' => 'mixed',
        'effect_actor' => 'mixed',
        'municipality_code' => 'mixed',
        'enh008_uuid_to_mother_apartment' => 'mixed',
        'enh020_unit_usage' => 'mixed',
        'enh023_property_type' => 'mixed',
        'enh024_unit_condemned' => 'mixed',
        'enh025_unit_identification_creation_date' => 'mixed',
        'enh026_area_unit_total' => 'mixed',
        'enh027_area_residential' => 'mixed',
        'enh028_area_commercial' => 'mixed',
        'enh030_area_unit_source' => 'mixed',
        'enh031_number_rooms' => 'mixed',
        'enh032_facilities_toilet' => 'mixed',
        'enh033_facilities_shower' => 'mixed',
        'enh034_facilities_kitchen' => 'mixed',
        'enh035_energy_supply' => 'mixed',
        'enh039_area_other' => 'mixed',
        'enh041_lawful_usage' => 'mixed',
        'enh042_temporary_dispensation_date' => 'mixed',
        'enh044_partial_commissioning_permit_date' => 'mixed',
        'enh045_rental_status' => 'mixed',
        'enh046_public_subsidy' => 'mixed',
        'enh047_occupancy_date' => 'mixed',
        'enh048_approved_empty_home' => 'mixed',
        'enh051_heating_installation' => 'mixed',
        'enh052_heating_medium' => 'mixed',
        'enh053_heating_supplementary' => 'mixed',
        'enh060_area_unit_common_access_share' => 'mixed',
        'enh061_area_open_cover' => 'mixed',
        'enh062_area_closed_cover_outhouse' => 'mixed',
        'enh063_number_commercial_rooms' => 'mixed',
        'enh065_number_flushing_toilets' => 'mixed',
        'enh066_number_bathrooms' => 'mixed',
        'enh067_noise_insulation' => 'mixed',
        'enh068_flex_housing_permission' => 'mixed',
        'enh069_flex_housing_termination_date' => 'mixed',
        'enh070_area_open_balcony_rooftop' => 'mixed',
        'enh071_address_function' => 'mixed',
        'enh101_validation_date' => 'mixed',
        'enh102_area_hereof1' => 'mixed',
        'enh103_area_hereof2' => 'mixed',
        'enh104_area_hereof3' => 'mixed',
        'enh105_supplementary_application_code1' => 'mixed',
        'enh106_supplementary_application_code2' => 'mixed',
        'enh107_supplementary_application_code3' => 'mixed',
        'enh127_area_physical_residential' => 'mixed',
        'enh128_area_physical_commercial' => 'mixed',
        'enh500_note' => 'mixed',
        'address' => '\OpenAPI\Client\Model\DARAddress',
        'building_id' => 'mixed',
        'floor_id' => 'mixed',
        'staircase_id' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'namespace' => null,
        'status' => null,
        'business_process' => null,
        'business_area' => null,
        'business_event' => null,
        'registration_from' => 'date-time',
        'registration_to' => 'date-time',
        'registration_actor' => null,
        'effect_from' => 'date-time',
        'effect_to' => 'date-time',
        'effect_actor' => null,
        'municipality_code' => null,
        'enh008_uuid_to_mother_apartment' => null,
        'enh020_unit_usage' => null,
        'enh023_property_type' => null,
        'enh024_unit_condemned' => null,
        'enh025_unit_identification_creation_date' => 'date-time',
        'enh026_area_unit_total' => null,
        'enh027_area_residential' => null,
        'enh028_area_commercial' => null,
        'enh030_area_unit_source' => null,
        'enh031_number_rooms' => null,
        'enh032_facilities_toilet' => null,
        'enh033_facilities_shower' => null,
        'enh034_facilities_kitchen' => null,
        'enh035_energy_supply' => null,
        'enh039_area_other' => null,
        'enh041_lawful_usage' => null,
        'enh042_temporary_dispensation_date' => 'date-time',
        'enh044_partial_commissioning_permit_date' => 'date-time',
        'enh045_rental_status' => null,
        'enh046_public_subsidy' => null,
        'enh047_occupancy_date' => 'date-time',
        'enh048_approved_empty_home' => null,
        'enh051_heating_installation' => null,
        'enh052_heating_medium' => null,
        'enh053_heating_supplementary' => null,
        'enh060_area_unit_common_access_share' => null,
        'enh061_area_open_cover' => null,
        'enh062_area_closed_cover_outhouse' => null,
        'enh063_number_commercial_rooms' => null,
        'enh065_number_flushing_toilets' => null,
        'enh066_number_bathrooms' => null,
        'enh067_noise_insulation' => null,
        'enh068_flex_housing_permission' => null,
        'enh069_flex_housing_termination_date' => 'date-time',
        'enh070_area_open_balcony_rooftop' => null,
        'enh071_address_function' => null,
        'enh101_validation_date' => 'date-time',
        'enh102_area_hereof1' => null,
        'enh103_area_hereof2' => null,
        'enh104_area_hereof3' => null,
        'enh105_supplementary_application_code1' => null,
        'enh106_supplementary_application_code2' => null,
        'enh107_supplementary_application_code3' => null,
        'enh127_area_physical_residential' => null,
        'enh128_area_physical_commercial' => null,
        'enh500_note' => null,
        'address' => null,
        'building_id' => 'uuid',
        'floor_id' => 'uuid',
        'staircase_id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'namespace' => true,
		'status' => true,
		'business_process' => true,
		'business_area' => true,
		'business_event' => true,
		'registration_from' => true,
		'registration_to' => true,
		'registration_actor' => true,
		'effect_from' => true,
		'effect_to' => true,
		'effect_actor' => true,
		'municipality_code' => true,
		'enh008_uuid_to_mother_apartment' => true,
		'enh020_unit_usage' => true,
		'enh023_property_type' => true,
		'enh024_unit_condemned' => true,
		'enh025_unit_identification_creation_date' => true,
		'enh026_area_unit_total' => true,
		'enh027_area_residential' => true,
		'enh028_area_commercial' => true,
		'enh030_area_unit_source' => true,
		'enh031_number_rooms' => true,
		'enh032_facilities_toilet' => true,
		'enh033_facilities_shower' => true,
		'enh034_facilities_kitchen' => true,
		'enh035_energy_supply' => true,
		'enh039_area_other' => true,
		'enh041_lawful_usage' => true,
		'enh042_temporary_dispensation_date' => true,
		'enh044_partial_commissioning_permit_date' => true,
		'enh045_rental_status' => true,
		'enh046_public_subsidy' => true,
		'enh047_occupancy_date' => true,
		'enh048_approved_empty_home' => true,
		'enh051_heating_installation' => true,
		'enh052_heating_medium' => true,
		'enh053_heating_supplementary' => true,
		'enh060_area_unit_common_access_share' => true,
		'enh061_area_open_cover' => true,
		'enh062_area_closed_cover_outhouse' => true,
		'enh063_number_commercial_rooms' => true,
		'enh065_number_flushing_toilets' => true,
		'enh066_number_bathrooms' => true,
		'enh067_noise_insulation' => true,
		'enh068_flex_housing_permission' => true,
		'enh069_flex_housing_termination_date' => true,
		'enh070_area_open_balcony_rooftop' => true,
		'enh071_address_function' => true,
		'enh101_validation_date' => true,
		'enh102_area_hereof1' => true,
		'enh103_area_hereof2' => true,
		'enh104_area_hereof3' => true,
		'enh105_supplementary_application_code1' => true,
		'enh106_supplementary_application_code2' => true,
		'enh107_supplementary_application_code3' => true,
		'enh127_area_physical_residential' => true,
		'enh128_area_physical_commercial' => true,
		'enh500_note' => true,
		'address' => false,
		'building_id' => true,
		'floor_id' => true,
		'staircase_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'namespace' => 'namespace',
        'status' => 'status',
        'business_process' => 'business_process',
        'business_area' => 'business_area',
        'business_event' => 'business_event',
        'registration_from' => 'registration_from',
        'registration_to' => 'registration_to',
        'registration_actor' => 'registration_actor',
        'effect_from' => 'effect_from',
        'effect_to' => 'effect_to',
        'effect_actor' => 'effect_actor',
        'municipality_code' => 'municipality_code',
        'enh008_uuid_to_mother_apartment' => 'enh008_uuid_to_mother_apartment',
        'enh020_unit_usage' => 'enh020_unit_usage',
        'enh023_property_type' => 'enh023_property_type',
        'enh024_unit_condemned' => 'enh024_unit_condemned',
        'enh025_unit_identification_creation_date' => 'enh025_unit_identification_creation_date',
        'enh026_area_unit_total' => 'enh026_area_unit_total',
        'enh027_area_residential' => 'enh027_area_residential',
        'enh028_area_commercial' => 'enh028_area_commercial',
        'enh030_area_unit_source' => 'enh030_area_unit_source',
        'enh031_number_rooms' => 'enh031_number_rooms',
        'enh032_facilities_toilet' => 'enh032_facilities_toilet',
        'enh033_facilities_shower' => 'enh033_facilities_shower',
        'enh034_facilities_kitchen' => 'enh034_facilities_kitchen',
        'enh035_energy_supply' => 'enh035_energy_supply',
        'enh039_area_other' => 'enh039_area_other',
        'enh041_lawful_usage' => 'enh041_lawful_usage',
        'enh042_temporary_dispensation_date' => 'enh042_temporary_dispensation_date',
        'enh044_partial_commissioning_permit_date' => 'enh044_partial_commissioning_permit_date',
        'enh045_rental_status' => 'enh045_rental_status',
        'enh046_public_subsidy' => 'enh046_public_subsidy',
        'enh047_occupancy_date' => 'enh047_occupancy_date',
        'enh048_approved_empty_home' => 'enh048_approved_empty_home',
        'enh051_heating_installation' => 'enh051_heating_installation',
        'enh052_heating_medium' => 'enh052_heating_medium',
        'enh053_heating_supplementary' => 'enh053_heating_supplementary',
        'enh060_area_unit_common_access_share' => 'enh060_area_unit_common_access_share',
        'enh061_area_open_cover' => 'enh061_area_open_cover',
        'enh062_area_closed_cover_outhouse' => 'enh062_area_closed_cover_outhouse',
        'enh063_number_commercial_rooms' => 'enh063_number_commercial_rooms',
        'enh065_number_flushing_toilets' => 'enh065_number_flushing_toilets',
        'enh066_number_bathrooms' => 'enh066_number_bathrooms',
        'enh067_noise_insulation' => 'enh067_noise_insulation',
        'enh068_flex_housing_permission' => 'enh068_flex_housing_permission',
        'enh069_flex_housing_termination_date' => 'enh069_flex_housing_termination_date',
        'enh070_area_open_balcony_rooftop' => 'enh070_area_open_balcony_rooftop',
        'enh071_address_function' => 'enh071_address_function',
        'enh101_validation_date' => 'enh101_validation_date',
        'enh102_area_hereof1' => 'enh102_area_hereof1',
        'enh103_area_hereof2' => 'enh103_area_hereof2',
        'enh104_area_hereof3' => 'enh104_area_hereof3',
        'enh105_supplementary_application_code1' => 'enh105_supplementary_application_code1',
        'enh106_supplementary_application_code2' => 'enh106_supplementary_application_code2',
        'enh107_supplementary_application_code3' => 'enh107_supplementary_application_code3',
        'enh127_area_physical_residential' => 'enh127_area_physical_residential',
        'enh128_area_physical_commercial' => 'enh128_area_physical_commercial',
        'enh500_note' => 'enh500_note',
        'address' => 'address',
        'building_id' => 'building_id',
        'floor_id' => 'floor_id',
        'staircase_id' => 'staircase_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'namespace' => 'setNamespace',
        'status' => 'setStatus',
        'business_process' => 'setBusinessProcess',
        'business_area' => 'setBusinessArea',
        'business_event' => 'setBusinessEvent',
        'registration_from' => 'setRegistrationFrom',
        'registration_to' => 'setRegistrationTo',
        'registration_actor' => 'setRegistrationActor',
        'effect_from' => 'setEffectFrom',
        'effect_to' => 'setEffectTo',
        'effect_actor' => 'setEffectActor',
        'municipality_code' => 'setMunicipalityCode',
        'enh008_uuid_to_mother_apartment' => 'setEnh008UuidToMotherApartment',
        'enh020_unit_usage' => 'setEnh020UnitUsage',
        'enh023_property_type' => 'setEnh023PropertyType',
        'enh024_unit_condemned' => 'setEnh024UnitCondemned',
        'enh025_unit_identification_creation_date' => 'setEnh025UnitIdentificationCreationDate',
        'enh026_area_unit_total' => 'setEnh026AreaUnitTotal',
        'enh027_area_residential' => 'setEnh027AreaResidential',
        'enh028_area_commercial' => 'setEnh028AreaCommercial',
        'enh030_area_unit_source' => 'setEnh030AreaUnitSource',
        'enh031_number_rooms' => 'setEnh031NumberRooms',
        'enh032_facilities_toilet' => 'setEnh032FacilitiesToilet',
        'enh033_facilities_shower' => 'setEnh033FacilitiesShower',
        'enh034_facilities_kitchen' => 'setEnh034FacilitiesKitchen',
        'enh035_energy_supply' => 'setEnh035EnergySupply',
        'enh039_area_other' => 'setEnh039AreaOther',
        'enh041_lawful_usage' => 'setEnh041LawfulUsage',
        'enh042_temporary_dispensation_date' => 'setEnh042TemporaryDispensationDate',
        'enh044_partial_commissioning_permit_date' => 'setEnh044PartialCommissioningPermitDate',
        'enh045_rental_status' => 'setEnh045RentalStatus',
        'enh046_public_subsidy' => 'setEnh046PublicSubsidy',
        'enh047_occupancy_date' => 'setEnh047OccupancyDate',
        'enh048_approved_empty_home' => 'setEnh048ApprovedEmptyHome',
        'enh051_heating_installation' => 'setEnh051HeatingInstallation',
        'enh052_heating_medium' => 'setEnh052HeatingMedium',
        'enh053_heating_supplementary' => 'setEnh053HeatingSupplementary',
        'enh060_area_unit_common_access_share' => 'setEnh060AreaUnitCommonAccessShare',
        'enh061_area_open_cover' => 'setEnh061AreaOpenCover',
        'enh062_area_closed_cover_outhouse' => 'setEnh062AreaClosedCoverOuthouse',
        'enh063_number_commercial_rooms' => 'setEnh063NumberCommercialRooms',
        'enh065_number_flushing_toilets' => 'setEnh065NumberFlushingToilets',
        'enh066_number_bathrooms' => 'setEnh066NumberBathrooms',
        'enh067_noise_insulation' => 'setEnh067NoiseInsulation',
        'enh068_flex_housing_permission' => 'setEnh068FlexHousingPermission',
        'enh069_flex_housing_termination_date' => 'setEnh069FlexHousingTerminationDate',
        'enh070_area_open_balcony_rooftop' => 'setEnh070AreaOpenBalconyRooftop',
        'enh071_address_function' => 'setEnh071AddressFunction',
        'enh101_validation_date' => 'setEnh101ValidationDate',
        'enh102_area_hereof1' => 'setEnh102AreaHereof1',
        'enh103_area_hereof2' => 'setEnh103AreaHereof2',
        'enh104_area_hereof3' => 'setEnh104AreaHereof3',
        'enh105_supplementary_application_code1' => 'setEnh105SupplementaryApplicationCode1',
        'enh106_supplementary_application_code2' => 'setEnh106SupplementaryApplicationCode2',
        'enh107_supplementary_application_code3' => 'setEnh107SupplementaryApplicationCode3',
        'enh127_area_physical_residential' => 'setEnh127AreaPhysicalResidential',
        'enh128_area_physical_commercial' => 'setEnh128AreaPhysicalCommercial',
        'enh500_note' => 'setEnh500Note',
        'address' => 'setAddress',
        'building_id' => 'setBuildingId',
        'floor_id' => 'setFloorId',
        'staircase_id' => 'setStaircaseId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'namespace' => 'getNamespace',
        'status' => 'getStatus',
        'business_process' => 'getBusinessProcess',
        'business_area' => 'getBusinessArea',
        'business_event' => 'getBusinessEvent',
        'registration_from' => 'getRegistrationFrom',
        'registration_to' => 'getRegistrationTo',
        'registration_actor' => 'getRegistrationActor',
        'effect_from' => 'getEffectFrom',
        'effect_to' => 'getEffectTo',
        'effect_actor' => 'getEffectActor',
        'municipality_code' => 'getMunicipalityCode',
        'enh008_uuid_to_mother_apartment' => 'getEnh008UuidToMotherApartment',
        'enh020_unit_usage' => 'getEnh020UnitUsage',
        'enh023_property_type' => 'getEnh023PropertyType',
        'enh024_unit_condemned' => 'getEnh024UnitCondemned',
        'enh025_unit_identification_creation_date' => 'getEnh025UnitIdentificationCreationDate',
        'enh026_area_unit_total' => 'getEnh026AreaUnitTotal',
        'enh027_area_residential' => 'getEnh027AreaResidential',
        'enh028_area_commercial' => 'getEnh028AreaCommercial',
        'enh030_area_unit_source' => 'getEnh030AreaUnitSource',
        'enh031_number_rooms' => 'getEnh031NumberRooms',
        'enh032_facilities_toilet' => 'getEnh032FacilitiesToilet',
        'enh033_facilities_shower' => 'getEnh033FacilitiesShower',
        'enh034_facilities_kitchen' => 'getEnh034FacilitiesKitchen',
        'enh035_energy_supply' => 'getEnh035EnergySupply',
        'enh039_area_other' => 'getEnh039AreaOther',
        'enh041_lawful_usage' => 'getEnh041LawfulUsage',
        'enh042_temporary_dispensation_date' => 'getEnh042TemporaryDispensationDate',
        'enh044_partial_commissioning_permit_date' => 'getEnh044PartialCommissioningPermitDate',
        'enh045_rental_status' => 'getEnh045RentalStatus',
        'enh046_public_subsidy' => 'getEnh046PublicSubsidy',
        'enh047_occupancy_date' => 'getEnh047OccupancyDate',
        'enh048_approved_empty_home' => 'getEnh048ApprovedEmptyHome',
        'enh051_heating_installation' => 'getEnh051HeatingInstallation',
        'enh052_heating_medium' => 'getEnh052HeatingMedium',
        'enh053_heating_supplementary' => 'getEnh053HeatingSupplementary',
        'enh060_area_unit_common_access_share' => 'getEnh060AreaUnitCommonAccessShare',
        'enh061_area_open_cover' => 'getEnh061AreaOpenCover',
        'enh062_area_closed_cover_outhouse' => 'getEnh062AreaClosedCoverOuthouse',
        'enh063_number_commercial_rooms' => 'getEnh063NumberCommercialRooms',
        'enh065_number_flushing_toilets' => 'getEnh065NumberFlushingToilets',
        'enh066_number_bathrooms' => 'getEnh066NumberBathrooms',
        'enh067_noise_insulation' => 'getEnh067NoiseInsulation',
        'enh068_flex_housing_permission' => 'getEnh068FlexHousingPermission',
        'enh069_flex_housing_termination_date' => 'getEnh069FlexHousingTerminationDate',
        'enh070_area_open_balcony_rooftop' => 'getEnh070AreaOpenBalconyRooftop',
        'enh071_address_function' => 'getEnh071AddressFunction',
        'enh101_validation_date' => 'getEnh101ValidationDate',
        'enh102_area_hereof1' => 'getEnh102AreaHereof1',
        'enh103_area_hereof2' => 'getEnh103AreaHereof2',
        'enh104_area_hereof3' => 'getEnh104AreaHereof3',
        'enh105_supplementary_application_code1' => 'getEnh105SupplementaryApplicationCode1',
        'enh106_supplementary_application_code2' => 'getEnh106SupplementaryApplicationCode2',
        'enh107_supplementary_application_code3' => 'getEnh107SupplementaryApplicationCode3',
        'enh127_area_physical_residential' => 'getEnh127AreaPhysicalResidential',
        'enh128_area_physical_commercial' => 'getEnh128AreaPhysicalCommercial',
        'enh500_note' => 'getEnh500Note',
        'address' => 'getAddress',
        'building_id' => 'getBuildingId',
        'floor_id' => 'getFloorId',
        'staircase_id' => 'getStaircaseId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('namespace', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('business_process', $data ?? [], null);
        $this->setIfExists('business_area', $data ?? [], null);
        $this->setIfExists('business_event', $data ?? [], null);
        $this->setIfExists('registration_from', $data ?? [], null);
        $this->setIfExists('registration_to', $data ?? [], null);
        $this->setIfExists('registration_actor', $data ?? [], null);
        $this->setIfExists('effect_from', $data ?? [], null);
        $this->setIfExists('effect_to', $data ?? [], null);
        $this->setIfExists('effect_actor', $data ?? [], null);
        $this->setIfExists('municipality_code', $data ?? [], null);
        $this->setIfExists('enh008_uuid_to_mother_apartment', $data ?? [], null);
        $this->setIfExists('enh020_unit_usage', $data ?? [], null);
        $this->setIfExists('enh023_property_type', $data ?? [], null);
        $this->setIfExists('enh024_unit_condemned', $data ?? [], null);
        $this->setIfExists('enh025_unit_identification_creation_date', $data ?? [], null);
        $this->setIfExists('enh026_area_unit_total', $data ?? [], null);
        $this->setIfExists('enh027_area_residential', $data ?? [], null);
        $this->setIfExists('enh028_area_commercial', $data ?? [], null);
        $this->setIfExists('enh030_area_unit_source', $data ?? [], null);
        $this->setIfExists('enh031_number_rooms', $data ?? [], null);
        $this->setIfExists('enh032_facilities_toilet', $data ?? [], null);
        $this->setIfExists('enh033_facilities_shower', $data ?? [], null);
        $this->setIfExists('enh034_facilities_kitchen', $data ?? [], null);
        $this->setIfExists('enh035_energy_supply', $data ?? [], null);
        $this->setIfExists('enh039_area_other', $data ?? [], null);
        $this->setIfExists('enh041_lawful_usage', $data ?? [], null);
        $this->setIfExists('enh042_temporary_dispensation_date', $data ?? [], null);
        $this->setIfExists('enh044_partial_commissioning_permit_date', $data ?? [], null);
        $this->setIfExists('enh045_rental_status', $data ?? [], null);
        $this->setIfExists('enh046_public_subsidy', $data ?? [], null);
        $this->setIfExists('enh047_occupancy_date', $data ?? [], null);
        $this->setIfExists('enh048_approved_empty_home', $data ?? [], null);
        $this->setIfExists('enh051_heating_installation', $data ?? [], null);
        $this->setIfExists('enh052_heating_medium', $data ?? [], null);
        $this->setIfExists('enh053_heating_supplementary', $data ?? [], null);
        $this->setIfExists('enh060_area_unit_common_access_share', $data ?? [], null);
        $this->setIfExists('enh061_area_open_cover', $data ?? [], null);
        $this->setIfExists('enh062_area_closed_cover_outhouse', $data ?? [], null);
        $this->setIfExists('enh063_number_commercial_rooms', $data ?? [], null);
        $this->setIfExists('enh065_number_flushing_toilets', $data ?? [], null);
        $this->setIfExists('enh066_number_bathrooms', $data ?? [], null);
        $this->setIfExists('enh067_noise_insulation', $data ?? [], null);
        $this->setIfExists('enh068_flex_housing_permission', $data ?? [], null);
        $this->setIfExists('enh069_flex_housing_termination_date', $data ?? [], null);
        $this->setIfExists('enh070_area_open_balcony_rooftop', $data ?? [], null);
        $this->setIfExists('enh071_address_function', $data ?? [], null);
        $this->setIfExists('enh101_validation_date', $data ?? [], null);
        $this->setIfExists('enh102_area_hereof1', $data ?? [], null);
        $this->setIfExists('enh103_area_hereof2', $data ?? [], null);
        $this->setIfExists('enh104_area_hereof3', $data ?? [], null);
        $this->setIfExists('enh105_supplementary_application_code1', $data ?? [], null);
        $this->setIfExists('enh106_supplementary_application_code2', $data ?? [], null);
        $this->setIfExists('enh107_supplementary_application_code3', $data ?? [], null);
        $this->setIfExists('enh127_area_physical_residential', $data ?? [], null);
        $this->setIfExists('enh128_area_physical_commercial', $data ?? [], null);
        $this->setIfExists('enh500_note', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('building_id', $data ?? [], null);
        $this->setIfExists('floor_id', $data ?? [], null);
        $this->setIfExists('staircase_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['namespace'] === null) {
            $invalidProperties[] = "'namespace' can't be null";
        }
        if ($this->container['registration_from'] === null) {
            $invalidProperties[] = "'registration_from' can't be null";
        }
        if ($this->container['registration_actor'] === null) {
            $invalidProperties[] = "'registration_actor' can't be null";
        }
        if ($this->container['effect_from'] === null) {
            $invalidProperties[] = "'effect_from' can't be null";
        }
        if ($this->container['effect_actor'] === null) {
            $invalidProperties[] = "'effect_actor' can't be null";
        }
        if ($this->container['enh023_property_type'] === null) {
            $invalidProperties[] = "'enh023_property_type' can't be null";
        }
        if ($this->container['building_id'] === null) {
            $invalidProperties[] = "'building_id' can't be null";
        }
        if ($this->container['floor_id'] === null) {
            $invalidProperties[] = "'floor_id' can't be null";
        }
        if ($this->container['staircase_id'] === null) {
            $invalidProperties[] = "'staircase_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id Persistent unik n√∏gle.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return mixed
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param mixed $namespace namespace
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        if (is_null($namespace)) {
            array_push($this->openAPINullablesSetToNull, 'namespace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('namespace', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets status
     *
     * @return mixed|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param mixed|null $status Angivelse af hvor et forvaltningsobjekt er i sin livscyklus.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets business_process
     *
     * @return mixed|null
     */
    public function getBusinessProcess()
    {
        return $this->container['business_process'];
    }

    /**
     * Sets business_process
     *
     * @param mixed|null $business_process Den manuelle eller IT-underst√∏ttede proces hvori forretningsomr√•det h√•ndterer h√¶ndelsen.
     *
     * @return self
     */
    public function setBusinessProcess($business_process)
    {
        if (is_null($business_process)) {
            array_push($this->openAPINullablesSetToNull, 'business_process');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_process', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_process'] = $business_process;

        return $this;
    }

    /**
     * Gets business_area
     *
     * @return mixed|null
     */
    public function getBusinessArea()
    {
        return $this->container['business_area'];
    }

    /**
     * Sets business_area
     *
     * @param mixed|null $business_area Den del af den offentlige forretning der h√•ndterer h√¶ndelsen og derved udvirker √¶ndringen i data.
     *
     * @return self
     */
    public function setBusinessArea($business_area)
    {
        if (is_null($business_area)) {
            array_push($this->openAPINullablesSetToNull, 'business_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_area'] = $business_area;

        return $this;
    }

    /**
     * Gets business_event
     *
     * @return mixed|null
     */
    public function getBusinessEvent()
    {
        return $this->container['business_event'];
    }

    /**
     * Sets business_event
     *
     * @param mixed|null $business_event Den begivenhed i virkeligheden som udl√∏ste √¶ndringen i data.
     *
     * @return self
     */
    public function setBusinessEvent($business_event)
    {
        if (is_null($business_event)) {
            array_push($this->openAPINullablesSetToNull, 'business_event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_event'] = $business_event;

        return $this;
    }

    /**
     * Gets registration_from
     *
     * @return mixed
     */
    public function getRegistrationFrom()
    {
        return $this->container['registration_from'];
    }

    /**
     * Sets registration_from
     *
     * @param mixed $registration_from Tidspunktet hvor registreringen er foretaget.
     *
     * @return self
     */
    public function setRegistrationFrom($registration_from)
    {
        if (is_null($registration_from)) {
            array_push($this->openAPINullablesSetToNull, 'registration_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_from'] = $registration_from;

        return $this;
    }

    /**
     * Gets registration_to
     *
     * @return mixed|null
     */
    public function getRegistrationTo()
    {
        return $this->container['registration_to'];
    }

    /**
     * Sets registration_to
     *
     * @param mixed|null $registration_to Tidspunktet hvor en ny registrering er foretaget p√• objektet, og hvor denne version s√•ledes ikke l√¶ngere er den seneste.
     *
     * @return self
     */
    public function setRegistrationTo($registration_to)
    {
        if (is_null($registration_to)) {
            array_push($this->openAPINullablesSetToNull, 'registration_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_to'] = $registration_to;

        return $this;
    }

    /**
     * Gets registration_actor
     *
     * @return mixed
     */
    public function getRegistrationActor()
    {
        return $this->container['registration_actor'];
    }

    /**
     * Sets registration_actor
     *
     * @param mixed $registration_actor Den akt√∏r der har foretaget registreringen.
     *
     * @return self
     */
    public function setRegistrationActor($registration_actor)
    {
        if (is_null($registration_actor)) {
            array_push($this->openAPINullablesSetToNull, 'registration_actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_actor'] = $registration_actor;

        return $this;
    }

    /**
     * Gets effect_from
     *
     * @return mixed
     */
    public function getEffectFrom()
    {
        return $this->container['effect_from'];
    }

    /**
     * Sets effect_from
     *
     * @param mixed $effect_from Tidspunktet hvorfra objektet har virkning.
     *
     * @return self
     */
    public function setEffectFrom($effect_from)
    {
        if (is_null($effect_from)) {
            array_push($this->openAPINullablesSetToNull, 'effect_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_from'] = $effect_from;

        return $this;
    }

    /**
     * Gets effect_to
     *
     * @return mixed|null
     */
    public function getEffectTo()
    {
        return $this->container['effect_to'];
    }

    /**
     * Sets effect_to
     *
     * @param mixed|null $effect_to Tidspunktet hvor objektets virkning oph√∏rer.
     *
     * @return self
     */
    public function setEffectTo($effect_to)
    {
        if (is_null($effect_to)) {
            array_push($this->openAPINullablesSetToNull, 'effect_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_to'] = $effect_to;

        return $this;
    }

    /**
     * Gets effect_actor
     *
     * @return mixed
     */
    public function getEffectActor()
    {
        return $this->container['effect_actor'];
    }

    /**
     * Sets effect_actor
     *
     * @param mixed $effect_actor Den akt√∏r der har afstedkommet objektets virkning.
     *
     * @return self
     */
    public function setEffectActor($effect_actor)
    {
        if (is_null($effect_actor)) {
            array_push($this->openAPINullablesSetToNull, 'effect_actor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect_actor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effect_actor'] = $effect_actor;

        return $this;
    }

    /**
     * Gets municipality_code
     *
     * @return mixed|null
     */
    public function getMunicipalityCode()
    {
        return $this->container['municipality_code'];
    }

    /**
     * Sets municipality_code
     *
     * @param mixed|null $municipality_code municipality_code
     *
     * @return self
     */
    public function setMunicipalityCode($municipality_code)
    {
        if (is_null($municipality_code)) {
            array_push($this->openAPINullablesSetToNull, 'municipality_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('municipality_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['municipality_code'] = $municipality_code;

        return $this;
    }

    /**
     * Gets enh008_uuid_to_mother_apartment
     *
     * @return mixed|null
     */
    public function getEnh008UuidToMotherApartment()
    {
        return $this->container['enh008_uuid_to_mother_apartment'];
    }

    /**
     * Sets enh008_uuid_to_mother_apartment
     *
     * @param mixed|null $enh008_uuid_to_mother_apartment Angiver henvisning fra supplementsrum til moderlejlighed.
     *
     * @return self
     */
    public function setEnh008UuidToMotherApartment($enh008_uuid_to_mother_apartment)
    {
        if (is_null($enh008_uuid_to_mother_apartment)) {
            array_push($this->openAPINullablesSetToNull, 'enh008_uuid_to_mother_apartment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh008_uuid_to_mother_apartment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh008_uuid_to_mother_apartment'] = $enh008_uuid_to_mother_apartment;

        return $this;
    }

    /**
     * Gets enh020_unit_usage
     *
     * @return mixed|null
     */
    public function getEnh020UnitUsage()
    {
        return $this->container['enh020_unit_usage'];
    }

    /**
     * Sets enh020_unit_usage
     *
     * @param mixed|null $enh020_unit_usage Angiver kode for enhedens anvendelse.
     *
     * @return self
     */
    public function setEnh020UnitUsage($enh020_unit_usage)
    {
        if (is_null($enh020_unit_usage)) {
            array_push($this->openAPINullablesSetToNull, 'enh020_unit_usage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh020_unit_usage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh020_unit_usage'] = $enh020_unit_usage;

        return $this;
    }

    /**
     * Gets enh023_property_type
     *
     * @return mixed
     */
    public function getEnh023PropertyType()
    {
        return $this->container['enh023_property_type'];
    }

    /**
     * Sets enh023_property_type
     *
     * @param mixed $enh023_property_type Angiver kode for boligtype.
     *
     * @return self
     */
    public function setEnh023PropertyType($enh023_property_type)
    {
        if (is_null($enh023_property_type)) {
            array_push($this->openAPINullablesSetToNull, 'enh023_property_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh023_property_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh023_property_type'] = $enh023_property_type;

        return $this;
    }

    /**
     * Gets enh024_unit_condemned
     *
     * @return mixed|null
     */
    public function getEnh024UnitCondemned()
    {
        return $this->container['enh024_unit_condemned'];
    }

    /**
     * Sets enh024_unit_condemned
     *
     * @param mixed|null $enh024_unit_condemned Angiver kode for kondemneret boligenhed.
     *
     * @return self
     */
    public function setEnh024UnitCondemned($enh024_unit_condemned)
    {
        if (is_null($enh024_unit_condemned)) {
            array_push($this->openAPINullablesSetToNull, 'enh024_unit_condemned');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh024_unit_condemned', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh024_unit_condemned'] = $enh024_unit_condemned;

        return $this;
    }

    /**
     * Gets enh025_unit_identification_creation_date
     *
     * @return mixed|null
     */
    public function getEnh025UnitIdentificationCreationDate()
    {
        return $this->container['enh025_unit_identification_creation_date'];
    }

    /**
     * Sets enh025_unit_identification_creation_date
     *
     * @param mixed|null $enh025_unit_identification_creation_date Angiver oprettelsesdato for enheden.
     *
     * @return self
     */
    public function setEnh025UnitIdentificationCreationDate($enh025_unit_identification_creation_date)
    {
        if (is_null($enh025_unit_identification_creation_date)) {
            array_push($this->openAPINullablesSetToNull, 'enh025_unit_identification_creation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh025_unit_identification_creation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh025_unit_identification_creation_date'] = $enh025_unit_identification_creation_date;

        return $this;
    }

    /**
     * Gets enh026_area_unit_total
     *
     * @return mixed|null
     */
    public function getEnh026AreaUnitTotal()
    {
        return $this->container['enh026_area_unit_total'];
    }

    /**
     * Sets enh026_area_unit_total
     *
     * @param mixed|null $enh026_area_unit_total Angiver enhedens samlede areal.
     *
     * @return self
     */
    public function setEnh026AreaUnitTotal($enh026_area_unit_total)
    {
        if (is_null($enh026_area_unit_total)) {
            array_push($this->openAPINullablesSetToNull, 'enh026_area_unit_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh026_area_unit_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh026_area_unit_total'] = $enh026_area_unit_total;

        return $this;
    }

    /**
     * Gets enh027_area_residential
     *
     * @return mixed|null
     */
    public function getEnh027AreaResidential()
    {
        return $this->container['enh027_area_residential'];
    }

    /**
     * Sets enh027_area_residential
     *
     * @param mixed|null $enh027_area_residential Angiver enhedens areal til beboelse.
     *
     * @return self
     */
    public function setEnh027AreaResidential($enh027_area_residential)
    {
        if (is_null($enh027_area_residential)) {
            array_push($this->openAPINullablesSetToNull, 'enh027_area_residential');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh027_area_residential', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh027_area_residential'] = $enh027_area_residential;

        return $this;
    }

    /**
     * Gets enh028_area_commercial
     *
     * @return mixed|null
     */
    public function getEnh028AreaCommercial()
    {
        return $this->container['enh028_area_commercial'];
    }

    /**
     * Sets enh028_area_commercial
     *
     * @param mixed|null $enh028_area_commercial Angiver enhedens areal til erhverv.
     *
     * @return self
     */
    public function setEnh028AreaCommercial($enh028_area_commercial)
    {
        if (is_null($enh028_area_commercial)) {
            array_push($this->openAPINullablesSetToNull, 'enh028_area_commercial');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh028_area_commercial', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh028_area_commercial'] = $enh028_area_commercial;

        return $this;
    }

    /**
     * Gets enh030_area_unit_source
     *
     * @return mixed|null
     */
    public function getEnh030AreaUnitSource()
    {
        return $this->container['enh030_area_unit_source'];
    }

    /**
     * Sets enh030_area_unit_source
     *
     * @param mixed|null $enh030_area_unit_source Angiver kode for kilde til oplysninger om areal.
     *
     * @return self
     */
    public function setEnh030AreaUnitSource($enh030_area_unit_source)
    {
        if (is_null($enh030_area_unit_source)) {
            array_push($this->openAPINullablesSetToNull, 'enh030_area_unit_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh030_area_unit_source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh030_area_unit_source'] = $enh030_area_unit_source;

        return $this;
    }

    /**
     * Gets enh031_number_rooms
     *
     * @return mixed|null
     */
    public function getEnh031NumberRooms()
    {
        return $this->container['enh031_number_rooms'];
    }

    /**
     * Sets enh031_number_rooms
     *
     * @param mixed|null $enh031_number_rooms Angiver antal v√¶relser i enheden.
     *
     * @return self
     */
    public function setEnh031NumberRooms($enh031_number_rooms)
    {
        if (is_null($enh031_number_rooms)) {
            array_push($this->openAPINullablesSetToNull, 'enh031_number_rooms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh031_number_rooms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh031_number_rooms'] = $enh031_number_rooms;

        return $this;
    }

    /**
     * Gets enh032_facilities_toilet
     *
     * @return mixed|null
     */
    public function getEnh032FacilitiesToilet()
    {
        return $this->container['enh032_facilities_toilet'];
    }

    /**
     * Sets enh032_facilities_toilet
     *
     * @param mixed|null $enh032_facilities_toilet Angiver kode for enhedens toiletforhold.
     *
     * @return self
     */
    public function setEnh032FacilitiesToilet($enh032_facilities_toilet)
    {
        if (is_null($enh032_facilities_toilet)) {
            array_push($this->openAPINullablesSetToNull, 'enh032_facilities_toilet');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh032_facilities_toilet', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh032_facilities_toilet'] = $enh032_facilities_toilet;

        return $this;
    }

    /**
     * Gets enh033_facilities_shower
     *
     * @return mixed|null
     */
    public function getEnh033FacilitiesShower()
    {
        return $this->container['enh033_facilities_shower'];
    }

    /**
     * Sets enh033_facilities_shower
     *
     * @param mixed|null $enh033_facilities_shower Angiver kode for enhedens badeforhold.
     *
     * @return self
     */
    public function setEnh033FacilitiesShower($enh033_facilities_shower)
    {
        if (is_null($enh033_facilities_shower)) {
            array_push($this->openAPINullablesSetToNull, 'enh033_facilities_shower');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh033_facilities_shower', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh033_facilities_shower'] = $enh033_facilities_shower;

        return $this;
    }

    /**
     * Gets enh034_facilities_kitchen
     *
     * @return mixed|null
     */
    public function getEnh034FacilitiesKitchen()
    {
        return $this->container['enh034_facilities_kitchen'];
    }

    /**
     * Sets enh034_facilities_kitchen
     *
     * @param mixed|null $enh034_facilities_kitchen Angiver kode for enhedens k√∏kkenforhold.
     *
     * @return self
     */
    public function setEnh034FacilitiesKitchen($enh034_facilities_kitchen)
    {
        if (is_null($enh034_facilities_kitchen)) {
            array_push($this->openAPINullablesSetToNull, 'enh034_facilities_kitchen');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh034_facilities_kitchen', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh034_facilities_kitchen'] = $enh034_facilities_kitchen;

        return $this;
    }

    /**
     * Gets enh035_energy_supply
     *
     * @return mixed|null
     */
    public function getEnh035EnergySupply()
    {
        return $this->container['enh035_energy_supply'];
    }

    /**
     * Sets enh035_energy_supply
     *
     * @param mixed|null $enh035_energy_supply Angiver kode for enhedens energiforsyning.
     *
     * @return self
     */
    public function setEnh035EnergySupply($enh035_energy_supply)
    {
        if (is_null($enh035_energy_supply)) {
            array_push($this->openAPINullablesSetToNull, 'enh035_energy_supply');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh035_energy_supply', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh035_energy_supply'] = $enh035_energy_supply;

        return $this;
    }

    /**
     * Gets enh039_area_other
     *
     * @return mixed|null
     */
    public function getEnh039AreaOther()
    {
        return $this->container['enh039_area_other'];
    }

    /**
     * Sets enh039_area_other
     *
     * @param mixed|null $enh039_area_other Angiver enhedens andet areal
     *
     * @return self
     */
    public function setEnh039AreaOther($enh039_area_other)
    {
        if (is_null($enh039_area_other)) {
            array_push($this->openAPINullablesSetToNull, 'enh039_area_other');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh039_area_other', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh039_area_other'] = $enh039_area_other;

        return $this;
    }

    /**
     * Gets enh041_lawful_usage
     *
     * @return mixed|null
     */
    public function getEnh041LawfulUsage()
    {
        return $this->container['enh041_lawful_usage'];
    }

    /**
     * Sets enh041_lawful_usage
     *
     * @param mixed|null $enh041_lawful_usage Angiver eventuel dispensation til anvendelse af enheden
     *
     * @return self
     */
    public function setEnh041LawfulUsage($enh041_lawful_usage)
    {
        if (is_null($enh041_lawful_usage)) {
            array_push($this->openAPINullablesSetToNull, 'enh041_lawful_usage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh041_lawful_usage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh041_lawful_usage'] = $enh041_lawful_usage;

        return $this;
    }

    /**
     * Gets enh042_temporary_dispensation_date
     *
     * @return mixed|null
     */
    public function getEnh042TemporaryDispensationDate()
    {
        return $this->container['enh042_temporary_dispensation_date'];
    }

    /**
     * Sets enh042_temporary_dispensation_date
     *
     * @param mixed|null $enh042_temporary_dispensation_date Angiver dato for tidsbegr√¶nset dispensation.
     *
     * @return self
     */
    public function setEnh042TemporaryDispensationDate($enh042_temporary_dispensation_date)
    {
        if (is_null($enh042_temporary_dispensation_date)) {
            array_push($this->openAPINullablesSetToNull, 'enh042_temporary_dispensation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh042_temporary_dispensation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh042_temporary_dispensation_date'] = $enh042_temporary_dispensation_date;

        return $this;
    }

    /**
     * Gets enh044_partial_commissioning_permit_date
     *
     * @return mixed|null
     */
    public function getEnh044PartialCommissioningPermitDate()
    {
        return $this->container['enh044_partial_commissioning_permit_date'];
    }

    /**
     * Sets enh044_partial_commissioning_permit_date
     *
     * @param mixed|null $enh044_partial_commissioning_permit_date Angiver dato for delvis ibrugtagningstilladelse.
     *
     * @return self
     */
    public function setEnh044PartialCommissioningPermitDate($enh044_partial_commissioning_permit_date)
    {
        if (is_null($enh044_partial_commissioning_permit_date)) {
            array_push($this->openAPINullablesSetToNull, 'enh044_partial_commissioning_permit_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh044_partial_commissioning_permit_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh044_partial_commissioning_permit_date'] = $enh044_partial_commissioning_permit_date;

        return $this;
    }

    /**
     * Gets enh045_rental_status
     *
     * @return mixed|null
     */
    public function getEnh045RentalStatus()
    {
        return $this->container['enh045_rental_status'];
    }

    /**
     * Sets enh045_rental_status
     *
     * @param mixed|null $enh045_rental_status Angiver enhedens udlejningsforhold
     *
     * @return self
     */
    public function setEnh045RentalStatus($enh045_rental_status)
    {
        if (is_null($enh045_rental_status)) {
            array_push($this->openAPINullablesSetToNull, 'enh045_rental_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh045_rental_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh045_rental_status'] = $enh045_rental_status;

        return $this;
    }

    /**
     * Gets enh046_public_subsidy
     *
     * @return mixed|null
     */
    public function getEnh046PublicSubsidy()
    {
        return $this->container['enh046_public_subsidy'];
    }

    /**
     * Sets enh046_public_subsidy
     *
     * @param mixed|null $enh046_public_subsidy Angiver offentlig st√∏tte.
     *
     * @return self
     */
    public function setEnh046PublicSubsidy($enh046_public_subsidy)
    {
        if (is_null($enh046_public_subsidy)) {
            array_push($this->openAPINullablesSetToNull, 'enh046_public_subsidy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh046_public_subsidy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh046_public_subsidy'] = $enh046_public_subsidy;

        return $this;
    }

    /**
     * Gets enh047_occupancy_date
     *
     * @return mixed|null
     */
    public function getEnh047OccupancyDate()
    {
        return $this->container['enh047_occupancy_date'];
    }

    /**
     * Sets enh047_occupancy_date
     *
     * @param mixed|null $enh047_occupancy_date Angiver dato for indflytning.
     *
     * @return self
     */
    public function setEnh047OccupancyDate($enh047_occupancy_date)
    {
        if (is_null($enh047_occupancy_date)) {
            array_push($this->openAPINullablesSetToNull, 'enh047_occupancy_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh047_occupancy_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh047_occupancy_date'] = $enh047_occupancy_date;

        return $this;
    }

    /**
     * Gets enh048_approved_empty_home
     *
     * @return mixed|null
     */
    public function getEnh048ApprovedEmptyHome()
    {
        return $this->container['enh048_approved_empty_home'];
    }

    /**
     * Sets enh048_approved_empty_home
     *
     * @param mixed|null $enh048_approved_empty_home Angiver om boligen er godkendt som tom bolig
     *
     * @return self
     */
    public function setEnh048ApprovedEmptyHome($enh048_approved_empty_home)
    {
        if (is_null($enh048_approved_empty_home)) {
            array_push($this->openAPINullablesSetToNull, 'enh048_approved_empty_home');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh048_approved_empty_home', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh048_approved_empty_home'] = $enh048_approved_empty_home;

        return $this;
    }

    /**
     * Gets enh051_heating_installation
     *
     * @return mixed|null
     */
    public function getEnh051HeatingInstallation()
    {
        return $this->container['enh051_heating_installation'];
    }

    /**
     * Sets enh051_heating_installation
     *
     * @param mixed|null $enh051_heating_installation Angiver enhedens varmeinstallation.
     *
     * @return self
     */
    public function setEnh051HeatingInstallation($enh051_heating_installation)
    {
        if (is_null($enh051_heating_installation)) {
            array_push($this->openAPINullablesSetToNull, 'enh051_heating_installation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh051_heating_installation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh051_heating_installation'] = $enh051_heating_installation;

        return $this;
    }

    /**
     * Gets enh052_heating_medium
     *
     * @return mixed|null
     */
    public function getEnh052HeatingMedium()
    {
        return $this->container['enh052_heating_medium'];
    }

    /**
     * Sets enh052_heating_medium
     *
     * @param mixed|null $enh052_heating_medium Angiver enhedens opvarmningsmiddel.
     *
     * @return self
     */
    public function setEnh052HeatingMedium($enh052_heating_medium)
    {
        if (is_null($enh052_heating_medium)) {
            array_push($this->openAPINullablesSetToNull, 'enh052_heating_medium');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh052_heating_medium', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh052_heating_medium'] = $enh052_heating_medium;

        return $this;
    }

    /**
     * Gets enh053_heating_supplementary
     *
     * @return mixed|null
     */
    public function getEnh053HeatingSupplementary()
    {
        return $this->container['enh053_heating_supplementary'];
    }

    /**
     * Sets enh053_heating_supplementary
     *
     * @param mixed|null $enh053_heating_supplementary Angiver enhedens supplerende varme.
     *
     * @return self
     */
    public function setEnh053HeatingSupplementary($enh053_heating_supplementary)
    {
        if (is_null($enh053_heating_supplementary)) {
            array_push($this->openAPINullablesSetToNull, 'enh053_heating_supplementary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh053_heating_supplementary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh053_heating_supplementary'] = $enh053_heating_supplementary;

        return $this;
    }

    /**
     * Gets enh060_area_unit_common_access_share
     *
     * @return mixed|null
     */
    public function getEnh060AreaUnitCommonAccessShare()
    {
        return $this->container['enh060_area_unit_common_access_share'];
    }

    /**
     * Sets enh060_area_unit_common_access_share
     *
     * @param mixed|null $enh060_area_unit_common_access_share Angiver enhedens andel i f√¶lles adgangsareal.
     *
     * @return self
     */
    public function setEnh060AreaUnitCommonAccessShare($enh060_area_unit_common_access_share)
    {
        if (is_null($enh060_area_unit_common_access_share)) {
            array_push($this->openAPINullablesSetToNull, 'enh060_area_unit_common_access_share');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh060_area_unit_common_access_share', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh060_area_unit_common_access_share'] = $enh060_area_unit_common_access_share;

        return $this;
    }

    /**
     * Gets enh061_area_open_cover
     *
     * @return mixed|null
     */
    public function getEnh061AreaOpenCover()
    {
        return $this->container['enh061_area_open_cover'];
    }

    /**
     * Sets enh061_area_open_cover
     *
     * @param mixed|null $enh061_area_open_cover Angiver enhedens areal af √•ben overd√¶kning.
     *
     * @return self
     */
    public function setEnh061AreaOpenCover($enh061_area_open_cover)
    {
        if (is_null($enh061_area_open_cover)) {
            array_push($this->openAPINullablesSetToNull, 'enh061_area_open_cover');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh061_area_open_cover', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh061_area_open_cover'] = $enh061_area_open_cover;

        return $this;
    }

    /**
     * Gets enh062_area_closed_cover_outhouse
     *
     * @return mixed|null
     */
    public function getEnh062AreaClosedCoverOuthouse()
    {
        return $this->container['enh062_area_closed_cover_outhouse'];
    }

    /**
     * Sets enh062_area_closed_cover_outhouse
     *
     * @param mixed|null $enh062_area_closed_cover_outhouse Angiver enhedens areal af lukket overd√¶kning.
     *
     * @return self
     */
    public function setEnh062AreaClosedCoverOuthouse($enh062_area_closed_cover_outhouse)
    {
        if (is_null($enh062_area_closed_cover_outhouse)) {
            array_push($this->openAPINullablesSetToNull, 'enh062_area_closed_cover_outhouse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh062_area_closed_cover_outhouse', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh062_area_closed_cover_outhouse'] = $enh062_area_closed_cover_outhouse;

        return $this;
    }

    /**
     * Gets enh063_number_commercial_rooms
     *
     * @return mixed|null
     */
    public function getEnh063NumberCommercialRooms()
    {
        return $this->container['enh063_number_commercial_rooms'];
    }

    /**
     * Sets enh063_number_commercial_rooms
     *
     * @param mixed|null $enh063_number_commercial_rooms Angiver antal v√¶relser i enheden der anvendes til erhverv.
     *
     * @return self
     */
    public function setEnh063NumberCommercialRooms($enh063_number_commercial_rooms)
    {
        if (is_null($enh063_number_commercial_rooms)) {
            array_push($this->openAPINullablesSetToNull, 'enh063_number_commercial_rooms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh063_number_commercial_rooms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh063_number_commercial_rooms'] = $enh063_number_commercial_rooms;

        return $this;
    }

    /**
     * Gets enh065_number_flushing_toilets
     *
     * @return mixed|null
     */
    public function getEnh065NumberFlushingToilets()
    {
        return $this->container['enh065_number_flushing_toilets'];
    }

    /**
     * Sets enh065_number_flushing_toilets
     *
     * @param mixed|null $enh065_number_flushing_toilets Angiver antal vandskyllende toiletter.
     *
     * @return self
     */
    public function setEnh065NumberFlushingToilets($enh065_number_flushing_toilets)
    {
        if (is_null($enh065_number_flushing_toilets)) {
            array_push($this->openAPINullablesSetToNull, 'enh065_number_flushing_toilets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh065_number_flushing_toilets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh065_number_flushing_toilets'] = $enh065_number_flushing_toilets;

        return $this;
    }

    /**
     * Gets enh066_number_bathrooms
     *
     * @return mixed|null
     */
    public function getEnh066NumberBathrooms()
    {
        return $this->container['enh066_number_bathrooms'];
    }

    /**
     * Sets enh066_number_bathrooms
     *
     * @param mixed|null $enh066_number_bathrooms Angiver antal badev√¶reslser.
     *
     * @return self
     */
    public function setEnh066NumberBathrooms($enh066_number_bathrooms)
    {
        if (is_null($enh066_number_bathrooms)) {
            array_push($this->openAPINullablesSetToNull, 'enh066_number_bathrooms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh066_number_bathrooms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh066_number_bathrooms'] = $enh066_number_bathrooms;

        return $this;
    }

    /**
     * Gets enh067_noise_insulation
     *
     * @return mixed|null
     */
    public function getEnh067NoiseInsulation()
    {
        return $this->container['enh067_noise_insulation'];
    }

    /**
     * Sets enh067_noise_insulation
     *
     * @param mixed|null $enh067_noise_insulation Angiver √•rstal for st√∏jisolering.
     *
     * @return self
     */
    public function setEnh067NoiseInsulation($enh067_noise_insulation)
    {
        if (is_null($enh067_noise_insulation)) {
            array_push($this->openAPINullablesSetToNull, 'enh067_noise_insulation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh067_noise_insulation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh067_noise_insulation'] = $enh067_noise_insulation;

        return $this;
    }

    /**
     * Gets enh068_flex_housing_permission
     *
     * @return mixed|null
     */
    public function getEnh068FlexHousingPermission()
    {
        return $this->container['enh068_flex_housing_permission'];
    }

    /**
     * Sets enh068_flex_housing_permission
     *
     * @param mixed|null $enh068_flex_housing_permission Angivelse af om en tilladelse til flexbolig er personlig eller ej og om den er med eller uden tidsbegr√¶nsning
     *
     * @return self
     */
    public function setEnh068FlexHousingPermission($enh068_flex_housing_permission)
    {
        if (is_null($enh068_flex_housing_permission)) {
            array_push($this->openAPINullablesSetToNull, 'enh068_flex_housing_permission');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh068_flex_housing_permission', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh068_flex_housing_permission'] = $enh068_flex_housing_permission;

        return $this;
    }

    /**
     * Gets enh069_flex_housing_termination_date
     *
     * @return mixed|null
     */
    public function getEnh069FlexHousingTerminationDate()
    {
        return $this->container['enh069_flex_housing_termination_date'];
    }

    /**
     * Sets enh069_flex_housing_termination_date
     *
     * @param mixed|null $enh069_flex_housing_termination_date &#8203;Dato for oph√∏r af en tidsbegr√¶nset flexboligtilladelse
     *
     * @return self
     */
    public function setEnh069FlexHousingTerminationDate($enh069_flex_housing_termination_date)
    {
        if (is_null($enh069_flex_housing_termination_date)) {
            array_push($this->openAPINullablesSetToNull, 'enh069_flex_housing_termination_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh069_flex_housing_termination_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh069_flex_housing_termination_date'] = $enh069_flex_housing_termination_date;

        return $this;
    }

    /**
     * Gets enh070_area_open_balcony_rooftop
     *
     * @return mixed|null
     */
    public function getEnh070AreaOpenBalconyRooftop()
    {
        return $this->container['enh070_area_open_balcony_rooftop'];
    }

    /**
     * Sets enh070_area_open_balcony_rooftop
     *
     * @param mixed|null $enh070_area_open_balcony_rooftop Samlet areal af √•ben altan og/eller √•ben tagterrasse, som lejligheden har eneadgang til
     *
     * @return self
     */
    public function setEnh070AreaOpenBalconyRooftop($enh070_area_open_balcony_rooftop)
    {
        if (is_null($enh070_area_open_balcony_rooftop)) {
            array_push($this->openAPINullablesSetToNull, 'enh070_area_open_balcony_rooftop');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh070_area_open_balcony_rooftop', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh070_area_open_balcony_rooftop'] = $enh070_area_open_balcony_rooftop;

        return $this;
    }

    /**
     * Gets enh071_address_function
     *
     * @return mixed|null
     */
    public function getEnh071AddressFunction()
    {
        return $this->container['enh071_address_function'];
    }

    /**
     * Sets enh071_address_function
     *
     * @param mixed|null $enh071_address_function Angiver adressens funktion i forhold til denne enhed , dvs. om den identificerer netop denne enhed i bygningen eller blot fungerer vejledende, fordi adressen egentlig er fastsat til en anden enhed i denne bygning eller i en anden bygning
     *
     * @return self
     */
    public function setEnh071AddressFunction($enh071_address_function)
    {
        if (is_null($enh071_address_function)) {
            array_push($this->openAPINullablesSetToNull, 'enh071_address_function');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh071_address_function', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh071_address_function'] = $enh071_address_function;

        return $this;
    }

    /**
     * Gets enh101_validation_date
     *
     * @return mixed|null
     */
    public function getEnh101ValidationDate()
    {
        return $this->container['enh101_validation_date'];
    }

    /**
     * Sets enh101_validation_date
     *
     * @param mixed|null $enh101_validation_date Angvier gyldighedsdato for enheden
     *
     * @return self
     */
    public function setEnh101ValidationDate($enh101_validation_date)
    {
        if (is_null($enh101_validation_date)) {
            array_push($this->openAPINullablesSetToNull, 'enh101_validation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh101_validation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh101_validation_date'] = $enh101_validation_date;

        return $this;
    }

    /**
     * Gets enh102_area_hereof1
     *
     * @return mixed|null
     */
    public function getEnh102AreaHereof1()
    {
        return $this->container['enh102_area_hereof1'];
    }

    /**
     * Sets enh102_area_hereof1
     *
     * @param mixed|null $enh102_area_hereof1 Oplysning som kan knyttes til en erhvervsenhed som har anvendelser. Anvendelseskoden for det p√•g√¶ldende areal fremg√•r af feltet enh105
     *
     * @return self
     */
    public function setEnh102AreaHereof1($enh102_area_hereof1)
    {
        if (is_null($enh102_area_hereof1)) {
            array_push($this->openAPINullablesSetToNull, 'enh102_area_hereof1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh102_area_hereof1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh102_area_hereof1'] = $enh102_area_hereof1;

        return $this;
    }

    /**
     * Gets enh103_area_hereof2
     *
     * @return mixed|null
     */
    public function getEnh103AreaHereof2()
    {
        return $this->container['enh103_area_hereof2'];
    }

    /**
     * Sets enh103_area_hereof2
     *
     * @param mixed|null $enh103_area_hereof2 Oplysning som kan knyttes til en erhvervsenhed som har anvendelser. Anvendelseskoden for det p√•g√¶ldende areal fremg√•r af feltet enh106
     *
     * @return self
     */
    public function setEnh103AreaHereof2($enh103_area_hereof2)
    {
        if (is_null($enh103_area_hereof2)) {
            array_push($this->openAPINullablesSetToNull, 'enh103_area_hereof2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh103_area_hereof2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh103_area_hereof2'] = $enh103_area_hereof2;

        return $this;
    }

    /**
     * Gets enh104_area_hereof3
     *
     * @return mixed|null
     */
    public function getEnh104AreaHereof3()
    {
        return $this->container['enh104_area_hereof3'];
    }

    /**
     * Sets enh104_area_hereof3
     *
     * @param mixed|null $enh104_area_hereof3 Oplysning som kan knyttes til en erhvervsenhed som har anvendelser. Anvendelseskoden for det p√•g√¶ldende areal fremg√•r af feltet enh107
     *
     * @return self
     */
    public function setEnh104AreaHereof3($enh104_area_hereof3)
    {
        if (is_null($enh104_area_hereof3)) {
            array_push($this->openAPINullablesSetToNull, 'enh104_area_hereof3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh104_area_hereof3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh104_area_hereof3'] = $enh104_area_hereof3;

        return $this;
    }

    /**
     * Gets enh105_supplementary_application_code1
     *
     * @return mixed|null
     */
    public function getEnh105SupplementaryApplicationCode1()
    {
        return $this->container['enh105_supplementary_application_code1'];
    }

    /**
     * Sets enh105_supplementary_application_code1
     *
     * @param mixed|null $enh105_supplementary_application_code1 Oplysning som kan knyttes til en erhvervsenhed som har anvendelser. Enhedens areal med den p√•g√¶ldende anvendelse fremg√•r af feltet enh102
     *
     * @return self
     */
    public function setEnh105SupplementaryApplicationCode1($enh105_supplementary_application_code1)
    {
        if (is_null($enh105_supplementary_application_code1)) {
            array_push($this->openAPINullablesSetToNull, 'enh105_supplementary_application_code1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh105_supplementary_application_code1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh105_supplementary_application_code1'] = $enh105_supplementary_application_code1;

        return $this;
    }

    /**
     * Gets enh106_supplementary_application_code2
     *
     * @return mixed|null
     */
    public function getEnh106SupplementaryApplicationCode2()
    {
        return $this->container['enh106_supplementary_application_code2'];
    }

    /**
     * Sets enh106_supplementary_application_code2
     *
     * @param mixed|null $enh106_supplementary_application_code2 Oplysning som kan knyttes til en erhvervsenhed som har anvendelser. Enhedens areal med den p√•g√¶ldende anvendelse fremg√•r af feltet enh103
     *
     * @return self
     */
    public function setEnh106SupplementaryApplicationCode2($enh106_supplementary_application_code2)
    {
        if (is_null($enh106_supplementary_application_code2)) {
            array_push($this->openAPINullablesSetToNull, 'enh106_supplementary_application_code2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh106_supplementary_application_code2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh106_supplementary_application_code2'] = $enh106_supplementary_application_code2;

        return $this;
    }

    /**
     * Gets enh107_supplementary_application_code3
     *
     * @return mixed|null
     */
    public function getEnh107SupplementaryApplicationCode3()
    {
        return $this->container['enh107_supplementary_application_code3'];
    }

    /**
     * Sets enh107_supplementary_application_code3
     *
     * @param mixed|null $enh107_supplementary_application_code3 Oplysning som kan knyttes til en erhvervsenhed som har anvendelser. Enhedens areal med den p√•g√¶ldende anvendelse fremg√•r af feltet enh104
     *
     * @return self
     */
    public function setEnh107SupplementaryApplicationCode3($enh107_supplementary_application_code3)
    {
        if (is_null($enh107_supplementary_application_code3)) {
            array_push($this->openAPINullablesSetToNull, 'enh107_supplementary_application_code3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh107_supplementary_application_code3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh107_supplementary_application_code3'] = $enh107_supplementary_application_code3;

        return $this;
    }

    /**
     * Gets enh127_area_physical_residential
     *
     * @return mixed|null
     */
    public function getEnh127AreaPhysicalResidential()
    {
        return $this->container['enh127_area_physical_residential'];
    }

    /**
     * Sets enh127_area_physical_residential
     *
     * @param mixed|null $enh127_area_physical_residential Angiver enhedens fysiske areal til beboelse.
     *
     * @return self
     */
    public function setEnh127AreaPhysicalResidential($enh127_area_physical_residential)
    {
        if (is_null($enh127_area_physical_residential)) {
            array_push($this->openAPINullablesSetToNull, 'enh127_area_physical_residential');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh127_area_physical_residential', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh127_area_physical_residential'] = $enh127_area_physical_residential;

        return $this;
    }

    /**
     * Gets enh128_area_physical_commercial
     *
     * @return mixed|null
     */
    public function getEnh128AreaPhysicalCommercial()
    {
        return $this->container['enh128_area_physical_commercial'];
    }

    /**
     * Sets enh128_area_physical_commercial
     *
     * @param mixed|null $enh128_area_physical_commercial Angiver enhedens fysiske areal til erhverv.
     *
     * @return self
     */
    public function setEnh128AreaPhysicalCommercial($enh128_area_physical_commercial)
    {
        if (is_null($enh128_area_physical_commercial)) {
            array_push($this->openAPINullablesSetToNull, 'enh128_area_physical_commercial');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh128_area_physical_commercial', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh128_area_physical_commercial'] = $enh128_area_physical_commercial;

        return $this;
    }

    /**
     * Gets enh500_note
     *
     * @return mixed|null
     */
    public function getEnh500Note()
    {
        return $this->container['enh500_note'];
    }

    /**
     * Sets enh500_note
     *
     * @param mixed|null $enh500_note Beskrivende tekstnotat om s√¶rlige forhold for dette BBR-element
     *
     * @return self
     */
    public function setEnh500Note($enh500_note)
    {
        if (is_null($enh500_note)) {
            array_push($this->openAPINullablesSetToNull, 'enh500_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enh500_note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enh500_note'] = $enh500_note;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\DARAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\DARAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets building_id
     *
     * @return mixed
     */
    public function getBuildingId()
    {
        return $this->container['building_id'];
    }

    /**
     * Sets building_id
     *
     * @param mixed $building_id building_id
     *
     * @return self
     */
    public function setBuildingId($building_id)
    {
        if (is_null($building_id)) {
            array_push($this->openAPINullablesSetToNull, 'building_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_id'] = $building_id;

        return $this;
    }

    /**
     * Gets floor_id
     *
     * @return mixed
     */
    public function getFloorId()
    {
        return $this->container['floor_id'];
    }

    /**
     * Sets floor_id
     *
     * @param mixed $floor_id floor_id
     *
     * @return self
     */
    public function setFloorId($floor_id)
    {
        if (is_null($floor_id)) {
            array_push($this->openAPINullablesSetToNull, 'floor_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('floor_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['floor_id'] = $floor_id;

        return $this;
    }

    /**
     * Gets staircase_id
     *
     * @return mixed
     */
    public function getStaircaseId()
    {
        return $this->container['staircase_id'];
    }

    /**
     * Sets staircase_id
     *
     * @param mixed $staircase_id staircase_id
     *
     * @return self
     */
    public function setStaircaseId($staircase_id)
    {
        if (is_null($staircase_id)) {
            array_push($this->openAPINullablesSetToNull, 'staircase_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staircase_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['staircase_id'] = $staircase_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


