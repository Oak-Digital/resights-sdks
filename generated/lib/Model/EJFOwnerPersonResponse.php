<?php
/**
 * EJFOwnerPersonResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EJFOwnerPersonResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EJFOwnerPersonResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EJFOwnerPersonResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'name' => 'mixed',
        'first_name' => 'mixed',
        'last_name' => 'mixed',
        'full_name' => 'mixed',
        'addressing_name' => 'mixed',
        'name_co' => 'mixed',
        'gender' => 'mixed',
        'status' => 'mixed',
        'status_date' => 'mixed',
        'status_date_uncertain' => 'mixed',
        'birth_date' => 'mixed',
        'birth_date_uncertain' => 'mixed',
        'municipality_code' => 'mixed',
        'municipality_name' => 'mixed',
        'standard_address' => 'mixed',
        'building_number' => 'mixed',
        'street_code' => 'mixed',
        'street_name' => 'mixed',
        'house_number' => 'mixed',
        'floor' => 'mixed',
        'door' => 'mixed',
        'city_name' => 'mixed',
        'zip_name' => 'mixed',
        'zip_code' => 'mixed',
        'address_name' => 'mixed',
        'country' => 'mixed',
        'country_code' => 'mixed',
        'address_line_1' => 'mixed',
        'address_line_2' => 'mixed',
        'address_line_3' => 'mixed',
        'address_line_4' => 'mixed',
        'address_line_5' => 'mixed',
        'credit_alert' => 'mixed',
        'marketing_protection' => 'mixed',
        'local_directory_protection' => 'mixed',
        'name_and_address_protection' => 'mixed',
        'unit_number' => 'mixed',
        'address' => '\OpenAPI\Client\Model\DARAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'name' => null,
        'first_name' => null,
        'last_name' => null,
        'full_name' => null,
        'addressing_name' => null,
        'name_co' => null,
        'gender' => null,
        'status' => null,
        'status_date' => 'date-time',
        'status_date_uncertain' => null,
        'birth_date' => 'date-time',
        'birth_date_uncertain' => null,
        'municipality_code' => null,
        'municipality_name' => null,
        'standard_address' => null,
        'building_number' => null,
        'street_code' => null,
        'street_name' => null,
        'house_number' => null,
        'floor' => null,
        'door' => null,
        'city_name' => null,
        'zip_name' => null,
        'zip_code' => null,
        'address_name' => null,
        'country' => null,
        'country_code' => null,
        'address_line_1' => null,
        'address_line_2' => null,
        'address_line_3' => null,
        'address_line_4' => null,
        'address_line_5' => null,
        'credit_alert' => null,
        'marketing_protection' => null,
        'local_directory_protection' => null,
        'name_and_address_protection' => null,
        'unit_number' => null,
        'address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'name' => true,
		'first_name' => true,
		'last_name' => true,
		'full_name' => true,
		'addressing_name' => true,
		'name_co' => true,
		'gender' => true,
		'status' => true,
		'status_date' => true,
		'status_date_uncertain' => true,
		'birth_date' => true,
		'birth_date_uncertain' => true,
		'municipality_code' => true,
		'municipality_name' => true,
		'standard_address' => true,
		'building_number' => true,
		'street_code' => true,
		'street_name' => true,
		'house_number' => true,
		'floor' => true,
		'door' => true,
		'city_name' => true,
		'zip_name' => true,
		'zip_code' => true,
		'address_name' => true,
		'country' => true,
		'country_code' => true,
		'address_line_1' => true,
		'address_line_2' => true,
		'address_line_3' => true,
		'address_line_4' => true,
		'address_line_5' => true,
		'credit_alert' => true,
		'marketing_protection' => true,
		'local_directory_protection' => true,
		'name_and_address_protection' => true,
		'unit_number' => true,
		'address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'full_name' => 'full_name',
        'addressing_name' => 'addressing_name',
        'name_co' => 'name_co',
        'gender' => 'gender',
        'status' => 'status',
        'status_date' => 'status_date',
        'status_date_uncertain' => 'status_date_uncertain',
        'birth_date' => 'birth_date',
        'birth_date_uncertain' => 'birth_date_uncertain',
        'municipality_code' => 'municipality_code',
        'municipality_name' => 'municipality_name',
        'standard_address' => 'standard_address',
        'building_number' => 'building_number',
        'street_code' => 'street_code',
        'street_name' => 'street_name',
        'house_number' => 'house_number',
        'floor' => 'floor',
        'door' => 'door',
        'city_name' => 'city_name',
        'zip_name' => 'zip_name',
        'zip_code' => 'zip_code',
        'address_name' => 'address_name',
        'country' => 'country',
        'country_code' => 'country_code',
        'address_line_1' => 'address_line_1',
        'address_line_2' => 'address_line_2',
        'address_line_3' => 'address_line_3',
        'address_line_4' => 'address_line_4',
        'address_line_5' => 'address_line_5',
        'credit_alert' => 'credit_alert',
        'marketing_protection' => 'marketing_protection',
        'local_directory_protection' => 'local_directory_protection',
        'name_and_address_protection' => 'name_and_address_protection',
        'unit_number' => 'unit_number',
        'address' => 'address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'full_name' => 'setFullName',
        'addressing_name' => 'setAddressingName',
        'name_co' => 'setNameCo',
        'gender' => 'setGender',
        'status' => 'setStatus',
        'status_date' => 'setStatusDate',
        'status_date_uncertain' => 'setStatusDateUncertain',
        'birth_date' => 'setBirthDate',
        'birth_date_uncertain' => 'setBirthDateUncertain',
        'municipality_code' => 'setMunicipalityCode',
        'municipality_name' => 'setMunicipalityName',
        'standard_address' => 'setStandardAddress',
        'building_number' => 'setBuildingNumber',
        'street_code' => 'setStreetCode',
        'street_name' => 'setStreetName',
        'house_number' => 'setHouseNumber',
        'floor' => 'setFloor',
        'door' => 'setDoor',
        'city_name' => 'setCityName',
        'zip_name' => 'setZipName',
        'zip_code' => 'setZipCode',
        'address_name' => 'setAddressName',
        'country' => 'setCountry',
        'country_code' => 'setCountryCode',
        'address_line_1' => 'setAddressLine1',
        'address_line_2' => 'setAddressLine2',
        'address_line_3' => 'setAddressLine3',
        'address_line_4' => 'setAddressLine4',
        'address_line_5' => 'setAddressLine5',
        'credit_alert' => 'setCreditAlert',
        'marketing_protection' => 'setMarketingProtection',
        'local_directory_protection' => 'setLocalDirectoryProtection',
        'name_and_address_protection' => 'setNameAndAddressProtection',
        'unit_number' => 'setUnitNumber',
        'address' => 'setAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'full_name' => 'getFullName',
        'addressing_name' => 'getAddressingName',
        'name_co' => 'getNameCo',
        'gender' => 'getGender',
        'status' => 'getStatus',
        'status_date' => 'getStatusDate',
        'status_date_uncertain' => 'getStatusDateUncertain',
        'birth_date' => 'getBirthDate',
        'birth_date_uncertain' => 'getBirthDateUncertain',
        'municipality_code' => 'getMunicipalityCode',
        'municipality_name' => 'getMunicipalityName',
        'standard_address' => 'getStandardAddress',
        'building_number' => 'getBuildingNumber',
        'street_code' => 'getStreetCode',
        'street_name' => 'getStreetName',
        'house_number' => 'getHouseNumber',
        'floor' => 'getFloor',
        'door' => 'getDoor',
        'city_name' => 'getCityName',
        'zip_name' => 'getZipName',
        'zip_code' => 'getZipCode',
        'address_name' => 'getAddressName',
        'country' => 'getCountry',
        'country_code' => 'getCountryCode',
        'address_line_1' => 'getAddressLine1',
        'address_line_2' => 'getAddressLine2',
        'address_line_3' => 'getAddressLine3',
        'address_line_4' => 'getAddressLine4',
        'address_line_5' => 'getAddressLine5',
        'credit_alert' => 'getCreditAlert',
        'marketing_protection' => 'getMarketingProtection',
        'local_directory_protection' => 'getLocalDirectoryProtection',
        'name_and_address_protection' => 'getNameAndAddressProtection',
        'unit_number' => 'getUnitNumber',
        'address' => 'getAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('addressing_name', $data ?? [], null);
        $this->setIfExists('name_co', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_date', $data ?? [], null);
        $this->setIfExists('status_date_uncertain', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('birth_date_uncertain', $data ?? [], null);
        $this->setIfExists('municipality_code', $data ?? [], null);
        $this->setIfExists('municipality_name', $data ?? [], null);
        $this->setIfExists('standard_address', $data ?? [], null);
        $this->setIfExists('building_number', $data ?? [], null);
        $this->setIfExists('street_code', $data ?? [], null);
        $this->setIfExists('street_name', $data ?? [], null);
        $this->setIfExists('house_number', $data ?? [], null);
        $this->setIfExists('floor', $data ?? [], null);
        $this->setIfExists('door', $data ?? [], null);
        $this->setIfExists('city_name', $data ?? [], null);
        $this->setIfExists('zip_name', $data ?? [], null);
        $this->setIfExists('zip_code', $data ?? [], null);
        $this->setIfExists('address_name', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('address_line_1', $data ?? [], null);
        $this->setIfExists('address_line_2', $data ?? [], null);
        $this->setIfExists('address_line_3', $data ?? [], null);
        $this->setIfExists('address_line_4', $data ?? [], null);
        $this->setIfExists('address_line_5', $data ?? [], null);
        $this->setIfExists('credit_alert', $data ?? [], null);
        $this->setIfExists('marketing_protection', $data ?? [], null);
        $this->setIfExists('local_directory_protection', $data ?? [], null);
        $this->setIfExists('name_and_address_protection', $data ?? [], null);
        $this->setIfExists('unit_number', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['gender'] === null) {
            $invalidProperties[] = "'gender' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['status_date'] === null) {
            $invalidProperties[] = "'status_date' can't be null";
        }
        if ($this->container['status_date_uncertain'] === null) {
            $invalidProperties[] = "'status_date_uncertain' can't be null";
        }
        if ($this->container['birth_date'] === null) {
            $invalidProperties[] = "'birth_date' can't be null";
        }
        if ($this->container['birth_date_uncertain'] === null) {
            $invalidProperties[] = "'birth_date_uncertain' can't be null";
        }
        if ($this->container['address_name'] === null) {
            $invalidProperties[] = "'address_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id Persistent unik nÃ¸gle.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return mixed|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param mixed|null $name Angiver personens fulde navn med statusangivelse.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return mixed|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param mixed|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return mixed|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param mixed|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return mixed|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param mixed|null $full_name Angiver personens fulde navn.
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (is_null($full_name)) {
            array_push($this->openAPINullablesSetToNull, 'full_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('full_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets addressing_name
     *
     * @return mixed|null
     */
    public function getAddressingName()
    {
        return $this->container['addressing_name'];
    }

    /**
     * Sets addressing_name
     *
     * @param mixed|null $addressing_name Angiver personens adresseringsnavn.
     *
     * @return self
     */
    public function setAddressingName($addressing_name)
    {
        if (is_null($addressing_name)) {
            array_push($this->openAPINullablesSetToNull, 'addressing_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addressing_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addressing_name'] = $addressing_name;

        return $this;
    }

    /**
     * Gets name_co
     *
     * @return mixed|null
     */
    public function getNameCo()
    {
        return $this->container['name_co'];
    }

    /**
     * Sets name_co
     *
     * @param mixed|null $name_co C/O navn i adressen. Konstanten C/O samt en blank vil vÃ¦re indeholdt i de fÃ¸rste 4 positioner.
     *
     * @return self
     */
    public function setNameCo($name_co)
    {
        if (is_null($name_co)) {
            array_push($this->openAPINullablesSetToNull, 'name_co');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name_co', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name_co'] = $name_co;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return mixed
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param mixed $gender Angiver personens kÃ¸n.
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets status
     *
     * @return mixed
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param mixed $status Angiver personens status.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_date
     *
     * @return mixed
     */
    public function getStatusDate()
    {
        return $this->container['status_date'];
    }

    /**
     * Sets status_date
     *
     * @param mixed $status_date HÃ¦ndelsesdato/tid for angivelse af status. Eksisterer kun i forbindelse med en inaktiv status.
     *
     * @return self
     */
    public function setStatusDate($status_date)
    {
        if (is_null($status_date)) {
            array_push($this->openAPINullablesSetToNull, 'status_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status_date'] = $status_date;

        return $this;
    }

    /**
     * Gets status_date_uncertain
     *
     * @return mixed
     */
    public function getStatusDateUncertain()
    {
        return $this->container['status_date_uncertain'];
    }

    /**
     * Sets status_date_uncertain
     *
     * @param mixed $status_date_uncertain Angiver at statusdato er usikker, hvilket vil sige at det ikke har vÃ¦ret muligt at verificere datoens korrekthed.
     *
     * @return self
     */
    public function setStatusDateUncertain($status_date_uncertain)
    {
        if (is_null($status_date_uncertain)) {
            array_push($this->openAPINullablesSetToNull, 'status_date_uncertain');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status_date_uncertain', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status_date_uncertain'] = $status_date_uncertain;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return mixed
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param mixed $birth_date Angiver personens fÃ¸dselsdato.
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        if (is_null($birth_date)) {
            array_push($this->openAPINullablesSetToNull, 'birth_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets birth_date_uncertain
     *
     * @return mixed
     */
    public function getBirthDateUncertain()
    {
        return $this->container['birth_date_uncertain'];
    }

    /**
     * Sets birth_date_uncertain
     *
     * @param mixed $birth_date_uncertain Angiver at fÃ¸dselsdatoen er usikker, hvilket vil sige, at det ikke har vÃ¦ret muligt af verificere datoens korrekthed.
     *
     * @return self
     */
    public function setBirthDateUncertain($birth_date_uncertain)
    {
        if (is_null($birth_date_uncertain)) {
            array_push($this->openAPINullablesSetToNull, 'birth_date_uncertain');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_date_uncertain', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birth_date_uncertain'] = $birth_date_uncertain;

        return $this;
    }

    /**
     * Gets municipality_code
     *
     * @return mixed|null
     */
    public function getMunicipalityCode()
    {
        return $this->container['municipality_code'];
    }

    /**
     * Sets municipality_code
     *
     * @param mixed|null $municipality_code Kode for en kommune.
     *
     * @return self
     */
    public function setMunicipalityCode($municipality_code)
    {
        if (is_null($municipality_code)) {
            array_push($this->openAPINullablesSetToNull, 'municipality_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('municipality_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['municipality_code'] = $municipality_code;

        return $this;
    }

    /**
     * Gets municipality_name
     *
     * @return mixed|null
     */
    public function getMunicipalityName()
    {
        return $this->container['municipality_name'];
    }

    /**
     * Sets municipality_name
     *
     * @param mixed|null $municipality_name Navn for en kommune.
     *
     * @return self
     */
    public function setMunicipalityName($municipality_name)
    {
        if (is_null($municipality_name)) {
            array_push($this->openAPINullablesSetToNull, 'municipality_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('municipality_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['municipality_name'] = $municipality_name;

        return $this;
    }

    /**
     * Gets standard_address
     *
     * @return mixed|null
     */
    public function getStandardAddress()
    {
        return $this->container['standard_address'];
    }

    /**
     * Sets standard_address
     *
     * @param mixed|null $standard_address Sammensat af: vejadresseringsnavn husnummer, etage, sidedoer bygningsnummer
     *
     * @return self
     */
    public function setStandardAddress($standard_address)
    {
        if (is_null($standard_address)) {
            array_push($this->openAPINullablesSetToNull, 'standard_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('standard_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['standard_address'] = $standard_address;

        return $this;
    }

    /**
     * Gets building_number
     *
     * @return mixed|null
     */
    public function getBuildingNumber()
    {
        return $this->container['building_number'];
    }

    /**
     * Sets building_number
     *
     * @param mixed|null $building_number Bygningsnummer er et persondatafelt, og anvendes pÃ¥ GrÃ¸nland som selvstÃ¦ndigt datum eller i stedet for husnummer.
     *
     * @return self
     */
    public function setBuildingNumber($building_number)
    {
        if (is_null($building_number)) {
            array_push($this->openAPINullablesSetToNull, 'building_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_number'] = $building_number;

        return $this;
    }

    /**
     * Gets street_code
     *
     * @return mixed|null
     */
    public function getStreetCode()
    {
        return $this->container['street_code'];
    }

    /**
     * Sets street_code
     *
     * @param mixed|null $street_code Vejkode danner sammen med kommunekode en entydig kode for en vej i Danmark. VÃ¦rdimÃ¦ngde: 0001 - 9999
     *
     * @return self
     */
    public function setStreetCode($street_code)
    {
        if (is_null($street_code)) {
            array_push($this->openAPINullablesSetToNull, 'street_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_code'] = $street_code;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return mixed|null
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param mixed|null $street_name En forkortelse af vejnavn, som benyttes ved forsendelser. Feltet er indrapporteret, hvis vejnavnet er over 20 positioner. Ved vejnavne under 20 positioner er vejnavn = vejadresseringsnavn.
     *
     * @return self
     */
    public function setStreetName($street_name)
    {
        if (is_null($street_name)) {
            array_push($this->openAPINullablesSetToNull, 'street_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return mixed|null
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param mixed|null $house_number Feltet angiver husnummer pÃ¥ en given bolig.
     *
     * @return self
     */
    public function setHouseNumber($house_number)
    {
        if (is_null($house_number)) {
            array_push($this->openAPINullablesSetToNull, 'house_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('house_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets floor
     *
     * @return mixed|null
     */
    public function getFloor()
    {
        return $this->container['floor'];
    }

    /**
     * Sets floor
     *
     * @param mixed|null $floor Etageangivelse i adressen. 1 - 99 samt kl, k2, k3, st og blank. mz, kv, og pt kan desuden forekomme ved adresseregistreringer.
     *
     * @return self
     */
    public function setFloor($floor)
    {
        if (is_null($floor)) {
            array_push($this->openAPINullablesSetToNull, 'floor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('floor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['floor'] = $floor;

        return $this;
    }

    /**
     * Gets door
     *
     * @return mixed|null
     */
    public function getDoor()
    {
        return $this->container['door'];
    }

    /**
     * Sets door
     *
     * @param mixed|null $door Side- eller dÃ¸rnummer for en bolig. Identificerer sammen med kommunekode, vejkode, husnummer, og etage en bolig.
     *
     * @return self
     */
    public function setDoor($door)
    {
        if (is_null($door)) {
            array_push($this->openAPINullablesSetToNull, 'door');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('door', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['door'] = $door;

        return $this;
    }

    /**
     * Gets city_name
     *
     * @return mixed|null
     */
    public function getCityName()
    {
        return $this->container['city_name'];
    }

    /**
     * Sets city_name
     *
     * @param mixed|null $city_name Bynavn i klarskrift. Benyttes som en del af den postale adresse, hvor postnummer og postdistrikt er utilstrÃ¦kkeligt, ved forsendelse af post til borgeren.
     *
     * @return self
     */
    public function setCityName($city_name)
    {
        if (is_null($city_name)) {
            array_push($this->openAPINullablesSetToNull, 'city_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city_name'] = $city_name;

        return $this;
    }

    /**
     * Gets zip_name
     *
     * @return mixed|null
     */
    public function getZipName()
    {
        return $this->container['zip_name'];
    }

    /**
     * Sets zip_name
     *
     * @param mixed|null $zip_name Angiver postdistrikts navn i klarskrift. Feltet er pÃ¥ 20 karakterer, sÃ¥ det sammen med postnummer + 1 blank kan vÃ¦re i en rudekuvert.
     *
     * @return self
     */
    public function setZipName($zip_name)
    {
        if (is_null($zip_name)) {
            array_push($this->openAPINullablesSetToNull, 'zip_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zip_name'] = $zip_name;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return mixed|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param mixed|null $zip_code PostvÃ¦senets landsdÃ¦kkende postnummerkode. Postnummer er et obligatorisk vejdistrikt.
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (is_null($zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets address_name
     *
     * @return mixed
     */
    public function getAddressName()
    {
        return $this->container['address_name'];
    }

    /**
     * Sets address_name
     *
     * @param mixed $address_name address_name
     *
     * @return self
     */
    public function setAddressName($address_name)
    {
        if (is_null($address_name)) {
            array_push($this->openAPINullablesSetToNull, 'address_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_name'] = $address_name;

        return $this;
    }

    /**
     * Gets country
     *
     * @return mixed|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param mixed|null $country Angiver det land personen er indrejst fra eller udrejst til
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return mixed|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param mixed|null $country_code Angiver det land personen er indrejst fra eller udrejst til
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            array_push($this->openAPINullablesSetToNull, 'country_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets address_line_1
     *
     * @return mixed|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line_1'];
    }

    /**
     * Sets address_line_1
     *
     * @param mixed|null $address_line_1 Fritekst om udenlandsadresser
     *
     * @return self
     */
    public function setAddressLine1($address_line_1)
    {
        if (is_null($address_line_1)) {
            array_push($this->openAPINullablesSetToNull, 'address_line_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line_1'] = $address_line_1;

        return $this;
    }

    /**
     * Gets address_line_2
     *
     * @return mixed|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line_2'];
    }

    /**
     * Sets address_line_2
     *
     * @param mixed|null $address_line_2 Fritekst om udenlandsadresser
     *
     * @return self
     */
    public function setAddressLine2($address_line_2)
    {
        if (is_null($address_line_2)) {
            array_push($this->openAPINullablesSetToNull, 'address_line_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line_2'] = $address_line_2;

        return $this;
    }

    /**
     * Gets address_line_3
     *
     * @return mixed|null
     */
    public function getAddressLine3()
    {
        return $this->container['address_line_3'];
    }

    /**
     * Sets address_line_3
     *
     * @param mixed|null $address_line_3 Fritekst om udenlandsadresser
     *
     * @return self
     */
    public function setAddressLine3($address_line_3)
    {
        if (is_null($address_line_3)) {
            array_push($this->openAPINullablesSetToNull, 'address_line_3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line_3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line_3'] = $address_line_3;

        return $this;
    }

    /**
     * Gets address_line_4
     *
     * @return mixed|null
     */
    public function getAddressLine4()
    {
        return $this->container['address_line_4'];
    }

    /**
     * Sets address_line_4
     *
     * @param mixed|null $address_line_4 Fritekst om udenlandsadresser
     *
     * @return self
     */
    public function setAddressLine4($address_line_4)
    {
        if (is_null($address_line_4)) {
            array_push($this->openAPINullablesSetToNull, 'address_line_4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line_4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line_4'] = $address_line_4;

        return $this;
    }

    /**
     * Gets address_line_5
     *
     * @return mixed|null
     */
    public function getAddressLine5()
    {
        return $this->container['address_line_5'];
    }

    /**
     * Sets address_line_5
     *
     * @param mixed|null $address_line_5 Fritekst om udenlandsadresser
     *
     * @return self
     */
    public function setAddressLine5($address_line_5)
    {
        if (is_null($address_line_5)) {
            array_push($this->openAPINullablesSetToNull, 'address_line_5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line_5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line_5'] = $address_line_5;

        return $this;
    }

    /**
     * Gets credit_alert
     *
     * @return mixed|null
     */
    public function getCreditAlert()
    {
        return $this->container['credit_alert'];
    }

    /**
     * Sets credit_alert
     *
     * @param mixed|null $credit_alert Angiver om personen har en beskyttelse af typen kreditadvarsel
     *
     * @return self
     */
    public function setCreditAlert($credit_alert)
    {
        if (is_null($credit_alert)) {
            array_push($this->openAPINullablesSetToNull, 'credit_alert');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credit_alert', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['credit_alert'] = $credit_alert;

        return $this;
    }

    /**
     * Gets marketing_protection
     *
     * @return mixed|null
     */
    public function getMarketingProtection()
    {
        return $this->container['marketing_protection'];
    }

    /**
     * Sets marketing_protection
     *
     * @param mixed|null $marketing_protection Angiver om personen har en beskyttelse af typen markedsfoering
     *
     * @return self
     */
    public function setMarketingProtection($marketing_protection)
    {
        if (is_null($marketing_protection)) {
            array_push($this->openAPINullablesSetToNull, 'marketing_protection');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('marketing_protection', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['marketing_protection'] = $marketing_protection;

        return $this;
    }

    /**
     * Gets local_directory_protection
     *
     * @return mixed|null
     */
    public function getLocalDirectoryProtection()
    {
        return $this->container['local_directory_protection'];
    }

    /**
     * Sets local_directory_protection
     *
     * @param mixed|null $local_directory_protection Angiver om personen har en beskyttelse af typen lokal vejviser
     *
     * @return self
     */
    public function setLocalDirectoryProtection($local_directory_protection)
    {
        if (is_null($local_directory_protection)) {
            array_push($this->openAPINullablesSetToNull, 'local_directory_protection');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('local_directory_protection', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['local_directory_protection'] = $local_directory_protection;

        return $this;
    }

    /**
     * Gets name_and_address_protection
     *
     * @return mixed|null
     */
    public function getNameAndAddressProtection()
    {
        return $this->container['name_and_address_protection'];
    }

    /**
     * Sets name_and_address_protection
     *
     * @param mixed|null $name_and_address_protection Angiver om personen har en beskyttelse af typen navne og adresse beskyttekse
     *
     * @return self
     */
    public function setNameAndAddressProtection($name_and_address_protection)
    {
        if (is_null($name_and_address_protection)) {
            array_push($this->openAPINullablesSetToNull, 'name_and_address_protection');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name_and_address_protection', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name_and_address_protection'] = $name_and_address_protection;

        return $this;
    }

    /**
     * Gets unit_number
     *
     * @return mixed|null
     */
    public function getUnitNumber()
    {
        return $this->container['unit_number'];
    }

    /**
     * Sets unit_number
     *
     * @param mixed|null $unit_number Reference to a CVR person
     *
     * @return self
     */
    public function setUnitNumber($unit_number)
    {
        if (is_null($unit_number)) {
            array_push($this->openAPINullablesSetToNull, 'unit_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_number'] = $unit_number;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\DARAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\DARAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


