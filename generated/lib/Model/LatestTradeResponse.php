<?php
/**
 * LatestTradeResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LatestTradeResponse Class Doc Comment
 *
 * @category Class
 * @description Base class for a model representing and defining a Materialized View.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LatestTradeResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LatestTradeResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'factor' => 'mixed',
        'received_share' => 'mixed',
        'released_share' => 'mixed',
        'currency' => '\OpenAPI\Client\Model\CurrencyEnum',
        'trade_date' => 'mixed',
        'acquisition_method' => '\OpenAPI\Client\Model\AcquisitionMethodEnum',
        'purchase_price_total' => 'mixed',
        'purchase_price_total_dkk' => 'mixed',
        'purchase_price_total_adjusted' => 'mixed',
        'number_properties' => 'mixed',
        'bfe_numbers' => 'mixed',
        'area' => '\OpenAPI\Client\Model\TradeParametersArea',
        'sqm_price' => '\OpenAPI\Client\Model\TradeParametersSqm'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'factor' => null,
        'received_share' => null,
        'released_share' => null,
        'currency' => null,
        'trade_date' => 'date',
        'acquisition_method' => null,
        'purchase_price_total' => null,
        'purchase_price_total_dkk' => null,
        'purchase_price_total_adjusted' => null,
        'number_properties' => null,
        'bfe_numbers' => null,
        'area' => null,
        'sqm_price' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'factor' => true,
		'received_share' => true,
		'released_share' => true,
		'currency' => false,
		'trade_date' => true,
		'acquisition_method' => false,
		'purchase_price_total' => true,
		'purchase_price_total_dkk' => true,
		'purchase_price_total_adjusted' => true,
		'number_properties' => true,
		'bfe_numbers' => true,
		'area' => false,
		'sqm_price' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'factor' => 'factor',
        'received_share' => 'received_share',
        'released_share' => 'released_share',
        'currency' => 'currency',
        'trade_date' => 'trade_date',
        'acquisition_method' => 'acquisition_method',
        'purchase_price_total' => 'purchase_price_total',
        'purchase_price_total_dkk' => 'purchase_price_total_dkk',
        'purchase_price_total_adjusted' => 'purchase_price_total_adjusted',
        'number_properties' => 'number_properties',
        'bfe_numbers' => 'bfe_numbers',
        'area' => 'area',
        'sqm_price' => 'sqm_price'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'factor' => 'setFactor',
        'received_share' => 'setReceivedShare',
        'released_share' => 'setReleasedShare',
        'currency' => 'setCurrency',
        'trade_date' => 'setTradeDate',
        'acquisition_method' => 'setAcquisitionMethod',
        'purchase_price_total' => 'setPurchasePriceTotal',
        'purchase_price_total_dkk' => 'setPurchasePriceTotalDkk',
        'purchase_price_total_adjusted' => 'setPurchasePriceTotalAdjusted',
        'number_properties' => 'setNumberProperties',
        'bfe_numbers' => 'setBfeNumbers',
        'area' => 'setArea',
        'sqm_price' => 'setSqmPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'factor' => 'getFactor',
        'received_share' => 'getReceivedShare',
        'released_share' => 'getReleasedShare',
        'currency' => 'getCurrency',
        'trade_date' => 'getTradeDate',
        'acquisition_method' => 'getAcquisitionMethod',
        'purchase_price_total' => 'getPurchasePriceTotal',
        'purchase_price_total_dkk' => 'getPurchasePriceTotalDkk',
        'purchase_price_total_adjusted' => 'getPurchasePriceTotalAdjusted',
        'number_properties' => 'getNumberProperties',
        'bfe_numbers' => 'getBfeNumbers',
        'area' => 'getArea',
        'sqm_price' => 'getSqmPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('factor', $data ?? [], null);
        $this->setIfExists('received_share', $data ?? [], null);
        $this->setIfExists('released_share', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('trade_date', $data ?? [], null);
        $this->setIfExists('acquisition_method', $data ?? [], null);
        $this->setIfExists('purchase_price_total', $data ?? [], null);
        $this->setIfExists('purchase_price_total_dkk', $data ?? [], null);
        $this->setIfExists('purchase_price_total_adjusted', $data ?? [], null);
        $this->setIfExists('number_properties', $data ?? [], null);
        $this->setIfExists('bfe_numbers', $data ?? [], null);
        $this->setIfExists('area', $data ?? [], null);
        $this->setIfExists('sqm_price', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['factor'] === null) {
            $invalidProperties[] = "'factor' can't be null";
        }
        if ($this->container['trade_date'] === null) {
            $invalidProperties[] = "'trade_date' can't be null";
        }
        if ($this->container['number_properties'] === null) {
            $invalidProperties[] = "'number_properties' can't be null";
        }
        if ($this->container['bfe_numbers'] === null) {
            $invalidProperties[] = "'bfe_numbers' can't be null";
        }
        if ($this->container['area'] === null) {
            $invalidProperties[] = "'area' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets factor
     *
     * @return mixed
     */
    public function getFactor()
    {
        return $this->container['factor'];
    }

    /**
     * Sets factor
     *
     * @param mixed $factor Weight factor to normalise purchase price reflecting real value of properties.
     *
     * @return self
     */
    public function setFactor($factor)
    {
        if (is_null($factor)) {
            array_push($this->openAPINullablesSetToNull, 'factor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('factor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['factor'] = $factor;

        return $this;
    }

    /**
     * Gets received_share
     *
     * @return mixed|null
     */
    public function getReceivedShare()
    {
        return $this->container['received_share'];
    }

    /**
     * Sets received_share
     *
     * @param mixed|null $received_share received_share
     *
     * @return self
     */
    public function setReceivedShare($received_share)
    {
        if (is_null($received_share)) {
            array_push($this->openAPINullablesSetToNull, 'received_share');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('received_share', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['received_share'] = $received_share;

        return $this;
    }

    /**
     * Gets released_share
     *
     * @return mixed|null
     */
    public function getReleasedShare()
    {
        return $this->container['released_share'];
    }

    /**
     * Sets released_share
     *
     * @param mixed|null $released_share released_share
     *
     * @return self
     */
    public function setReleasedShare($released_share)
    {
        if (is_null($released_share)) {
            array_push($this->openAPINullablesSetToNull, 'released_share');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('released_share', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['released_share'] = $released_share;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\CurrencyEnum|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\CurrencyEnum|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets trade_date
     *
     * @return mixed
     */
    public function getTradeDate()
    {
        return $this->container['trade_date'];
    }

    /**
     * Sets trade_date
     *
     * @param mixed $trade_date trade_date
     *
     * @return self
     */
    public function setTradeDate($trade_date)
    {
        if (is_null($trade_date)) {
            array_push($this->openAPINullablesSetToNull, 'trade_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trade_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trade_date'] = $trade_date;

        return $this;
    }

    /**
     * Gets acquisition_method
     *
     * @return \OpenAPI\Client\Model\AcquisitionMethodEnum|null
     */
    public function getAcquisitionMethod()
    {
        return $this->container['acquisition_method'];
    }

    /**
     * Sets acquisition_method
     *
     * @param \OpenAPI\Client\Model\AcquisitionMethodEnum|null $acquisition_method acquisition_method
     *
     * @return self
     */
    public function setAcquisitionMethod($acquisition_method)
    {
        if (is_null($acquisition_method)) {
            throw new \InvalidArgumentException('non-nullable acquisition_method cannot be null');
        }
        $this->container['acquisition_method'] = $acquisition_method;

        return $this;
    }

    /**
     * Gets purchase_price_total
     *
     * @return mixed|null
     */
    public function getPurchasePriceTotal()
    {
        return $this->container['purchase_price_total'];
    }

    /**
     * Sets purchase_price_total
     *
     * @param mixed|null $purchase_price_total purchase_price_total
     *
     * @return self
     */
    public function setPurchasePriceTotal($purchase_price_total)
    {
        if (is_null($purchase_price_total)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_price_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_price_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchase_price_total'] = $purchase_price_total;

        return $this;
    }

    /**
     * Gets purchase_price_total_dkk
     *
     * @return mixed|null
     */
    public function getPurchasePriceTotalDkk()
    {
        return $this->container['purchase_price_total_dkk'];
    }

    /**
     * Sets purchase_price_total_dkk
     *
     * @param mixed|null $purchase_price_total_dkk Purchase Price Total converted to DKK
     *
     * @return self
     */
    public function setPurchasePriceTotalDkk($purchase_price_total_dkk)
    {
        if (is_null($purchase_price_total_dkk)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_price_total_dkk');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_price_total_dkk', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchase_price_total_dkk'] = $purchase_price_total_dkk;

        return $this;
    }

    /**
     * Gets purchase_price_total_adjusted
     *
     * @return mixed|null
     */
    public function getPurchasePriceTotalAdjusted()
    {
        return $this->container['purchase_price_total_adjusted'];
    }

    /**
     * Sets purchase_price_total_adjusted
     *
     * @param mixed|null $purchase_price_total_adjusted Purchase Price Total adjusted for traded share and converted to DKK
     *
     * @return self
     */
    public function setPurchasePriceTotalAdjusted($purchase_price_total_adjusted)
    {
        if (is_null($purchase_price_total_adjusted)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_price_total_adjusted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_price_total_adjusted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchase_price_total_adjusted'] = $purchase_price_total_adjusted;

        return $this;
    }

    /**
     * Gets number_properties
     *
     * @return mixed
     */
    public function getNumberProperties()
    {
        return $this->container['number_properties'];
    }

    /**
     * Sets number_properties
     *
     * @param mixed $number_properties number_properties
     *
     * @return self
     */
    public function setNumberProperties($number_properties)
    {
        if (is_null($number_properties)) {
            array_push($this->openAPINullablesSetToNull, 'number_properties');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_properties', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_properties'] = $number_properties;

        return $this;
    }

    /**
     * Gets bfe_numbers
     *
     * @return mixed
     */
    public function getBfeNumbers()
    {
        return $this->container['bfe_numbers'];
    }

    /**
     * Sets bfe_numbers
     *
     * @param mixed $bfe_numbers bfe_numbers
     *
     * @return self
     */
    public function setBfeNumbers($bfe_numbers)
    {
        if (is_null($bfe_numbers)) {
            array_push($this->openAPINullablesSetToNull, 'bfe_numbers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bfe_numbers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bfe_numbers'] = $bfe_numbers;

        return $this;
    }

    /**
     * Gets area
     *
     * @return \OpenAPI\Client\Model\TradeParametersArea
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param \OpenAPI\Client\Model\TradeParametersArea $area area
     *
     * @return self
     */
    public function setArea($area)
    {
        if (is_null($area)) {
            throw new \InvalidArgumentException('non-nullable area cannot be null');
        }
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets sqm_price
     *
     * @return \OpenAPI\Client\Model\TradeParametersSqm|null
     */
    public function getSqmPrice()
    {
        return $this->container['sqm_price'];
    }

    /**
     * Sets sqm_price
     *
     * @param \OpenAPI\Client\Model\TradeParametersSqm|null $sqm_price sqm_price
     *
     * @return self
     */
    public function setSqmPrice($sqm_price)
    {
        if (is_null($sqm_price)) {
            throw new \InvalidArgumentException('non-nullable sqm_price cannot be null');
        }
        $this->container['sqm_price'] = $sqm_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


