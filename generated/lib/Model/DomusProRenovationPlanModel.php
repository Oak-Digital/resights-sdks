<?php
/**
 * DomusProRenovationPlanModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DomusProRenovationPlanModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomusProRenovationPlanModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DomusProRenovationPlanModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'mixed',
        'decision_date' => 'mixed',
        'deleted' => 'mixed',
        'execution_year' => 'mixed',
        'external_comments' => 'mixed',
        'latest_update' => 'mixed',
        'renovation_type_identifier' => 'mixed',
        'renovation_type_name' => 'mixed',
        'renovation_type_includes' => 'mixed',
        'association_document' => '\OpenAPI\Client\Model\DomusProDocumentModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'decision_date' => 'date',
        'deleted' => null,
        'execution_year' => null,
        'external_comments' => null,
        'latest_update' => 'date-time',
        'renovation_type_identifier' => null,
        'renovation_type_name' => null,
        'renovation_type_includes' => null,
        'association_document' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => true,
		'decision_date' => true,
		'deleted' => true,
		'execution_year' => true,
		'external_comments' => true,
		'latest_update' => true,
		'renovation_type_identifier' => true,
		'renovation_type_name' => true,
		'renovation_type_includes' => true,
		'association_document' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'decision_date' => 'decisionDate',
        'deleted' => 'deleted',
        'execution_year' => 'executionYear',
        'external_comments' => 'externalComments',
        'latest_update' => 'latestUpdate',
        'renovation_type_identifier' => 'renovationTypeIdentifier',
        'renovation_type_name' => 'renovationTypeName',
        'renovation_type_includes' => 'renovationTypeIncludes',
        'association_document' => 'associationDocument'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'decision_date' => 'setDecisionDate',
        'deleted' => 'setDeleted',
        'execution_year' => 'setExecutionYear',
        'external_comments' => 'setExternalComments',
        'latest_update' => 'setLatestUpdate',
        'renovation_type_identifier' => 'setRenovationTypeIdentifier',
        'renovation_type_name' => 'setRenovationTypeName',
        'renovation_type_includes' => 'setRenovationTypeIncludes',
        'association_document' => 'setAssociationDocument'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'decision_date' => 'getDecisionDate',
        'deleted' => 'getDeleted',
        'execution_year' => 'getExecutionYear',
        'external_comments' => 'getExternalComments',
        'latest_update' => 'getLatestUpdate',
        'renovation_type_identifier' => 'getRenovationTypeIdentifier',
        'renovation_type_name' => 'getRenovationTypeName',
        'renovation_type_includes' => 'getRenovationTypeIncludes',
        'association_document' => 'getAssociationDocument'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('decision_date', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('execution_year', $data ?? [], null);
        $this->setIfExists('external_comments', $data ?? [], null);
        $this->setIfExists('latest_update', $data ?? [], null);
        $this->setIfExists('renovation_type_identifier', $data ?? [], null);
        $this->setIfExists('renovation_type_name', $data ?? [], null);
        $this->setIfExists('renovation_type_includes', $data ?? [], null);
        $this->setIfExists('association_document', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['decision_date'] === null) {
            $invalidProperties[] = "'decision_date' can't be null";
        }
        if ($this->container['deleted'] === null) {
            $invalidProperties[] = "'deleted' can't be null";
        }
        if ($this->container['latest_update'] === null) {
            $invalidProperties[] = "'latest_update' can't be null";
        }
        if ($this->container['renovation_type_identifier'] === null) {
            $invalidProperties[] = "'renovation_type_identifier' can't be null";
        }
        if ($this->container['renovation_type_name'] === null) {
            $invalidProperties[] = "'renovation_type_name' can't be null";
        }
        if ($this->container['renovation_type_includes'] === null) {
            $invalidProperties[] = "'renovation_type_includes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return mixed|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param mixed|null $amount Arbejdets type
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            array_push($this->openAPINullablesSetToNull, 'amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets decision_date
     *
     * @return mixed
     */
    public function getDecisionDate()
    {
        return $this->container['decision_date'];
    }

    /**
     * Sets decision_date
     *
     * @param mixed $decision_date Dette er normalt datoen for den generalforsamling hvor det blev vedtaget at der planlÃ¦gges efter denne opgave
     *
     * @return self
     */
    public function setDecisionDate($decision_date)
    {
        if (is_null($decision_date)) {
            array_push($this->openAPINullablesSetToNull, 'decision_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('decision_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['decision_date'] = $decision_date;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return mixed
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param mixed $deleted Er renoveringsplanen markeret til sletning
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            array_push($this->openAPINullablesSetToNull, 'deleted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets execution_year
     *
     * @return mixed|null
     */
    public function getExecutionYear()
    {
        return $this->container['execution_year'];
    }

    /**
     * Sets execution_year
     *
     * @param mixed|null $execution_year Ã…ret hvor opgaven planlÃ¦gges gennemfÃ¸rt. Hvis der f.eks. stÃ¥r 'PÃ¥begyndes regnskabsÃ¥ret 2019/20', sÃ¥ angives det laveste: '2019'
     *
     * @return self
     */
    public function setExecutionYear($execution_year)
    {
        if (is_null($execution_year)) {
            array_push($this->openAPINullablesSetToNull, 'execution_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('execution_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['execution_year'] = $execution_year;

        return $this;
    }

    /**
     * Gets external_comments
     *
     * @return mixed|null
     */
    public function getExternalComments()
    {
        return $this->container['external_comments'];
    }

    /**
     * Sets external_comments
     *
     * @param mixed|null $external_comments Eksterne bemÃ¦rkninger
     *
     * @return self
     */
    public function setExternalComments($external_comments)
    {
        if (is_null($external_comments)) {
            array_push($this->openAPINullablesSetToNull, 'external_comments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_comments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_comments'] = $external_comments;

        return $this;
    }

    /**
     * Gets latest_update
     *
     * @return mixed
     */
    public function getLatestUpdate()
    {
        return $this->container['latest_update'];
    }

    /**
     * Sets latest_update
     *
     * @param mixed $latest_update Senest opdateret
     *
     * @return self
     */
    public function setLatestUpdate($latest_update)
    {
        if (is_null($latest_update)) {
            array_push($this->openAPINullablesSetToNull, 'latest_update');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('latest_update', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['latest_update'] = $latest_update;

        return $this;
    }

    /**
     * Gets renovation_type_identifier
     *
     * @return mixed
     */
    public function getRenovationTypeIdentifier()
    {
        return $this->container['renovation_type_identifier'];
    }

    /**
     * Sets renovation_type_identifier
     *
     * @param mixed $renovation_type_identifier renovation_type_identifier
     *
     * @return self
     */
    public function setRenovationTypeIdentifier($renovation_type_identifier)
    {
        if (is_null($renovation_type_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'renovation_type_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('renovation_type_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['renovation_type_identifier'] = $renovation_type_identifier;

        return $this;
    }

    /**
     * Gets renovation_type_name
     *
     * @return mixed
     */
    public function getRenovationTypeName()
    {
        return $this->container['renovation_type_name'];
    }

    /**
     * Sets renovation_type_name
     *
     * @param mixed $renovation_type_name Arbejdets type
     *
     * @return self
     */
    public function setRenovationTypeName($renovation_type_name)
    {
        if (is_null($renovation_type_name)) {
            array_push($this->openAPINullablesSetToNull, 'renovation_type_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('renovation_type_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['renovation_type_name'] = $renovation_type_name;

        return $this;
    }

    /**
     * Gets renovation_type_includes
     *
     * @return mixed
     */
    public function getRenovationTypeIncludes()
    {
        return $this->container['renovation_type_includes'];
    }

    /**
     * Sets renovation_type_includes
     *
     * @param mixed $renovation_type_includes Typer af arbejde som typisk indgÃ¥r under dette hovedpunkt. Kan dog variere efter lokal praksis
     *
     * @return self
     */
    public function setRenovationTypeIncludes($renovation_type_includes)
    {
        if (is_null($renovation_type_includes)) {
            array_push($this->openAPINullablesSetToNull, 'renovation_type_includes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('renovation_type_includes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['renovation_type_includes'] = $renovation_type_includes;

        return $this;
    }

    /**
     * Gets association_document
     *
     * @return \OpenAPI\Client\Model\DomusProDocumentModel|null
     */
    public function getAssociationDocument()
    {
        return $this->container['association_document'];
    }

    /**
     * Sets association_document
     *
     * @param \OpenAPI\Client\Model\DomusProDocumentModel|null $association_document association_document
     *
     * @return self
     */
    public function setAssociationDocument($association_document)
    {
        if (is_null($association_document)) {
            throw new \InvalidArgumentException('non-nullable association_document cannot be null');
        }
        $this->container['association_document'] = $association_document;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


