<?php
/**
 * BFENumberPropertyResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BFENumberPropertyResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BFENumberPropertyResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BFENumberPropertyResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bfe_number' => 'mixed',
        'bbr' => '\OpenAPI\Client\Model\BBRResponse',
        'ebr' => '\OpenAPI\Client\Model\EBRPropertyLocationResponse',
        'sfe' => '\OpenAPI\Client\Model\MATSFEResponse',
        'bpfg' => '\OpenAPI\Client\Model\MATBPFGPoint',
        'bpfgs' => 'mixed',
        'condominium' => '\OpenAPI\Client\Model\MATCondominium',
        'condominiums' => 'mixed',
        'owners' => 'mixed',
        'administrator' => '\OpenAPI\Client\Model\EJFAdministratorResponse',
        'valuation' => '\OpenAPI\Client\Model\VURValuationResponse',
        'tax' => '\OpenAPI\Client\Model\SKATTaxResponse',
        'tenants' => '\OpenAPI\Client\Model\TenantsResponse',
        'overview' => '\OpenAPI\Client\Model\BFENumberOverview'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bfe_number' => null,
        'bbr' => null,
        'ebr' => null,
        'sfe' => null,
        'bpfg' => null,
        'bpfgs' => null,
        'condominium' => null,
        'condominiums' => null,
        'owners' => null,
        'administrator' => null,
        'valuation' => null,
        'tax' => null,
        'tenants' => null,
        'overview' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bfe_number' => true,
		'bbr' => false,
		'ebr' => false,
		'sfe' => false,
		'bpfg' => false,
		'bpfgs' => true,
		'condominium' => false,
		'condominiums' => true,
		'owners' => true,
		'administrator' => false,
		'valuation' => false,
		'tax' => false,
		'tenants' => false,
		'overview' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bfe_number' => 'bfe_number',
        'bbr' => 'bbr',
        'ebr' => 'ebr',
        'sfe' => 'sfe',
        'bpfg' => 'bpfg',
        'bpfgs' => 'bpfgs',
        'condominium' => 'condominium',
        'condominiums' => 'condominiums',
        'owners' => 'owners',
        'administrator' => 'administrator',
        'valuation' => 'valuation',
        'tax' => 'tax',
        'tenants' => 'tenants',
        'overview' => 'overview'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bfe_number' => 'setBfeNumber',
        'bbr' => 'setBbr',
        'ebr' => 'setEbr',
        'sfe' => 'setSfe',
        'bpfg' => 'setBpfg',
        'bpfgs' => 'setBpfgs',
        'condominium' => 'setCondominium',
        'condominiums' => 'setCondominiums',
        'owners' => 'setOwners',
        'administrator' => 'setAdministrator',
        'valuation' => 'setValuation',
        'tax' => 'setTax',
        'tenants' => 'setTenants',
        'overview' => 'setOverview'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bfe_number' => 'getBfeNumber',
        'bbr' => 'getBbr',
        'ebr' => 'getEbr',
        'sfe' => 'getSfe',
        'bpfg' => 'getBpfg',
        'bpfgs' => 'getBpfgs',
        'condominium' => 'getCondominium',
        'condominiums' => 'getCondominiums',
        'owners' => 'getOwners',
        'administrator' => 'getAdministrator',
        'valuation' => 'getValuation',
        'tax' => 'getTax',
        'tenants' => 'getTenants',
        'overview' => 'getOverview'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bfe_number', $data ?? [], null);
        $this->setIfExists('bbr', $data ?? [], null);
        $this->setIfExists('ebr', $data ?? [], null);
        $this->setIfExists('sfe', $data ?? [], null);
        $this->setIfExists('bpfg', $data ?? [], null);
        $this->setIfExists('bpfgs', $data ?? [], null);
        $this->setIfExists('condominium', $data ?? [], null);
        $this->setIfExists('condominiums', $data ?? [], null);
        $this->setIfExists('owners', $data ?? [], null);
        $this->setIfExists('administrator', $data ?? [], null);
        $this->setIfExists('valuation', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('tenants', $data ?? [], null);
        $this->setIfExists('overview', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bfe_number'] === null) {
            $invalidProperties[] = "'bfe_number' can't be null";
        }
        if ($this->container['bbr'] === null) {
            $invalidProperties[] = "'bbr' can't be null";
        }
        if ($this->container['ebr'] === null) {
            $invalidProperties[] = "'ebr' can't be null";
        }
        if ($this->container['bpfgs'] === null) {
            $invalidProperties[] = "'bpfgs' can't be null";
        }
        if ($this->container['condominiums'] === null) {
            $invalidProperties[] = "'condominiums' can't be null";
        }
        if ($this->container['owners'] === null) {
            $invalidProperties[] = "'owners' can't be null";
        }
        if ($this->container['tenants'] === null) {
            $invalidProperties[] = "'tenants' can't be null";
        }
        if ($this->container['overview'] === null) {
            $invalidProperties[] = "'overview' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bfe_number
     *
     * @return mixed
     */
    public function getBfeNumber()
    {
        return $this->container['bfe_number'];
    }

    /**
     * Sets bfe_number
     *
     * @param mixed $bfe_number bfe_number
     *
     * @return self
     */
    public function setBfeNumber($bfe_number)
    {
        if (is_null($bfe_number)) {
            array_push($this->openAPINullablesSetToNull, 'bfe_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bfe_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bfe_number'] = $bfe_number;

        return $this;
    }

    /**
     * Gets bbr
     *
     * @return \OpenAPI\Client\Model\BBRResponse
     */
    public function getBbr()
    {
        return $this->container['bbr'];
    }

    /**
     * Sets bbr
     *
     * @param \OpenAPI\Client\Model\BBRResponse $bbr bbr
     *
     * @return self
     */
    public function setBbr($bbr)
    {
        if (is_null($bbr)) {
            throw new \InvalidArgumentException('non-nullable bbr cannot be null');
        }
        $this->container['bbr'] = $bbr;

        return $this;
    }

    /**
     * Gets ebr
     *
     * @return \OpenAPI\Client\Model\EBRPropertyLocationResponse
     */
    public function getEbr()
    {
        return $this->container['ebr'];
    }

    /**
     * Sets ebr
     *
     * @param \OpenAPI\Client\Model\EBRPropertyLocationResponse $ebr ebr
     *
     * @return self
     */
    public function setEbr($ebr)
    {
        if (is_null($ebr)) {
            throw new \InvalidArgumentException('non-nullable ebr cannot be null');
        }
        $this->container['ebr'] = $ebr;

        return $this;
    }

    /**
     * Gets sfe
     *
     * @return \OpenAPI\Client\Model\MATSFEResponse|null
     */
    public function getSfe()
    {
        return $this->container['sfe'];
    }

    /**
     * Sets sfe
     *
     * @param \OpenAPI\Client\Model\MATSFEResponse|null $sfe sfe
     *
     * @return self
     */
    public function setSfe($sfe)
    {
        if (is_null($sfe)) {
            throw new \InvalidArgumentException('non-nullable sfe cannot be null');
        }
        $this->container['sfe'] = $sfe;

        return $this;
    }

    /**
     * Gets bpfg
     *
     * @return \OpenAPI\Client\Model\MATBPFGPoint|null
     */
    public function getBpfg()
    {
        return $this->container['bpfg'];
    }

    /**
     * Sets bpfg
     *
     * @param \OpenAPI\Client\Model\MATBPFGPoint|null $bpfg bpfg
     *
     * @return self
     */
    public function setBpfg($bpfg)
    {
        if (is_null($bpfg)) {
            throw new \InvalidArgumentException('non-nullable bpfg cannot be null');
        }
        $this->container['bpfg'] = $bpfg;

        return $this;
    }

    /**
     * Gets bpfgs
     *
     * @return mixed
     */
    public function getBpfgs()
    {
        return $this->container['bpfgs'];
    }

    /**
     * Sets bpfgs
     *
     * @param mixed $bpfgs bpfgs
     *
     * @return self
     */
    public function setBpfgs($bpfgs)
    {
        if (is_null($bpfgs)) {
            array_push($this->openAPINullablesSetToNull, 'bpfgs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bpfgs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bpfgs'] = $bpfgs;

        return $this;
    }

    /**
     * Gets condominium
     *
     * @return \OpenAPI\Client\Model\MATCondominium|null
     */
    public function getCondominium()
    {
        return $this->container['condominium'];
    }

    /**
     * Sets condominium
     *
     * @param \OpenAPI\Client\Model\MATCondominium|null $condominium condominium
     *
     * @return self
     */
    public function setCondominium($condominium)
    {
        if (is_null($condominium)) {
            throw new \InvalidArgumentException('non-nullable condominium cannot be null');
        }
        $this->container['condominium'] = $condominium;

        return $this;
    }

    /**
     * Gets condominiums
     *
     * @return mixed
     */
    public function getCondominiums()
    {
        return $this->container['condominiums'];
    }

    /**
     * Sets condominiums
     *
     * @param mixed $condominiums condominiums
     *
     * @return self
     */
    public function setCondominiums($condominiums)
    {
        if (is_null($condominiums)) {
            array_push($this->openAPINullablesSetToNull, 'condominiums');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condominiums', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['condominiums'] = $condominiums;

        return $this;
    }

    /**
     * Gets owners
     *
     * @return mixed
     */
    public function getOwners()
    {
        return $this->container['owners'];
    }

    /**
     * Sets owners
     *
     * @param mixed $owners owners
     *
     * @return self
     */
    public function setOwners($owners)
    {
        if (is_null($owners)) {
            array_push($this->openAPINullablesSetToNull, 'owners');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('owners', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['owners'] = $owners;

        return $this;
    }

    /**
     * Gets administrator
     *
     * @return \OpenAPI\Client\Model\EJFAdministratorResponse|null
     */
    public function getAdministrator()
    {
        return $this->container['administrator'];
    }

    /**
     * Sets administrator
     *
     * @param \OpenAPI\Client\Model\EJFAdministratorResponse|null $administrator administrator
     *
     * @return self
     */
    public function setAdministrator($administrator)
    {
        if (is_null($administrator)) {
            throw new \InvalidArgumentException('non-nullable administrator cannot be null');
        }
        $this->container['administrator'] = $administrator;

        return $this;
    }

    /**
     * Gets valuation
     *
     * @return \OpenAPI\Client\Model\VURValuationResponse|null
     */
    public function getValuation()
    {
        return $this->container['valuation'];
    }

    /**
     * Sets valuation
     *
     * @param \OpenAPI\Client\Model\VURValuationResponse|null $valuation valuation
     *
     * @return self
     */
    public function setValuation($valuation)
    {
        if (is_null($valuation)) {
            throw new \InvalidArgumentException('non-nullable valuation cannot be null');
        }
        $this->container['valuation'] = $valuation;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return \OpenAPI\Client\Model\SKATTaxResponse|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param \OpenAPI\Client\Model\SKATTaxResponse|null $tax tax
     *
     * @return self
     */
    public function setTax($tax)
    {
        if (is_null($tax)) {
            throw new \InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets tenants
     *
     * @return \OpenAPI\Client\Model\TenantsResponse
     */
    public function getTenants()
    {
        return $this->container['tenants'];
    }

    /**
     * Sets tenants
     *
     * @param \OpenAPI\Client\Model\TenantsResponse $tenants tenants
     *
     * @return self
     */
    public function setTenants($tenants)
    {
        if (is_null($tenants)) {
            throw new \InvalidArgumentException('non-nullable tenants cannot be null');
        }
        $this->container['tenants'] = $tenants;

        return $this;
    }

    /**
     * Gets overview
     *
     * @return \OpenAPI\Client\Model\BFENumberOverview
     */
    public function getOverview()
    {
        return $this->container['overview'];
    }

    /**
     * Sets overview
     *
     * @param \OpenAPI\Client\Model\BFENumberOverview $overview overview
     *
     * @return self
     */
    public function setOverview($overview)
    {
        if (is_null($overview)) {
            throw new \InvalidArgumentException('non-nullable overview cannot be null');
        }
        $this->container['overview'] = $overview;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


