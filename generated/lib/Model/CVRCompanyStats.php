<?php
/**
 * CVRCompanyStats
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CVRCompanyStats Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CVRCompanyStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CVRCompanyStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address_change' => 'mixed',
        'capital' => 'mixed',
        'capital_classes' => 'mixed',
        'ceo_change' => 'mixed',
        'date_of_dissolvement' => 'mixed',
        'date_of_bankruptcy' => 'mixed',
        'director_change' => 'mixed',
        'employees' => '\OpenAPI\Client\Model\CVREmployeeStats',
        'has_email' => 'mixed',
        'has_phone' => 'mixed',
        'has_website' => 'mixed',
        'industry_codes' => 'mixed',
        'is_active' => 'mixed',
        'number_members' => 'mixed',
        'number_members_active' => 'mixed',
        'number_members_inactive' => 'mixed',
        'number_p_units' => 'mixed',
        'number_p_units_active' => 'mixed',
        'number_p_units_inactive' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address_change' => 'date',
        'capital' => null,
        'capital_classes' => null,
        'ceo_change' => 'date',
        'date_of_dissolvement' => 'date',
        'date_of_bankruptcy' => 'date',
        'director_change' => 'date',
        'employees' => null,
        'has_email' => null,
        'has_phone' => null,
        'has_website' => null,
        'industry_codes' => null,
        'is_active' => null,
        'number_members' => null,
        'number_members_active' => null,
        'number_members_inactive' => null,
        'number_p_units' => null,
        'number_p_units_active' => null,
        'number_p_units_inactive' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address_change' => true,
		'capital' => true,
		'capital_classes' => true,
		'ceo_change' => true,
		'date_of_dissolvement' => true,
		'date_of_bankruptcy' => true,
		'director_change' => true,
		'employees' => false,
		'has_email' => true,
		'has_phone' => true,
		'has_website' => true,
		'industry_codes' => true,
		'is_active' => true,
		'number_members' => true,
		'number_members_active' => true,
		'number_members_inactive' => true,
		'number_p_units' => true,
		'number_p_units_active' => true,
		'number_p_units_inactive' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_change' => 'address_change',
        'capital' => 'capital',
        'capital_classes' => 'capital_classes',
        'ceo_change' => 'ceo_change',
        'date_of_dissolvement' => 'date_of_dissolvement',
        'date_of_bankruptcy' => 'date_of_bankruptcy',
        'director_change' => 'director_change',
        'employees' => 'employees',
        'has_email' => 'has_email',
        'has_phone' => 'has_phone',
        'has_website' => 'has_website',
        'industry_codes' => 'industry_codes',
        'is_active' => 'is_active',
        'number_members' => 'number_members',
        'number_members_active' => 'number_members_active',
        'number_members_inactive' => 'number_members_inactive',
        'number_p_units' => 'number_p_units',
        'number_p_units_active' => 'number_p_units_active',
        'number_p_units_inactive' => 'number_p_units_inactive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_change' => 'setAddressChange',
        'capital' => 'setCapital',
        'capital_classes' => 'setCapitalClasses',
        'ceo_change' => 'setCeoChange',
        'date_of_dissolvement' => 'setDateOfDissolvement',
        'date_of_bankruptcy' => 'setDateOfBankruptcy',
        'director_change' => 'setDirectorChange',
        'employees' => 'setEmployees',
        'has_email' => 'setHasEmail',
        'has_phone' => 'setHasPhone',
        'has_website' => 'setHasWebsite',
        'industry_codes' => 'setIndustryCodes',
        'is_active' => 'setIsActive',
        'number_members' => 'setNumberMembers',
        'number_members_active' => 'setNumberMembersActive',
        'number_members_inactive' => 'setNumberMembersInactive',
        'number_p_units' => 'setNumberPUnits',
        'number_p_units_active' => 'setNumberPUnitsActive',
        'number_p_units_inactive' => 'setNumberPUnitsInactive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_change' => 'getAddressChange',
        'capital' => 'getCapital',
        'capital_classes' => 'getCapitalClasses',
        'ceo_change' => 'getCeoChange',
        'date_of_dissolvement' => 'getDateOfDissolvement',
        'date_of_bankruptcy' => 'getDateOfBankruptcy',
        'director_change' => 'getDirectorChange',
        'employees' => 'getEmployees',
        'has_email' => 'getHasEmail',
        'has_phone' => 'getHasPhone',
        'has_website' => 'getHasWebsite',
        'industry_codes' => 'getIndustryCodes',
        'is_active' => 'getIsActive',
        'number_members' => 'getNumberMembers',
        'number_members_active' => 'getNumberMembersActive',
        'number_members_inactive' => 'getNumberMembersInactive',
        'number_p_units' => 'getNumberPUnits',
        'number_p_units_active' => 'getNumberPUnitsActive',
        'number_p_units_inactive' => 'getNumberPUnitsInactive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('address_change', $data ?? [], null);
        $this->setIfExists('capital', $data ?? [], null);
        $this->setIfExists('capital_classes', $data ?? [], null);
        $this->setIfExists('ceo_change', $data ?? [], null);
        $this->setIfExists('date_of_dissolvement', $data ?? [], null);
        $this->setIfExists('date_of_bankruptcy', $data ?? [], null);
        $this->setIfExists('director_change', $data ?? [], null);
        $this->setIfExists('employees', $data ?? [], null);
        $this->setIfExists('has_email', $data ?? [], null);
        $this->setIfExists('has_phone', $data ?? [], null);
        $this->setIfExists('has_website', $data ?? [], null);
        $this->setIfExists('industry_codes', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('number_members', $data ?? [], null);
        $this->setIfExists('number_members_active', $data ?? [], null);
        $this->setIfExists('number_members_inactive', $data ?? [], null);
        $this->setIfExists('number_p_units', $data ?? [], null);
        $this->setIfExists('number_p_units_active', $data ?? [], null);
        $this->setIfExists('number_p_units_inactive', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['employees'] === null) {
            $invalidProperties[] = "'employees' can't be null";
        }
        if ($this->container['has_email'] === null) {
            $invalidProperties[] = "'has_email' can't be null";
        }
        if ($this->container['has_phone'] === null) {
            $invalidProperties[] = "'has_phone' can't be null";
        }
        if ($this->container['has_website'] === null) {
            $invalidProperties[] = "'has_website' can't be null";
        }
        if ($this->container['industry_codes'] === null) {
            $invalidProperties[] = "'industry_codes' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['number_members'] === null) {
            $invalidProperties[] = "'number_members' can't be null";
        }
        if ($this->container['number_members_active'] === null) {
            $invalidProperties[] = "'number_members_active' can't be null";
        }
        if ($this->container['number_members_inactive'] === null) {
            $invalidProperties[] = "'number_members_inactive' can't be null";
        }
        if ($this->container['number_p_units'] === null) {
            $invalidProperties[] = "'number_p_units' can't be null";
        }
        if ($this->container['number_p_units_active'] === null) {
            $invalidProperties[] = "'number_p_units_active' can't be null";
        }
        if ($this->container['number_p_units_inactive'] === null) {
            $invalidProperties[] = "'number_p_units_inactive' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_change
     *
     * @return mixed|null
     */
    public function getAddressChange()
    {
        return $this->container['address_change'];
    }

    /**
     * Sets address_change
     *
     * @param mixed|null $address_change address_change
     *
     * @return self
     */
    public function setAddressChange($address_change)
    {
        if (is_null($address_change)) {
            array_push($this->openAPINullablesSetToNull, 'address_change');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_change', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_change'] = $address_change;

        return $this;
    }

    /**
     * Gets capital
     *
     * @return mixed|null
     */
    public function getCapital()
    {
        return $this->container['capital'];
    }

    /**
     * Sets capital
     *
     * @param mixed|null $capital capital
     *
     * @return self
     */
    public function setCapital($capital)
    {
        if (is_null($capital)) {
            array_push($this->openAPINullablesSetToNull, 'capital');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('capital', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['capital'] = $capital;

        return $this;
    }

    /**
     * Gets capital_classes
     *
     * @return mixed|null
     */
    public function getCapitalClasses()
    {
        return $this->container['capital_classes'];
    }

    /**
     * Sets capital_classes
     *
     * @param mixed|null $capital_classes capital_classes
     *
     * @return self
     */
    public function setCapitalClasses($capital_classes)
    {
        if (is_null($capital_classes)) {
            array_push($this->openAPINullablesSetToNull, 'capital_classes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('capital_classes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['capital_classes'] = $capital_classes;

        return $this;
    }

    /**
     * Gets ceo_change
     *
     * @return mixed|null
     */
    public function getCeoChange()
    {
        return $this->container['ceo_change'];
    }

    /**
     * Sets ceo_change
     *
     * @param mixed|null $ceo_change ceo_change
     *
     * @return self
     */
    public function setCeoChange($ceo_change)
    {
        if (is_null($ceo_change)) {
            array_push($this->openAPINullablesSetToNull, 'ceo_change');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ceo_change', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ceo_change'] = $ceo_change;

        return $this;
    }

    /**
     * Gets date_of_dissolvement
     *
     * @return mixed|null
     */
    public function getDateOfDissolvement()
    {
        return $this->container['date_of_dissolvement'];
    }

    /**
     * Sets date_of_dissolvement
     *
     * @param mixed|null $date_of_dissolvement date_of_dissolvement
     *
     * @return self
     */
    public function setDateOfDissolvement($date_of_dissolvement)
    {
        if (is_null($date_of_dissolvement)) {
            array_push($this->openAPINullablesSetToNull, 'date_of_dissolvement');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_of_dissolvement', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_of_dissolvement'] = $date_of_dissolvement;

        return $this;
    }

    /**
     * Gets date_of_bankruptcy
     *
     * @return mixed|null
     */
    public function getDateOfBankruptcy()
    {
        return $this->container['date_of_bankruptcy'];
    }

    /**
     * Sets date_of_bankruptcy
     *
     * @param mixed|null $date_of_bankruptcy date_of_bankruptcy
     *
     * @return self
     */
    public function setDateOfBankruptcy($date_of_bankruptcy)
    {
        if (is_null($date_of_bankruptcy)) {
            array_push($this->openAPINullablesSetToNull, 'date_of_bankruptcy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_of_bankruptcy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_of_bankruptcy'] = $date_of_bankruptcy;

        return $this;
    }

    /**
     * Gets director_change
     *
     * @return mixed|null
     */
    public function getDirectorChange()
    {
        return $this->container['director_change'];
    }

    /**
     * Sets director_change
     *
     * @param mixed|null $director_change director_change
     *
     * @return self
     */
    public function setDirectorChange($director_change)
    {
        if (is_null($director_change)) {
            array_push($this->openAPINullablesSetToNull, 'director_change');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('director_change', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['director_change'] = $director_change;

        return $this;
    }

    /**
     * Gets employees
     *
     * @return \OpenAPI\Client\Model\CVREmployeeStats
     */
    public function getEmployees()
    {
        return $this->container['employees'];
    }

    /**
     * Sets employees
     *
     * @param \OpenAPI\Client\Model\CVREmployeeStats $employees employees
     *
     * @return self
     */
    public function setEmployees($employees)
    {
        if (is_null($employees)) {
            throw new \InvalidArgumentException('non-nullable employees cannot be null');
        }
        $this->container['employees'] = $employees;

        return $this;
    }

    /**
     * Gets has_email
     *
     * @return mixed
     */
    public function getHasEmail()
    {
        return $this->container['has_email'];
    }

    /**
     * Sets has_email
     *
     * @param mixed $has_email has_email
     *
     * @return self
     */
    public function setHasEmail($has_email)
    {
        if (is_null($has_email)) {
            array_push($this->openAPINullablesSetToNull, 'has_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_email'] = $has_email;

        return $this;
    }

    /**
     * Gets has_phone
     *
     * @return mixed
     */
    public function getHasPhone()
    {
        return $this->container['has_phone'];
    }

    /**
     * Sets has_phone
     *
     * @param mixed $has_phone has_phone
     *
     * @return self
     */
    public function setHasPhone($has_phone)
    {
        if (is_null($has_phone)) {
            array_push($this->openAPINullablesSetToNull, 'has_phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_phone'] = $has_phone;

        return $this;
    }

    /**
     * Gets has_website
     *
     * @return mixed
     */
    public function getHasWebsite()
    {
        return $this->container['has_website'];
    }

    /**
     * Sets has_website
     *
     * @param mixed $has_website has_website
     *
     * @return self
     */
    public function setHasWebsite($has_website)
    {
        if (is_null($has_website)) {
            array_push($this->openAPINullablesSetToNull, 'has_website');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_website', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_website'] = $has_website;

        return $this;
    }

    /**
     * Gets industry_codes
     *
     * @return mixed
     */
    public function getIndustryCodes()
    {
        return $this->container['industry_codes'];
    }

    /**
     * Sets industry_codes
     *
     * @param mixed $industry_codes industry_codes
     *
     * @return self
     */
    public function setIndustryCodes($industry_codes)
    {
        if (is_null($industry_codes)) {
            array_push($this->openAPINullablesSetToNull, 'industry_codes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_codes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industry_codes'] = $industry_codes;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return mixed
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param mixed $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            array_push($this->openAPINullablesSetToNull, 'is_active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets number_members
     *
     * @return mixed
     */
    public function getNumberMembers()
    {
        return $this->container['number_members'];
    }

    /**
     * Sets number_members
     *
     * @param mixed $number_members number_members
     *
     * @return self
     */
    public function setNumberMembers($number_members)
    {
        if (is_null($number_members)) {
            array_push($this->openAPINullablesSetToNull, 'number_members');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_members', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_members'] = $number_members;

        return $this;
    }

    /**
     * Gets number_members_active
     *
     * @return mixed
     */
    public function getNumberMembersActive()
    {
        return $this->container['number_members_active'];
    }

    /**
     * Sets number_members_active
     *
     * @param mixed $number_members_active number_members_active
     *
     * @return self
     */
    public function setNumberMembersActive($number_members_active)
    {
        if (is_null($number_members_active)) {
            array_push($this->openAPINullablesSetToNull, 'number_members_active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_members_active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_members_active'] = $number_members_active;

        return $this;
    }

    /**
     * Gets number_members_inactive
     *
     * @return mixed
     */
    public function getNumberMembersInactive()
    {
        return $this->container['number_members_inactive'];
    }

    /**
     * Sets number_members_inactive
     *
     * @param mixed $number_members_inactive number_members_inactive
     *
     * @return self
     */
    public function setNumberMembersInactive($number_members_inactive)
    {
        if (is_null($number_members_inactive)) {
            array_push($this->openAPINullablesSetToNull, 'number_members_inactive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_members_inactive', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_members_inactive'] = $number_members_inactive;

        return $this;
    }

    /**
     * Gets number_p_units
     *
     * @return mixed
     */
    public function getNumberPUnits()
    {
        return $this->container['number_p_units'];
    }

    /**
     * Sets number_p_units
     *
     * @param mixed $number_p_units number_p_units
     *
     * @return self
     */
    public function setNumberPUnits($number_p_units)
    {
        if (is_null($number_p_units)) {
            array_push($this->openAPINullablesSetToNull, 'number_p_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_p_units', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_p_units'] = $number_p_units;

        return $this;
    }

    /**
     * Gets number_p_units_active
     *
     * @return mixed
     */
    public function getNumberPUnitsActive()
    {
        return $this->container['number_p_units_active'];
    }

    /**
     * Sets number_p_units_active
     *
     * @param mixed $number_p_units_active number_p_units_active
     *
     * @return self
     */
    public function setNumberPUnitsActive($number_p_units_active)
    {
        if (is_null($number_p_units_active)) {
            array_push($this->openAPINullablesSetToNull, 'number_p_units_active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_p_units_active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_p_units_active'] = $number_p_units_active;

        return $this;
    }

    /**
     * Gets number_p_units_inactive
     *
     * @return mixed
     */
    public function getNumberPUnitsInactive()
    {
        return $this->container['number_p_units_inactive'];
    }

    /**
     * Sets number_p_units_inactive
     *
     * @param mixed $number_p_units_inactive number_p_units_inactive
     *
     * @return self
     */
    public function setNumberPUnitsInactive($number_p_units_inactive)
    {
        if (is_null($number_p_units_inactive)) {
            array_push($this->openAPINullablesSetToNull, 'number_p_units_inactive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_p_units_inactive', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_p_units_inactive'] = $number_p_units_inactive;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


