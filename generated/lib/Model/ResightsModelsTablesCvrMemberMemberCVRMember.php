<?php
/**
 * ResightsModelsTablesCvrMemberMemberCVRMember
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ResightsModelsTablesCvrMemberMemberCVRMember Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResightsModelsTablesCvrMemberMemberCVRMember implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'resights__models__tables__cvr__member__member__CVRMember';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'unit_number' => 'mixed',
        'unit_type' => '\OpenAPI\Client\Model\CVRUnitTypeEnum',
        'business_key' => 'mixed',
        'name' => 'mixed',
        'position' => 'mixed',
        'address_secret' => 'mixed',
        'address_secret_exemption' => 'mixed',
        'address_update_stopped' => 'mixed',
        'address_id' => 'mixed',
        'address' => '\OpenAPI\Client\Model\CVRAddress',
        'addresses' => 'mixed',
        'email' => 'mixed',
        'phone_number' => 'mixed',
        'status_code' => 'mixed',
        'effect_actor' => '\OpenAPI\Client\Model\CVREffectActorEnum',
        'data_access' => 'mixed',
        'error_import' => 'mixed',
        'error_registration' => 'mixed',
        'has_future_change' => 'mixed',
        'nearest_future_date' => 'mixed',
        'samt_id' => 'mixed',
        'last_imported' => 'mixed',
        'last_updated' => 'mixed',
        'names' => 'mixed',
        'postal_address' => '\OpenAPI\Client\Model\CVRAddress',
        'postal_addresses' => 'mixed',
        'emails' => 'mixed',
        'phone_numbers' => 'mixed',
        'relations' => 'mixed',
        'key_relations' => 'mixed',
        'attributes' => 'mixed',
        'address_info' => '\OpenAPI\Client\Model\DARAddress',
        'stats' => '\OpenAPI\Client\Model\CVRMemberStats',
        'portfolio_aggs' => '\OpenAPI\Client\Model\PortfolioAggs',
        'title' => 'mixed',
        'ejf_id' => 'mixed',
        'timeline' => 'mixed',
        'network' => '\OpenAPI\Client\Model\CVRNetwork'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'unit_number' => null,
        'unit_type' => null,
        'business_key' => null,
        'name' => null,
        'position' => null,
        'address_secret' => null,
        'address_secret_exemption' => null,
        'address_update_stopped' => null,
        'address_id' => 'uuid',
        'address' => null,
        'addresses' => null,
        'email' => null,
        'phone_number' => null,
        'status_code' => null,
        'effect_actor' => null,
        'data_access' => null,
        'error_import' => null,
        'error_registration' => null,
        'has_future_change' => null,
        'nearest_future_date' => 'date',
        'samt_id' => null,
        'last_imported' => 'date-time',
        'last_updated' => 'date-time',
        'names' => null,
        'postal_address' => null,
        'postal_addresses' => null,
        'emails' => null,
        'phone_numbers' => null,
        'relations' => null,
        'key_relations' => null,
        'attributes' => null,
        'address_info' => null,
        'stats' => null,
        'portfolio_aggs' => null,
        'title' => null,
        'ejf_id' => 'uuid',
        'timeline' => null,
        'network' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'unit_number' => true,
		'unit_type' => false,
		'business_key' => true,
		'name' => true,
		'position' => true,
		'address_secret' => true,
		'address_secret_exemption' => true,
		'address_update_stopped' => true,
		'address_id' => true,
		'address' => false,
		'addresses' => true,
		'email' => true,
		'phone_number' => true,
		'status_code' => true,
		'effect_actor' => false,
		'data_access' => true,
		'error_import' => true,
		'error_registration' => true,
		'has_future_change' => true,
		'nearest_future_date' => true,
		'samt_id' => true,
		'last_imported' => true,
		'last_updated' => true,
		'names' => true,
		'postal_address' => false,
		'postal_addresses' => true,
		'emails' => true,
		'phone_numbers' => true,
		'relations' => true,
		'key_relations' => true,
		'attributes' => true,
		'address_info' => false,
		'stats' => false,
		'portfolio_aggs' => false,
		'title' => true,
		'ejf_id' => true,
		'timeline' => true,
		'network' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_number' => 'unit_number',
        'unit_type' => 'unit_type',
        'business_key' => 'business_key',
        'name' => 'name',
        'position' => 'position',
        'address_secret' => 'address_secret',
        'address_secret_exemption' => 'address_secret_exemption',
        'address_update_stopped' => 'address_update_stopped',
        'address_id' => 'address_id',
        'address' => 'address',
        'addresses' => 'addresses',
        'email' => 'email',
        'phone_number' => 'phone_number',
        'status_code' => 'status_code',
        'effect_actor' => 'effect_actor',
        'data_access' => 'data_access',
        'error_import' => 'error_import',
        'error_registration' => 'error_registration',
        'has_future_change' => 'has_future_change',
        'nearest_future_date' => 'nearest_future_date',
        'samt_id' => 'samt_id',
        'last_imported' => 'last_imported',
        'last_updated' => 'last_updated',
        'names' => 'names',
        'postal_address' => 'postal_address',
        'postal_addresses' => 'postal_addresses',
        'emails' => 'emails',
        'phone_numbers' => 'phone_numbers',
        'relations' => 'relations',
        'key_relations' => 'key_relations',
        'attributes' => 'attributes',
        'address_info' => 'address_info',
        'stats' => 'stats',
        'portfolio_aggs' => 'portfolio_aggs',
        'title' => 'title',
        'ejf_id' => 'ejf_id',
        'timeline' => 'timeline',
        'network' => 'network'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_number' => 'setUnitNumber',
        'unit_type' => 'setUnitType',
        'business_key' => 'setBusinessKey',
        'name' => 'setName',
        'position' => 'setPosition',
        'address_secret' => 'setAddressSecret',
        'address_secret_exemption' => 'setAddressSecretExemption',
        'address_update_stopped' => 'setAddressUpdateStopped',
        'address_id' => 'setAddressId',
        'address' => 'setAddress',
        'addresses' => 'setAddresses',
        'email' => 'setEmail',
        'phone_number' => 'setPhoneNumber',
        'status_code' => 'setStatusCode',
        'effect_actor' => 'setEffectActor',
        'data_access' => 'setDataAccess',
        'error_import' => 'setErrorImport',
        'error_registration' => 'setErrorRegistration',
        'has_future_change' => 'setHasFutureChange',
        'nearest_future_date' => 'setNearestFutureDate',
        'samt_id' => 'setSamtId',
        'last_imported' => 'setLastImported',
        'last_updated' => 'setLastUpdated',
        'names' => 'setNames',
        'postal_address' => 'setPostalAddress',
        'postal_addresses' => 'setPostalAddresses',
        'emails' => 'setEmails',
        'phone_numbers' => 'setPhoneNumbers',
        'relations' => 'setRelations',
        'key_relations' => 'setKeyRelations',
        'attributes' => 'setAttributes',
        'address_info' => 'setAddressInfo',
        'stats' => 'setStats',
        'portfolio_aggs' => 'setPortfolioAggs',
        'title' => 'setTitle',
        'ejf_id' => 'setEjfId',
        'timeline' => 'setTimeline',
        'network' => 'setNetwork'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_number' => 'getUnitNumber',
        'unit_type' => 'getUnitType',
        'business_key' => 'getBusinessKey',
        'name' => 'getName',
        'position' => 'getPosition',
        'address_secret' => 'getAddressSecret',
        'address_secret_exemption' => 'getAddressSecretExemption',
        'address_update_stopped' => 'getAddressUpdateStopped',
        'address_id' => 'getAddressId',
        'address' => 'getAddress',
        'addresses' => 'getAddresses',
        'email' => 'getEmail',
        'phone_number' => 'getPhoneNumber',
        'status_code' => 'getStatusCode',
        'effect_actor' => 'getEffectActor',
        'data_access' => 'getDataAccess',
        'error_import' => 'getErrorImport',
        'error_registration' => 'getErrorRegistration',
        'has_future_change' => 'getHasFutureChange',
        'nearest_future_date' => 'getNearestFutureDate',
        'samt_id' => 'getSamtId',
        'last_imported' => 'getLastImported',
        'last_updated' => 'getLastUpdated',
        'names' => 'getNames',
        'postal_address' => 'getPostalAddress',
        'postal_addresses' => 'getPostalAddresses',
        'emails' => 'getEmails',
        'phone_numbers' => 'getPhoneNumbers',
        'relations' => 'getRelations',
        'key_relations' => 'getKeyRelations',
        'attributes' => 'getAttributes',
        'address_info' => 'getAddressInfo',
        'stats' => 'getStats',
        'portfolio_aggs' => 'getPortfolioAggs',
        'title' => 'getTitle',
        'ejf_id' => 'getEjfId',
        'timeline' => 'getTimeline',
        'network' => 'getNetwork'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('unit_number', $data ?? [], null);
        $this->setIfExists('unit_type', $data ?? [], null);
        $this->setIfExists('business_key', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('address_secret', $data ?? [], null);
        $this->setIfExists('address_secret_exemption', $data ?? [], null);
        $this->setIfExists('address_update_stopped', $data ?? [], null);
        $this->setIfExists('address_id', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('status_code', $data ?? [], null);
        $this->setIfExists('effect_actor', $data ?? [], null);
        $this->setIfExists('data_access', $data ?? [], null);
        $this->setIfExists('error_import', $data ?? [], null);
        $this->setIfExists('error_registration', $data ?? [], null);
        $this->setIfExists('has_future_change', $data ?? [], null);
        $this->setIfExists('nearest_future_date', $data ?? [], null);
        $this->setIfExists('samt_id', $data ?? [], null);
        $this->setIfExists('last_imported', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('names', $data ?? [], null);
        $this->setIfExists('postal_address', $data ?? [], null);
        $this->setIfExists('postal_addresses', $data ?? [], null);
        $this->setIfExists('emails', $data ?? [], null);
        $this->setIfExists('phone_numbers', $data ?? [], null);
        $this->setIfExists('relations', $data ?? [], null);
        $this->setIfExists('key_relations', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('address_info', $data ?? [], null);
        $this->setIfExists('stats', $data ?? [], null);
        $this->setIfExists('portfolio_aggs', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('ejf_id', $data ?? [], null);
        $this->setIfExists('timeline', $data ?? [], null);
        $this->setIfExists('network', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['unit_number'] === null) {
            $invalidProperties[] = "'unit_number' can't be null";
        }
        if ($this->container['addresses'] === null) {
            $invalidProperties[] = "'addresses' can't be null";
        }
        if ($this->container['error_import'] === null) {
            $invalidProperties[] = "'error_import' can't be null";
        }
        if ($this->container['error_registration'] === null) {
            $invalidProperties[] = "'error_registration' can't be null";
        }
        if ($this->container['last_imported'] === null) {
            $invalidProperties[] = "'last_imported' can't be null";
        }
        if ($this->container['names'] === null) {
            $invalidProperties[] = "'names' can't be null";
        }
        if ($this->container['postal_addresses'] === null) {
            $invalidProperties[] = "'postal_addresses' can't be null";
        }
        if ($this->container['emails'] === null) {
            $invalidProperties[] = "'emails' can't be null";
        }
        if ($this->container['phone_numbers'] === null) {
            $invalidProperties[] = "'phone_numbers' can't be null";
        }
        if ($this->container['relations'] === null) {
            $invalidProperties[] = "'relations' can't be null";
        }
        if ($this->container['key_relations'] === null) {
            $invalidProperties[] = "'key_relations' can't be null";
        }
        if ($this->container['attributes'] === null) {
            $invalidProperties[] = "'attributes' can't be null";
        }
        if ($this->container['stats'] === null) {
            $invalidProperties[] = "'stats' can't be null";
        }
        if ($this->container['portfolio_aggs'] === null) {
            $invalidProperties[] = "'portfolio_aggs' can't be null";
        }
        if ($this->container['timeline'] === null) {
            $invalidProperties[] = "'timeline' can't be null";
        }
        if ($this->container['network'] === null) {
            $invalidProperties[] = "'network' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_number
     *
     * @return mixed
     */
    public function getUnitNumber()
    {
        return $this->container['unit_number'];
    }

    /**
     * Sets unit_number
     *
     * @param mixed $unit_number unit_number
     *
     * @return self
     */
    public function setUnitNumber($unit_number)
    {
        if (is_null($unit_number)) {
            array_push($this->openAPINullablesSetToNull, 'unit_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_number'] = $unit_number;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return \OpenAPI\Client\Model\CVRUnitTypeEnum|null
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param \OpenAPI\Client\Model\CVRUnitTypeEnum|null $unit_type unit_type
     *
     * @return self
     */
    public function setUnitType($unit_type)
    {
        if (is_null($unit_type)) {
            throw new \InvalidArgumentException('non-nullable unit_type cannot be null');
        }
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets business_key
     *
     * @return mixed|null
     */
    public function getBusinessKey()
    {
        return $this->container['business_key'];
    }

    /**
     * Sets business_key
     *
     * @param mixed|null $business_key business_key
     *
     * @return self
     */
    public function setBusinessKey($business_key)
    {
        if (is_null($business_key)) {
            array_push($this->openAPINullablesSetToNull, 'business_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_key'] = $business_key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return mixed|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param mixed|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets position
     *
     * @return mixed|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param mixed|null $position position
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            array_push($this->openAPINullablesSetToNull, 'position');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('position', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets address_secret
     *
     * @return mixed|null
     */
    public function getAddressSecret()
    {
        return $this->container['address_secret'];
    }

    /**
     * Sets address_secret
     *
     * @param mixed|null $address_secret address_secret
     *
     * @return self
     */
    public function setAddressSecret($address_secret)
    {
        if (is_null($address_secret)) {
            array_push($this->openAPINullablesSetToNull, 'address_secret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_secret', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_secret'] = $address_secret;

        return $this;
    }

    /**
     * Gets address_secret_exemption
     *
     * @return mixed|null
     */
    public function getAddressSecretExemption()
    {
        return $this->container['address_secret_exemption'];
    }

    /**
     * Sets address_secret_exemption
     *
     * @param mixed|null $address_secret_exemption address_secret_exemption
     *
     * @return self
     */
    public function setAddressSecretExemption($address_secret_exemption)
    {
        if (is_null($address_secret_exemption)) {
            array_push($this->openAPINullablesSetToNull, 'address_secret_exemption');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_secret_exemption', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_secret_exemption'] = $address_secret_exemption;

        return $this;
    }

    /**
     * Gets address_update_stopped
     *
     * @return mixed|null
     */
    public function getAddressUpdateStopped()
    {
        return $this->container['address_update_stopped'];
    }

    /**
     * Sets address_update_stopped
     *
     * @param mixed|null $address_update_stopped address_update_stopped
     *
     * @return self
     */
    public function setAddressUpdateStopped($address_update_stopped)
    {
        if (is_null($address_update_stopped)) {
            array_push($this->openAPINullablesSetToNull, 'address_update_stopped');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_update_stopped', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_update_stopped'] = $address_update_stopped;

        return $this;
    }

    /**
     * Gets address_id
     *
     * @return mixed|null
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     *
     * @param mixed|null $address_id address_id
     *
     * @return self
     */
    public function setAddressId($address_id)
    {
        if (is_null($address_id)) {
            array_push($this->openAPINullablesSetToNull, 'address_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_id'] = $address_id;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\CVRAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\CVRAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return mixed
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param mixed $addresses addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            array_push($this->openAPINullablesSetToNull, 'addresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addresses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets email
     *
     * @return mixed|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param mixed|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return mixed|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param mixed|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return mixed|null
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param mixed|null $status_code status_code
     *
     * @return self
     */
    public function setStatusCode($status_code)
    {
        if (is_null($status_code)) {
            array_push($this->openAPINullablesSetToNull, 'status_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets effect_actor
     *
     * @return \OpenAPI\Client\Model\CVREffectActorEnum|null
     */
    public function getEffectActor()
    {
        return $this->container['effect_actor'];
    }

    /**
     * Sets effect_actor
     *
     * @param \OpenAPI\Client\Model\CVREffectActorEnum|null $effect_actor effect_actor
     *
     * @return self
     */
    public function setEffectActor($effect_actor)
    {
        if (is_null($effect_actor)) {
            throw new \InvalidArgumentException('non-nullable effect_actor cannot be null');
        }
        $this->container['effect_actor'] = $effect_actor;

        return $this;
    }

    /**
     * Gets data_access
     *
     * @return mixed|null
     */
    public function getDataAccess()
    {
        return $this->container['data_access'];
    }

    /**
     * Sets data_access
     *
     * @param mixed|null $data_access data_access
     *
     * @return self
     */
    public function setDataAccess($data_access)
    {
        if (is_null($data_access)) {
            array_push($this->openAPINullablesSetToNull, 'data_access');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_access', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_access'] = $data_access;

        return $this;
    }

    /**
     * Gets error_import
     *
     * @return mixed
     */
    public function getErrorImport()
    {
        return $this->container['error_import'];
    }

    /**
     * Sets error_import
     *
     * @param mixed $error_import error_import
     *
     * @return self
     */
    public function setErrorImport($error_import)
    {
        if (is_null($error_import)) {
            array_push($this->openAPINullablesSetToNull, 'error_import');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_import', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_import'] = $error_import;

        return $this;
    }

    /**
     * Gets error_registration
     *
     * @return mixed
     */
    public function getErrorRegistration()
    {
        return $this->container['error_registration'];
    }

    /**
     * Sets error_registration
     *
     * @param mixed $error_registration Nogle enheder kan ligge med denne vÃ¦rdi, hvis de er blevet registreret som fÃ¸lge af en systemfejl.
     *
     * @return self
     */
    public function setErrorRegistration($error_registration)
    {
        if (is_null($error_registration)) {
            array_push($this->openAPINullablesSetToNull, 'error_registration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_registration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_registration'] = $error_registration;

        return $this;
    }

    /**
     * Gets has_future_change
     *
     * @return mixed|null
     */
    public function getHasFutureChange()
    {
        return $this->container['has_future_change'];
    }

    /**
     * Sets has_future_change
     *
     * @param mixed|null $has_future_change has_future_change
     *
     * @return self
     */
    public function setHasFutureChange($has_future_change)
    {
        if (is_null($has_future_change)) {
            array_push($this->openAPINullablesSetToNull, 'has_future_change');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_future_change', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_future_change'] = $has_future_change;

        return $this;
    }

    /**
     * Gets nearest_future_date
     *
     * @return mixed|null
     */
    public function getNearestFutureDate()
    {
        return $this->container['nearest_future_date'];
    }

    /**
     * Sets nearest_future_date
     *
     * @param mixed|null $nearest_future_date nearest_future_date
     *
     * @return self
     */
    public function setNearestFutureDate($nearest_future_date)
    {
        if (is_null($nearest_future_date)) {
            array_push($this->openAPINullablesSetToNull, 'nearest_future_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nearest_future_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nearest_future_date'] = $nearest_future_date;

        return $this;
    }

    /**
     * Gets samt_id
     *
     * @return mixed|null
     */
    public function getSamtId()
    {
        return $this->container['samt_id'];
    }

    /**
     * Sets samt_id
     *
     * @param mixed|null $samt_id Version id
     *
     * @return self
     */
    public function setSamtId($samt_id)
    {
        if (is_null($samt_id)) {
            array_push($this->openAPINullablesSetToNull, 'samt_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('samt_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['samt_id'] = $samt_id;

        return $this;
    }

    /**
     * Gets last_imported
     *
     * @return mixed
     */
    public function getLastImported()
    {
        return $this->container['last_imported'];
    }

    /**
     * Sets last_imported
     *
     * @param mixed $last_imported last_imported
     *
     * @return self
     */
    public function setLastImported($last_imported)
    {
        if (is_null($last_imported)) {
            array_push($this->openAPINullablesSetToNull, 'last_imported');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_imported', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_imported'] = $last_imported;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return mixed|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param mixed|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            array_push($this->openAPINullablesSetToNull, 'last_updated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_updated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets names
     *
     * @return mixed
     */
    public function getNames()
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param mixed $names names
     *
     * @return self
     */
    public function setNames($names)
    {
        if (is_null($names)) {
            array_push($this->openAPINullablesSetToNull, 'names');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('names', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets postal_address
     *
     * @return \OpenAPI\Client\Model\CVRAddress|null
     */
    public function getPostalAddress()
    {
        return $this->container['postal_address'];
    }

    /**
     * Sets postal_address
     *
     * @param \OpenAPI\Client\Model\CVRAddress|null $postal_address postal_address
     *
     * @return self
     */
    public function setPostalAddress($postal_address)
    {
        if (is_null($postal_address)) {
            throw new \InvalidArgumentException('non-nullable postal_address cannot be null');
        }
        $this->container['postal_address'] = $postal_address;

        return $this;
    }

    /**
     * Gets postal_addresses
     *
     * @return mixed
     */
    public function getPostalAddresses()
    {
        return $this->container['postal_addresses'];
    }

    /**
     * Sets postal_addresses
     *
     * @param mixed $postal_addresses postal_addresses
     *
     * @return self
     */
    public function setPostalAddresses($postal_addresses)
    {
        if (is_null($postal_addresses)) {
            array_push($this->openAPINullablesSetToNull, 'postal_addresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postal_addresses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postal_addresses'] = $postal_addresses;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return mixed
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param mixed $emails emails
     *
     * @return self
     */
    public function setEmails($emails)
    {
        if (is_null($emails)) {
            array_push($this->openAPINullablesSetToNull, 'emails');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emails', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets phone_numbers
     *
     * @return mixed
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     *
     * @param mixed $phone_numbers phone_numbers
     *
     * @return self
     */
    public function setPhoneNumbers($phone_numbers)
    {
        if (is_null($phone_numbers)) {
            array_push($this->openAPINullablesSetToNull, 'phone_numbers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_numbers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }

    /**
     * Gets relations
     *
     * @return mixed
     */
    public function getRelations()
    {
        return $this->container['relations'];
    }

    /**
     * Sets relations
     *
     * @param mixed $relations relations
     *
     * @return self
     */
    public function setRelations($relations)
    {
        if (is_null($relations)) {
            array_push($this->openAPINullablesSetToNull, 'relations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('relations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['relations'] = $relations;

        return $this;
    }

    /**
     * Gets key_relations
     *
     * @return mixed
     */
    public function getKeyRelations()
    {
        return $this->container['key_relations'];
    }

    /**
     * Sets key_relations
     *
     * @param mixed $key_relations key_relations
     *
     * @return self
     */
    public function setKeyRelations($key_relations)
    {
        if (is_null($key_relations)) {
            array_push($this->openAPINullablesSetToNull, 'key_relations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('key_relations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['key_relations'] = $key_relations;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return mixed
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param mixed $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            array_push($this->openAPINullablesSetToNull, 'attributes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attributes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets address_info
     *
     * @return \OpenAPI\Client\Model\DARAddress|null
     */
    public function getAddressInfo()
    {
        return $this->container['address_info'];
    }

    /**
     * Sets address_info
     *
     * @param \OpenAPI\Client\Model\DARAddress|null $address_info address_info
     *
     * @return self
     */
    public function setAddressInfo($address_info)
    {
        if (is_null($address_info)) {
            throw new \InvalidArgumentException('non-nullable address_info cannot be null');
        }
        $this->container['address_info'] = $address_info;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \OpenAPI\Client\Model\CVRMemberStats
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \OpenAPI\Client\Model\CVRMemberStats $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        if (is_null($stats)) {
            throw new \InvalidArgumentException('non-nullable stats cannot be null');
        }
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets portfolio_aggs
     *
     * @return \OpenAPI\Client\Model\PortfolioAggs
     */
    public function getPortfolioAggs()
    {
        return $this->container['portfolio_aggs'];
    }

    /**
     * Sets portfolio_aggs
     *
     * @param \OpenAPI\Client\Model\PortfolioAggs $portfolio_aggs portfolio_aggs
     *
     * @return self
     */
    public function setPortfolioAggs($portfolio_aggs)
    {
        if (is_null($portfolio_aggs)) {
            throw new \InvalidArgumentException('non-nullable portfolio_aggs cannot be null');
        }
        $this->container['portfolio_aggs'] = $portfolio_aggs;

        return $this;
    }

    /**
     * Gets title
     *
     * @return mixed|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param mixed|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets ejf_id
     *
     * @return mixed|null
     */
    public function getEjfId()
    {
        return $this->container['ejf_id'];
    }

    /**
     * Sets ejf_id
     *
     * @param mixed|null $ejf_id ejf_id
     *
     * @return self
     */
    public function setEjfId($ejf_id)
    {
        if (is_null($ejf_id)) {
            array_push($this->openAPINullablesSetToNull, 'ejf_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ejf_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ejf_id'] = $ejf_id;

        return $this;
    }

    /**
     * Gets timeline
     *
     * @return mixed
     */
    public function getTimeline()
    {
        return $this->container['timeline'];
    }

    /**
     * Sets timeline
     *
     * @param mixed $timeline timeline
     *
     * @return self
     */
    public function setTimeline($timeline)
    {
        if (is_null($timeline)) {
            array_push($this->openAPINullablesSetToNull, 'timeline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timeline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timeline'] = $timeline;

        return $this;
    }

    /**
     * Gets network
     *
     * @return \OpenAPI\Client\Model\CVRNetwork
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \OpenAPI\Client\Model\CVRNetwork $network network
     *
     * @return self
     */
    public function setNetwork($network)
    {
        if (is_null($network)) {
            throw new \InvalidArgumentException('non-nullable network cannot be null');
        }
        $this->container['network'] = $network;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


