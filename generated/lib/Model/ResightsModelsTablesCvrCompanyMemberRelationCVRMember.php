<?php
/**
 * ResightsModelsTablesCvrCompanyMemberRelationCVRMember
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ResightsModelsTablesCvrCompanyMemberRelationCVRMember Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResightsModelsTablesCvrCompanyMemberRelationCVRMember implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'resights__models__tables__cvr__company__member_relation__CVRMember';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'unit_number' => 'mixed',
        'unit_type' => '\OpenAPI\Client\Model\CVRUnitTypeEnum',
        'cvr_number' => 'mixed',
        'organisation_type' => 'mixed',
        'name' => 'mixed',
        'confidential' => 'mixed',
        'address_secret' => 'mixed',
        'address_secret_exemption' => 'mixed',
        'address_update_stopped' => 'mixed',
        'address' => '\OpenAPI\Client\Model\CVRAddress',
        'postal_address' => '\OpenAPI\Client\Model\CVRAddress',
        'last_imported' => 'mixed',
        'last_updated' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'unit_number' => null,
        'unit_type' => null,
        'cvr_number' => null,
        'organisation_type' => null,
        'name' => null,
        'confidential' => null,
        'address_secret' => null,
        'address_secret_exemption' => null,
        'address_update_stopped' => null,
        'address' => null,
        'postal_address' => null,
        'last_imported' => 'date-time',
        'last_updated' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'unit_number' => true,
		'unit_type' => false,
		'cvr_number' => true,
		'organisation_type' => true,
		'name' => true,
		'confidential' => true,
		'address_secret' => true,
		'address_secret_exemption' => true,
		'address_update_stopped' => true,
		'address' => false,
		'postal_address' => false,
		'last_imported' => true,
		'last_updated' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_number' => 'unit_number',
        'unit_type' => 'unit_type',
        'cvr_number' => 'cvr_number',
        'organisation_type' => 'organisation_type',
        'name' => 'name',
        'confidential' => 'confidential',
        'address_secret' => 'address_secret',
        'address_secret_exemption' => 'address_secret_exemption',
        'address_update_stopped' => 'address_update_stopped',
        'address' => 'address',
        'postal_address' => 'postal_address',
        'last_imported' => 'last_imported',
        'last_updated' => 'last_updated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_number' => 'setUnitNumber',
        'unit_type' => 'setUnitType',
        'cvr_number' => 'setCvrNumber',
        'organisation_type' => 'setOrganisationType',
        'name' => 'setName',
        'confidential' => 'setConfidential',
        'address_secret' => 'setAddressSecret',
        'address_secret_exemption' => 'setAddressSecretExemption',
        'address_update_stopped' => 'setAddressUpdateStopped',
        'address' => 'setAddress',
        'postal_address' => 'setPostalAddress',
        'last_imported' => 'setLastImported',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_number' => 'getUnitNumber',
        'unit_type' => 'getUnitType',
        'cvr_number' => 'getCvrNumber',
        'organisation_type' => 'getOrganisationType',
        'name' => 'getName',
        'confidential' => 'getConfidential',
        'address_secret' => 'getAddressSecret',
        'address_secret_exemption' => 'getAddressSecretExemption',
        'address_update_stopped' => 'getAddressUpdateStopped',
        'address' => 'getAddress',
        'postal_address' => 'getPostalAddress',
        'last_imported' => 'getLastImported',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('unit_number', $data ?? [], null);
        $this->setIfExists('unit_type', $data ?? [], null);
        $this->setIfExists('cvr_number', $data ?? [], null);
        $this->setIfExists('organisation_type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('confidential', $data ?? [], null);
        $this->setIfExists('address_secret', $data ?? [], null);
        $this->setIfExists('address_secret_exemption', $data ?? [], null);
        $this->setIfExists('address_update_stopped', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('postal_address', $data ?? [], null);
        $this->setIfExists('last_imported', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['unit_number'] === null) {
            $invalidProperties[] = "'unit_number' can't be null";
        }
        if ($this->container['unit_type'] === null) {
            $invalidProperties[] = "'unit_type' can't be null";
        }
        if ($this->container['last_imported'] === null) {
            $invalidProperties[] = "'last_imported' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_number
     *
     * @return mixed
     */
    public function getUnitNumber()
    {
        return $this->container['unit_number'];
    }

    /**
     * Sets unit_number
     *
     * @param mixed $unit_number unit_number
     *
     * @return self
     */
    public function setUnitNumber($unit_number)
    {
        if (is_null($unit_number)) {
            array_push($this->openAPINullablesSetToNull, 'unit_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_number'] = $unit_number;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return \OpenAPI\Client\Model\CVRUnitTypeEnum
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param \OpenAPI\Client\Model\CVRUnitTypeEnum $unit_type unit_type
     *
     * @return self
     */
    public function setUnitType($unit_type)
    {
        if (is_null($unit_type)) {
            throw new \InvalidArgumentException('non-nullable unit_type cannot be null');
        }
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets cvr_number
     *
     * @return mixed|null
     */
    public function getCvrNumber()
    {
        return $this->container['cvr_number'];
    }

    /**
     * Sets cvr_number
     *
     * @param mixed|null $cvr_number cvr_number
     *
     * @return self
     */
    public function setCvrNumber($cvr_number)
    {
        if (is_null($cvr_number)) {
            array_push($this->openAPINullablesSetToNull, 'cvr_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cvr_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cvr_number'] = $cvr_number;

        return $this;
    }

    /**
     * Gets organisation_type
     *
     * @return mixed|null
     */
    public function getOrganisationType()
    {
        return $this->container['organisation_type'];
    }

    /**
     * Sets organisation_type
     *
     * @param mixed|null $organisation_type organisation_type
     *
     * @return self
     */
    public function setOrganisationType($organisation_type)
    {
        if (is_null($organisation_type)) {
            array_push($this->openAPINullablesSetToNull, 'organisation_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organisation_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organisation_type'] = $organisation_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return mixed|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param mixed|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets confidential
     *
     * @return mixed|null
     */
    public function getConfidential()
    {
        return $this->container['confidential'];
    }

    /**
     * Sets confidential
     *
     * @param mixed|null $confidential confidential
     *
     * @return self
     */
    public function setConfidential($confidential)
    {
        if (is_null($confidential)) {
            array_push($this->openAPINullablesSetToNull, 'confidential');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('confidential', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['confidential'] = $confidential;

        return $this;
    }

    /**
     * Gets address_secret
     *
     * @return mixed|null
     */
    public function getAddressSecret()
    {
        return $this->container['address_secret'];
    }

    /**
     * Sets address_secret
     *
     * @param mixed|null $address_secret address_secret
     *
     * @return self
     */
    public function setAddressSecret($address_secret)
    {
        if (is_null($address_secret)) {
            array_push($this->openAPINullablesSetToNull, 'address_secret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_secret', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_secret'] = $address_secret;

        return $this;
    }

    /**
     * Gets address_secret_exemption
     *
     * @return mixed|null
     */
    public function getAddressSecretExemption()
    {
        return $this->container['address_secret_exemption'];
    }

    /**
     * Sets address_secret_exemption
     *
     * @param mixed|null $address_secret_exemption address_secret_exemption
     *
     * @return self
     */
    public function setAddressSecretExemption($address_secret_exemption)
    {
        if (is_null($address_secret_exemption)) {
            array_push($this->openAPINullablesSetToNull, 'address_secret_exemption');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_secret_exemption', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_secret_exemption'] = $address_secret_exemption;

        return $this;
    }

    /**
     * Gets address_update_stopped
     *
     * @return mixed|null
     */
    public function getAddressUpdateStopped()
    {
        return $this->container['address_update_stopped'];
    }

    /**
     * Sets address_update_stopped
     *
     * @param mixed|null $address_update_stopped address_update_stopped
     *
     * @return self
     */
    public function setAddressUpdateStopped($address_update_stopped)
    {
        if (is_null($address_update_stopped)) {
            array_push($this->openAPINullablesSetToNull, 'address_update_stopped');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_update_stopped', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_update_stopped'] = $address_update_stopped;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\CVRAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\CVRAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets postal_address
     *
     * @return \OpenAPI\Client\Model\CVRAddress|null
     */
    public function getPostalAddress()
    {
        return $this->container['postal_address'];
    }

    /**
     * Sets postal_address
     *
     * @param \OpenAPI\Client\Model\CVRAddress|null $postal_address postal_address
     *
     * @return self
     */
    public function setPostalAddress($postal_address)
    {
        if (is_null($postal_address)) {
            throw new \InvalidArgumentException('non-nullable postal_address cannot be null');
        }
        $this->container['postal_address'] = $postal_address;

        return $this;
    }

    /**
     * Gets last_imported
     *
     * @return mixed
     */
    public function getLastImported()
    {
        return $this->container['last_imported'];
    }

    /**
     * Sets last_imported
     *
     * @param mixed $last_imported last_imported
     *
     * @return self
     */
    public function setLastImported($last_imported)
    {
        if (is_null($last_imported)) {
            array_push($this->openAPINullablesSetToNull, 'last_imported');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_imported', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_imported'] = $last_imported;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return mixed|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param mixed|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            array_push($this->openAPINullablesSetToNull, 'last_updated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_updated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


