<?php
/**
 * DomusProPropertyModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DomusProPropertyModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomusProPropertyModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DomusProPropertyModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'commercial_units' => 'mixed',
        'addresses' => 'mixed',
        'buildings' => 'mixed',
        'cadastres' => 'mixed',
        'external_version' => 'mixed',
        'mixed_commercial_area' => 'mixed',
        'mixed_residential_area' => 'mixed',
        'mixed_units' => 'mixed',
        'municipality_identifier' => 'mixed',
        'ownership_description' => 'mixed',
        'ownership_identifier' => 'mixed',
        'property_identifier' => 'mixed',
        'property_value' => 'mixed',
        'residential_units' => 'mixed',
        'street_building_identifier' => 'mixed',
        'street_identifier' => 'mixed',
        'street_name' => 'mixed',
        'total_commercial_area' => 'mixed',
        'total_floor_area' => 'mixed',
        'total_residential_area' => 'mixed',
        'total_units' => 'mixed',
        'unpadded_street_building_identifier' => 'mixed',
        'valuation_change_date' => 'mixed',
        'valuation_year' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'commercial_units' => null,
        'addresses' => null,
        'buildings' => null,
        'cadastres' => null,
        'external_version' => null,
        'mixed_commercial_area' => null,
        'mixed_residential_area' => null,
        'mixed_units' => null,
        'municipality_identifier' => null,
        'ownership_description' => null,
        'ownership_identifier' => null,
        'property_identifier' => null,
        'property_value' => null,
        'residential_units' => null,
        'street_building_identifier' => null,
        'street_identifier' => null,
        'street_name' => null,
        'total_commercial_area' => null,
        'total_floor_area' => null,
        'total_residential_area' => null,
        'total_units' => null,
        'unpadded_street_building_identifier' => null,
        'valuation_change_date' => 'date',
        'valuation_year' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'commercial_units' => true,
		'addresses' => true,
		'buildings' => true,
		'cadastres' => true,
		'external_version' => true,
		'mixed_commercial_area' => true,
		'mixed_residential_area' => true,
		'mixed_units' => true,
		'municipality_identifier' => true,
		'ownership_description' => true,
		'ownership_identifier' => true,
		'property_identifier' => true,
		'property_value' => true,
		'residential_units' => true,
		'street_building_identifier' => true,
		'street_identifier' => true,
		'street_name' => true,
		'total_commercial_area' => true,
		'total_floor_area' => true,
		'total_residential_area' => true,
		'total_units' => true,
		'unpadded_street_building_identifier' => true,
		'valuation_change_date' => true,
		'valuation_year' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'commercial_units' => 'commercialUnits',
        'addresses' => 'addresses',
        'buildings' => 'buildings',
        'cadastres' => 'cadastres',
        'external_version' => 'externalVersion',
        'mixed_commercial_area' => 'mixedCommercialArea',
        'mixed_residential_area' => 'mixedResidentialArea',
        'mixed_units' => 'mixedUnits',
        'municipality_identifier' => 'municipalityIdentifier',
        'ownership_description' => 'ownershipDescription',
        'ownership_identifier' => 'ownershipIdentifier',
        'property_identifier' => 'propertyIdentifier',
        'property_value' => 'propertyValue',
        'residential_units' => 'residentialUnits',
        'street_building_identifier' => 'streetBuildingIdentifier',
        'street_identifier' => 'streetIdentifier',
        'street_name' => 'streetName',
        'total_commercial_area' => 'totalCommercialArea',
        'total_floor_area' => 'totalFloorArea',
        'total_residential_area' => 'totalResidentialArea',
        'total_units' => 'totalUnits',
        'unpadded_street_building_identifier' => 'unpaddedStreetBuildingIdentifier',
        'valuation_change_date' => 'valuationChangeDate',
        'valuation_year' => 'valuationYear'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'commercial_units' => 'setCommercialUnits',
        'addresses' => 'setAddresses',
        'buildings' => 'setBuildings',
        'cadastres' => 'setCadastres',
        'external_version' => 'setExternalVersion',
        'mixed_commercial_area' => 'setMixedCommercialArea',
        'mixed_residential_area' => 'setMixedResidentialArea',
        'mixed_units' => 'setMixedUnits',
        'municipality_identifier' => 'setMunicipalityIdentifier',
        'ownership_description' => 'setOwnershipDescription',
        'ownership_identifier' => 'setOwnershipIdentifier',
        'property_identifier' => 'setPropertyIdentifier',
        'property_value' => 'setPropertyValue',
        'residential_units' => 'setResidentialUnits',
        'street_building_identifier' => 'setStreetBuildingIdentifier',
        'street_identifier' => 'setStreetIdentifier',
        'street_name' => 'setStreetName',
        'total_commercial_area' => 'setTotalCommercialArea',
        'total_floor_area' => 'setTotalFloorArea',
        'total_residential_area' => 'setTotalResidentialArea',
        'total_units' => 'setTotalUnits',
        'unpadded_street_building_identifier' => 'setUnpaddedStreetBuildingIdentifier',
        'valuation_change_date' => 'setValuationChangeDate',
        'valuation_year' => 'setValuationYear'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'commercial_units' => 'getCommercialUnits',
        'addresses' => 'getAddresses',
        'buildings' => 'getBuildings',
        'cadastres' => 'getCadastres',
        'external_version' => 'getExternalVersion',
        'mixed_commercial_area' => 'getMixedCommercialArea',
        'mixed_residential_area' => 'getMixedResidentialArea',
        'mixed_units' => 'getMixedUnits',
        'municipality_identifier' => 'getMunicipalityIdentifier',
        'ownership_description' => 'getOwnershipDescription',
        'ownership_identifier' => 'getOwnershipIdentifier',
        'property_identifier' => 'getPropertyIdentifier',
        'property_value' => 'getPropertyValue',
        'residential_units' => 'getResidentialUnits',
        'street_building_identifier' => 'getStreetBuildingIdentifier',
        'street_identifier' => 'getStreetIdentifier',
        'street_name' => 'getStreetName',
        'total_commercial_area' => 'getTotalCommercialArea',
        'total_floor_area' => 'getTotalFloorArea',
        'total_residential_area' => 'getTotalResidentialArea',
        'total_units' => 'getTotalUnits',
        'unpadded_street_building_identifier' => 'getUnpaddedStreetBuildingIdentifier',
        'valuation_change_date' => 'getValuationChangeDate',
        'valuation_year' => 'getValuationYear'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('commercial_units', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('buildings', $data ?? [], null);
        $this->setIfExists('cadastres', $data ?? [], null);
        $this->setIfExists('external_version', $data ?? [], null);
        $this->setIfExists('mixed_commercial_area', $data ?? [], null);
        $this->setIfExists('mixed_residential_area', $data ?? [], null);
        $this->setIfExists('mixed_units', $data ?? [], null);
        $this->setIfExists('municipality_identifier', $data ?? [], null);
        $this->setIfExists('ownership_description', $data ?? [], null);
        $this->setIfExists('ownership_identifier', $data ?? [], null);
        $this->setIfExists('property_identifier', $data ?? [], null);
        $this->setIfExists('property_value', $data ?? [], null);
        $this->setIfExists('residential_units', $data ?? [], null);
        $this->setIfExists('street_building_identifier', $data ?? [], null);
        $this->setIfExists('street_identifier', $data ?? [], null);
        $this->setIfExists('street_name', $data ?? [], null);
        $this->setIfExists('total_commercial_area', $data ?? [], null);
        $this->setIfExists('total_floor_area', $data ?? [], null);
        $this->setIfExists('total_residential_area', $data ?? [], null);
        $this->setIfExists('total_units', $data ?? [], null);
        $this->setIfExists('unpadded_street_building_identifier', $data ?? [], null);
        $this->setIfExists('valuation_change_date', $data ?? [], null);
        $this->setIfExists('valuation_year', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['addresses'] === null) {
            $invalidProperties[] = "'addresses' can't be null";
        }
        if ($this->container['buildings'] === null) {
            $invalidProperties[] = "'buildings' can't be null";
        }
        if ($this->container['cadastres'] === null) {
            $invalidProperties[] = "'cadastres' can't be null";
        }
        if ($this->container['external_version'] === null) {
            $invalidProperties[] = "'external_version' can't be null";
        }
        if ($this->container['municipality_identifier'] === null) {
            $invalidProperties[] = "'municipality_identifier' can't be null";
        }
        if ($this->container['property_identifier'] === null) {
            $invalidProperties[] = "'property_identifier' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets commercial_units
     *
     * @return mixed|null
     */
    public function getCommercialUnits()
    {
        return $this->container['commercial_units'];
    }

    /**
     * Sets commercial_units
     *
     * @param mixed|null $commercial_units commercial_units
     *
     * @return self
     */
    public function setCommercialUnits($commercial_units)
    {
        if (is_null($commercial_units)) {
            array_push($this->openAPINullablesSetToNull, 'commercial_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commercial_units', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['commercial_units'] = $commercial_units;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return mixed
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param mixed $addresses addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            array_push($this->openAPINullablesSetToNull, 'addresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addresses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets buildings
     *
     * @return mixed
     */
    public function getBuildings()
    {
        return $this->container['buildings'];
    }

    /**
     * Sets buildings
     *
     * @param mixed $buildings buildings
     *
     * @return self
     */
    public function setBuildings($buildings)
    {
        if (is_null($buildings)) {
            array_push($this->openAPINullablesSetToNull, 'buildings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buildings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buildings'] = $buildings;

        return $this;
    }

    /**
     * Gets cadastres
     *
     * @return mixed
     */
    public function getCadastres()
    {
        return $this->container['cadastres'];
    }

    /**
     * Sets cadastres
     *
     * @param mixed $cadastres cadastres
     *
     * @return self
     */
    public function setCadastres($cadastres)
    {
        if (is_null($cadastres)) {
            array_push($this->openAPINullablesSetToNull, 'cadastres');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cadastres', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cadastres'] = $cadastres;

        return $this;
    }

    /**
     * Gets external_version
     *
     * @return mixed
     */
    public function getExternalVersion()
    {
        return $this->container['external_version'];
    }

    /**
     * Sets external_version
     *
     * @param mixed $external_version external_version
     *
     * @return self
     */
    public function setExternalVersion($external_version)
    {
        if (is_null($external_version)) {
            array_push($this->openAPINullablesSetToNull, 'external_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_version'] = $external_version;

        return $this;
    }

    /**
     * Gets mixed_commercial_area
     *
     * @return mixed|null
     */
    public function getMixedCommercialArea()
    {
        return $this->container['mixed_commercial_area'];
    }

    /**
     * Sets mixed_commercial_area
     *
     * @param mixed|null $mixed_commercial_area mixed_commercial_area
     *
     * @return self
     */
    public function setMixedCommercialArea($mixed_commercial_area)
    {
        if (is_null($mixed_commercial_area)) {
            array_push($this->openAPINullablesSetToNull, 'mixed_commercial_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mixed_commercial_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mixed_commercial_area'] = $mixed_commercial_area;

        return $this;
    }

    /**
     * Gets mixed_residential_area
     *
     * @return mixed|null
     */
    public function getMixedResidentialArea()
    {
        return $this->container['mixed_residential_area'];
    }

    /**
     * Sets mixed_residential_area
     *
     * @param mixed|null $mixed_residential_area mixed_residential_area
     *
     * @return self
     */
    public function setMixedResidentialArea($mixed_residential_area)
    {
        if (is_null($mixed_residential_area)) {
            array_push($this->openAPINullablesSetToNull, 'mixed_residential_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mixed_residential_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mixed_residential_area'] = $mixed_residential_area;

        return $this;
    }

    /**
     * Gets mixed_units
     *
     * @return mixed|null
     */
    public function getMixedUnits()
    {
        return $this->container['mixed_units'];
    }

    /**
     * Sets mixed_units
     *
     * @param mixed|null $mixed_units mixed_units
     *
     * @return self
     */
    public function setMixedUnits($mixed_units)
    {
        if (is_null($mixed_units)) {
            array_push($this->openAPINullablesSetToNull, 'mixed_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mixed_units', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mixed_units'] = $mixed_units;

        return $this;
    }

    /**
     * Gets municipality_identifier
     *
     * @return mixed
     */
    public function getMunicipalityIdentifier()
    {
        return $this->container['municipality_identifier'];
    }

    /**
     * Sets municipality_identifier
     *
     * @param mixed $municipality_identifier municipality_identifier
     *
     * @return self
     */
    public function setMunicipalityIdentifier($municipality_identifier)
    {
        if (is_null($municipality_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'municipality_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('municipality_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['municipality_identifier'] = $municipality_identifier;

        return $this;
    }

    /**
     * Gets ownership_description
     *
     * @return mixed|null
     */
    public function getOwnershipDescription()
    {
        return $this->container['ownership_description'];
    }

    /**
     * Sets ownership_description
     *
     * @param mixed|null $ownership_description ownership_description
     *
     * @return self
     */
    public function setOwnershipDescription($ownership_description)
    {
        if (is_null($ownership_description)) {
            array_push($this->openAPINullablesSetToNull, 'ownership_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ownership_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ownership_description'] = $ownership_description;

        return $this;
    }

    /**
     * Gets ownership_identifier
     *
     * @return mixed|null
     */
    public function getOwnershipIdentifier()
    {
        return $this->container['ownership_identifier'];
    }

    /**
     * Sets ownership_identifier
     *
     * @param mixed|null $ownership_identifier ownership_identifier
     *
     * @return self
     */
    public function setOwnershipIdentifier($ownership_identifier)
    {
        if (is_null($ownership_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'ownership_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ownership_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ownership_identifier'] = $ownership_identifier;

        return $this;
    }

    /**
     * Gets property_identifier
     *
     * @return mixed
     */
    public function getPropertyIdentifier()
    {
        return $this->container['property_identifier'];
    }

    /**
     * Sets property_identifier
     *
     * @param mixed $property_identifier property_identifier
     *
     * @return self
     */
    public function setPropertyIdentifier($property_identifier)
    {
        if (is_null($property_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'property_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_identifier'] = $property_identifier;

        return $this;
    }

    /**
     * Gets property_value
     *
     * @return mixed|null
     */
    public function getPropertyValue()
    {
        return $this->container['property_value'];
    }

    /**
     * Sets property_value
     *
     * @param mixed|null $property_value property_value
     *
     * @return self
     */
    public function setPropertyValue($property_value)
    {
        if (is_null($property_value)) {
            array_push($this->openAPINullablesSetToNull, 'property_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_value'] = $property_value;

        return $this;
    }

    /**
     * Gets residential_units
     *
     * @return mixed|null
     */
    public function getResidentialUnits()
    {
        return $this->container['residential_units'];
    }

    /**
     * Sets residential_units
     *
     * @param mixed|null $residential_units residential_units
     *
     * @return self
     */
    public function setResidentialUnits($residential_units)
    {
        if (is_null($residential_units)) {
            array_push($this->openAPINullablesSetToNull, 'residential_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('residential_units', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['residential_units'] = $residential_units;

        return $this;
    }

    /**
     * Gets street_building_identifier
     *
     * @return mixed|null
     */
    public function getStreetBuildingIdentifier()
    {
        return $this->container['street_building_identifier'];
    }

    /**
     * Sets street_building_identifier
     *
     * @param mixed|null $street_building_identifier street_building_identifier
     *
     * @return self
     */
    public function setStreetBuildingIdentifier($street_building_identifier)
    {
        if (is_null($street_building_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'street_building_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_building_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_building_identifier'] = $street_building_identifier;

        return $this;
    }

    /**
     * Gets street_identifier
     *
     * @return mixed|null
     */
    public function getStreetIdentifier()
    {
        return $this->container['street_identifier'];
    }

    /**
     * Sets street_identifier
     *
     * @param mixed|null $street_identifier street_identifier
     *
     * @return self
     */
    public function setStreetIdentifier($street_identifier)
    {
        if (is_null($street_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'street_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_identifier'] = $street_identifier;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return mixed|null
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param mixed|null $street_name street_name
     *
     * @return self
     */
    public function setStreetName($street_name)
    {
        if (is_null($street_name)) {
            array_push($this->openAPINullablesSetToNull, 'street_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets total_commercial_area
     *
     * @return mixed|null
     */
    public function getTotalCommercialArea()
    {
        return $this->container['total_commercial_area'];
    }

    /**
     * Sets total_commercial_area
     *
     * @param mixed|null $total_commercial_area total_commercial_area
     *
     * @return self
     */
    public function setTotalCommercialArea($total_commercial_area)
    {
        if (is_null($total_commercial_area)) {
            array_push($this->openAPINullablesSetToNull, 'total_commercial_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_commercial_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_commercial_area'] = $total_commercial_area;

        return $this;
    }

    /**
     * Gets total_floor_area
     *
     * @return mixed|null
     */
    public function getTotalFloorArea()
    {
        return $this->container['total_floor_area'];
    }

    /**
     * Sets total_floor_area
     *
     * @param mixed|null $total_floor_area total_floor_area
     *
     * @return self
     */
    public function setTotalFloorArea($total_floor_area)
    {
        if (is_null($total_floor_area)) {
            array_push($this->openAPINullablesSetToNull, 'total_floor_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_floor_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_floor_area'] = $total_floor_area;

        return $this;
    }

    /**
     * Gets total_residential_area
     *
     * @return mixed|null
     */
    public function getTotalResidentialArea()
    {
        return $this->container['total_residential_area'];
    }

    /**
     * Sets total_residential_area
     *
     * @param mixed|null $total_residential_area total_residential_area
     *
     * @return self
     */
    public function setTotalResidentialArea($total_residential_area)
    {
        if (is_null($total_residential_area)) {
            array_push($this->openAPINullablesSetToNull, 'total_residential_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_residential_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_residential_area'] = $total_residential_area;

        return $this;
    }

    /**
     * Gets total_units
     *
     * @return mixed|null
     */
    public function getTotalUnits()
    {
        return $this->container['total_units'];
    }

    /**
     * Sets total_units
     *
     * @param mixed|null $total_units total_units
     *
     * @return self
     */
    public function setTotalUnits($total_units)
    {
        if (is_null($total_units)) {
            array_push($this->openAPINullablesSetToNull, 'total_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_units', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_units'] = $total_units;

        return $this;
    }

    /**
     * Gets unpadded_street_building_identifier
     *
     * @return mixed|null
     */
    public function getUnpaddedStreetBuildingIdentifier()
    {
        return $this->container['unpadded_street_building_identifier'];
    }

    /**
     * Sets unpadded_street_building_identifier
     *
     * @param mixed|null $unpadded_street_building_identifier unpadded_street_building_identifier
     *
     * @return self
     */
    public function setUnpaddedStreetBuildingIdentifier($unpadded_street_building_identifier)
    {
        if (is_null($unpadded_street_building_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'unpadded_street_building_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unpadded_street_building_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unpadded_street_building_identifier'] = $unpadded_street_building_identifier;

        return $this;
    }

    /**
     * Gets valuation_change_date
     *
     * @return mixed|null
     */
    public function getValuationChangeDate()
    {
        return $this->container['valuation_change_date'];
    }

    /**
     * Sets valuation_change_date
     *
     * @param mixed|null $valuation_change_date valuation_change_date
     *
     * @return self
     */
    public function setValuationChangeDate($valuation_change_date)
    {
        if (is_null($valuation_change_date)) {
            array_push($this->openAPINullablesSetToNull, 'valuation_change_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valuation_change_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valuation_change_date'] = $valuation_change_date;

        return $this;
    }

    /**
     * Gets valuation_year
     *
     * @return mixed|null
     */
    public function getValuationYear()
    {
        return $this->container['valuation_year'];
    }

    /**
     * Sets valuation_year
     *
     * @param mixed|null $valuation_year valuation_year
     *
     * @return self
     */
    public function setValuationYear($valuation_year)
    {
        if (is_null($valuation_year)) {
            array_push($this->openAPINullablesSetToNull, 'valuation_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valuation_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valuation_year'] = $valuation_year;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


