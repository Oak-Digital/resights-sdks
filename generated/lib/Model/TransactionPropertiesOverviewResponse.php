<?php
/**
 * TransactionPropertiesOverviewResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionPropertiesOverviewResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionPropertiesOverviewResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionPropertiesOverviewResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => '\OpenAPI\Client\Model\PropertyTypeEnum',
        'sub_type' => '\OpenAPI\Client\Model\PropertySubTypeEnum',
        'ownership_code' => 'mixed',
        'description' => 'mixed',
        'primary_usage' => 'mixed',
        'construction_year' => 'mixed',
        'rebuilding_year' => 'mixed',
        'floor_area_br18' => 'mixed',
        'constructed_share_br18' => 'mixed',
        'centroid' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'sub_type' => null,
        'ownership_code' => null,
        'description' => null,
        'primary_usage' => null,
        'construction_year' => null,
        'rebuilding_year' => null,
        'floor_area_br18' => null,
        'constructed_share_br18' => null,
        'centroid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
		'sub_type' => false,
		'ownership_code' => true,
		'description' => true,
		'primary_usage' => true,
		'construction_year' => true,
		'rebuilding_year' => true,
		'floor_area_br18' => true,
		'constructed_share_br18' => true,
		'centroid' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'sub_type' => 'sub_type',
        'ownership_code' => 'ownership_code',
        'description' => 'description',
        'primary_usage' => 'primary_usage',
        'construction_year' => 'construction_year',
        'rebuilding_year' => 'rebuilding_year',
        'floor_area_br18' => 'floor_area_br18',
        'constructed_share_br18' => 'constructed_share_br18',
        'centroid' => 'centroid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'sub_type' => 'setSubType',
        'ownership_code' => 'setOwnershipCode',
        'description' => 'setDescription',
        'primary_usage' => 'setPrimaryUsage',
        'construction_year' => 'setConstructionYear',
        'rebuilding_year' => 'setRebuildingYear',
        'floor_area_br18' => 'setFloorAreaBr18',
        'constructed_share_br18' => 'setConstructedShareBr18',
        'centroid' => 'setCentroid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'sub_type' => 'getSubType',
        'ownership_code' => 'getOwnershipCode',
        'description' => 'getDescription',
        'primary_usage' => 'getPrimaryUsage',
        'construction_year' => 'getConstructionYear',
        'rebuilding_year' => 'getRebuildingYear',
        'floor_area_br18' => 'getFloorAreaBr18',
        'constructed_share_br18' => 'getConstructedShareBr18',
        'centroid' => 'getCentroid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('sub_type', $data ?? [], null);
        $this->setIfExists('ownership_code', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('primary_usage', $data ?? [], null);
        $this->setIfExists('construction_year', $data ?? [], null);
        $this->setIfExists('rebuilding_year', $data ?? [], null);
        $this->setIfExists('floor_area_br18', $data ?? [], null);
        $this->setIfExists('constructed_share_br18', $data ?? [], null);
        $this->setIfExists('centroid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['sub_type'] === null) {
            $invalidProperties[] = "'sub_type' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['centroid'] === null) {
            $invalidProperties[] = "'centroid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\PropertyTypeEnum
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\PropertyTypeEnum $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets sub_type
     *
     * @return \OpenAPI\Client\Model\PropertySubTypeEnum
     */
    public function getSubType()
    {
        return $this->container['sub_type'];
    }

    /**
     * Sets sub_type
     *
     * @param \OpenAPI\Client\Model\PropertySubTypeEnum $sub_type sub_type
     *
     * @return self
     */
    public function setSubType($sub_type)
    {
        if (is_null($sub_type)) {
            throw new \InvalidArgumentException('non-nullable sub_type cannot be null');
        }
        $this->container['sub_type'] = $sub_type;

        return $this;
    }

    /**
     * Gets ownership_code
     *
     * @return mixed|null
     */
    public function getOwnershipCode()
    {
        return $this->container['ownership_code'];
    }

    /**
     * Sets ownership_code
     *
     * @param mixed|null $ownership_code ownership_code
     *
     * @return self
     */
    public function setOwnershipCode($ownership_code)
    {
        if (is_null($ownership_code)) {
            array_push($this->openAPINullablesSetToNull, 'ownership_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ownership_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ownership_code'] = $ownership_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return mixed
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param mixed $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets primary_usage
     *
     * @return mixed|null
     */
    public function getPrimaryUsage()
    {
        return $this->container['primary_usage'];
    }

    /**
     * Sets primary_usage
     *
     * @param mixed|null $primary_usage primary_usage
     *
     * @return self
     */
    public function setPrimaryUsage($primary_usage)
    {
        if (is_null($primary_usage)) {
            array_push($this->openAPINullablesSetToNull, 'primary_usage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_usage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary_usage'] = $primary_usage;

        return $this;
    }

    /**
     * Gets construction_year
     *
     * @return mixed|null
     */
    public function getConstructionYear()
    {
        return $this->container['construction_year'];
    }

    /**
     * Sets construction_year
     *
     * @param mixed|null $construction_year construction_year
     *
     * @return self
     */
    public function setConstructionYear($construction_year)
    {
        if (is_null($construction_year)) {
            array_push($this->openAPINullablesSetToNull, 'construction_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('construction_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['construction_year'] = $construction_year;

        return $this;
    }

    /**
     * Gets rebuilding_year
     *
     * @return mixed|null
     */
    public function getRebuildingYear()
    {
        return $this->container['rebuilding_year'];
    }

    /**
     * Sets rebuilding_year
     *
     * @param mixed|null $rebuilding_year rebuilding_year
     *
     * @return self
     */
    public function setRebuildingYear($rebuilding_year)
    {
        if (is_null($rebuilding_year)) {
            array_push($this->openAPINullablesSetToNull, 'rebuilding_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rebuilding_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rebuilding_year'] = $rebuilding_year;

        return $this;
    }

    /**
     * Gets floor_area_br18
     *
     * @return mixed|null
     */
    public function getFloorAreaBr18()
    {
        return $this->container['floor_area_br18'];
    }

    /**
     * Sets floor_area_br18
     *
     * @param mixed|null $floor_area_br18 floor_area_br18
     *
     * @return self
     */
    public function setFloorAreaBr18($floor_area_br18)
    {
        if (is_null($floor_area_br18)) {
            array_push($this->openAPINullablesSetToNull, 'floor_area_br18');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('floor_area_br18', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['floor_area_br18'] = $floor_area_br18;

        return $this;
    }

    /**
     * Gets constructed_share_br18
     *
     * @return mixed|null
     */
    public function getConstructedShareBr18()
    {
        return $this->container['constructed_share_br18'];
    }

    /**
     * Sets constructed_share_br18
     *
     * @param mixed|null $constructed_share_br18 constructed_share_br18
     *
     * @return self
     */
    public function setConstructedShareBr18($constructed_share_br18)
    {
        if (is_null($constructed_share_br18)) {
            array_push($this->openAPINullablesSetToNull, 'constructed_share_br18');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('constructed_share_br18', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['constructed_share_br18'] = $constructed_share_br18;

        return $this;
    }

    /**
     * Gets centroid
     *
     * @return mixed
     */
    public function getCentroid()
    {
        return $this->container['centroid'];
    }

    /**
     * Sets centroid
     *
     * @param mixed $centroid centroid
     *
     * @return self
     */
    public function setCentroid($centroid)
    {
        if (is_null($centroid)) {
            array_push($this->openAPINullablesSetToNull, 'centroid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('centroid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['centroid'] = $centroid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


