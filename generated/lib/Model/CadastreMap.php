<?php
/**
 * CadastreMap
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CadastreMap Class Doc Comment
 *
 * @category Class
 * @description Base class for a model representing and defining a Materialized View.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CadastreMap implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CadastreMap';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'sfe_number' => 'mixed',
        'registered_area' => 'mixed',
        'cadastre_number' => 'mixed',
        'land_lot_code' => 'mixed',
        'land_lot_name' => 'mixed',
        'type' => '\OpenAPI\Client\Model\PropertyTypeEnum',
        'sub_type' => '\OpenAPI\Client\Model\PropertySubTypeEnum',
        'names' => 'mixed',
        'property_value' => 'mixed',
        'land_value' => 'mixed',
        'constructed_share_br18' => 'mixed',
        'sqm_price_floor_area_br18' => 'mixed',
        'sqm_price_land_area' => 'mixed',
        'trade_date' => 'mixed',
        'purchase_price_total_adjusted' => 'mixed',
        'is_common_lot' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'sfe_number' => null,
        'registered_area' => null,
        'cadastre_number' => null,
        'land_lot_code' => null,
        'land_lot_name' => null,
        'type' => null,
        'sub_type' => null,
        'names' => null,
        'property_value' => null,
        'land_value' => null,
        'constructed_share_br18' => null,
        'sqm_price_floor_area_br18' => null,
        'sqm_price_land_area' => null,
        'trade_date' => 'date-time',
        'purchase_price_total_adjusted' => null,
        'is_common_lot' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'sfe_number' => true,
		'registered_area' => true,
		'cadastre_number' => true,
		'land_lot_code' => true,
		'land_lot_name' => true,
		'type' => false,
		'sub_type' => false,
		'names' => true,
		'property_value' => true,
		'land_value' => true,
		'constructed_share_br18' => true,
		'sqm_price_floor_area_br18' => true,
		'sqm_price_land_area' => true,
		'trade_date' => true,
		'purchase_price_total_adjusted' => true,
		'is_common_lot' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'sfe_number' => 'sfe_number',
        'registered_area' => 'registered_area',
        'cadastre_number' => 'cadastre_number',
        'land_lot_code' => 'land_lot_code',
        'land_lot_name' => 'land_lot_name',
        'type' => 'type',
        'sub_type' => 'sub_type',
        'names' => 'names',
        'property_value' => 'property_value',
        'land_value' => 'land_value',
        'constructed_share_br18' => 'constructed_share_br18',
        'sqm_price_floor_area_br18' => 'sqm_price_floor_area_br18',
        'sqm_price_land_area' => 'sqm_price_land_area',
        'trade_date' => 'trade_date',
        'purchase_price_total_adjusted' => 'purchase_price_total_adjusted',
        'is_common_lot' => 'is_common_lot'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'sfe_number' => 'setSfeNumber',
        'registered_area' => 'setRegisteredArea',
        'cadastre_number' => 'setCadastreNumber',
        'land_lot_code' => 'setLandLotCode',
        'land_lot_name' => 'setLandLotName',
        'type' => 'setType',
        'sub_type' => 'setSubType',
        'names' => 'setNames',
        'property_value' => 'setPropertyValue',
        'land_value' => 'setLandValue',
        'constructed_share_br18' => 'setConstructedShareBr18',
        'sqm_price_floor_area_br18' => 'setSqmPriceFloorAreaBr18',
        'sqm_price_land_area' => 'setSqmPriceLandArea',
        'trade_date' => 'setTradeDate',
        'purchase_price_total_adjusted' => 'setPurchasePriceTotalAdjusted',
        'is_common_lot' => 'setIsCommonLot'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'sfe_number' => 'getSfeNumber',
        'registered_area' => 'getRegisteredArea',
        'cadastre_number' => 'getCadastreNumber',
        'land_lot_code' => 'getLandLotCode',
        'land_lot_name' => 'getLandLotName',
        'type' => 'getType',
        'sub_type' => 'getSubType',
        'names' => 'getNames',
        'property_value' => 'getPropertyValue',
        'land_value' => 'getLandValue',
        'constructed_share_br18' => 'getConstructedShareBr18',
        'sqm_price_floor_area_br18' => 'getSqmPriceFloorAreaBr18',
        'sqm_price_land_area' => 'getSqmPriceLandArea',
        'trade_date' => 'getTradeDate',
        'purchase_price_total_adjusted' => 'getPurchasePriceTotalAdjusted',
        'is_common_lot' => 'getIsCommonLot'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('sfe_number', $data ?? [], null);
        $this->setIfExists('registered_area', $data ?? [], null);
        $this->setIfExists('cadastre_number', $data ?? [], null);
        $this->setIfExists('land_lot_code', $data ?? [], null);
        $this->setIfExists('land_lot_name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('sub_type', $data ?? [], null);
        $this->setIfExists('names', $data ?? [], null);
        $this->setIfExists('property_value', $data ?? [], null);
        $this->setIfExists('land_value', $data ?? [], null);
        $this->setIfExists('constructed_share_br18', $data ?? [], null);
        $this->setIfExists('sqm_price_floor_area_br18', $data ?? [], null);
        $this->setIfExists('sqm_price_land_area', $data ?? [], null);
        $this->setIfExists('trade_date', $data ?? [], null);
        $this->setIfExists('purchase_price_total_adjusted', $data ?? [], null);
        $this->setIfExists('is_common_lot', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['sfe_number'] === null) {
            $invalidProperties[] = "'sfe_number' can't be null";
        }
        if ($this->container['registered_area'] === null) {
            $invalidProperties[] = "'registered_area' can't be null";
        }
        if ($this->container['cadastre_number'] === null) {
            $invalidProperties[] = "'cadastre_number' can't be null";
        }
        if ($this->container['land_lot_code'] === null) {
            $invalidProperties[] = "'land_lot_code' can't be null";
        }
        if ($this->container['land_lot_name'] === null) {
            $invalidProperties[] = "'land_lot_name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['sub_type'] === null) {
            $invalidProperties[] = "'sub_type' can't be null";
        }
        if ($this->container['constructed_share_br18'] === null) {
            $invalidProperties[] = "'constructed_share_br18' can't be null";
        }
        if ($this->container['is_common_lot'] === null) {
            $invalidProperties[] = "'is_common_lot' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sfe_number
     *
     * @return mixed
     */
    public function getSfeNumber()
    {
        return $this->container['sfe_number'];
    }

    /**
     * Sets sfe_number
     *
     * @param mixed $sfe_number sfe_number
     *
     * @return self
     */
    public function setSfeNumber($sfe_number)
    {
        if (is_null($sfe_number)) {
            array_push($this->openAPINullablesSetToNull, 'sfe_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sfe_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sfe_number'] = $sfe_number;

        return $this;
    }

    /**
     * Gets registered_area
     *
     * @return mixed
     */
    public function getRegisteredArea()
    {
        return $this->container['registered_area'];
    }

    /**
     * Sets registered_area
     *
     * @param mixed $registered_area registered_area
     *
     * @return self
     */
    public function setRegisteredArea($registered_area)
    {
        if (is_null($registered_area)) {
            array_push($this->openAPINullablesSetToNull, 'registered_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registered_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registered_area'] = $registered_area;

        return $this;
    }

    /**
     * Gets cadastre_number
     *
     * @return mixed
     */
    public function getCadastreNumber()
    {
        return $this->container['cadastre_number'];
    }

    /**
     * Sets cadastre_number
     *
     * @param mixed $cadastre_number cadastre_number
     *
     * @return self
     */
    public function setCadastreNumber($cadastre_number)
    {
        if (is_null($cadastre_number)) {
            array_push($this->openAPINullablesSetToNull, 'cadastre_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cadastre_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cadastre_number'] = $cadastre_number;

        return $this;
    }

    /**
     * Gets land_lot_code
     *
     * @return mixed
     */
    public function getLandLotCode()
    {
        return $this->container['land_lot_code'];
    }

    /**
     * Sets land_lot_code
     *
     * @param mixed $land_lot_code land_lot_code
     *
     * @return self
     */
    public function setLandLotCode($land_lot_code)
    {
        if (is_null($land_lot_code)) {
            array_push($this->openAPINullablesSetToNull, 'land_lot_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('land_lot_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['land_lot_code'] = $land_lot_code;

        return $this;
    }

    /**
     * Gets land_lot_name
     *
     * @return mixed
     */
    public function getLandLotName()
    {
        return $this->container['land_lot_name'];
    }

    /**
     * Sets land_lot_name
     *
     * @param mixed $land_lot_name land_lot_name
     *
     * @return self
     */
    public function setLandLotName($land_lot_name)
    {
        if (is_null($land_lot_name)) {
            array_push($this->openAPINullablesSetToNull, 'land_lot_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('land_lot_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['land_lot_name'] = $land_lot_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\PropertyTypeEnum
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\PropertyTypeEnum $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets sub_type
     *
     * @return \OpenAPI\Client\Model\PropertySubTypeEnum
     */
    public function getSubType()
    {
        return $this->container['sub_type'];
    }

    /**
     * Sets sub_type
     *
     * @param \OpenAPI\Client\Model\PropertySubTypeEnum $sub_type sub_type
     *
     * @return self
     */
    public function setSubType($sub_type)
    {
        if (is_null($sub_type)) {
            throw new \InvalidArgumentException('non-nullable sub_type cannot be null');
        }
        $this->container['sub_type'] = $sub_type;

        return $this;
    }

    /**
     * Gets names
     *
     * @return mixed|null
     */
    public function getNames()
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param mixed|null $names names
     *
     * @return self
     */
    public function setNames($names)
    {
        if (is_null($names)) {
            array_push($this->openAPINullablesSetToNull, 'names');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('names', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets property_value
     *
     * @return mixed|null
     */
    public function getPropertyValue()
    {
        return $this->container['property_value'];
    }

    /**
     * Sets property_value
     *
     * @param mixed|null $property_value property_value
     *
     * @return self
     */
    public function setPropertyValue($property_value)
    {
        if (is_null($property_value)) {
            array_push($this->openAPINullablesSetToNull, 'property_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_value'] = $property_value;

        return $this;
    }

    /**
     * Gets land_value
     *
     * @return mixed|null
     */
    public function getLandValue()
    {
        return $this->container['land_value'];
    }

    /**
     * Sets land_value
     *
     * @param mixed|null $land_value land_value
     *
     * @return self
     */
    public function setLandValue($land_value)
    {
        if (is_null($land_value)) {
            array_push($this->openAPINullablesSetToNull, 'land_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('land_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['land_value'] = $land_value;

        return $this;
    }

    /**
     * Gets constructed_share_br18
     *
     * @return mixed
     */
    public function getConstructedShareBr18()
    {
        return $this->container['constructed_share_br18'];
    }

    /**
     * Sets constructed_share_br18
     *
     * @param mixed $constructed_share_br18 constructed_share_br18
     *
     * @return self
     */
    public function setConstructedShareBr18($constructed_share_br18)
    {
        if (is_null($constructed_share_br18)) {
            array_push($this->openAPINullablesSetToNull, 'constructed_share_br18');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('constructed_share_br18', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['constructed_share_br18'] = $constructed_share_br18;

        return $this;
    }

    /**
     * Gets sqm_price_floor_area_br18
     *
     * @return mixed|null
     */
    public function getSqmPriceFloorAreaBr18()
    {
        return $this->container['sqm_price_floor_area_br18'];
    }

    /**
     * Sets sqm_price_floor_area_br18
     *
     * @param mixed|null $sqm_price_floor_area_br18 sqm_price_floor_area_br18
     *
     * @return self
     */
    public function setSqmPriceFloorAreaBr18($sqm_price_floor_area_br18)
    {
        if (is_null($sqm_price_floor_area_br18)) {
            array_push($this->openAPINullablesSetToNull, 'sqm_price_floor_area_br18');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sqm_price_floor_area_br18', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sqm_price_floor_area_br18'] = $sqm_price_floor_area_br18;

        return $this;
    }

    /**
     * Gets sqm_price_land_area
     *
     * @return mixed|null
     */
    public function getSqmPriceLandArea()
    {
        return $this->container['sqm_price_land_area'];
    }

    /**
     * Sets sqm_price_land_area
     *
     * @param mixed|null $sqm_price_land_area sqm_price_land_area
     *
     * @return self
     */
    public function setSqmPriceLandArea($sqm_price_land_area)
    {
        if (is_null($sqm_price_land_area)) {
            array_push($this->openAPINullablesSetToNull, 'sqm_price_land_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sqm_price_land_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sqm_price_land_area'] = $sqm_price_land_area;

        return $this;
    }

    /**
     * Gets trade_date
     *
     * @return mixed|null
     */
    public function getTradeDate()
    {
        return $this->container['trade_date'];
    }

    /**
     * Sets trade_date
     *
     * @param mixed|null $trade_date trade_date
     *
     * @return self
     */
    public function setTradeDate($trade_date)
    {
        if (is_null($trade_date)) {
            array_push($this->openAPINullablesSetToNull, 'trade_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trade_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trade_date'] = $trade_date;

        return $this;
    }

    /**
     * Gets purchase_price_total_adjusted
     *
     * @return mixed|null
     */
    public function getPurchasePriceTotalAdjusted()
    {
        return $this->container['purchase_price_total_adjusted'];
    }

    /**
     * Sets purchase_price_total_adjusted
     *
     * @param mixed|null $purchase_price_total_adjusted purchase_price_total_adjusted
     *
     * @return self
     */
    public function setPurchasePriceTotalAdjusted($purchase_price_total_adjusted)
    {
        if (is_null($purchase_price_total_adjusted)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_price_total_adjusted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_price_total_adjusted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchase_price_total_adjusted'] = $purchase_price_total_adjusted;

        return $this;
    }

    /**
     * Gets is_common_lot
     *
     * @return mixed
     */
    public function getIsCommonLot()
    {
        return $this->container['is_common_lot'];
    }

    /**
     * Sets is_common_lot
     *
     * @param mixed $is_common_lot is_common_lot
     *
     * @return self
     */
    public function setIsCommonLot($is_common_lot)
    {
        if (is_null($is_common_lot)) {
            array_push($this->openAPINullablesSetToNull, 'is_common_lot');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_common_lot', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_common_lot'] = $is_common_lot;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


