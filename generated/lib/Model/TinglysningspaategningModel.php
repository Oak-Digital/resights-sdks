<?php
/**
 * TinglysningspaategningModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TinglysningspaategningModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TinglysningspaategningModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TinglysningspaategningModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'mixed',
        'revision_nummer' => 'mixed',
        'alias_id' => 'mixed',
        'fuldmagt_identifikator' => 'mixed',
        'rettighed_samling' => 'mixed',
        'ekspeditionstype_id' => 'mixed',
        'ekspeditionstype_tekst' => 'mixed',
        'ekspeditionstype_raekkefoelge' => 'mixed',
        'tinglysning_status' => '\OpenAPI\Client\Model\TinglysningStatusEnum',
        'tinglysning_objekt_identifikator' => '\OpenAPI\Client\Model\TinglysningObjektIdentifikatorModel',
        'bemaerkning_samling' => 'mixed',
        'anmaerkning_samling' => 'mixed',
        'frist_information_samling' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'revision_nummer' => null,
        'alias_id' => null,
        'fuldmagt_identifikator' => null,
        'rettighed_samling' => null,
        'ekspeditionstype_id' => null,
        'ekspeditionstype_tekst' => null,
        'ekspeditionstype_raekkefoelge' => null,
        'tinglysning_status' => null,
        'tinglysning_objekt_identifikator' => null,
        'bemaerkning_samling' => null,
        'anmaerkning_samling' => null,
        'frist_information_samling' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'revision_nummer' => true,
		'alias_id' => true,
		'fuldmagt_identifikator' => true,
		'rettighed_samling' => true,
		'ekspeditionstype_id' => true,
		'ekspeditionstype_tekst' => true,
		'ekspeditionstype_raekkefoelge' => true,
		'tinglysning_status' => false,
		'tinglysning_objekt_identifikator' => false,
		'bemaerkning_samling' => true,
		'anmaerkning_samling' => true,
		'frist_information_samling' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'revision_nummer' => 'RevisionNummer',
        'alias_id' => 'AliasId',
        'fuldmagt_identifikator' => 'FuldmagtIdentifikator',
        'rettighed_samling' => 'RettighedSamling',
        'ekspeditionstype_id' => 'EkspeditionstypeId',
        'ekspeditionstype_tekst' => 'EkspeditionstypeTekst',
        'ekspeditionstype_raekkefoelge' => 'EkspeditionstypeRaekkefoelge',
        'tinglysning_status' => 'TinglysningStatus',
        'tinglysning_objekt_identifikator' => 'TinglysningObjektIdentifikator',
        'bemaerkning_samling' => 'BemaerkningSamling',
        'anmaerkning_samling' => 'AnmaerkningSamling',
        'frist_information_samling' => 'FristInformationSamling'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'revision_nummer' => 'setRevisionNummer',
        'alias_id' => 'setAliasId',
        'fuldmagt_identifikator' => 'setFuldmagtIdentifikator',
        'rettighed_samling' => 'setRettighedSamling',
        'ekspeditionstype_id' => 'setEkspeditionstypeId',
        'ekspeditionstype_tekst' => 'setEkspeditionstypeTekst',
        'ekspeditionstype_raekkefoelge' => 'setEkspeditionstypeRaekkefoelge',
        'tinglysning_status' => 'setTinglysningStatus',
        'tinglysning_objekt_identifikator' => 'setTinglysningObjektIdentifikator',
        'bemaerkning_samling' => 'setBemaerkningSamling',
        'anmaerkning_samling' => 'setAnmaerkningSamling',
        'frist_information_samling' => 'setFristInformationSamling'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'revision_nummer' => 'getRevisionNummer',
        'alias_id' => 'getAliasId',
        'fuldmagt_identifikator' => 'getFuldmagtIdentifikator',
        'rettighed_samling' => 'getRettighedSamling',
        'ekspeditionstype_id' => 'getEkspeditionstypeId',
        'ekspeditionstype_tekst' => 'getEkspeditionstypeTekst',
        'ekspeditionstype_raekkefoelge' => 'getEkspeditionstypeRaekkefoelge',
        'tinglysning_status' => 'getTinglysningStatus',
        'tinglysning_objekt_identifikator' => 'getTinglysningObjektIdentifikator',
        'bemaerkning_samling' => 'getBemaerkningSamling',
        'anmaerkning_samling' => 'getAnmaerkningSamling',
        'frist_information_samling' => 'getFristInformationSamling'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('revision_nummer', $data ?? [], null);
        $this->setIfExists('alias_id', $data ?? [], null);
        $this->setIfExists('fuldmagt_identifikator', $data ?? [], null);
        $this->setIfExists('rettighed_samling', $data ?? [], null);
        $this->setIfExists('ekspeditionstype_id', $data ?? [], null);
        $this->setIfExists('ekspeditionstype_tekst', $data ?? [], null);
        $this->setIfExists('ekspeditionstype_raekkefoelge', $data ?? [], null);
        $this->setIfExists('tinglysning_status', $data ?? [], null);
        $this->setIfExists('tinglysning_objekt_identifikator', $data ?? [], null);
        $this->setIfExists('bemaerkning_samling', $data ?? [], null);
        $this->setIfExists('anmaerkning_samling', $data ?? [], null);
        $this->setIfExists('frist_information_samling', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ekspeditionstype_id'] === null) {
            $invalidProperties[] = "'ekspeditionstype_id' can't be null";
        }
        if ($this->container['tinglysning_status'] === null) {
            $invalidProperties[] = "'tinglysning_status' can't be null";
        }
        if ($this->container['tinglysning_objekt_identifikator'] === null) {
            $invalidProperties[] = "'tinglysning_objekt_identifikator' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return mixed|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param mixed|null $id Identifikator pÃ¥ det dokument, der kan vÃ¦re et resultat af tinglysningen. Ved oprettende dokumenter indeholder den DokumentIdentifikator. Ved pÃ¥tegninger indeholder den DokumentIdentifikator og revisionsnummer. DokumentIdentifikator vil ved pÃ¥tegninger vÃ¦re identisk med indholdet af DokumentRevisionIdentifikator i TinglysningsObjektIdentifikatorSamling. I tilfÃ¦lde af aflysning vil der ikke vÃ¦re angivet en ny DokumentRevisionIdentifikator. Hvis TinglysningStatusKode er 'afvist', vil der ikke vÃ¦re en ny DokumentRevisionIdentifikator.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets revision_nummer
     *
     * @return mixed|null
     */
    public function getRevisionNummer()
    {
        return $this->container['revision_nummer'];
    }

    /**
     * Sets revision_nummer
     *
     * @param mixed|null $revision_nummer Revisionsnummer for rettighedsdokument.
     *
     * @return self
     */
    public function setRevisionNummer($revision_nummer)
    {
        if (is_null($revision_nummer)) {
            array_push($this->openAPINullablesSetToNull, 'revision_nummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('revision_nummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['revision_nummer'] = $revision_nummer;

        return $this;
    }

    /**
     * Gets alias_id
     *
     * @return mixed|null
     */
    public function getAliasId()
    {
        return $this->container['alias_id'];
    }

    /**
     * Sets alias_id
     *
     * @param mixed|null $alias_id Ved oprettende dokumenter indeholder det, dato/lÃ¸benummer (Menneskevenligt alias) for det dokument, der er resultatet af tinglysningen.
     *
     * @return self
     */
    public function setAliasId($alias_id)
    {
        if (is_null($alias_id)) {
            array_push($this->openAPINullablesSetToNull, 'alias_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alias_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alias_id'] = $alias_id;

        return $this;
    }

    /**
     * Gets fuldmagt_identifikator
     *
     * @return mixed|null
     */
    public function getFuldmagtIdentifikator()
    {
        return $this->container['fuldmagt_identifikator'];
    }

    /**
     * Sets fuldmagt_identifikator
     *
     * @param mixed|null $fuldmagt_identifikator Ved anmeldelse af fuldmagt, returneres en FuldmagtIdentifikator. Denne skal bruges ved tilbagekaldelse.
     *
     * @return self
     */
    public function setFuldmagtIdentifikator($fuldmagt_identifikator)
    {
        if (is_null($fuldmagt_identifikator)) {
            array_push($this->openAPINullablesSetToNull, 'fuldmagt_identifikator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fuldmagt_identifikator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fuldmagt_identifikator'] = $fuldmagt_identifikator;

        return $this;
    }

    /**
     * Gets rettighed_samling
     *
     * @return mixed|null
     */
    public function getRettighedSamling()
    {
        return $this->container['rettighed_samling'];
    }

    /**
     * Sets rettighed_samling
     *
     * @param mixed|null $rettighed_samling rettighed_samling
     *
     * @return self
     */
    public function setRettighedSamling($rettighed_samling)
    {
        if (is_null($rettighed_samling)) {
            array_push($this->openAPINullablesSetToNull, 'rettighed_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rettighed_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rettighed_samling'] = $rettighed_samling;

        return $this;
    }

    /**
     * Gets ekspeditionstype_id
     *
     * @return mixed
     */
    public function getEkspeditionstypeId()
    {
        return $this->container['ekspeditionstype_id'];
    }

    /**
     * Sets ekspeditionstype_id
     *
     * @param mixed $ekspeditionstype_id Her angives den ekspeditionstype, der har fÃ¸rt til Tinglysningsrettens tinglysningspÃ¥tegning. I tilfÃ¦lde af kombination af pÃ¥tegnende ekspeditionstyper, kan man skelne mellem hvilke tinglysningspÃ¥tegningselementer, der hÃ¸rer til hvilke ekspeditionstyper.
     *
     * @return self
     */
    public function setEkspeditionstypeId($ekspeditionstype_id)
    {
        if (is_null($ekspeditionstype_id)) {
            array_push($this->openAPINullablesSetToNull, 'ekspeditionstype_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ekspeditionstype_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ekspeditionstype_id'] = $ekspeditionstype_id;

        return $this;
    }

    /**
     * Gets ekspeditionstype_tekst
     *
     * @return mixed|null
     */
    public function getEkspeditionstypeTekst()
    {
        return $this->container['ekspeditionstype_tekst'];
    }

    /**
     * Sets ekspeditionstype_tekst
     *
     * @param mixed|null $ekspeditionstype_tekst Ekspeditionstype i tekstformat
     *
     * @return self
     */
    public function setEkspeditionstypeTekst($ekspeditionstype_tekst)
    {
        if (is_null($ekspeditionstype_tekst)) {
            array_push($this->openAPINullablesSetToNull, 'ekspeditionstype_tekst');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ekspeditionstype_tekst', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ekspeditionstype_tekst'] = $ekspeditionstype_tekst;

        return $this;
    }

    /**
     * Gets ekspeditionstype_raekkefoelge
     *
     * @return mixed|null
     */
    public function getEkspeditionstypeRaekkefoelge()
    {
        return $this->container['ekspeditionstype_raekkefoelge'];
    }

    /**
     * Sets ekspeditionstype_raekkefoelge
     *
     * @param mixed|null $ekspeditionstype_raekkefoelge I anmeldelser med pÃ¥tegninger kan der optrÃ¦de flere ekspeditionstyper i Ã©n anmeldelse. Dette kan ogsÃ¥ vÃ¦re flere pÃ¥tegninger med samme ekspeditionstypenummer. Det betyder at man i en sÃ¥dan situation ikke ud fra TinglysningObjektIdentifikator og EkspeditionstypeIdentifikator kan afgÃ¸re, hvilken pÃ¥tegning i enmeldelsen det enkelte TinglysningpaategningElement vedrÃ¸rer. Ved at angive EkspeditionstypeRaekkefoelge bliver det muligt.
     *
     * @return self
     */
    public function setEkspeditionstypeRaekkefoelge($ekspeditionstype_raekkefoelge)
    {
        if (is_null($ekspeditionstype_raekkefoelge)) {
            array_push($this->openAPINullablesSetToNull, 'ekspeditionstype_raekkefoelge');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ekspeditionstype_raekkefoelge', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ekspeditionstype_raekkefoelge'] = $ekspeditionstype_raekkefoelge;

        return $this;
    }

    /**
     * Gets tinglysning_status
     *
     * @return \OpenAPI\Client\Model\TinglysningStatusEnum
     */
    public function getTinglysningStatus()
    {
        return $this->container['tinglysning_status'];
    }

    /**
     * Sets tinglysning_status
     *
     * @param \OpenAPI\Client\Model\TinglysningStatusEnum $tinglysning_status tinglysning_status
     *
     * @return self
     */
    public function setTinglysningStatus($tinglysning_status)
    {
        if (is_null($tinglysning_status)) {
            throw new \InvalidArgumentException('non-nullable tinglysning_status cannot be null');
        }
        $this->container['tinglysning_status'] = $tinglysning_status;

        return $this;
    }

    /**
     * Gets tinglysning_objekt_identifikator
     *
     * @return \OpenAPI\Client\Model\TinglysningObjektIdentifikatorModel
     */
    public function getTinglysningObjektIdentifikator()
    {
        return $this->container['tinglysning_objekt_identifikator'];
    }

    /**
     * Sets tinglysning_objekt_identifikator
     *
     * @param \OpenAPI\Client\Model\TinglysningObjektIdentifikatorModel $tinglysning_objekt_identifikator tinglysning_objekt_identifikator
     *
     * @return self
     */
    public function setTinglysningObjektIdentifikator($tinglysning_objekt_identifikator)
    {
        if (is_null($tinglysning_objekt_identifikator)) {
            throw new \InvalidArgumentException('non-nullable tinglysning_objekt_identifikator cannot be null');
        }
        $this->container['tinglysning_objekt_identifikator'] = $tinglysning_objekt_identifikator;

        return $this;
    }

    /**
     * Gets bemaerkning_samling
     *
     * @return mixed|null
     */
    public function getBemaerkningSamling()
    {
        return $this->container['bemaerkning_samling'];
    }

    /**
     * Sets bemaerkning_samling
     *
     * @param mixed|null $bemaerkning_samling BemÃ¦rkninger fra de automatiske kontroller og sagsbehandlingen. En eller flere af disse kan vÃ¦re Ã¥rsagen til en eventuel afvisning af anmeldelsen. BemÃ¦rkninger knytter supplerende information til resultatet af de udfÃ¸rte kontroller. BemÃ¦rkninger angives i form af kode for standard bemÃ¦rkningstekst, eller kode for fri tekst (hvor tinglysningsmedarbejderen ikke anvender standard bemÃ¦rkningstekst, men selv anfÃ¸rer bemÃ¦rkningsteksten).
     *
     * @return self
     */
    public function setBemaerkningSamling($bemaerkning_samling)
    {
        if (is_null($bemaerkning_samling)) {
            array_push($this->openAPINullablesSetToNull, 'bemaerkning_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bemaerkning_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bemaerkning_samling'] = $bemaerkning_samling;

        return $this;
    }

    /**
     * Gets anmaerkning_samling
     *
     * @return mixed|null
     */
    public function getAnmaerkningSamling()
    {
        return $this->container['anmaerkning_samling'];
    }

    /**
     * Sets anmaerkning_samling
     *
     * @param mixed|null $anmaerkning_samling Samling af anmaerkninger. Det kan vÃ¦re anmaerkninger om servitutter og hÃ¦ftelser angivet ved nummer. AnmÃ¦rkninger vedrÃ¸rer altid respekter. Mangler der i en anmeldelse respekt for en eller flere hÃ¦ftelser eller servitutter, giver sagsbehandlingen anledning til anmÃ¦rkninger herom. AnmÃ¦rkning for servitutter indeholder kode for yderligere oplysninger om servitutten.
     *
     * @return self
     */
    public function setAnmaerkningSamling($anmaerkning_samling)
    {
        if (is_null($anmaerkning_samling)) {
            array_push($this->openAPINullablesSetToNull, 'anmaerkning_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('anmaerkning_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['anmaerkning_samling'] = $anmaerkning_samling;

        return $this;
    }

    /**
     * Gets frist_information_samling
     *
     * @return mixed|null
     */
    public function getFristInformationSamling()
    {
        return $this->container['frist_information_samling'];
    }

    /**
     * Sets frist_information_samling
     *
     * @param mixed|null $frist_information_samling FristInformation ved tinglysning med frist. Her oplyses Ã¥rsag og fristdato.
     *
     * @return self
     */
    public function setFristInformationSamling($frist_information_samling)
    {
        if (is_null($frist_information_samling)) {
            array_push($this->openAPINullablesSetToNull, 'frist_information_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('frist_information_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['frist_information_samling'] = $frist_information_samling;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


