<?php
/**
 * AnnualReportChange
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AnnualReportChange Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AnnualReportChange implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AnnualReportChange';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assets' => 'mixed',
        'cash_and_cash_equivalents' => 'mixed',
        'contributed_capital' => 'mixed',
        'current_assets' => 'mixed',
        'cvr_number' => 'mixed',
        'debt' => 'mixed',
        'depreciation' => 'mixed',
        'dividend' => 'mixed',
        'ebit' => 'mixed',
        'ebit_per_employee' => 'mixed',
        'employee_expenses' => 'mixed',
        'employee_expenses_per_employee' => 'mixed',
        'equity' => 'mixed',
        'equity_ratio' => 'mixed',
        'finance_costs' => 'mixed',
        'finance_income' => 'mixed',
        'gearing' => 'mixed',
        'goodwill' => 'mixed',
        'gross_margin_ratio' => 'mixed',
        'gross_profit' => 'mixed',
        'gross_profit_per_employee' => 'mixed',
        'intangible_assets' => 'mixed',
        'inventories' => 'mixed',
        'invested_capital' => 'mixed',
        'investment_property' => 'mixed',
        'investments_in_associates' => 'mixed',
        'investments_in_group_enterprises' => 'mixed',
        'land_and_buildings' => 'mixed',
        'liabilities' => 'mixed',
        'long_term_debt' => 'mixed',
        'long_term_debt_mortgage' => 'mixed',
        'long_term_debt_others' => 'mixed',
        'long_term_investments_and_receivables' => 'mixed',
        'manufactured_goods' => 'mixed',
        'non_current_assets' => 'mixed',
        'number_employees' => 'mixed',
        'operating_cost' => 'mixed',
        'other_employee_expenses' => 'mixed',
        'other_intangible_assets' => 'mixed',
        'other_long_term_investments' => 'mixed',
        'other_long_term_receivables' => 'mixed',
        'other_operating_expenses' => 'mixed',
        'post_employment_benefits' => 'mixed',
        'profit_loss' => 'mixed',
        'profit_loss_before_tax' => 'mixed',
        'profit_loss_per_employee' => 'mixed',
        'profit_ratio' => 'mixed',
        'property_plant_and_equipment' => 'mixed',
        'provisions' => 'mixed',
        'provisions_for_deferred_tax' => 'mixed',
        'retained_earnings' => 'mixed',
        'revenue' => 'mixed',
        'revenue_per_employee' => 'mixed',
        'roce_ratio' => 'mixed',
        'roe_ratio' => 'mixed',
        'roi_ratio' => 'mixed',
        'sales_cost' => 'mixed',
        'short_term_debt' => 'mixed',
        'short_term_debt_credit_institutions' => 'mixed',
        'short_term_debt_group_enterprises' => 'mixed',
        'short_term_debt_part_of_long_term_liabilities' => 'mixed',
        'short_term_debt_payables' => 'mixed',
        'short_term_debt_payables_others' => 'mixed',
        'short_term_debt_prepayment_customers' => 'mixed',
        'short_term_debt_tax_payables' => 'mixed',
        'short_term_receivables' => 'mixed',
        'short_term_receivables_associates' => 'mixed',
        'short_term_receivables_deferred_income' => 'mixed',
        'short_term_receivables_deferred_taxes' => 'mixed',
        'short_term_receivables_group_enterprises' => 'mixed',
        'short_term_receivables_others' => 'mixed',
        'short_term_receivables_trade' => 'mixed',
        'social_security_contributions' => 'mixed',
        'tax' => 'mixed',
        'wages_and_salaries' => 'mixed',
        'working_capital' => 'mixed',
        'working_capital_ratio' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'assets' => null,
        'cash_and_cash_equivalents' => null,
        'contributed_capital' => null,
        'current_assets' => null,
        'cvr_number' => null,
        'debt' => null,
        'depreciation' => null,
        'dividend' => null,
        'ebit' => null,
        'ebit_per_employee' => null,
        'employee_expenses' => null,
        'employee_expenses_per_employee' => null,
        'equity' => null,
        'equity_ratio' => null,
        'finance_costs' => null,
        'finance_income' => null,
        'gearing' => null,
        'goodwill' => null,
        'gross_margin_ratio' => null,
        'gross_profit' => null,
        'gross_profit_per_employee' => null,
        'intangible_assets' => null,
        'inventories' => null,
        'invested_capital' => null,
        'investment_property' => null,
        'investments_in_associates' => null,
        'investments_in_group_enterprises' => null,
        'land_and_buildings' => null,
        'liabilities' => null,
        'long_term_debt' => null,
        'long_term_debt_mortgage' => null,
        'long_term_debt_others' => null,
        'long_term_investments_and_receivables' => null,
        'manufactured_goods' => null,
        'non_current_assets' => null,
        'number_employees' => null,
        'operating_cost' => null,
        'other_employee_expenses' => null,
        'other_intangible_assets' => null,
        'other_long_term_investments' => null,
        'other_long_term_receivables' => null,
        'other_operating_expenses' => null,
        'post_employment_benefits' => null,
        'profit_loss' => null,
        'profit_loss_before_tax' => null,
        'profit_loss_per_employee' => null,
        'profit_ratio' => null,
        'property_plant_and_equipment' => null,
        'provisions' => null,
        'provisions_for_deferred_tax' => null,
        'retained_earnings' => null,
        'revenue' => null,
        'revenue_per_employee' => null,
        'roce_ratio' => null,
        'roe_ratio' => null,
        'roi_ratio' => null,
        'sales_cost' => null,
        'short_term_debt' => null,
        'short_term_debt_credit_institutions' => null,
        'short_term_debt_group_enterprises' => null,
        'short_term_debt_part_of_long_term_liabilities' => null,
        'short_term_debt_payables' => null,
        'short_term_debt_payables_others' => null,
        'short_term_debt_prepayment_customers' => null,
        'short_term_debt_tax_payables' => null,
        'short_term_receivables' => null,
        'short_term_receivables_associates' => null,
        'short_term_receivables_deferred_income' => null,
        'short_term_receivables_deferred_taxes' => null,
        'short_term_receivables_group_enterprises' => null,
        'short_term_receivables_others' => null,
        'short_term_receivables_trade' => null,
        'social_security_contributions' => null,
        'tax' => null,
        'wages_and_salaries' => null,
        'working_capital' => null,
        'working_capital_ratio' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'assets' => true,
		'cash_and_cash_equivalents' => true,
		'contributed_capital' => true,
		'current_assets' => true,
		'cvr_number' => true,
		'debt' => true,
		'depreciation' => true,
		'dividend' => true,
		'ebit' => true,
		'ebit_per_employee' => true,
		'employee_expenses' => true,
		'employee_expenses_per_employee' => true,
		'equity' => true,
		'equity_ratio' => true,
		'finance_costs' => true,
		'finance_income' => true,
		'gearing' => true,
		'goodwill' => true,
		'gross_margin_ratio' => true,
		'gross_profit' => true,
		'gross_profit_per_employee' => true,
		'intangible_assets' => true,
		'inventories' => true,
		'invested_capital' => true,
		'investment_property' => true,
		'investments_in_associates' => true,
		'investments_in_group_enterprises' => true,
		'land_and_buildings' => true,
		'liabilities' => true,
		'long_term_debt' => true,
		'long_term_debt_mortgage' => true,
		'long_term_debt_others' => true,
		'long_term_investments_and_receivables' => true,
		'manufactured_goods' => true,
		'non_current_assets' => true,
		'number_employees' => true,
		'operating_cost' => true,
		'other_employee_expenses' => true,
		'other_intangible_assets' => true,
		'other_long_term_investments' => true,
		'other_long_term_receivables' => true,
		'other_operating_expenses' => true,
		'post_employment_benefits' => true,
		'profit_loss' => true,
		'profit_loss_before_tax' => true,
		'profit_loss_per_employee' => true,
		'profit_ratio' => true,
		'property_plant_and_equipment' => true,
		'provisions' => true,
		'provisions_for_deferred_tax' => true,
		'retained_earnings' => true,
		'revenue' => true,
		'revenue_per_employee' => true,
		'roce_ratio' => true,
		'roe_ratio' => true,
		'roi_ratio' => true,
		'sales_cost' => true,
		'short_term_debt' => true,
		'short_term_debt_credit_institutions' => true,
		'short_term_debt_group_enterprises' => true,
		'short_term_debt_part_of_long_term_liabilities' => true,
		'short_term_debt_payables' => true,
		'short_term_debt_payables_others' => true,
		'short_term_debt_prepayment_customers' => true,
		'short_term_debt_tax_payables' => true,
		'short_term_receivables' => true,
		'short_term_receivables_associates' => true,
		'short_term_receivables_deferred_income' => true,
		'short_term_receivables_deferred_taxes' => true,
		'short_term_receivables_group_enterprises' => true,
		'short_term_receivables_others' => true,
		'short_term_receivables_trade' => true,
		'social_security_contributions' => true,
		'tax' => true,
		'wages_and_salaries' => true,
		'working_capital' => true,
		'working_capital_ratio' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assets' => 'assets',
        'cash_and_cash_equivalents' => 'cash_and_cash_equivalents',
        'contributed_capital' => 'contributed_capital',
        'current_assets' => 'current_assets',
        'cvr_number' => 'cvr_number',
        'debt' => 'debt',
        'depreciation' => 'depreciation',
        'dividend' => 'dividend',
        'ebit' => 'ebit',
        'ebit_per_employee' => 'ebit_per_employee',
        'employee_expenses' => 'employee_expenses',
        'employee_expenses_per_employee' => 'employee_expenses_per_employee',
        'equity' => 'equity',
        'equity_ratio' => 'equity_ratio',
        'finance_costs' => 'finance_costs',
        'finance_income' => 'finance_income',
        'gearing' => 'gearing',
        'goodwill' => 'goodwill',
        'gross_margin_ratio' => 'gross_margin_ratio',
        'gross_profit' => 'gross_profit',
        'gross_profit_per_employee' => 'gross_profit_per_employee',
        'intangible_assets' => 'intangible_assets',
        'inventories' => 'inventories',
        'invested_capital' => 'invested_capital',
        'investment_property' => 'investment_property',
        'investments_in_associates' => 'investments_in_associates',
        'investments_in_group_enterprises' => 'investments_in_group_enterprises',
        'land_and_buildings' => 'land_and_buildings',
        'liabilities' => 'liabilities',
        'long_term_debt' => 'long_term_debt',
        'long_term_debt_mortgage' => 'long_term_debt_mortgage',
        'long_term_debt_others' => 'long_term_debt_others',
        'long_term_investments_and_receivables' => 'long_term_investments_and_receivables',
        'manufactured_goods' => 'manufactured_goods',
        'non_current_assets' => 'non_current_assets',
        'number_employees' => 'number_employees',
        'operating_cost' => 'operating_cost',
        'other_employee_expenses' => 'other_employee_expenses',
        'other_intangible_assets' => 'other_intangible_assets',
        'other_long_term_investments' => 'other_long_term_investments',
        'other_long_term_receivables' => 'other_long_term_receivables',
        'other_operating_expenses' => 'other_operating_expenses',
        'post_employment_benefits' => 'post_employment_benefits',
        'profit_loss' => 'profit_loss',
        'profit_loss_before_tax' => 'profit_loss_before_tax',
        'profit_loss_per_employee' => 'profit_loss_per_employee',
        'profit_ratio' => 'profit_ratio',
        'property_plant_and_equipment' => 'property_plant_and_equipment',
        'provisions' => 'provisions',
        'provisions_for_deferred_tax' => 'provisions_for_deferred_tax',
        'retained_earnings' => 'retained_earnings',
        'revenue' => 'revenue',
        'revenue_per_employee' => 'revenue_per_employee',
        'roce_ratio' => 'roce_ratio',
        'roe_ratio' => 'roe_ratio',
        'roi_ratio' => 'roi_ratio',
        'sales_cost' => 'sales_cost',
        'short_term_debt' => 'short_term_debt',
        'short_term_debt_credit_institutions' => 'short_term_debt_credit_institutions',
        'short_term_debt_group_enterprises' => 'short_term_debt_group_enterprises',
        'short_term_debt_part_of_long_term_liabilities' => 'short_term_debt_part_of_long_term_liabilities',
        'short_term_debt_payables' => 'short_term_debt_payables',
        'short_term_debt_payables_others' => 'short_term_debt_payables_others',
        'short_term_debt_prepayment_customers' => 'short_term_debt_prepayment_customers',
        'short_term_debt_tax_payables' => 'short_term_debt_tax_payables',
        'short_term_receivables' => 'short_term_receivables',
        'short_term_receivables_associates' => 'short_term_receivables_associates',
        'short_term_receivables_deferred_income' => 'short_term_receivables_deferred_income',
        'short_term_receivables_deferred_taxes' => 'short_term_receivables_deferred_taxes',
        'short_term_receivables_group_enterprises' => 'short_term_receivables_group_enterprises',
        'short_term_receivables_others' => 'short_term_receivables_others',
        'short_term_receivables_trade' => 'short_term_receivables_trade',
        'social_security_contributions' => 'social_security_contributions',
        'tax' => 'tax',
        'wages_and_salaries' => 'wages_and_salaries',
        'working_capital' => 'working_capital',
        'working_capital_ratio' => 'working_capital_ratio'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assets' => 'setAssets',
        'cash_and_cash_equivalents' => 'setCashAndCashEquivalents',
        'contributed_capital' => 'setContributedCapital',
        'current_assets' => 'setCurrentAssets',
        'cvr_number' => 'setCvrNumber',
        'debt' => 'setDebt',
        'depreciation' => 'setDepreciation',
        'dividend' => 'setDividend',
        'ebit' => 'setEbit',
        'ebit_per_employee' => 'setEbitPerEmployee',
        'employee_expenses' => 'setEmployeeExpenses',
        'employee_expenses_per_employee' => 'setEmployeeExpensesPerEmployee',
        'equity' => 'setEquity',
        'equity_ratio' => 'setEquityRatio',
        'finance_costs' => 'setFinanceCosts',
        'finance_income' => 'setFinanceIncome',
        'gearing' => 'setGearing',
        'goodwill' => 'setGoodwill',
        'gross_margin_ratio' => 'setGrossMarginRatio',
        'gross_profit' => 'setGrossProfit',
        'gross_profit_per_employee' => 'setGrossProfitPerEmployee',
        'intangible_assets' => 'setIntangibleAssets',
        'inventories' => 'setInventories',
        'invested_capital' => 'setInvestedCapital',
        'investment_property' => 'setInvestmentProperty',
        'investments_in_associates' => 'setInvestmentsInAssociates',
        'investments_in_group_enterprises' => 'setInvestmentsInGroupEnterprises',
        'land_and_buildings' => 'setLandAndBuildings',
        'liabilities' => 'setLiabilities',
        'long_term_debt' => 'setLongTermDebt',
        'long_term_debt_mortgage' => 'setLongTermDebtMortgage',
        'long_term_debt_others' => 'setLongTermDebtOthers',
        'long_term_investments_and_receivables' => 'setLongTermInvestmentsAndReceivables',
        'manufactured_goods' => 'setManufacturedGoods',
        'non_current_assets' => 'setNonCurrentAssets',
        'number_employees' => 'setNumberEmployees',
        'operating_cost' => 'setOperatingCost',
        'other_employee_expenses' => 'setOtherEmployeeExpenses',
        'other_intangible_assets' => 'setOtherIntangibleAssets',
        'other_long_term_investments' => 'setOtherLongTermInvestments',
        'other_long_term_receivables' => 'setOtherLongTermReceivables',
        'other_operating_expenses' => 'setOtherOperatingExpenses',
        'post_employment_benefits' => 'setPostEmploymentBenefits',
        'profit_loss' => 'setProfitLoss',
        'profit_loss_before_tax' => 'setProfitLossBeforeTax',
        'profit_loss_per_employee' => 'setProfitLossPerEmployee',
        'profit_ratio' => 'setProfitRatio',
        'property_plant_and_equipment' => 'setPropertyPlantAndEquipment',
        'provisions' => 'setProvisions',
        'provisions_for_deferred_tax' => 'setProvisionsForDeferredTax',
        'retained_earnings' => 'setRetainedEarnings',
        'revenue' => 'setRevenue',
        'revenue_per_employee' => 'setRevenuePerEmployee',
        'roce_ratio' => 'setRoceRatio',
        'roe_ratio' => 'setRoeRatio',
        'roi_ratio' => 'setRoiRatio',
        'sales_cost' => 'setSalesCost',
        'short_term_debt' => 'setShortTermDebt',
        'short_term_debt_credit_institutions' => 'setShortTermDebtCreditInstitutions',
        'short_term_debt_group_enterprises' => 'setShortTermDebtGroupEnterprises',
        'short_term_debt_part_of_long_term_liabilities' => 'setShortTermDebtPartOfLongTermLiabilities',
        'short_term_debt_payables' => 'setShortTermDebtPayables',
        'short_term_debt_payables_others' => 'setShortTermDebtPayablesOthers',
        'short_term_debt_prepayment_customers' => 'setShortTermDebtPrepaymentCustomers',
        'short_term_debt_tax_payables' => 'setShortTermDebtTaxPayables',
        'short_term_receivables' => 'setShortTermReceivables',
        'short_term_receivables_associates' => 'setShortTermReceivablesAssociates',
        'short_term_receivables_deferred_income' => 'setShortTermReceivablesDeferredIncome',
        'short_term_receivables_deferred_taxes' => 'setShortTermReceivablesDeferredTaxes',
        'short_term_receivables_group_enterprises' => 'setShortTermReceivablesGroupEnterprises',
        'short_term_receivables_others' => 'setShortTermReceivablesOthers',
        'short_term_receivables_trade' => 'setShortTermReceivablesTrade',
        'social_security_contributions' => 'setSocialSecurityContributions',
        'tax' => 'setTax',
        'wages_and_salaries' => 'setWagesAndSalaries',
        'working_capital' => 'setWorkingCapital',
        'working_capital_ratio' => 'setWorkingCapitalRatio'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assets' => 'getAssets',
        'cash_and_cash_equivalents' => 'getCashAndCashEquivalents',
        'contributed_capital' => 'getContributedCapital',
        'current_assets' => 'getCurrentAssets',
        'cvr_number' => 'getCvrNumber',
        'debt' => 'getDebt',
        'depreciation' => 'getDepreciation',
        'dividend' => 'getDividend',
        'ebit' => 'getEbit',
        'ebit_per_employee' => 'getEbitPerEmployee',
        'employee_expenses' => 'getEmployeeExpenses',
        'employee_expenses_per_employee' => 'getEmployeeExpensesPerEmployee',
        'equity' => 'getEquity',
        'equity_ratio' => 'getEquityRatio',
        'finance_costs' => 'getFinanceCosts',
        'finance_income' => 'getFinanceIncome',
        'gearing' => 'getGearing',
        'goodwill' => 'getGoodwill',
        'gross_margin_ratio' => 'getGrossMarginRatio',
        'gross_profit' => 'getGrossProfit',
        'gross_profit_per_employee' => 'getGrossProfitPerEmployee',
        'intangible_assets' => 'getIntangibleAssets',
        'inventories' => 'getInventories',
        'invested_capital' => 'getInvestedCapital',
        'investment_property' => 'getInvestmentProperty',
        'investments_in_associates' => 'getInvestmentsInAssociates',
        'investments_in_group_enterprises' => 'getInvestmentsInGroupEnterprises',
        'land_and_buildings' => 'getLandAndBuildings',
        'liabilities' => 'getLiabilities',
        'long_term_debt' => 'getLongTermDebt',
        'long_term_debt_mortgage' => 'getLongTermDebtMortgage',
        'long_term_debt_others' => 'getLongTermDebtOthers',
        'long_term_investments_and_receivables' => 'getLongTermInvestmentsAndReceivables',
        'manufactured_goods' => 'getManufacturedGoods',
        'non_current_assets' => 'getNonCurrentAssets',
        'number_employees' => 'getNumberEmployees',
        'operating_cost' => 'getOperatingCost',
        'other_employee_expenses' => 'getOtherEmployeeExpenses',
        'other_intangible_assets' => 'getOtherIntangibleAssets',
        'other_long_term_investments' => 'getOtherLongTermInvestments',
        'other_long_term_receivables' => 'getOtherLongTermReceivables',
        'other_operating_expenses' => 'getOtherOperatingExpenses',
        'post_employment_benefits' => 'getPostEmploymentBenefits',
        'profit_loss' => 'getProfitLoss',
        'profit_loss_before_tax' => 'getProfitLossBeforeTax',
        'profit_loss_per_employee' => 'getProfitLossPerEmployee',
        'profit_ratio' => 'getProfitRatio',
        'property_plant_and_equipment' => 'getPropertyPlantAndEquipment',
        'provisions' => 'getProvisions',
        'provisions_for_deferred_tax' => 'getProvisionsForDeferredTax',
        'retained_earnings' => 'getRetainedEarnings',
        'revenue' => 'getRevenue',
        'revenue_per_employee' => 'getRevenuePerEmployee',
        'roce_ratio' => 'getRoceRatio',
        'roe_ratio' => 'getRoeRatio',
        'roi_ratio' => 'getRoiRatio',
        'sales_cost' => 'getSalesCost',
        'short_term_debt' => 'getShortTermDebt',
        'short_term_debt_credit_institutions' => 'getShortTermDebtCreditInstitutions',
        'short_term_debt_group_enterprises' => 'getShortTermDebtGroupEnterprises',
        'short_term_debt_part_of_long_term_liabilities' => 'getShortTermDebtPartOfLongTermLiabilities',
        'short_term_debt_payables' => 'getShortTermDebtPayables',
        'short_term_debt_payables_others' => 'getShortTermDebtPayablesOthers',
        'short_term_debt_prepayment_customers' => 'getShortTermDebtPrepaymentCustomers',
        'short_term_debt_tax_payables' => 'getShortTermDebtTaxPayables',
        'short_term_receivables' => 'getShortTermReceivables',
        'short_term_receivables_associates' => 'getShortTermReceivablesAssociates',
        'short_term_receivables_deferred_income' => 'getShortTermReceivablesDeferredIncome',
        'short_term_receivables_deferred_taxes' => 'getShortTermReceivablesDeferredTaxes',
        'short_term_receivables_group_enterprises' => 'getShortTermReceivablesGroupEnterprises',
        'short_term_receivables_others' => 'getShortTermReceivablesOthers',
        'short_term_receivables_trade' => 'getShortTermReceivablesTrade',
        'social_security_contributions' => 'getSocialSecurityContributions',
        'tax' => 'getTax',
        'wages_and_salaries' => 'getWagesAndSalaries',
        'working_capital' => 'getWorkingCapital',
        'working_capital_ratio' => 'getWorkingCapitalRatio'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('assets', $data ?? [], null);
        $this->setIfExists('cash_and_cash_equivalents', $data ?? [], null);
        $this->setIfExists('contributed_capital', $data ?? [], null);
        $this->setIfExists('current_assets', $data ?? [], null);
        $this->setIfExists('cvr_number', $data ?? [], null);
        $this->setIfExists('debt', $data ?? [], null);
        $this->setIfExists('depreciation', $data ?? [], null);
        $this->setIfExists('dividend', $data ?? [], null);
        $this->setIfExists('ebit', $data ?? [], null);
        $this->setIfExists('ebit_per_employee', $data ?? [], null);
        $this->setIfExists('employee_expenses', $data ?? [], null);
        $this->setIfExists('employee_expenses_per_employee', $data ?? [], null);
        $this->setIfExists('equity', $data ?? [], null);
        $this->setIfExists('equity_ratio', $data ?? [], null);
        $this->setIfExists('finance_costs', $data ?? [], null);
        $this->setIfExists('finance_income', $data ?? [], null);
        $this->setIfExists('gearing', $data ?? [], null);
        $this->setIfExists('goodwill', $data ?? [], null);
        $this->setIfExists('gross_margin_ratio', $data ?? [], null);
        $this->setIfExists('gross_profit', $data ?? [], null);
        $this->setIfExists('gross_profit_per_employee', $data ?? [], null);
        $this->setIfExists('intangible_assets', $data ?? [], null);
        $this->setIfExists('inventories', $data ?? [], null);
        $this->setIfExists('invested_capital', $data ?? [], null);
        $this->setIfExists('investment_property', $data ?? [], null);
        $this->setIfExists('investments_in_associates', $data ?? [], null);
        $this->setIfExists('investments_in_group_enterprises', $data ?? [], null);
        $this->setIfExists('land_and_buildings', $data ?? [], null);
        $this->setIfExists('liabilities', $data ?? [], null);
        $this->setIfExists('long_term_debt', $data ?? [], null);
        $this->setIfExists('long_term_debt_mortgage', $data ?? [], null);
        $this->setIfExists('long_term_debt_others', $data ?? [], null);
        $this->setIfExists('long_term_investments_and_receivables', $data ?? [], null);
        $this->setIfExists('manufactured_goods', $data ?? [], null);
        $this->setIfExists('non_current_assets', $data ?? [], null);
        $this->setIfExists('number_employees', $data ?? [], null);
        $this->setIfExists('operating_cost', $data ?? [], null);
        $this->setIfExists('other_employee_expenses', $data ?? [], null);
        $this->setIfExists('other_intangible_assets', $data ?? [], null);
        $this->setIfExists('other_long_term_investments', $data ?? [], null);
        $this->setIfExists('other_long_term_receivables', $data ?? [], null);
        $this->setIfExists('other_operating_expenses', $data ?? [], null);
        $this->setIfExists('post_employment_benefits', $data ?? [], null);
        $this->setIfExists('profit_loss', $data ?? [], null);
        $this->setIfExists('profit_loss_before_tax', $data ?? [], null);
        $this->setIfExists('profit_loss_per_employee', $data ?? [], null);
        $this->setIfExists('profit_ratio', $data ?? [], null);
        $this->setIfExists('property_plant_and_equipment', $data ?? [], null);
        $this->setIfExists('provisions', $data ?? [], null);
        $this->setIfExists('provisions_for_deferred_tax', $data ?? [], null);
        $this->setIfExists('retained_earnings', $data ?? [], null);
        $this->setIfExists('revenue', $data ?? [], null);
        $this->setIfExists('revenue_per_employee', $data ?? [], null);
        $this->setIfExists('roce_ratio', $data ?? [], null);
        $this->setIfExists('roe_ratio', $data ?? [], null);
        $this->setIfExists('roi_ratio', $data ?? [], null);
        $this->setIfExists('sales_cost', $data ?? [], null);
        $this->setIfExists('short_term_debt', $data ?? [], null);
        $this->setIfExists('short_term_debt_credit_institutions', $data ?? [], null);
        $this->setIfExists('short_term_debt_group_enterprises', $data ?? [], null);
        $this->setIfExists('short_term_debt_part_of_long_term_liabilities', $data ?? [], null);
        $this->setIfExists('short_term_debt_payables', $data ?? [], null);
        $this->setIfExists('short_term_debt_payables_others', $data ?? [], null);
        $this->setIfExists('short_term_debt_prepayment_customers', $data ?? [], null);
        $this->setIfExists('short_term_debt_tax_payables', $data ?? [], null);
        $this->setIfExists('short_term_receivables', $data ?? [], null);
        $this->setIfExists('short_term_receivables_associates', $data ?? [], null);
        $this->setIfExists('short_term_receivables_deferred_income', $data ?? [], null);
        $this->setIfExists('short_term_receivables_deferred_taxes', $data ?? [], null);
        $this->setIfExists('short_term_receivables_group_enterprises', $data ?? [], null);
        $this->setIfExists('short_term_receivables_others', $data ?? [], null);
        $this->setIfExists('short_term_receivables_trade', $data ?? [], null);
        $this->setIfExists('social_security_contributions', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('wages_and_salaries', $data ?? [], null);
        $this->setIfExists('working_capital', $data ?? [], null);
        $this->setIfExists('working_capital_ratio', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assets
     *
     * @return mixed|null
     */
    public function getAssets()
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param mixed|null $assets assets
     *
     * @return self
     */
    public function setAssets($assets)
    {
        if (is_null($assets)) {
            array_push($this->openAPINullablesSetToNull, 'assets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assets'] = $assets;

        return $this;
    }

    /**
     * Gets cash_and_cash_equivalents
     *
     * @return mixed|null
     */
    public function getCashAndCashEquivalents()
    {
        return $this->container['cash_and_cash_equivalents'];
    }

    /**
     * Sets cash_and_cash_equivalents
     *
     * @param mixed|null $cash_and_cash_equivalents cash_and_cash_equivalents
     *
     * @return self
     */
    public function setCashAndCashEquivalents($cash_and_cash_equivalents)
    {
        if (is_null($cash_and_cash_equivalents)) {
            array_push($this->openAPINullablesSetToNull, 'cash_and_cash_equivalents');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cash_and_cash_equivalents', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cash_and_cash_equivalents'] = $cash_and_cash_equivalents;

        return $this;
    }

    /**
     * Gets contributed_capital
     *
     * @return mixed|null
     */
    public function getContributedCapital()
    {
        return $this->container['contributed_capital'];
    }

    /**
     * Sets contributed_capital
     *
     * @param mixed|null $contributed_capital contributed_capital
     *
     * @return self
     */
    public function setContributedCapital($contributed_capital)
    {
        if (is_null($contributed_capital)) {
            array_push($this->openAPINullablesSetToNull, 'contributed_capital');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contributed_capital', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contributed_capital'] = $contributed_capital;

        return $this;
    }

    /**
     * Gets current_assets
     *
     * @return mixed|null
     */
    public function getCurrentAssets()
    {
        return $this->container['current_assets'];
    }

    /**
     * Sets current_assets
     *
     * @param mixed|null $current_assets current_assets
     *
     * @return self
     */
    public function setCurrentAssets($current_assets)
    {
        if (is_null($current_assets)) {
            array_push($this->openAPINullablesSetToNull, 'current_assets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_assets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_assets'] = $current_assets;

        return $this;
    }

    /**
     * Gets cvr_number
     *
     * @return mixed|null
     */
    public function getCvrNumber()
    {
        return $this->container['cvr_number'];
    }

    /**
     * Sets cvr_number
     *
     * @param mixed|null $cvr_number cvr_number
     *
     * @return self
     */
    public function setCvrNumber($cvr_number)
    {
        if (is_null($cvr_number)) {
            array_push($this->openAPINullablesSetToNull, 'cvr_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cvr_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cvr_number'] = $cvr_number;

        return $this;
    }

    /**
     * Gets debt
     *
     * @return mixed|null
     */
    public function getDebt()
    {
        return $this->container['debt'];
    }

    /**
     * Sets debt
     *
     * @param mixed|null $debt debt
     *
     * @return self
     */
    public function setDebt($debt)
    {
        if (is_null($debt)) {
            array_push($this->openAPINullablesSetToNull, 'debt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('debt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['debt'] = $debt;

        return $this;
    }

    /**
     * Gets depreciation
     *
     * @return mixed|null
     */
    public function getDepreciation()
    {
        return $this->container['depreciation'];
    }

    /**
     * Sets depreciation
     *
     * @param mixed|null $depreciation depreciation
     *
     * @return self
     */
    public function setDepreciation($depreciation)
    {
        if (is_null($depreciation)) {
            array_push($this->openAPINullablesSetToNull, 'depreciation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('depreciation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['depreciation'] = $depreciation;

        return $this;
    }

    /**
     * Gets dividend
     *
     * @return mixed|null
     */
    public function getDividend()
    {
        return $this->container['dividend'];
    }

    /**
     * Sets dividend
     *
     * @param mixed|null $dividend dividend
     *
     * @return self
     */
    public function setDividend($dividend)
    {
        if (is_null($dividend)) {
            array_push($this->openAPINullablesSetToNull, 'dividend');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dividend', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dividend'] = $dividend;

        return $this;
    }

    /**
     * Gets ebit
     *
     * @return mixed|null
     */
    public function getEbit()
    {
        return $this->container['ebit'];
    }

    /**
     * Sets ebit
     *
     * @param mixed|null $ebit ebit
     *
     * @return self
     */
    public function setEbit($ebit)
    {
        if (is_null($ebit)) {
            array_push($this->openAPINullablesSetToNull, 'ebit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ebit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ebit'] = $ebit;

        return $this;
    }

    /**
     * Gets ebit_per_employee
     *
     * @return mixed|null
     */
    public function getEbitPerEmployee()
    {
        return $this->container['ebit_per_employee'];
    }

    /**
     * Sets ebit_per_employee
     *
     * @param mixed|null $ebit_per_employee ebit_per_employee
     *
     * @return self
     */
    public function setEbitPerEmployee($ebit_per_employee)
    {
        if (is_null($ebit_per_employee)) {
            array_push($this->openAPINullablesSetToNull, 'ebit_per_employee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ebit_per_employee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ebit_per_employee'] = $ebit_per_employee;

        return $this;
    }

    /**
     * Gets employee_expenses
     *
     * @return mixed|null
     */
    public function getEmployeeExpenses()
    {
        return $this->container['employee_expenses'];
    }

    /**
     * Sets employee_expenses
     *
     * @param mixed|null $employee_expenses employee_expenses
     *
     * @return self
     */
    public function setEmployeeExpenses($employee_expenses)
    {
        if (is_null($employee_expenses)) {
            array_push($this->openAPINullablesSetToNull, 'employee_expenses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_expenses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_expenses'] = $employee_expenses;

        return $this;
    }

    /**
     * Gets employee_expenses_per_employee
     *
     * @return mixed|null
     */
    public function getEmployeeExpensesPerEmployee()
    {
        return $this->container['employee_expenses_per_employee'];
    }

    /**
     * Sets employee_expenses_per_employee
     *
     * @param mixed|null $employee_expenses_per_employee employee_expenses_per_employee
     *
     * @return self
     */
    public function setEmployeeExpensesPerEmployee($employee_expenses_per_employee)
    {
        if (is_null($employee_expenses_per_employee)) {
            array_push($this->openAPINullablesSetToNull, 'employee_expenses_per_employee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_expenses_per_employee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_expenses_per_employee'] = $employee_expenses_per_employee;

        return $this;
    }

    /**
     * Gets equity
     *
     * @return mixed|null
     */
    public function getEquity()
    {
        return $this->container['equity'];
    }

    /**
     * Sets equity
     *
     * @param mixed|null $equity equity
     *
     * @return self
     */
    public function setEquity($equity)
    {
        if (is_null($equity)) {
            array_push($this->openAPINullablesSetToNull, 'equity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('equity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['equity'] = $equity;

        return $this;
    }

    /**
     * Gets equity_ratio
     *
     * @return mixed|null
     */
    public function getEquityRatio()
    {
        return $this->container['equity_ratio'];
    }

    /**
     * Sets equity_ratio
     *
     * @param mixed|null $equity_ratio equity_ratio
     *
     * @return self
     */
    public function setEquityRatio($equity_ratio)
    {
        if (is_null($equity_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'equity_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('equity_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['equity_ratio'] = $equity_ratio;

        return $this;
    }

    /**
     * Gets finance_costs
     *
     * @return mixed|null
     */
    public function getFinanceCosts()
    {
        return $this->container['finance_costs'];
    }

    /**
     * Sets finance_costs
     *
     * @param mixed|null $finance_costs finance_costs
     *
     * @return self
     */
    public function setFinanceCosts($finance_costs)
    {
        if (is_null($finance_costs)) {
            array_push($this->openAPINullablesSetToNull, 'finance_costs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('finance_costs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['finance_costs'] = $finance_costs;

        return $this;
    }

    /**
     * Gets finance_income
     *
     * @return mixed|null
     */
    public function getFinanceIncome()
    {
        return $this->container['finance_income'];
    }

    /**
     * Sets finance_income
     *
     * @param mixed|null $finance_income finance_income
     *
     * @return self
     */
    public function setFinanceIncome($finance_income)
    {
        if (is_null($finance_income)) {
            array_push($this->openAPINullablesSetToNull, 'finance_income');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('finance_income', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['finance_income'] = $finance_income;

        return $this;
    }

    /**
     * Gets gearing
     *
     * @return mixed|null
     */
    public function getGearing()
    {
        return $this->container['gearing'];
    }

    /**
     * Sets gearing
     *
     * @param mixed|null $gearing gearing
     *
     * @return self
     */
    public function setGearing($gearing)
    {
        if (is_null($gearing)) {
            array_push($this->openAPINullablesSetToNull, 'gearing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gearing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gearing'] = $gearing;

        return $this;
    }

    /**
     * Gets goodwill
     *
     * @return mixed|null
     */
    public function getGoodwill()
    {
        return $this->container['goodwill'];
    }

    /**
     * Sets goodwill
     *
     * @param mixed|null $goodwill goodwill
     *
     * @return self
     */
    public function setGoodwill($goodwill)
    {
        if (is_null($goodwill)) {
            array_push($this->openAPINullablesSetToNull, 'goodwill');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('goodwill', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['goodwill'] = $goodwill;

        return $this;
    }

    /**
     * Gets gross_margin_ratio
     *
     * @return mixed|null
     */
    public function getGrossMarginRatio()
    {
        return $this->container['gross_margin_ratio'];
    }

    /**
     * Sets gross_margin_ratio
     *
     * @param mixed|null $gross_margin_ratio gross_margin_ratio
     *
     * @return self
     */
    public function setGrossMarginRatio($gross_margin_ratio)
    {
        if (is_null($gross_margin_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'gross_margin_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gross_margin_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gross_margin_ratio'] = $gross_margin_ratio;

        return $this;
    }

    /**
     * Gets gross_profit
     *
     * @return mixed|null
     */
    public function getGrossProfit()
    {
        return $this->container['gross_profit'];
    }

    /**
     * Sets gross_profit
     *
     * @param mixed|null $gross_profit gross_profit
     *
     * @return self
     */
    public function setGrossProfit($gross_profit)
    {
        if (is_null($gross_profit)) {
            array_push($this->openAPINullablesSetToNull, 'gross_profit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gross_profit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gross_profit'] = $gross_profit;

        return $this;
    }

    /**
     * Gets gross_profit_per_employee
     *
     * @return mixed|null
     */
    public function getGrossProfitPerEmployee()
    {
        return $this->container['gross_profit_per_employee'];
    }

    /**
     * Sets gross_profit_per_employee
     *
     * @param mixed|null $gross_profit_per_employee gross_profit_per_employee
     *
     * @return self
     */
    public function setGrossProfitPerEmployee($gross_profit_per_employee)
    {
        if (is_null($gross_profit_per_employee)) {
            array_push($this->openAPINullablesSetToNull, 'gross_profit_per_employee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gross_profit_per_employee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gross_profit_per_employee'] = $gross_profit_per_employee;

        return $this;
    }

    /**
     * Gets intangible_assets
     *
     * @return mixed|null
     */
    public function getIntangibleAssets()
    {
        return $this->container['intangible_assets'];
    }

    /**
     * Sets intangible_assets
     *
     * @param mixed|null $intangible_assets intangible_assets
     *
     * @return self
     */
    public function setIntangibleAssets($intangible_assets)
    {
        if (is_null($intangible_assets)) {
            array_push($this->openAPINullablesSetToNull, 'intangible_assets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intangible_assets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['intangible_assets'] = $intangible_assets;

        return $this;
    }

    /**
     * Gets inventories
     *
     * @return mixed|null
     */
    public function getInventories()
    {
        return $this->container['inventories'];
    }

    /**
     * Sets inventories
     *
     * @param mixed|null $inventories inventories
     *
     * @return self
     */
    public function setInventories($inventories)
    {
        if (is_null($inventories)) {
            array_push($this->openAPINullablesSetToNull, 'inventories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inventories'] = $inventories;

        return $this;
    }

    /**
     * Gets invested_capital
     *
     * @return mixed|null
     */
    public function getInvestedCapital()
    {
        return $this->container['invested_capital'];
    }

    /**
     * Sets invested_capital
     *
     * @param mixed|null $invested_capital invested_capital
     *
     * @return self
     */
    public function setInvestedCapital($invested_capital)
    {
        if (is_null($invested_capital)) {
            array_push($this->openAPINullablesSetToNull, 'invested_capital');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invested_capital', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invested_capital'] = $invested_capital;

        return $this;
    }

    /**
     * Gets investment_property
     *
     * @return mixed|null
     */
    public function getInvestmentProperty()
    {
        return $this->container['investment_property'];
    }

    /**
     * Sets investment_property
     *
     * @param mixed|null $investment_property investment_property
     *
     * @return self
     */
    public function setInvestmentProperty($investment_property)
    {
        if (is_null($investment_property)) {
            array_push($this->openAPINullablesSetToNull, 'investment_property');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('investment_property', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['investment_property'] = $investment_property;

        return $this;
    }

    /**
     * Gets investments_in_associates
     *
     * @return mixed|null
     */
    public function getInvestmentsInAssociates()
    {
        return $this->container['investments_in_associates'];
    }

    /**
     * Sets investments_in_associates
     *
     * @param mixed|null $investments_in_associates investments_in_associates
     *
     * @return self
     */
    public function setInvestmentsInAssociates($investments_in_associates)
    {
        if (is_null($investments_in_associates)) {
            array_push($this->openAPINullablesSetToNull, 'investments_in_associates');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('investments_in_associates', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['investments_in_associates'] = $investments_in_associates;

        return $this;
    }

    /**
     * Gets investments_in_group_enterprises
     *
     * @return mixed|null
     */
    public function getInvestmentsInGroupEnterprises()
    {
        return $this->container['investments_in_group_enterprises'];
    }

    /**
     * Sets investments_in_group_enterprises
     *
     * @param mixed|null $investments_in_group_enterprises investments_in_group_enterprises
     *
     * @return self
     */
    public function setInvestmentsInGroupEnterprises($investments_in_group_enterprises)
    {
        if (is_null($investments_in_group_enterprises)) {
            array_push($this->openAPINullablesSetToNull, 'investments_in_group_enterprises');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('investments_in_group_enterprises', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['investments_in_group_enterprises'] = $investments_in_group_enterprises;

        return $this;
    }

    /**
     * Gets land_and_buildings
     *
     * @return mixed|null
     */
    public function getLandAndBuildings()
    {
        return $this->container['land_and_buildings'];
    }

    /**
     * Sets land_and_buildings
     *
     * @param mixed|null $land_and_buildings land_and_buildings
     *
     * @return self
     */
    public function setLandAndBuildings($land_and_buildings)
    {
        if (is_null($land_and_buildings)) {
            array_push($this->openAPINullablesSetToNull, 'land_and_buildings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('land_and_buildings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['land_and_buildings'] = $land_and_buildings;

        return $this;
    }

    /**
     * Gets liabilities
     *
     * @return mixed|null
     */
    public function getLiabilities()
    {
        return $this->container['liabilities'];
    }

    /**
     * Sets liabilities
     *
     * @param mixed|null $liabilities liabilities
     *
     * @return self
     */
    public function setLiabilities($liabilities)
    {
        if (is_null($liabilities)) {
            array_push($this->openAPINullablesSetToNull, 'liabilities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('liabilities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['liabilities'] = $liabilities;

        return $this;
    }

    /**
     * Gets long_term_debt
     *
     * @return mixed|null
     */
    public function getLongTermDebt()
    {
        return $this->container['long_term_debt'];
    }

    /**
     * Sets long_term_debt
     *
     * @param mixed|null $long_term_debt long_term_debt
     *
     * @return self
     */
    public function setLongTermDebt($long_term_debt)
    {
        if (is_null($long_term_debt)) {
            array_push($this->openAPINullablesSetToNull, 'long_term_debt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('long_term_debt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['long_term_debt'] = $long_term_debt;

        return $this;
    }

    /**
     * Gets long_term_debt_mortgage
     *
     * @return mixed|null
     */
    public function getLongTermDebtMortgage()
    {
        return $this->container['long_term_debt_mortgage'];
    }

    /**
     * Sets long_term_debt_mortgage
     *
     * @param mixed|null $long_term_debt_mortgage long_term_debt_mortgage
     *
     * @return self
     */
    public function setLongTermDebtMortgage($long_term_debt_mortgage)
    {
        if (is_null($long_term_debt_mortgage)) {
            array_push($this->openAPINullablesSetToNull, 'long_term_debt_mortgage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('long_term_debt_mortgage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['long_term_debt_mortgage'] = $long_term_debt_mortgage;

        return $this;
    }

    /**
     * Gets long_term_debt_others
     *
     * @return mixed|null
     */
    public function getLongTermDebtOthers()
    {
        return $this->container['long_term_debt_others'];
    }

    /**
     * Sets long_term_debt_others
     *
     * @param mixed|null $long_term_debt_others long_term_debt_others
     *
     * @return self
     */
    public function setLongTermDebtOthers($long_term_debt_others)
    {
        if (is_null($long_term_debt_others)) {
            array_push($this->openAPINullablesSetToNull, 'long_term_debt_others');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('long_term_debt_others', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['long_term_debt_others'] = $long_term_debt_others;

        return $this;
    }

    /**
     * Gets long_term_investments_and_receivables
     *
     * @return mixed|null
     */
    public function getLongTermInvestmentsAndReceivables()
    {
        return $this->container['long_term_investments_and_receivables'];
    }

    /**
     * Sets long_term_investments_and_receivables
     *
     * @param mixed|null $long_term_investments_and_receivables long_term_investments_and_receivables
     *
     * @return self
     */
    public function setLongTermInvestmentsAndReceivables($long_term_investments_and_receivables)
    {
        if (is_null($long_term_investments_and_receivables)) {
            array_push($this->openAPINullablesSetToNull, 'long_term_investments_and_receivables');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('long_term_investments_and_receivables', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['long_term_investments_and_receivables'] = $long_term_investments_and_receivables;

        return $this;
    }

    /**
     * Gets manufactured_goods
     *
     * @return mixed|null
     */
    public function getManufacturedGoods()
    {
        return $this->container['manufactured_goods'];
    }

    /**
     * Sets manufactured_goods
     *
     * @param mixed|null $manufactured_goods manufactured_goods
     *
     * @return self
     */
    public function setManufacturedGoods($manufactured_goods)
    {
        if (is_null($manufactured_goods)) {
            array_push($this->openAPINullablesSetToNull, 'manufactured_goods');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manufactured_goods', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manufactured_goods'] = $manufactured_goods;

        return $this;
    }

    /**
     * Gets non_current_assets
     *
     * @return mixed|null
     */
    public function getNonCurrentAssets()
    {
        return $this->container['non_current_assets'];
    }

    /**
     * Sets non_current_assets
     *
     * @param mixed|null $non_current_assets non_current_assets
     *
     * @return self
     */
    public function setNonCurrentAssets($non_current_assets)
    {
        if (is_null($non_current_assets)) {
            array_push($this->openAPINullablesSetToNull, 'non_current_assets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('non_current_assets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['non_current_assets'] = $non_current_assets;

        return $this;
    }

    /**
     * Gets number_employees
     *
     * @return mixed|null
     */
    public function getNumberEmployees()
    {
        return $this->container['number_employees'];
    }

    /**
     * Sets number_employees
     *
     * @param mixed|null $number_employees number_employees
     *
     * @return self
     */
    public function setNumberEmployees($number_employees)
    {
        if (is_null($number_employees)) {
            array_push($this->openAPINullablesSetToNull, 'number_employees');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_employees', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_employees'] = $number_employees;

        return $this;
    }

    /**
     * Gets operating_cost
     *
     * @return mixed|null
     */
    public function getOperatingCost()
    {
        return $this->container['operating_cost'];
    }

    /**
     * Sets operating_cost
     *
     * @param mixed|null $operating_cost operating_cost
     *
     * @return self
     */
    public function setOperatingCost($operating_cost)
    {
        if (is_null($operating_cost)) {
            array_push($this->openAPINullablesSetToNull, 'operating_cost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('operating_cost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['operating_cost'] = $operating_cost;

        return $this;
    }

    /**
     * Gets other_employee_expenses
     *
     * @return mixed|null
     */
    public function getOtherEmployeeExpenses()
    {
        return $this->container['other_employee_expenses'];
    }

    /**
     * Sets other_employee_expenses
     *
     * @param mixed|null $other_employee_expenses other_employee_expenses
     *
     * @return self
     */
    public function setOtherEmployeeExpenses($other_employee_expenses)
    {
        if (is_null($other_employee_expenses)) {
            array_push($this->openAPINullablesSetToNull, 'other_employee_expenses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_employee_expenses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['other_employee_expenses'] = $other_employee_expenses;

        return $this;
    }

    /**
     * Gets other_intangible_assets
     *
     * @return mixed|null
     */
    public function getOtherIntangibleAssets()
    {
        return $this->container['other_intangible_assets'];
    }

    /**
     * Sets other_intangible_assets
     *
     * @param mixed|null $other_intangible_assets other_intangible_assets
     *
     * @return self
     */
    public function setOtherIntangibleAssets($other_intangible_assets)
    {
        if (is_null($other_intangible_assets)) {
            array_push($this->openAPINullablesSetToNull, 'other_intangible_assets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_intangible_assets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['other_intangible_assets'] = $other_intangible_assets;

        return $this;
    }

    /**
     * Gets other_long_term_investments
     *
     * @return mixed|null
     */
    public function getOtherLongTermInvestments()
    {
        return $this->container['other_long_term_investments'];
    }

    /**
     * Sets other_long_term_investments
     *
     * @param mixed|null $other_long_term_investments other_long_term_investments
     *
     * @return self
     */
    public function setOtherLongTermInvestments($other_long_term_investments)
    {
        if (is_null($other_long_term_investments)) {
            array_push($this->openAPINullablesSetToNull, 'other_long_term_investments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_long_term_investments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['other_long_term_investments'] = $other_long_term_investments;

        return $this;
    }

    /**
     * Gets other_long_term_receivables
     *
     * @return mixed|null
     */
    public function getOtherLongTermReceivables()
    {
        return $this->container['other_long_term_receivables'];
    }

    /**
     * Sets other_long_term_receivables
     *
     * @param mixed|null $other_long_term_receivables other_long_term_receivables
     *
     * @return self
     */
    public function setOtherLongTermReceivables($other_long_term_receivables)
    {
        if (is_null($other_long_term_receivables)) {
            array_push($this->openAPINullablesSetToNull, 'other_long_term_receivables');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_long_term_receivables', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['other_long_term_receivables'] = $other_long_term_receivables;

        return $this;
    }

    /**
     * Gets other_operating_expenses
     *
     * @return mixed|null
     */
    public function getOtherOperatingExpenses()
    {
        return $this->container['other_operating_expenses'];
    }

    /**
     * Sets other_operating_expenses
     *
     * @param mixed|null $other_operating_expenses other_operating_expenses
     *
     * @return self
     */
    public function setOtherOperatingExpenses($other_operating_expenses)
    {
        if (is_null($other_operating_expenses)) {
            array_push($this->openAPINullablesSetToNull, 'other_operating_expenses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_operating_expenses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['other_operating_expenses'] = $other_operating_expenses;

        return $this;
    }

    /**
     * Gets post_employment_benefits
     *
     * @return mixed|null
     */
    public function getPostEmploymentBenefits()
    {
        return $this->container['post_employment_benefits'];
    }

    /**
     * Sets post_employment_benefits
     *
     * @param mixed|null $post_employment_benefits post_employment_benefits
     *
     * @return self
     */
    public function setPostEmploymentBenefits($post_employment_benefits)
    {
        if (is_null($post_employment_benefits)) {
            array_push($this->openAPINullablesSetToNull, 'post_employment_benefits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('post_employment_benefits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['post_employment_benefits'] = $post_employment_benefits;

        return $this;
    }

    /**
     * Gets profit_loss
     *
     * @return mixed|null
     */
    public function getProfitLoss()
    {
        return $this->container['profit_loss'];
    }

    /**
     * Sets profit_loss
     *
     * @param mixed|null $profit_loss profit_loss
     *
     * @return self
     */
    public function setProfitLoss($profit_loss)
    {
        if (is_null($profit_loss)) {
            array_push($this->openAPINullablesSetToNull, 'profit_loss');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profit_loss', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profit_loss'] = $profit_loss;

        return $this;
    }

    /**
     * Gets profit_loss_before_tax
     *
     * @return mixed|null
     */
    public function getProfitLossBeforeTax()
    {
        return $this->container['profit_loss_before_tax'];
    }

    /**
     * Sets profit_loss_before_tax
     *
     * @param mixed|null $profit_loss_before_tax profit_loss_before_tax
     *
     * @return self
     */
    public function setProfitLossBeforeTax($profit_loss_before_tax)
    {
        if (is_null($profit_loss_before_tax)) {
            array_push($this->openAPINullablesSetToNull, 'profit_loss_before_tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profit_loss_before_tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profit_loss_before_tax'] = $profit_loss_before_tax;

        return $this;
    }

    /**
     * Gets profit_loss_per_employee
     *
     * @return mixed|null
     */
    public function getProfitLossPerEmployee()
    {
        return $this->container['profit_loss_per_employee'];
    }

    /**
     * Sets profit_loss_per_employee
     *
     * @param mixed|null $profit_loss_per_employee profit_loss_per_employee
     *
     * @return self
     */
    public function setProfitLossPerEmployee($profit_loss_per_employee)
    {
        if (is_null($profit_loss_per_employee)) {
            array_push($this->openAPINullablesSetToNull, 'profit_loss_per_employee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profit_loss_per_employee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profit_loss_per_employee'] = $profit_loss_per_employee;

        return $this;
    }

    /**
     * Gets profit_ratio
     *
     * @return mixed|null
     */
    public function getProfitRatio()
    {
        return $this->container['profit_ratio'];
    }

    /**
     * Sets profit_ratio
     *
     * @param mixed|null $profit_ratio profit_ratio
     *
     * @return self
     */
    public function setProfitRatio($profit_ratio)
    {
        if (is_null($profit_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'profit_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profit_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profit_ratio'] = $profit_ratio;

        return $this;
    }

    /**
     * Gets property_plant_and_equipment
     *
     * @return mixed|null
     */
    public function getPropertyPlantAndEquipment()
    {
        return $this->container['property_plant_and_equipment'];
    }

    /**
     * Sets property_plant_and_equipment
     *
     * @param mixed|null $property_plant_and_equipment property_plant_and_equipment
     *
     * @return self
     */
    public function setPropertyPlantAndEquipment($property_plant_and_equipment)
    {
        if (is_null($property_plant_and_equipment)) {
            array_push($this->openAPINullablesSetToNull, 'property_plant_and_equipment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('property_plant_and_equipment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['property_plant_and_equipment'] = $property_plant_and_equipment;

        return $this;
    }

    /**
     * Gets provisions
     *
     * @return mixed|null
     */
    public function getProvisions()
    {
        return $this->container['provisions'];
    }

    /**
     * Sets provisions
     *
     * @param mixed|null $provisions provisions
     *
     * @return self
     */
    public function setProvisions($provisions)
    {
        if (is_null($provisions)) {
            array_push($this->openAPINullablesSetToNull, 'provisions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provisions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provisions'] = $provisions;

        return $this;
    }

    /**
     * Gets provisions_for_deferred_tax
     *
     * @return mixed|null
     */
    public function getProvisionsForDeferredTax()
    {
        return $this->container['provisions_for_deferred_tax'];
    }

    /**
     * Sets provisions_for_deferred_tax
     *
     * @param mixed|null $provisions_for_deferred_tax provisions_for_deferred_tax
     *
     * @return self
     */
    public function setProvisionsForDeferredTax($provisions_for_deferred_tax)
    {
        if (is_null($provisions_for_deferred_tax)) {
            array_push($this->openAPINullablesSetToNull, 'provisions_for_deferred_tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provisions_for_deferred_tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['provisions_for_deferred_tax'] = $provisions_for_deferred_tax;

        return $this;
    }

    /**
     * Gets retained_earnings
     *
     * @return mixed|null
     */
    public function getRetainedEarnings()
    {
        return $this->container['retained_earnings'];
    }

    /**
     * Sets retained_earnings
     *
     * @param mixed|null $retained_earnings retained_earnings
     *
     * @return self
     */
    public function setRetainedEarnings($retained_earnings)
    {
        if (is_null($retained_earnings)) {
            array_push($this->openAPINullablesSetToNull, 'retained_earnings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('retained_earnings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['retained_earnings'] = $retained_earnings;

        return $this;
    }

    /**
     * Gets revenue
     *
     * @return mixed|null
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     *
     * @param mixed|null $revenue revenue
     *
     * @return self
     */
    public function setRevenue($revenue)
    {
        if (is_null($revenue)) {
            array_push($this->openAPINullablesSetToNull, 'revenue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('revenue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets revenue_per_employee
     *
     * @return mixed|null
     */
    public function getRevenuePerEmployee()
    {
        return $this->container['revenue_per_employee'];
    }

    /**
     * Sets revenue_per_employee
     *
     * @param mixed|null $revenue_per_employee revenue_per_employee
     *
     * @return self
     */
    public function setRevenuePerEmployee($revenue_per_employee)
    {
        if (is_null($revenue_per_employee)) {
            array_push($this->openAPINullablesSetToNull, 'revenue_per_employee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('revenue_per_employee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['revenue_per_employee'] = $revenue_per_employee;

        return $this;
    }

    /**
     * Gets roce_ratio
     *
     * @return mixed|null
     */
    public function getRoceRatio()
    {
        return $this->container['roce_ratio'];
    }

    /**
     * Sets roce_ratio
     *
     * @param mixed|null $roce_ratio roce_ratio
     *
     * @return self
     */
    public function setRoceRatio($roce_ratio)
    {
        if (is_null($roce_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'roce_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roce_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roce_ratio'] = $roce_ratio;

        return $this;
    }

    /**
     * Gets roe_ratio
     *
     * @return mixed|null
     */
    public function getRoeRatio()
    {
        return $this->container['roe_ratio'];
    }

    /**
     * Sets roe_ratio
     *
     * @param mixed|null $roe_ratio roe_ratio
     *
     * @return self
     */
    public function setRoeRatio($roe_ratio)
    {
        if (is_null($roe_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'roe_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roe_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roe_ratio'] = $roe_ratio;

        return $this;
    }

    /**
     * Gets roi_ratio
     *
     * @return mixed|null
     */
    public function getRoiRatio()
    {
        return $this->container['roi_ratio'];
    }

    /**
     * Sets roi_ratio
     *
     * @param mixed|null $roi_ratio roi_ratio
     *
     * @return self
     */
    public function setRoiRatio($roi_ratio)
    {
        if (is_null($roi_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'roi_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roi_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roi_ratio'] = $roi_ratio;

        return $this;
    }

    /**
     * Gets sales_cost
     *
     * @return mixed|null
     */
    public function getSalesCost()
    {
        return $this->container['sales_cost'];
    }

    /**
     * Sets sales_cost
     *
     * @param mixed|null $sales_cost sales_cost
     *
     * @return self
     */
    public function setSalesCost($sales_cost)
    {
        if (is_null($sales_cost)) {
            array_push($this->openAPINullablesSetToNull, 'sales_cost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_cost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sales_cost'] = $sales_cost;

        return $this;
    }

    /**
     * Gets short_term_debt
     *
     * @return mixed|null
     */
    public function getShortTermDebt()
    {
        return $this->container['short_term_debt'];
    }

    /**
     * Sets short_term_debt
     *
     * @param mixed|null $short_term_debt short_term_debt
     *
     * @return self
     */
    public function setShortTermDebt($short_term_debt)
    {
        if (is_null($short_term_debt)) {
            array_push($this->openAPINullablesSetToNull, 'short_term_debt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_term_debt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_term_debt'] = $short_term_debt;

        return $this;
    }

    /**
     * Gets short_term_debt_credit_institutions
     *
     * @return mixed|null
     */
    public function getShortTermDebtCreditInstitutions()
    {
        return $this->container['short_term_debt_credit_institutions'];
    }

    /**
     * Sets short_term_debt_credit_institutions
     *
     * @param mixed|null $short_term_debt_credit_institutions short_term_debt_credit_institutions
     *
     * @return self
     */
    public function setShortTermDebtCreditInstitutions($short_term_debt_credit_institutions)
    {
        if (is_null($short_term_debt_credit_institutions)) {
            array_push($this->openAPINullablesSetToNull, 'short_term_debt_credit_institutions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_term_debt_credit_institutions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_term_debt_credit_institutions'] = $short_term_debt_credit_institutions;

        return $this;
    }

    /**
     * Gets short_term_debt_group_enterprises
     *
     * @return mixed|null
     */
    public function getShortTermDebtGroupEnterprises()
    {
        return $this->container['short_term_debt_group_enterprises'];
    }

    /**
     * Sets short_term_debt_group_enterprises
     *
     * @param mixed|null $short_term_debt_group_enterprises short_term_debt_group_enterprises
     *
     * @return self
     */
    public function setShortTermDebtGroupEnterprises($short_term_debt_group_enterprises)
    {
        if (is_null($short_term_debt_group_enterprises)) {
            array_push($this->openAPINullablesSetToNull, 'short_term_debt_group_enterprises');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_term_debt_group_enterprises', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_term_debt_group_enterprises'] = $short_term_debt_group_enterprises;

        return $this;
    }

    /**
     * Gets short_term_debt_part_of_long_term_liabilities
     *
     * @return mixed|null
     */
    public function getShortTermDebtPartOfLongTermLiabilities()
    {
        return $this->container['short_term_debt_part_of_long_term_liabilities'];
    }

    /**
     * Sets short_term_debt_part_of_long_term_liabilities
     *
     * @param mixed|null $short_term_debt_part_of_long_term_liabilities short_term_debt_part_of_long_term_liabilities
     *
     * @return self
     */
    public function setShortTermDebtPartOfLongTermLiabilities($short_term_debt_part_of_long_term_liabilities)
    {
        if (is_null($short_term_debt_part_of_long_term_liabilities)) {
            array_push($this->openAPINullablesSetToNull, 'short_term_debt_part_of_long_term_liabilities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_term_debt_part_of_long_term_liabilities', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_term_debt_part_of_long_term_liabilities'] = $short_term_debt_part_of_long_term_liabilities;

        return $this;
    }

    /**
     * Gets short_term_debt_payables
     *
     * @return mixed|null
     */
    public function getShortTermDebtPayables()
    {
        return $this->container['short_term_debt_payables'];
    }

    /**
     * Sets short_term_debt_payables
     *
     * @param mixed|null $short_term_debt_payables short_term_debt_payables
     *
     * @return self
     */
    public function setShortTermDebtPayables($short_term_debt_payables)
    {
        if (is_null($short_term_debt_payables)) {
            array_push($this->openAPINullablesSetToNull, 'short_term_debt_payables');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_term_debt_payables', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_term_debt_payables'] = $short_term_debt_payables;

        return $this;
    }

    /**
     * Gets short_term_debt_payables_others
     *
     * @return mixed|null
     */
    public function getShortTermDebtPayablesOthers()
    {
        return $this->container['short_term_debt_payables_others'];
    }

    /**
     * Sets short_term_debt_payables_others
     *
     * @param mixed|null $short_term_debt_payables_others short_term_debt_payables_others
     *
     * @return self
     */
    public function setShortTermDebtPayablesOthers($short_term_debt_payables_others)
    {
        if (is_null($short_term_debt_payables_others)) {
            array_push($this->openAPINullablesSetToNull, 'short_term_debt_payables_others');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_term_debt_payables_others', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_term_debt_payables_others'] = $short_term_debt_payables_others;

        return $this;
    }

    /**
     * Gets short_term_debt_prepayment_customers
     *
     * @return mixed|null
     */
    public function getShortTermDebtPrepaymentCustomers()
    {
        return $this->container['short_term_debt_prepayment_customers'];
    }

    /**
     * Sets short_term_debt_prepayment_customers
     *
     * @param mixed|null $short_term_debt_prepayment_customers short_term_debt_prepayment_customers
     *
     * @return self
     */
    public function setShortTermDebtPrepaymentCustomers($short_term_debt_prepayment_customers)
    {
        if (is_null($short_term_debt_prepayment_customers)) {
            array_push($this->openAPINullablesSetToNull, 'short_term_debt_prepayment_customers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_term_debt_prepayment_customers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_term_debt_prepayment_customers'] = $short_term_debt_prepayment_customers;

        return $this;
    }

    /**
     * Gets short_term_debt_tax_payables
     *
     * @return mixed|null
     */
    public function getShortTermDebtTaxPayables()
    {
        return $this->container['short_term_debt_tax_payables'];
    }

    /**
     * Sets short_term_debt_tax_payables
     *
     * @param mixed|null $short_term_debt_tax_payables short_term_debt_tax_payables
     *
     * @return self
     */
    public function setShortTermDebtTaxPayables($short_term_debt_tax_payables)
    {
        if (is_null($short_term_debt_tax_payables)) {
            array_push($this->openAPINullablesSetToNull, 'short_term_debt_tax_payables');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_term_debt_tax_payables', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_term_debt_tax_payables'] = $short_term_debt_tax_payables;

        return $this;
    }

    /**
     * Gets short_term_receivables
     *
     * @return mixed|null
     */
    public function getShortTermReceivables()
    {
        return $this->container['short_term_receivables'];
    }

    /**
     * Sets short_term_receivables
     *
     * @param mixed|null $short_term_receivables short_term_receivables
     *
     * @return self
     */
    public function setShortTermReceivables($short_term_receivables)
    {
        if (is_null($short_term_receivables)) {
            array_push($this->openAPINullablesSetToNull, 'short_term_receivables');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_term_receivables', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_term_receivables'] = $short_term_receivables;

        return $this;
    }

    /**
     * Gets short_term_receivables_associates
     *
     * @return mixed|null
     */
    public function getShortTermReceivablesAssociates()
    {
        return $this->container['short_term_receivables_associates'];
    }

    /**
     * Sets short_term_receivables_associates
     *
     * @param mixed|null $short_term_receivables_associates short_term_receivables_associates
     *
     * @return self
     */
    public function setShortTermReceivablesAssociates($short_term_receivables_associates)
    {
        if (is_null($short_term_receivables_associates)) {
            array_push($this->openAPINullablesSetToNull, 'short_term_receivables_associates');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_term_receivables_associates', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_term_receivables_associates'] = $short_term_receivables_associates;

        return $this;
    }

    /**
     * Gets short_term_receivables_deferred_income
     *
     * @return mixed|null
     */
    public function getShortTermReceivablesDeferredIncome()
    {
        return $this->container['short_term_receivables_deferred_income'];
    }

    /**
     * Sets short_term_receivables_deferred_income
     *
     * @param mixed|null $short_term_receivables_deferred_income short_term_receivables_deferred_income
     *
     * @return self
     */
    public function setShortTermReceivablesDeferredIncome($short_term_receivables_deferred_income)
    {
        if (is_null($short_term_receivables_deferred_income)) {
            array_push($this->openAPINullablesSetToNull, 'short_term_receivables_deferred_income');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_term_receivables_deferred_income', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_term_receivables_deferred_income'] = $short_term_receivables_deferred_income;

        return $this;
    }

    /**
     * Gets short_term_receivables_deferred_taxes
     *
     * @return mixed|null
     */
    public function getShortTermReceivablesDeferredTaxes()
    {
        return $this->container['short_term_receivables_deferred_taxes'];
    }

    /**
     * Sets short_term_receivables_deferred_taxes
     *
     * @param mixed|null $short_term_receivables_deferred_taxes short_term_receivables_deferred_taxes
     *
     * @return self
     */
    public function setShortTermReceivablesDeferredTaxes($short_term_receivables_deferred_taxes)
    {
        if (is_null($short_term_receivables_deferred_taxes)) {
            array_push($this->openAPINullablesSetToNull, 'short_term_receivables_deferred_taxes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_term_receivables_deferred_taxes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_term_receivables_deferred_taxes'] = $short_term_receivables_deferred_taxes;

        return $this;
    }

    /**
     * Gets short_term_receivables_group_enterprises
     *
     * @return mixed|null
     */
    public function getShortTermReceivablesGroupEnterprises()
    {
        return $this->container['short_term_receivables_group_enterprises'];
    }

    /**
     * Sets short_term_receivables_group_enterprises
     *
     * @param mixed|null $short_term_receivables_group_enterprises short_term_receivables_group_enterprises
     *
     * @return self
     */
    public function setShortTermReceivablesGroupEnterprises($short_term_receivables_group_enterprises)
    {
        if (is_null($short_term_receivables_group_enterprises)) {
            array_push($this->openAPINullablesSetToNull, 'short_term_receivables_group_enterprises');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_term_receivables_group_enterprises', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_term_receivables_group_enterprises'] = $short_term_receivables_group_enterprises;

        return $this;
    }

    /**
     * Gets short_term_receivables_others
     *
     * @return mixed|null
     */
    public function getShortTermReceivablesOthers()
    {
        return $this->container['short_term_receivables_others'];
    }

    /**
     * Sets short_term_receivables_others
     *
     * @param mixed|null $short_term_receivables_others short_term_receivables_others
     *
     * @return self
     */
    public function setShortTermReceivablesOthers($short_term_receivables_others)
    {
        if (is_null($short_term_receivables_others)) {
            array_push($this->openAPINullablesSetToNull, 'short_term_receivables_others');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_term_receivables_others', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_term_receivables_others'] = $short_term_receivables_others;

        return $this;
    }

    /**
     * Gets short_term_receivables_trade
     *
     * @return mixed|null
     */
    public function getShortTermReceivablesTrade()
    {
        return $this->container['short_term_receivables_trade'];
    }

    /**
     * Sets short_term_receivables_trade
     *
     * @param mixed|null $short_term_receivables_trade short_term_receivables_trade
     *
     * @return self
     */
    public function setShortTermReceivablesTrade($short_term_receivables_trade)
    {
        if (is_null($short_term_receivables_trade)) {
            array_push($this->openAPINullablesSetToNull, 'short_term_receivables_trade');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_term_receivables_trade', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_term_receivables_trade'] = $short_term_receivables_trade;

        return $this;
    }

    /**
     * Gets social_security_contributions
     *
     * @return mixed|null
     */
    public function getSocialSecurityContributions()
    {
        return $this->container['social_security_contributions'];
    }

    /**
     * Sets social_security_contributions
     *
     * @param mixed|null $social_security_contributions social_security_contributions
     *
     * @return self
     */
    public function setSocialSecurityContributions($social_security_contributions)
    {
        if (is_null($social_security_contributions)) {
            array_push($this->openAPINullablesSetToNull, 'social_security_contributions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('social_security_contributions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['social_security_contributions'] = $social_security_contributions;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return mixed|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param mixed|null $tax tax
     *
     * @return self
     */
    public function setTax($tax)
    {
        if (is_null($tax)) {
            array_push($this->openAPINullablesSetToNull, 'tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets wages_and_salaries
     *
     * @return mixed|null
     */
    public function getWagesAndSalaries()
    {
        return $this->container['wages_and_salaries'];
    }

    /**
     * Sets wages_and_salaries
     *
     * @param mixed|null $wages_and_salaries wages_and_salaries
     *
     * @return self
     */
    public function setWagesAndSalaries($wages_and_salaries)
    {
        if (is_null($wages_and_salaries)) {
            array_push($this->openAPINullablesSetToNull, 'wages_and_salaries');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wages_and_salaries', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['wages_and_salaries'] = $wages_and_salaries;

        return $this;
    }

    /**
     * Gets working_capital
     *
     * @return mixed|null
     */
    public function getWorkingCapital()
    {
        return $this->container['working_capital'];
    }

    /**
     * Sets working_capital
     *
     * @param mixed|null $working_capital working_capital
     *
     * @return self
     */
    public function setWorkingCapital($working_capital)
    {
        if (is_null($working_capital)) {
            array_push($this->openAPINullablesSetToNull, 'working_capital');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('working_capital', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['working_capital'] = $working_capital;

        return $this;
    }

    /**
     * Gets working_capital_ratio
     *
     * @return mixed|null
     */
    public function getWorkingCapitalRatio()
    {
        return $this->container['working_capital_ratio'];
    }

    /**
     * Sets working_capital_ratio
     *
     * @param mixed|null $working_capital_ratio working_capital_ratio
     *
     * @return self
     */
    public function setWorkingCapitalRatio($working_capital_ratio)
    {
        if (is_null($working_capital_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'working_capital_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('working_capital_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['working_capital_ratio'] = $working_capital_ratio;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


