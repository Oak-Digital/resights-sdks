<?php
/**
 * SkoedeAuktionModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SkoedeAuktionModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SkoedeAuktionModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SkoedeAuktionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ejendom_kategori' => '\OpenAPI\Client\Model\EjendomKategoriModel',
        'bygningsforhold_kode' => '\OpenAPI\Client\Model\BygningsforholdKodeEnum',
        'valuta_kode' => 'mixed',
        'auktion_dato' => 'mixed',
        'handel_kode' => '\OpenAPI\Client\Model\HandelKodeEnum',
        'information' => '\OpenAPI\Client\Model\AdkomstInformationModel',
        'budsum_beloeb' => 'mixed',
        'skoede_transport_beloeb' => 'mixed',
        'dokument_id_samling' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ejendom_kategori' => null,
        'bygningsforhold_kode' => null,
        'valuta_kode' => null,
        'auktion_dato' => 'date',
        'handel_kode' => null,
        'information' => null,
        'budsum_beloeb' => null,
        'skoede_transport_beloeb' => null,
        'dokument_id_samling' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ejendom_kategori' => false,
		'bygningsforhold_kode' => false,
		'valuta_kode' => true,
		'auktion_dato' => true,
		'handel_kode' => false,
		'information' => false,
		'budsum_beloeb' => true,
		'skoede_transport_beloeb' => true,
		'dokument_id_samling' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ejendom_kategori' => 'EjendomKategori',
        'bygningsforhold_kode' => 'BygningsforholdKode',
        'valuta_kode' => 'ValutaKode',
        'auktion_dato' => 'AuktionDato',
        'handel_kode' => 'HandelKode',
        'information' => 'Information',
        'budsum_beloeb' => 'BudsumBeloeb',
        'skoede_transport_beloeb' => 'SkoedeTransportBeloeb',
        'dokument_id_samling' => 'DokumentIdSamling'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ejendom_kategori' => 'setEjendomKategori',
        'bygningsforhold_kode' => 'setBygningsforholdKode',
        'valuta_kode' => 'setValutaKode',
        'auktion_dato' => 'setAuktionDato',
        'handel_kode' => 'setHandelKode',
        'information' => 'setInformation',
        'budsum_beloeb' => 'setBudsumBeloeb',
        'skoede_transport_beloeb' => 'setSkoedeTransportBeloeb',
        'dokument_id_samling' => 'setDokumentIdSamling'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ejendom_kategori' => 'getEjendomKategori',
        'bygningsforhold_kode' => 'getBygningsforholdKode',
        'valuta_kode' => 'getValutaKode',
        'auktion_dato' => 'getAuktionDato',
        'handel_kode' => 'getHandelKode',
        'information' => 'getInformation',
        'budsum_beloeb' => 'getBudsumBeloeb',
        'skoede_transport_beloeb' => 'getSkoedeTransportBeloeb',
        'dokument_id_samling' => 'getDokumentIdSamling'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ejendom_kategori', $data ?? [], null);
        $this->setIfExists('bygningsforhold_kode', $data ?? [], null);
        $this->setIfExists('valuta_kode', $data ?? [], null);
        $this->setIfExists('auktion_dato', $data ?? [], null);
        $this->setIfExists('handel_kode', $data ?? [], null);
        $this->setIfExists('information', $data ?? [], null);
        $this->setIfExists('budsum_beloeb', $data ?? [], null);
        $this->setIfExists('skoede_transport_beloeb', $data ?? [], null);
        $this->setIfExists('dokument_id_samling', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ejendom_kategori'] === null) {
            $invalidProperties[] = "'ejendom_kategori' can't be null";
        }
        if ($this->container['handel_kode'] === null) {
            $invalidProperties[] = "'handel_kode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ejendom_kategori
     *
     * @return \OpenAPI\Client\Model\EjendomKategoriModel
     */
    public function getEjendomKategori()
    {
        return $this->container['ejendom_kategori'];
    }

    /**
     * Sets ejendom_kategori
     *
     * @param \OpenAPI\Client\Model\EjendomKategoriModel $ejendom_kategori ejendom_kategori
     *
     * @return self
     */
    public function setEjendomKategori($ejendom_kategori)
    {
        if (is_null($ejendom_kategori)) {
            throw new \InvalidArgumentException('non-nullable ejendom_kategori cannot be null');
        }
        $this->container['ejendom_kategori'] = $ejendom_kategori;

        return $this;
    }

    /**
     * Gets bygningsforhold_kode
     *
     * @return \OpenAPI\Client\Model\BygningsforholdKodeEnum|null
     */
    public function getBygningsforholdKode()
    {
        return $this->container['bygningsforhold_kode'];
    }

    /**
     * Sets bygningsforhold_kode
     *
     * @param \OpenAPI\Client\Model\BygningsforholdKodeEnum|null $bygningsforhold_kode bygningsforhold_kode
     *
     * @return self
     */
    public function setBygningsforholdKode($bygningsforhold_kode)
    {
        if (is_null($bygningsforhold_kode)) {
            throw new \InvalidArgumentException('non-nullable bygningsforhold_kode cannot be null');
        }
        $this->container['bygningsforhold_kode'] = $bygningsforhold_kode;

        return $this;
    }

    /**
     * Gets valuta_kode
     *
     * @return mixed|null
     */
    public function getValutaKode()
    {
        return $this->container['valuta_kode'];
    }

    /**
     * Sets valuta_kode
     *
     * @param mixed|null $valuta_kode ISO 4217 valutakode.
     *
     * @return self
     */
    public function setValutaKode($valuta_kode)
    {
        if (is_null($valuta_kode)) {
            array_push($this->openAPINullablesSetToNull, 'valuta_kode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valuta_kode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valuta_kode'] = $valuta_kode;

        return $this;
    }

    /**
     * Gets auktion_dato
     *
     * @return mixed|null
     */
    public function getAuktionDato()
    {
        return $this->container['auktion_dato'];
    }

    /**
     * Sets auktion_dato
     *
     * @param mixed|null $auktion_dato Angiver auktionsdatoen
     *
     * @return self
     */
    public function setAuktionDato($auktion_dato)
    {
        if (is_null($auktion_dato)) {
            array_push($this->openAPINullablesSetToNull, 'auktion_dato');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auktion_dato', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auktion_dato'] = $auktion_dato;

        return $this;
    }

    /**
     * Gets handel_kode
     *
     * @return \OpenAPI\Client\Model\HandelKodeEnum
     */
    public function getHandelKode()
    {
        return $this->container['handel_kode'];
    }

    /**
     * Sets handel_kode
     *
     * @param \OpenAPI\Client\Model\HandelKodeEnum $handel_kode handel_kode
     *
     * @return self
     */
    public function setHandelKode($handel_kode)
    {
        if (is_null($handel_kode)) {
            throw new \InvalidArgumentException('non-nullable handel_kode cannot be null');
        }
        $this->container['handel_kode'] = $handel_kode;

        return $this;
    }

    /**
     * Gets information
     *
     * @return \OpenAPI\Client\Model\AdkomstInformationModel|null
     */
    public function getInformation()
    {
        return $this->container['information'];
    }

    /**
     * Sets information
     *
     * @param \OpenAPI\Client\Model\AdkomstInformationModel|null $information information
     *
     * @return self
     */
    public function setInformation($information)
    {
        if (is_null($information)) {
            throw new \InvalidArgumentException('non-nullable information cannot be null');
        }
        $this->container['information'] = $information;

        return $this;
    }

    /**
     * Gets budsum_beloeb
     *
     * @return mixed|null
     */
    public function getBudsumBeloeb()
    {
        return $this->container['budsum_beloeb'];
    }

    /**
     * Sets budsum_beloeb
     *
     * @param mixed|null $budsum_beloeb BudsumbelÃ¸b.
     *
     * @return self
     */
    public function setBudsumBeloeb($budsum_beloeb)
    {
        if (is_null($budsum_beloeb)) {
            array_push($this->openAPINullablesSetToNull, 'budsum_beloeb');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('budsum_beloeb', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['budsum_beloeb'] = $budsum_beloeb;

        return $this;
    }

    /**
     * Gets skoede_transport_beloeb
     *
     * @return mixed|null
     */
    public function getSkoedeTransportBeloeb()
    {
        return $this->container['skoede_transport_beloeb'];
    }

    /**
     * Sets skoede_transport_beloeb
     *
     * @param mixed|null $skoede_transport_beloeb SkÃ¸de transport belÃ¸b
     *
     * @return self
     */
    public function setSkoedeTransportBeloeb($skoede_transport_beloeb)
    {
        if (is_null($skoede_transport_beloeb)) {
            array_push($this->openAPINullablesSetToNull, 'skoede_transport_beloeb');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skoede_transport_beloeb', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skoede_transport_beloeb'] = $skoede_transport_beloeb;

        return $this;
    }

    /**
     * Gets dokument_id_samling
     *
     * @return mixed|null
     */
    public function getDokumentIdSamling()
    {
        return $this->container['dokument_id_samling'];
    }

    /**
     * Sets dokument_id_samling
     *
     * @param mixed|null $dokument_id_samling Samling af dokumenter der skal udslettes
     *
     * @return self
     */
    public function setDokumentIdSamling($dokument_id_samling)
    {
        if (is_null($dokument_id_samling)) {
            array_push($this->openAPINullablesSetToNull, 'dokument_id_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dokument_id_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dokument_id_samling'] = $dokument_id_samling;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


