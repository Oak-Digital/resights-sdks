<?php
/**
 * DomusProUnitModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DomusProUnitModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomusProUnitModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DomusProUnitModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'unit_identifier' => 'mixed',
        'business_premises_area_measure' => 'mixed',
        'dwelling_area_measure' => 'mixed',
        'dwelling_type_code' => 'mixed',
        'dwelling_type_code_text' => 'mixed',
        'floor_identifier' => 'mixed',
        'floor_physical_identifier' => 'mixed',
        'street_building_identifier' => 'mixed',
        'street_identifier' => 'mixed',
        'street_name' => 'mixed',
        'suite_identifier' => 'mixed',
        'toilet_facility_code' => 'mixed',
        'toilet_facility_code_text' => 'mixed',
        'total_building_unit_area_measure' => 'mixed',
        'unit_use_code' => 'mixed',
        'unit_use_code_description' => 'mixed',
        'unpadded_street_building_identifier' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'unit_identifier' => 'uuid',
        'business_premises_area_measure' => null,
        'dwelling_area_measure' => null,
        'dwelling_type_code' => null,
        'dwelling_type_code_text' => null,
        'floor_identifier' => null,
        'floor_physical_identifier' => null,
        'street_building_identifier' => null,
        'street_identifier' => null,
        'street_name' => null,
        'suite_identifier' => null,
        'toilet_facility_code' => null,
        'toilet_facility_code_text' => null,
        'total_building_unit_area_measure' => null,
        'unit_use_code' => null,
        'unit_use_code_description' => null,
        'unpadded_street_building_identifier' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'unit_identifier' => true,
		'business_premises_area_measure' => true,
		'dwelling_area_measure' => true,
		'dwelling_type_code' => true,
		'dwelling_type_code_text' => true,
		'floor_identifier' => true,
		'floor_physical_identifier' => true,
		'street_building_identifier' => true,
		'street_identifier' => true,
		'street_name' => true,
		'suite_identifier' => true,
		'toilet_facility_code' => true,
		'toilet_facility_code_text' => true,
		'total_building_unit_area_measure' => true,
		'unit_use_code' => true,
		'unit_use_code_description' => true,
		'unpadded_street_building_identifier' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_identifier' => 'unitIdentifier',
        'business_premises_area_measure' => 'businessPremisesAreaMeasure',
        'dwelling_area_measure' => 'dwellingAreaMeasure',
        'dwelling_type_code' => 'dwellingTypeCode',
        'dwelling_type_code_text' => 'dwellingTypeCodeText',
        'floor_identifier' => 'floorIdentifier',
        'floor_physical_identifier' => 'floorPhysicalIdentifier',
        'street_building_identifier' => 'streetBuildingIdentifier',
        'street_identifier' => 'streetIdentifier',
        'street_name' => 'streetName',
        'suite_identifier' => 'suiteIdentifier',
        'toilet_facility_code' => 'toiletFacilityCode',
        'toilet_facility_code_text' => 'toiletFacilityCodeText',
        'total_building_unit_area_measure' => 'totalBuildingUnitAreaMeasure',
        'unit_use_code' => 'unitUseCode',
        'unit_use_code_description' => 'unitUseCodeDescription',
        'unpadded_street_building_identifier' => 'unpaddedStreetBuildingIdentifier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_identifier' => 'setUnitIdentifier',
        'business_premises_area_measure' => 'setBusinessPremisesAreaMeasure',
        'dwelling_area_measure' => 'setDwellingAreaMeasure',
        'dwelling_type_code' => 'setDwellingTypeCode',
        'dwelling_type_code_text' => 'setDwellingTypeCodeText',
        'floor_identifier' => 'setFloorIdentifier',
        'floor_physical_identifier' => 'setFloorPhysicalIdentifier',
        'street_building_identifier' => 'setStreetBuildingIdentifier',
        'street_identifier' => 'setStreetIdentifier',
        'street_name' => 'setStreetName',
        'suite_identifier' => 'setSuiteIdentifier',
        'toilet_facility_code' => 'setToiletFacilityCode',
        'toilet_facility_code_text' => 'setToiletFacilityCodeText',
        'total_building_unit_area_measure' => 'setTotalBuildingUnitAreaMeasure',
        'unit_use_code' => 'setUnitUseCode',
        'unit_use_code_description' => 'setUnitUseCodeDescription',
        'unpadded_street_building_identifier' => 'setUnpaddedStreetBuildingIdentifier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_identifier' => 'getUnitIdentifier',
        'business_premises_area_measure' => 'getBusinessPremisesAreaMeasure',
        'dwelling_area_measure' => 'getDwellingAreaMeasure',
        'dwelling_type_code' => 'getDwellingTypeCode',
        'dwelling_type_code_text' => 'getDwellingTypeCodeText',
        'floor_identifier' => 'getFloorIdentifier',
        'floor_physical_identifier' => 'getFloorPhysicalIdentifier',
        'street_building_identifier' => 'getStreetBuildingIdentifier',
        'street_identifier' => 'getStreetIdentifier',
        'street_name' => 'getStreetName',
        'suite_identifier' => 'getSuiteIdentifier',
        'toilet_facility_code' => 'getToiletFacilityCode',
        'toilet_facility_code_text' => 'getToiletFacilityCodeText',
        'total_building_unit_area_measure' => 'getTotalBuildingUnitAreaMeasure',
        'unit_use_code' => 'getUnitUseCode',
        'unit_use_code_description' => 'getUnitUseCodeDescription',
        'unpadded_street_building_identifier' => 'getUnpaddedStreetBuildingIdentifier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('unit_identifier', $data ?? [], null);
        $this->setIfExists('business_premises_area_measure', $data ?? [], null);
        $this->setIfExists('dwelling_area_measure', $data ?? [], null);
        $this->setIfExists('dwelling_type_code', $data ?? [], null);
        $this->setIfExists('dwelling_type_code_text', $data ?? [], null);
        $this->setIfExists('floor_identifier', $data ?? [], null);
        $this->setIfExists('floor_physical_identifier', $data ?? [], null);
        $this->setIfExists('street_building_identifier', $data ?? [], null);
        $this->setIfExists('street_identifier', $data ?? [], null);
        $this->setIfExists('street_name', $data ?? [], null);
        $this->setIfExists('suite_identifier', $data ?? [], null);
        $this->setIfExists('toilet_facility_code', $data ?? [], null);
        $this->setIfExists('toilet_facility_code_text', $data ?? [], null);
        $this->setIfExists('total_building_unit_area_measure', $data ?? [], null);
        $this->setIfExists('unit_use_code', $data ?? [], null);
        $this->setIfExists('unit_use_code_description', $data ?? [], null);
        $this->setIfExists('unpadded_street_building_identifier', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['unit_identifier'] === null) {
            $invalidProperties[] = "'unit_identifier' can't be null";
        }
        if ($this->container['business_premises_area_measure'] === null) {
            $invalidProperties[] = "'business_premises_area_measure' can't be null";
        }
        if ($this->container['dwelling_area_measure'] === null) {
            $invalidProperties[] = "'dwelling_area_measure' can't be null";
        }
        if ($this->container['dwelling_type_code_text'] === null) {
            $invalidProperties[] = "'dwelling_type_code_text' can't be null";
        }
        if ($this->container['street_building_identifier'] === null) {
            $invalidProperties[] = "'street_building_identifier' can't be null";
        }
        if ($this->container['street_identifier'] === null) {
            $invalidProperties[] = "'street_identifier' can't be null";
        }
        if ($this->container['street_name'] === null) {
            $invalidProperties[] = "'street_name' can't be null";
        }
        if ($this->container['total_building_unit_area_measure'] === null) {
            $invalidProperties[] = "'total_building_unit_area_measure' can't be null";
        }
        if ($this->container['unit_use_code'] === null) {
            $invalidProperties[] = "'unit_use_code' can't be null";
        }
        if ($this->container['unit_use_code_description'] === null) {
            $invalidProperties[] = "'unit_use_code_description' can't be null";
        }
        if ($this->container['unpadded_street_building_identifier'] === null) {
            $invalidProperties[] = "'unpadded_street_building_identifier' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_identifier
     *
     * @return mixed
     */
    public function getUnitIdentifier()
    {
        return $this->container['unit_identifier'];
    }

    /**
     * Sets unit_identifier
     *
     * @param mixed $unit_identifier unit_identifier
     *
     * @return self
     */
    public function setUnitIdentifier($unit_identifier)
    {
        if (is_null($unit_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'unit_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_identifier'] = $unit_identifier;

        return $this;
    }

    /**
     * Gets business_premises_area_measure
     *
     * @return mixed
     */
    public function getBusinessPremisesAreaMeasure()
    {
        return $this->container['business_premises_area_measure'];
    }

    /**
     * Sets business_premises_area_measure
     *
     * @param mixed $business_premises_area_measure business_premises_area_measure
     *
     * @return self
     */
    public function setBusinessPremisesAreaMeasure($business_premises_area_measure)
    {
        if (is_null($business_premises_area_measure)) {
            array_push($this->openAPINullablesSetToNull, 'business_premises_area_measure');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_premises_area_measure', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_premises_area_measure'] = $business_premises_area_measure;

        return $this;
    }

    /**
     * Gets dwelling_area_measure
     *
     * @return mixed
     */
    public function getDwellingAreaMeasure()
    {
        return $this->container['dwelling_area_measure'];
    }

    /**
     * Sets dwelling_area_measure
     *
     * @param mixed $dwelling_area_measure dwelling_area_measure
     *
     * @return self
     */
    public function setDwellingAreaMeasure($dwelling_area_measure)
    {
        if (is_null($dwelling_area_measure)) {
            array_push($this->openAPINullablesSetToNull, 'dwelling_area_measure');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dwelling_area_measure', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dwelling_area_measure'] = $dwelling_area_measure;

        return $this;
    }

    /**
     * Gets dwelling_type_code
     *
     * @return mixed|null
     */
    public function getDwellingTypeCode()
    {
        return $this->container['dwelling_type_code'];
    }

    /**
     * Sets dwelling_type_code
     *
     * @param mixed|null $dwelling_type_code dwelling_type_code
     *
     * @return self
     */
    public function setDwellingTypeCode($dwelling_type_code)
    {
        if (is_null($dwelling_type_code)) {
            array_push($this->openAPINullablesSetToNull, 'dwelling_type_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dwelling_type_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dwelling_type_code'] = $dwelling_type_code;

        return $this;
    }

    /**
     * Gets dwelling_type_code_text
     *
     * @return mixed
     */
    public function getDwellingTypeCodeText()
    {
        return $this->container['dwelling_type_code_text'];
    }

    /**
     * Sets dwelling_type_code_text
     *
     * @param mixed $dwelling_type_code_text dwelling_type_code_text
     *
     * @return self
     */
    public function setDwellingTypeCodeText($dwelling_type_code_text)
    {
        if (is_null($dwelling_type_code_text)) {
            array_push($this->openAPINullablesSetToNull, 'dwelling_type_code_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dwelling_type_code_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dwelling_type_code_text'] = $dwelling_type_code_text;

        return $this;
    }

    /**
     * Gets floor_identifier
     *
     * @return mixed|null
     */
    public function getFloorIdentifier()
    {
        return $this->container['floor_identifier'];
    }

    /**
     * Sets floor_identifier
     *
     * @param mixed|null $floor_identifier floor_identifier
     *
     * @return self
     */
    public function setFloorIdentifier($floor_identifier)
    {
        if (is_null($floor_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'floor_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('floor_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['floor_identifier'] = $floor_identifier;

        return $this;
    }

    /**
     * Gets floor_physical_identifier
     *
     * @return mixed|null
     */
    public function getFloorPhysicalIdentifier()
    {
        return $this->container['floor_physical_identifier'];
    }

    /**
     * Sets floor_physical_identifier
     *
     * @param mixed|null $floor_physical_identifier floor_physical_identifier
     *
     * @return self
     */
    public function setFloorPhysicalIdentifier($floor_physical_identifier)
    {
        if (is_null($floor_physical_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'floor_physical_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('floor_physical_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['floor_physical_identifier'] = $floor_physical_identifier;

        return $this;
    }

    /**
     * Gets street_building_identifier
     *
     * @return mixed
     */
    public function getStreetBuildingIdentifier()
    {
        return $this->container['street_building_identifier'];
    }

    /**
     * Sets street_building_identifier
     *
     * @param mixed $street_building_identifier street_building_identifier
     *
     * @return self
     */
    public function setStreetBuildingIdentifier($street_building_identifier)
    {
        if (is_null($street_building_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'street_building_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_building_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_building_identifier'] = $street_building_identifier;

        return $this;
    }

    /**
     * Gets street_identifier
     *
     * @return mixed
     */
    public function getStreetIdentifier()
    {
        return $this->container['street_identifier'];
    }

    /**
     * Sets street_identifier
     *
     * @param mixed $street_identifier street_identifier
     *
     * @return self
     */
    public function setStreetIdentifier($street_identifier)
    {
        if (is_null($street_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'street_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_identifier'] = $street_identifier;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return mixed
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param mixed $street_name street_name
     *
     * @return self
     */
    public function setStreetName($street_name)
    {
        if (is_null($street_name)) {
            array_push($this->openAPINullablesSetToNull, 'street_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets suite_identifier
     *
     * @return mixed|null
     */
    public function getSuiteIdentifier()
    {
        return $this->container['suite_identifier'];
    }

    /**
     * Sets suite_identifier
     *
     * @param mixed|null $suite_identifier suite_identifier
     *
     * @return self
     */
    public function setSuiteIdentifier($suite_identifier)
    {
        if (is_null($suite_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'suite_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suite_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suite_identifier'] = $suite_identifier;

        return $this;
    }

    /**
     * Gets toilet_facility_code
     *
     * @return mixed|null
     */
    public function getToiletFacilityCode()
    {
        return $this->container['toilet_facility_code'];
    }

    /**
     * Sets toilet_facility_code
     *
     * @param mixed|null $toilet_facility_code toilet_facility_code
     *
     * @return self
     */
    public function setToiletFacilityCode($toilet_facility_code)
    {
        if (is_null($toilet_facility_code)) {
            array_push($this->openAPINullablesSetToNull, 'toilet_facility_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('toilet_facility_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['toilet_facility_code'] = $toilet_facility_code;

        return $this;
    }

    /**
     * Gets toilet_facility_code_text
     *
     * @return mixed|null
     */
    public function getToiletFacilityCodeText()
    {
        return $this->container['toilet_facility_code_text'];
    }

    /**
     * Sets toilet_facility_code_text
     *
     * @param mixed|null $toilet_facility_code_text toilet_facility_code_text
     *
     * @return self
     */
    public function setToiletFacilityCodeText($toilet_facility_code_text)
    {
        if (is_null($toilet_facility_code_text)) {
            array_push($this->openAPINullablesSetToNull, 'toilet_facility_code_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('toilet_facility_code_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['toilet_facility_code_text'] = $toilet_facility_code_text;

        return $this;
    }

    /**
     * Gets total_building_unit_area_measure
     *
     * @return mixed
     */
    public function getTotalBuildingUnitAreaMeasure()
    {
        return $this->container['total_building_unit_area_measure'];
    }

    /**
     * Sets total_building_unit_area_measure
     *
     * @param mixed $total_building_unit_area_measure total_building_unit_area_measure
     *
     * @return self
     */
    public function setTotalBuildingUnitAreaMeasure($total_building_unit_area_measure)
    {
        if (is_null($total_building_unit_area_measure)) {
            array_push($this->openAPINullablesSetToNull, 'total_building_unit_area_measure');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_building_unit_area_measure', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_building_unit_area_measure'] = $total_building_unit_area_measure;

        return $this;
    }

    /**
     * Gets unit_use_code
     *
     * @return mixed
     */
    public function getUnitUseCode()
    {
        return $this->container['unit_use_code'];
    }

    /**
     * Sets unit_use_code
     *
     * @param mixed $unit_use_code unit_use_code
     *
     * @return self
     */
    public function setUnitUseCode($unit_use_code)
    {
        if (is_null($unit_use_code)) {
            array_push($this->openAPINullablesSetToNull, 'unit_use_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_use_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_use_code'] = $unit_use_code;

        return $this;
    }

    /**
     * Gets unit_use_code_description
     *
     * @return mixed
     */
    public function getUnitUseCodeDescription()
    {
        return $this->container['unit_use_code_description'];
    }

    /**
     * Sets unit_use_code_description
     *
     * @param mixed $unit_use_code_description unit_use_code_description
     *
     * @return self
     */
    public function setUnitUseCodeDescription($unit_use_code_description)
    {
        if (is_null($unit_use_code_description)) {
            array_push($this->openAPINullablesSetToNull, 'unit_use_code_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_use_code_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_use_code_description'] = $unit_use_code_description;

        return $this;
    }

    /**
     * Gets unpadded_street_building_identifier
     *
     * @return mixed
     */
    public function getUnpaddedStreetBuildingIdentifier()
    {
        return $this->container['unpadded_street_building_identifier'];
    }

    /**
     * Sets unpadded_street_building_identifier
     *
     * @param mixed $unpadded_street_building_identifier unpadded_street_building_identifier
     *
     * @return self
     */
    public function setUnpaddedStreetBuildingIdentifier($unpadded_street_building_identifier)
    {
        if (is_null($unpadded_street_building_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'unpadded_street_building_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unpadded_street_building_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unpadded_street_building_identifier'] = $unpadded_street_building_identifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


