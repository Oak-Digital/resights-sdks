<?php
/**
 * DomusProDocumentModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DomusProDocumentModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomusProDocumentModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DomusProDocumentModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'document_type_id' => 'mixed',
        'document_type_name' => 'mixed',
        'file_name' => 'mixed',
        'file_token' => 'mixed',
        'original_file_name' => 'mixed',
        'draft' => 'mixed',
        'signed' => 'mixed',
        'held_date' => 'mixed',
        'signed_date' => 'mixed',
        'budget_start_date' => 'mixed',
        'public_allowed' => 'mixed',
        'subrogation' => 'mixed',
        'loan_limitation' => 'mixed',
        'is_association_creation' => 'mixed',
        'notes' => 'mixed',
        'description' => 'mixed',
        'important_date' => 'mixed',
        'deleted' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'document_type_id' => null,
        'document_type_name' => null,
        'file_name' => null,
        'file_token' => null,
        'original_file_name' => null,
        'draft' => null,
        'signed' => null,
        'held_date' => 'date',
        'signed_date' => 'date',
        'budget_start_date' => 'date',
        'public_allowed' => null,
        'subrogation' => null,
        'loan_limitation' => null,
        'is_association_creation' => null,
        'notes' => null,
        'description' => null,
        'important_date' => 'date',
        'deleted' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'document_type_id' => true,
		'document_type_name' => true,
		'file_name' => true,
		'file_token' => true,
		'original_file_name' => true,
		'draft' => true,
		'signed' => true,
		'held_date' => true,
		'signed_date' => true,
		'budget_start_date' => true,
		'public_allowed' => true,
		'subrogation' => true,
		'loan_limitation' => true,
		'is_association_creation' => true,
		'notes' => true,
		'description' => true,
		'important_date' => true,
		'deleted' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_type_id' => 'documentTypeId',
        'document_type_name' => 'documentTypeName',
        'file_name' => 'fileName',
        'file_token' => 'fileToken',
        'original_file_name' => 'originalFileName',
        'draft' => 'draft',
        'signed' => 'signed',
        'held_date' => 'heldDate',
        'signed_date' => 'signedDate',
        'budget_start_date' => 'budgetStartDate',
        'public_allowed' => 'publicAllowed',
        'subrogation' => 'subrogation',
        'loan_limitation' => 'loanLimitation',
        'is_association_creation' => 'isAssociationCreation',
        'notes' => 'notes',
        'description' => 'description',
        'important_date' => 'importantDate',
        'deleted' => 'deleted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_type_id' => 'setDocumentTypeId',
        'document_type_name' => 'setDocumentTypeName',
        'file_name' => 'setFileName',
        'file_token' => 'setFileToken',
        'original_file_name' => 'setOriginalFileName',
        'draft' => 'setDraft',
        'signed' => 'setSigned',
        'held_date' => 'setHeldDate',
        'signed_date' => 'setSignedDate',
        'budget_start_date' => 'setBudgetStartDate',
        'public_allowed' => 'setPublicAllowed',
        'subrogation' => 'setSubrogation',
        'loan_limitation' => 'setLoanLimitation',
        'is_association_creation' => 'setIsAssociationCreation',
        'notes' => 'setNotes',
        'description' => 'setDescription',
        'important_date' => 'setImportantDate',
        'deleted' => 'setDeleted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_type_id' => 'getDocumentTypeId',
        'document_type_name' => 'getDocumentTypeName',
        'file_name' => 'getFileName',
        'file_token' => 'getFileToken',
        'original_file_name' => 'getOriginalFileName',
        'draft' => 'getDraft',
        'signed' => 'getSigned',
        'held_date' => 'getHeldDate',
        'signed_date' => 'getSignedDate',
        'budget_start_date' => 'getBudgetStartDate',
        'public_allowed' => 'getPublicAllowed',
        'subrogation' => 'getSubrogation',
        'loan_limitation' => 'getLoanLimitation',
        'is_association_creation' => 'getIsAssociationCreation',
        'notes' => 'getNotes',
        'description' => 'getDescription',
        'important_date' => 'getImportantDate',
        'deleted' => 'getDeleted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('document_type_id', $data ?? [], null);
        $this->setIfExists('document_type_name', $data ?? [], null);
        $this->setIfExists('file_name', $data ?? [], null);
        $this->setIfExists('file_token', $data ?? [], null);
        $this->setIfExists('original_file_name', $data ?? [], null);
        $this->setIfExists('draft', $data ?? [], null);
        $this->setIfExists('signed', $data ?? [], null);
        $this->setIfExists('held_date', $data ?? [], null);
        $this->setIfExists('signed_date', $data ?? [], null);
        $this->setIfExists('budget_start_date', $data ?? [], null);
        $this->setIfExists('public_allowed', $data ?? [], null);
        $this->setIfExists('subrogation', $data ?? [], null);
        $this->setIfExists('loan_limitation', $data ?? [], null);
        $this->setIfExists('is_association_creation', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('important_date', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['document_type_id'] === null) {
            $invalidProperties[] = "'document_type_id' can't be null";
        }
        if ($this->container['document_type_name'] === null) {
            $invalidProperties[] = "'document_type_name' can't be null";
        }
        if ($this->container['file_name'] === null) {
            $invalidProperties[] = "'file_name' can't be null";
        }
        if ($this->container['file_token'] === null) {
            $invalidProperties[] = "'file_token' can't be null";
        }
        if ($this->container['original_file_name'] === null) {
            $invalidProperties[] = "'original_file_name' can't be null";
        }
        if ($this->container['draft'] === null) {
            $invalidProperties[] = "'draft' can't be null";
        }
        if ($this->container['signed'] === null) {
            $invalidProperties[] = "'signed' can't be null";
        }
        if ($this->container['public_allowed'] === null) {
            $invalidProperties[] = "'public_allowed' can't be null";
        }
        if ($this->container['deleted'] === null) {
            $invalidProperties[] = "'deleted' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets document_type_id
     *
     * @return mixed
     */
    public function getDocumentTypeId()
    {
        return $this->container['document_type_id'];
    }

    /**
     * Sets document_type_id
     *
     * @param mixed $document_type_id The name of the types might change over time, but this ID will be constant.
     *
     * @return self
     */
    public function setDocumentTypeId($document_type_id)
    {
        if (is_null($document_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'document_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_type_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_type_id'] = $document_type_id;

        return $this;
    }

    /**
     * Gets document_type_name
     *
     * @return mixed
     */
    public function getDocumentTypeName()
    {
        return $this->container['document_type_name'];
    }

    /**
     * Sets document_type_name
     *
     * @param mixed $document_type_name The documenttype as a string
     *
     * @return self
     */
    public function setDocumentTypeName($document_type_name)
    {
        if (is_null($document_type_name)) {
            array_push($this->openAPINullablesSetToNull, 'document_type_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_type_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_type_name'] = $document_type_name;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return mixed
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param mixed $file_name Filename of the actual file
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        if (is_null($file_name)) {
            array_push($this->openAPINullablesSetToNull, 'file_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets file_token
     *
     * @return mixed
     */
    public function getFileToken()
    {
        return $this->container['file_token'];
    }

    /**
     * Sets file_token
     *
     * @param mixed $file_token Filetoken used for later fileretrieval. The token is used in the fetchFile method of the documentService to fetch the actual binary data. The token is valid for one hour. It is valid only for one retrieval of the document and is then invalidated
     *
     * @return self
     */
    public function setFileToken($file_token)
    {
        if (is_null($file_token)) {
            array_push($this->openAPINullablesSetToNull, 'file_token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_token'] = $file_token;

        return $this;
    }

    /**
     * Gets original_file_name
     *
     * @return mixed
     */
    public function getOriginalFileName()
    {
        return $this->container['original_file_name'];
    }

    /**
     * Sets original_file_name
     *
     * @param mixed $original_file_name The filename the file had originally when sent to domuspro. This filename might contain invalid characters, or have cryptic names.
     *
     * @return self
     */
    public function setOriginalFileName($original_file_name)
    {
        if (is_null($original_file_name)) {
            array_push($this->openAPINullablesSetToNull, 'original_file_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_file_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['original_file_name'] = $original_file_name;

        return $this;
    }

    /**
     * Gets draft
     *
     * @return mixed
     */
    public function getDraft()
    {
        return $this->container['draft'];
    }

    /**
     * Sets draft
     *
     * @param mixed $draft If this is a draft, this is set to TRUE.
     *
     * @return self
     */
    public function setDraft($draft)
    {
        if (is_null($draft)) {
            array_push($this->openAPINullablesSetToNull, 'draft');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('draft', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['draft'] = $draft;

        return $this;
    }

    /**
     * Gets signed
     *
     * @return mixed
     */
    public function getSigned()
    {
        return $this->container['signed'];
    }

    /**
     * Sets signed
     *
     * @param mixed $signed Indicates whether this document is signed or not. Will be TRUE or FALSE. If not set (NULL), then the status is unknown or not relevant
     *
     * @return self
     */
    public function setSigned($signed)
    {
        if (is_null($signed)) {
            array_push($this->openAPINullablesSetToNull, 'signed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signed'] = $signed;

        return $this;
    }

    /**
     * Gets held_date
     *
     * @return mixed|null
     */
    public function getHeldDate()
    {
        return $this->container['held_date'];
    }

    /**
     * Sets held_date
     *
     * @param mixed|null $held_date If this documents is a meeting minute, this field will contain the date of the meeting
     *
     * @return self
     */
    public function setHeldDate($held_date)
    {
        if (is_null($held_date)) {
            array_push($this->openAPINullablesSetToNull, 'held_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('held_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['held_date'] = $held_date;

        return $this;
    }

    /**
     * Gets signed_date
     *
     * @return mixed|null
     */
    public function getSignedDate()
    {
        return $this->container['signed_date'];
    }

    /**
     * Sets signed_date
     *
     * @param mixed|null $signed_date If signed, this will will contain the date it was signed.
     *
     * @return self
     */
    public function setSignedDate($signed_date)
    {
        if (is_null($signed_date)) {
            array_push($this->openAPINullablesSetToNull, 'signed_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signed_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signed_date'] = $signed_date;

        return $this;
    }

    /**
     * Gets budget_start_date
     *
     * @return mixed|null
     */
    public function getBudgetStartDate()
    {
        return $this->container['budget_start_date'];
    }

    /**
     * Sets budget_start_date
     *
     * @param mixed|null $budget_start_date FÃ¸rste dato i regnskabsÃ¥ret for budgettet, bruges ifm. dokumenttypen 'Budget, separat'
     *
     * @return self
     */
    public function setBudgetStartDate($budget_start_date)
    {
        if (is_null($budget_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'budget_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('budget_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['budget_start_date'] = $budget_start_date;

        return $this;
    }

    /**
     * Gets public_allowed
     *
     * @return mixed
     */
    public function getPublicAllowed()
    {
        return $this->container['public_allowed'];
    }

    /**
     * Sets public_allowed
     *
     * @param mixed $public_allowed Angiver om oplysninger fra denne fil mÃ¥ bruges pÃ¥ offentlige portaler.
     *
     * @return self
     */
    public function setPublicAllowed($public_allowed)
    {
        if (is_null($public_allowed)) {
            array_push($this->openAPINullablesSetToNull, 'public_allowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('public_allowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['public_allowed'] = $public_allowed;

        return $this;
    }

    /**
     * Gets subrogation
     *
     * @return mixed|null
     */
    public function getSubrogation()
    {
        return $this->container['subrogation'];
    }

    /**
     * Sets subrogation
     *
     * @param mixed|null $subrogation IndtrÃ¦delsesret, benyttes kun ifm. dokumenter af typen 'VedtÃ¦gter'
     *
     * @return self
     */
    public function setSubrogation($subrogation)
    {
        if (is_null($subrogation)) {
            array_push($this->openAPINullablesSetToNull, 'subrogation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subrogation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subrogation'] = $subrogation;

        return $this;
    }

    /**
     * Gets loan_limitation
     *
     * @return mixed|null
     */
    public function getLoanLimitation()
    {
        return $this->container['loan_limitation'];
    }

    /**
     * Sets loan_limitation
     *
     * @param mixed|null $loan_limitation LÃ¥nebegrÃ¦nsning, benyttes kun ifm. dokumenter af typen 'VedtÃ¦gter'
     *
     * @return self
     */
    public function setLoanLimitation($loan_limitation)
    {
        if (is_null($loan_limitation)) {
            array_push($this->openAPINullablesSetToNull, 'loan_limitation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loan_limitation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loan_limitation'] = $loan_limitation;

        return $this;
    }

    /**
     * Gets is_association_creation
     *
     * @return mixed|null
     */
    public function getIsAssociationCreation()
    {
        return $this->container['is_association_creation'];
    }

    /**
     * Sets is_association_creation
     *
     * @param mixed|null $is_association_creation Hvis dette dokument er et regnskab, angiver dette felt om foreningen i dette regnskab er under stiftelse. Kan antage sand, fald eller null. For dokumenter der ikke er regnskaber, vil vÃ¦rdien vÃ¦re null, ligeseom den vil vÃ¦re det pÃ¥ Ã¦ldre regnskaber.
     *
     * @return self
     */
    public function setIsAssociationCreation($is_association_creation)
    {
        if (is_null($is_association_creation)) {
            array_push($this->openAPINullablesSetToNull, 'is_association_creation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_association_creation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_association_creation'] = $is_association_creation;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return mixed|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param mixed|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            array_push($this->openAPINullablesSetToNull, 'notes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets description
     *
     * @return mixed|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param mixed|null $description Udvidet beskrivelse sÃ¥fremt dokumenttypen er 'Andet'
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets important_date
     *
     * @return mixed|null
     */
    public function getImportantDate()
    {
        return $this->container['important_date'];
    }

    /**
     * Sets important_date
     *
     * @param mixed|null $important_date Feltet angiver en vigtig dato ifm. dokumenter af typen 'Andet'
     *
     * @return self
     */
    public function setImportantDate($important_date)
    {
        if (is_null($important_date)) {
            array_push($this->openAPINullablesSetToNull, 'important_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('important_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['important_date'] = $important_date;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return mixed
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param mixed $deleted If this is set, then the document is deleted and can no logner be retrieved, and should also be deleted in the comsuming end of the webservice.
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            array_push($this->openAPINullablesSetToNull, 'deleted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


