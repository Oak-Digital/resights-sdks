<?php
/**
 * TransactionCreateModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionCreateModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionCreateModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionCreateModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ejf_id' => 'mixed',
        'prospectus_id' => 'mixed',
        'title' => 'mixed',
        'trade_date' => 'mixed',
        'price' => 'mixed',
        'price_lower' => 'mixed',
        'price_upper' => 'mixed',
        'price_quality' => '\OpenAPI\Client\Model\TransactionQualityEnum',
        'price_source' => '\OpenAPI\Client\Model\TransactionPriceSourceEnum',
        'cap_rate' => 'mixed',
        'cap_rate_lower' => 'mixed',
        'cap_rate_upper' => 'mixed',
        'cap_rate_quality' => '\OpenAPI\Client\Model\TransactionQualityEnum',
        'cap_rate_source' => '\OpenAPI\Client\Model\TransactionCapRateSourceEnum',
        'size_m2' => 'mixed',
        'size_m2_lower' => 'mixed',
        'size_m2_upper' => 'mixed',
        'size_m2_quality' => '\OpenAPI\Client\Model\TransactionQualityEnum',
        'comment_public' => 'mixed',
        'comment_private' => 'mixed',
        'asset_stages' => 'mixed',
        'asset_types' => 'mixed',
        'advisors' => 'mixed',
        'bfe_numbers' => 'mixed',
        'sources' => 'mixed',
        'buyers' => 'mixed',
        'sellers' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ejf_id' => 'uuid',
        'prospectus_id' => 'uuid',
        'title' => null,
        'trade_date' => 'date',
        'price' => null,
        'price_lower' => null,
        'price_upper' => null,
        'price_quality' => null,
        'price_source' => null,
        'cap_rate' => null,
        'cap_rate_lower' => null,
        'cap_rate_upper' => null,
        'cap_rate_quality' => null,
        'cap_rate_source' => null,
        'size_m2' => null,
        'size_m2_lower' => null,
        'size_m2_upper' => null,
        'size_m2_quality' => null,
        'comment_public' => null,
        'comment_private' => null,
        'asset_stages' => null,
        'asset_types' => null,
        'advisors' => null,
        'bfe_numbers' => null,
        'sources' => null,
        'buyers' => null,
        'sellers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ejf_id' => true,
		'prospectus_id' => true,
		'title' => true,
		'trade_date' => true,
		'price' => true,
		'price_lower' => true,
		'price_upper' => true,
		'price_quality' => false,
		'price_source' => false,
		'cap_rate' => true,
		'cap_rate_lower' => true,
		'cap_rate_upper' => true,
		'cap_rate_quality' => false,
		'cap_rate_source' => false,
		'size_m2' => true,
		'size_m2_lower' => true,
		'size_m2_upper' => true,
		'size_m2_quality' => false,
		'comment_public' => true,
		'comment_private' => true,
		'asset_stages' => true,
		'asset_types' => true,
		'advisors' => true,
		'bfe_numbers' => true,
		'sources' => true,
		'buyers' => true,
		'sellers' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ejf_id' => 'ejf_id',
        'prospectus_id' => 'prospectus_id',
        'title' => 'title',
        'trade_date' => 'trade_date',
        'price' => 'price',
        'price_lower' => 'price_lower',
        'price_upper' => 'price_upper',
        'price_quality' => 'price_quality',
        'price_source' => 'price_source',
        'cap_rate' => 'cap_rate',
        'cap_rate_lower' => 'cap_rate_lower',
        'cap_rate_upper' => 'cap_rate_upper',
        'cap_rate_quality' => 'cap_rate_quality',
        'cap_rate_source' => 'cap_rate_source',
        'size_m2' => 'size_m2',
        'size_m2_lower' => 'size_m2_lower',
        'size_m2_upper' => 'size_m2_upper',
        'size_m2_quality' => 'size_m2_quality',
        'comment_public' => 'comment_public',
        'comment_private' => 'comment_private',
        'asset_stages' => 'asset_stages',
        'asset_types' => 'asset_types',
        'advisors' => 'advisors',
        'bfe_numbers' => 'bfe_numbers',
        'sources' => 'sources',
        'buyers' => 'buyers',
        'sellers' => 'sellers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ejf_id' => 'setEjfId',
        'prospectus_id' => 'setProspectusId',
        'title' => 'setTitle',
        'trade_date' => 'setTradeDate',
        'price' => 'setPrice',
        'price_lower' => 'setPriceLower',
        'price_upper' => 'setPriceUpper',
        'price_quality' => 'setPriceQuality',
        'price_source' => 'setPriceSource',
        'cap_rate' => 'setCapRate',
        'cap_rate_lower' => 'setCapRateLower',
        'cap_rate_upper' => 'setCapRateUpper',
        'cap_rate_quality' => 'setCapRateQuality',
        'cap_rate_source' => 'setCapRateSource',
        'size_m2' => 'setSizeM2',
        'size_m2_lower' => 'setSizeM2Lower',
        'size_m2_upper' => 'setSizeM2Upper',
        'size_m2_quality' => 'setSizeM2Quality',
        'comment_public' => 'setCommentPublic',
        'comment_private' => 'setCommentPrivate',
        'asset_stages' => 'setAssetStages',
        'asset_types' => 'setAssetTypes',
        'advisors' => 'setAdvisors',
        'bfe_numbers' => 'setBfeNumbers',
        'sources' => 'setSources',
        'buyers' => 'setBuyers',
        'sellers' => 'setSellers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ejf_id' => 'getEjfId',
        'prospectus_id' => 'getProspectusId',
        'title' => 'getTitle',
        'trade_date' => 'getTradeDate',
        'price' => 'getPrice',
        'price_lower' => 'getPriceLower',
        'price_upper' => 'getPriceUpper',
        'price_quality' => 'getPriceQuality',
        'price_source' => 'getPriceSource',
        'cap_rate' => 'getCapRate',
        'cap_rate_lower' => 'getCapRateLower',
        'cap_rate_upper' => 'getCapRateUpper',
        'cap_rate_quality' => 'getCapRateQuality',
        'cap_rate_source' => 'getCapRateSource',
        'size_m2' => 'getSizeM2',
        'size_m2_lower' => 'getSizeM2Lower',
        'size_m2_upper' => 'getSizeM2Upper',
        'size_m2_quality' => 'getSizeM2Quality',
        'comment_public' => 'getCommentPublic',
        'comment_private' => 'getCommentPrivate',
        'asset_stages' => 'getAssetStages',
        'asset_types' => 'getAssetTypes',
        'advisors' => 'getAdvisors',
        'bfe_numbers' => 'getBfeNumbers',
        'sources' => 'getSources',
        'buyers' => 'getBuyers',
        'sellers' => 'getSellers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ejf_id', $data ?? [], null);
        $this->setIfExists('prospectus_id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('trade_date', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price_lower', $data ?? [], null);
        $this->setIfExists('price_upper', $data ?? [], null);
        $this->setIfExists('price_quality', $data ?? [], null);
        $this->setIfExists('price_source', $data ?? [], null);
        $this->setIfExists('cap_rate', $data ?? [], null);
        $this->setIfExists('cap_rate_lower', $data ?? [], null);
        $this->setIfExists('cap_rate_upper', $data ?? [], null);
        $this->setIfExists('cap_rate_quality', $data ?? [], null);
        $this->setIfExists('cap_rate_source', $data ?? [], null);
        $this->setIfExists('size_m2', $data ?? [], null);
        $this->setIfExists('size_m2_lower', $data ?? [], null);
        $this->setIfExists('size_m2_upper', $data ?? [], null);
        $this->setIfExists('size_m2_quality', $data ?? [], null);
        $this->setIfExists('comment_public', $data ?? [], null);
        $this->setIfExists('comment_private', $data ?? [], null);
        $this->setIfExists('asset_stages', $data ?? [], null);
        $this->setIfExists('asset_types', $data ?? [], null);
        $this->setIfExists('advisors', $data ?? [], null);
        $this->setIfExists('bfe_numbers', $data ?? [], null);
        $this->setIfExists('sources', $data ?? [], null);
        $this->setIfExists('buyers', $data ?? [], null);
        $this->setIfExists('sellers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['cap_rate']) && ($this->container['cap_rate'] > 0.25)) {
            $invalidProperties[] = "invalid value for 'cap_rate', must be smaller than or equal to 0.25.";
        }

        if (!is_null($this->container['cap_rate']) && ($this->container['cap_rate'] < -0.25)) {
            $invalidProperties[] = "invalid value for 'cap_rate', must be bigger than or equal to -0.25.";
        }

        if (!is_null($this->container['cap_rate_lower']) && ($this->container['cap_rate_lower'] > 0.25)) {
            $invalidProperties[] = "invalid value for 'cap_rate_lower', must be smaller than or equal to 0.25.";
        }

        if (!is_null($this->container['cap_rate_lower']) && ($this->container['cap_rate_lower'] < -0.25)) {
            $invalidProperties[] = "invalid value for 'cap_rate_lower', must be bigger than or equal to -0.25.";
        }

        if (!is_null($this->container['cap_rate_upper']) && ($this->container['cap_rate_upper'] > 0.25)) {
            $invalidProperties[] = "invalid value for 'cap_rate_upper', must be smaller than or equal to 0.25.";
        }

        if (!is_null($this->container['cap_rate_upper']) && ($this->container['cap_rate_upper'] < -0.25)) {
            $invalidProperties[] = "invalid value for 'cap_rate_upper', must be bigger than or equal to -0.25.";
        }

        if (!is_null($this->container['asset_stages']) && (count($this->container['asset_stages']) < 1)) {
            $invalidProperties[] = "invalid value for 'asset_stages', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['asset_types']) && (count($this->container['asset_types']) < 1)) {
            $invalidProperties[] = "invalid value for 'asset_types', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['bfe_numbers']) && (count($this->container['bfe_numbers']) < 1)) {
            $invalidProperties[] = "invalid value for 'bfe_numbers', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['buyers']) && (count($this->container['buyers']) < 1)) {
            $invalidProperties[] = "invalid value for 'buyers', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['sellers']) && (count($this->container['sellers']) < 1)) {
            $invalidProperties[] = "invalid value for 'sellers', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ejf_id
     *
     * @return mixed|null
     */
    public function getEjfId()
    {
        return $this->container['ejf_id'];
    }

    /**
     * Sets ejf_id
     *
     * @param mixed|null $ejf_id ejf_id
     *
     * @return self
     */
    public function setEjfId($ejf_id)
    {
        if (is_null($ejf_id)) {
            array_push($this->openAPINullablesSetToNull, 'ejf_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ejf_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ejf_id'] = $ejf_id;

        return $this;
    }

    /**
     * Gets prospectus_id
     *
     * @return mixed|null
     */
    public function getProspectusId()
    {
        return $this->container['prospectus_id'];
    }

    /**
     * Sets prospectus_id
     *
     * @param mixed|null $prospectus_id prospectus_id
     *
     * @return self
     */
    public function setProspectusId($prospectus_id)
    {
        if (is_null($prospectus_id)) {
            array_push($this->openAPINullablesSetToNull, 'prospectus_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prospectus_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prospectus_id'] = $prospectus_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return mixed|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param mixed|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets trade_date
     *
     * @return mixed|null
     */
    public function getTradeDate()
    {
        return $this->container['trade_date'];
    }

    /**
     * Sets trade_date
     *
     * @param mixed|null $trade_date trade_date
     *
     * @return self
     */
    public function setTradeDate($trade_date)
    {
        if (is_null($trade_date)) {
            array_push($this->openAPINullablesSetToNull, 'trade_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trade_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trade_date'] = $trade_date;

        return $this;
    }

    /**
     * Gets price
     *
     * @return mixed|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param mixed|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            array_push($this->openAPINullablesSetToNull, 'price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_lower
     *
     * @return mixed|null
     */
    public function getPriceLower()
    {
        return $this->container['price_lower'];
    }

    /**
     * Sets price_lower
     *
     * @param mixed|null $price_lower price_lower
     *
     * @return self
     */
    public function setPriceLower($price_lower)
    {
        if (is_null($price_lower)) {
            array_push($this->openAPINullablesSetToNull, 'price_lower');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_lower', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_lower'] = $price_lower;

        return $this;
    }

    /**
     * Gets price_upper
     *
     * @return mixed|null
     */
    public function getPriceUpper()
    {
        return $this->container['price_upper'];
    }

    /**
     * Sets price_upper
     *
     * @param mixed|null $price_upper price_upper
     *
     * @return self
     */
    public function setPriceUpper($price_upper)
    {
        if (is_null($price_upper)) {
            array_push($this->openAPINullablesSetToNull, 'price_upper');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_upper', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_upper'] = $price_upper;

        return $this;
    }

    /**
     * Gets price_quality
     *
     * @return \OpenAPI\Client\Model\TransactionQualityEnum|null
     */
    public function getPriceQuality()
    {
        return $this->container['price_quality'];
    }

    /**
     * Sets price_quality
     *
     * @param \OpenAPI\Client\Model\TransactionQualityEnum|null $price_quality price_quality
     *
     * @return self
     */
    public function setPriceQuality($price_quality)
    {
        if (is_null($price_quality)) {
            throw new \InvalidArgumentException('non-nullable price_quality cannot be null');
        }
        $this->container['price_quality'] = $price_quality;

        return $this;
    }

    /**
     * Gets price_source
     *
     * @return \OpenAPI\Client\Model\TransactionPriceSourceEnum|null
     */
    public function getPriceSource()
    {
        return $this->container['price_source'];
    }

    /**
     * Sets price_source
     *
     * @param \OpenAPI\Client\Model\TransactionPriceSourceEnum|null $price_source price_source
     *
     * @return self
     */
    public function setPriceSource($price_source)
    {
        if (is_null($price_source)) {
            throw new \InvalidArgumentException('non-nullable price_source cannot be null');
        }
        $this->container['price_source'] = $price_source;

        return $this;
    }

    /**
     * Gets cap_rate
     *
     * @return mixed|null
     */
    public function getCapRate()
    {
        return $this->container['cap_rate'];
    }

    /**
     * Sets cap_rate
     *
     * @param mixed|null $cap_rate cap_rate
     *
     * @return self
     */
    public function setCapRate($cap_rate)
    {
        if (is_null($cap_rate)) {
            array_push($this->openAPINullablesSetToNull, 'cap_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cap_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($cap_rate) && ($cap_rate > 0.25)) {
            throw new \InvalidArgumentException('invalid value for $cap_rate when calling TransactionCreateModel., must be smaller than or equal to 0.25.');
        }
        if (!is_null($cap_rate) && ($cap_rate < -0.25)) {
            throw new \InvalidArgumentException('invalid value for $cap_rate when calling TransactionCreateModel., must be bigger than or equal to -0.25.');
        }

        $this->container['cap_rate'] = $cap_rate;

        return $this;
    }

    /**
     * Gets cap_rate_lower
     *
     * @return mixed|null
     */
    public function getCapRateLower()
    {
        return $this->container['cap_rate_lower'];
    }

    /**
     * Sets cap_rate_lower
     *
     * @param mixed|null $cap_rate_lower cap_rate_lower
     *
     * @return self
     */
    public function setCapRateLower($cap_rate_lower)
    {
        if (is_null($cap_rate_lower)) {
            array_push($this->openAPINullablesSetToNull, 'cap_rate_lower');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cap_rate_lower', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($cap_rate_lower) && ($cap_rate_lower > 0.25)) {
            throw new \InvalidArgumentException('invalid value for $cap_rate_lower when calling TransactionCreateModel., must be smaller than or equal to 0.25.');
        }
        if (!is_null($cap_rate_lower) && ($cap_rate_lower < -0.25)) {
            throw new \InvalidArgumentException('invalid value for $cap_rate_lower when calling TransactionCreateModel., must be bigger than or equal to -0.25.');
        }

        $this->container['cap_rate_lower'] = $cap_rate_lower;

        return $this;
    }

    /**
     * Gets cap_rate_upper
     *
     * @return mixed|null
     */
    public function getCapRateUpper()
    {
        return $this->container['cap_rate_upper'];
    }

    /**
     * Sets cap_rate_upper
     *
     * @param mixed|null $cap_rate_upper cap_rate_upper
     *
     * @return self
     */
    public function setCapRateUpper($cap_rate_upper)
    {
        if (is_null($cap_rate_upper)) {
            array_push($this->openAPINullablesSetToNull, 'cap_rate_upper');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cap_rate_upper', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($cap_rate_upper) && ($cap_rate_upper > 0.25)) {
            throw new \InvalidArgumentException('invalid value for $cap_rate_upper when calling TransactionCreateModel., must be smaller than or equal to 0.25.');
        }
        if (!is_null($cap_rate_upper) && ($cap_rate_upper < -0.25)) {
            throw new \InvalidArgumentException('invalid value for $cap_rate_upper when calling TransactionCreateModel., must be bigger than or equal to -0.25.');
        }

        $this->container['cap_rate_upper'] = $cap_rate_upper;

        return $this;
    }

    /**
     * Gets cap_rate_quality
     *
     * @return \OpenAPI\Client\Model\TransactionQualityEnum|null
     */
    public function getCapRateQuality()
    {
        return $this->container['cap_rate_quality'];
    }

    /**
     * Sets cap_rate_quality
     *
     * @param \OpenAPI\Client\Model\TransactionQualityEnum|null $cap_rate_quality cap_rate_quality
     *
     * @return self
     */
    public function setCapRateQuality($cap_rate_quality)
    {
        if (is_null($cap_rate_quality)) {
            throw new \InvalidArgumentException('non-nullable cap_rate_quality cannot be null');
        }
        $this->container['cap_rate_quality'] = $cap_rate_quality;

        return $this;
    }

    /**
     * Gets cap_rate_source
     *
     * @return \OpenAPI\Client\Model\TransactionCapRateSourceEnum|null
     */
    public function getCapRateSource()
    {
        return $this->container['cap_rate_source'];
    }

    /**
     * Sets cap_rate_source
     *
     * @param \OpenAPI\Client\Model\TransactionCapRateSourceEnum|null $cap_rate_source cap_rate_source
     *
     * @return self
     */
    public function setCapRateSource($cap_rate_source)
    {
        if (is_null($cap_rate_source)) {
            throw new \InvalidArgumentException('non-nullable cap_rate_source cannot be null');
        }
        $this->container['cap_rate_source'] = $cap_rate_source;

        return $this;
    }

    /**
     * Gets size_m2
     *
     * @return mixed|null
     */
    public function getSizeM2()
    {
        return $this->container['size_m2'];
    }

    /**
     * Sets size_m2
     *
     * @param mixed|null $size_m2 size_m2
     *
     * @return self
     */
    public function setSizeM2($size_m2)
    {
        if (is_null($size_m2)) {
            array_push($this->openAPINullablesSetToNull, 'size_m2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('size_m2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['size_m2'] = $size_m2;

        return $this;
    }

    /**
     * Gets size_m2_lower
     *
     * @return mixed|null
     */
    public function getSizeM2Lower()
    {
        return $this->container['size_m2_lower'];
    }

    /**
     * Sets size_m2_lower
     *
     * @param mixed|null $size_m2_lower size_m2_lower
     *
     * @return self
     */
    public function setSizeM2Lower($size_m2_lower)
    {
        if (is_null($size_m2_lower)) {
            array_push($this->openAPINullablesSetToNull, 'size_m2_lower');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('size_m2_lower', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['size_m2_lower'] = $size_m2_lower;

        return $this;
    }

    /**
     * Gets size_m2_upper
     *
     * @return mixed|null
     */
    public function getSizeM2Upper()
    {
        return $this->container['size_m2_upper'];
    }

    /**
     * Sets size_m2_upper
     *
     * @param mixed|null $size_m2_upper size_m2_upper
     *
     * @return self
     */
    public function setSizeM2Upper($size_m2_upper)
    {
        if (is_null($size_m2_upper)) {
            array_push($this->openAPINullablesSetToNull, 'size_m2_upper');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('size_m2_upper', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['size_m2_upper'] = $size_m2_upper;

        return $this;
    }

    /**
     * Gets size_m2_quality
     *
     * @return \OpenAPI\Client\Model\TransactionQualityEnum|null
     */
    public function getSizeM2Quality()
    {
        return $this->container['size_m2_quality'];
    }

    /**
     * Sets size_m2_quality
     *
     * @param \OpenAPI\Client\Model\TransactionQualityEnum|null $size_m2_quality size_m2_quality
     *
     * @return self
     */
    public function setSizeM2Quality($size_m2_quality)
    {
        if (is_null($size_m2_quality)) {
            throw new \InvalidArgumentException('non-nullable size_m2_quality cannot be null');
        }
        $this->container['size_m2_quality'] = $size_m2_quality;

        return $this;
    }

    /**
     * Gets comment_public
     *
     * @return mixed|null
     */
    public function getCommentPublic()
    {
        return $this->container['comment_public'];
    }

    /**
     * Sets comment_public
     *
     * @param mixed|null $comment_public comment_public
     *
     * @return self
     */
    public function setCommentPublic($comment_public)
    {
        if (is_null($comment_public)) {
            array_push($this->openAPINullablesSetToNull, 'comment_public');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment_public', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment_public'] = $comment_public;

        return $this;
    }

    /**
     * Gets comment_private
     *
     * @return mixed|null
     */
    public function getCommentPrivate()
    {
        return $this->container['comment_private'];
    }

    /**
     * Sets comment_private
     *
     * @param mixed|null $comment_private comment_private
     *
     * @return self
     */
    public function setCommentPrivate($comment_private)
    {
        if (is_null($comment_private)) {
            array_push($this->openAPINullablesSetToNull, 'comment_private');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment_private', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment_private'] = $comment_private;

        return $this;
    }

    /**
     * Gets asset_stages
     *
     * @return mixed|null
     */
    public function getAssetStages()
    {
        return $this->container['asset_stages'];
    }

    /**
     * Sets asset_stages
     *
     * @param mixed|null $asset_stages asset_stages
     *
     * @return self
     */
    public function setAssetStages($asset_stages)
    {
        if (is_null($asset_stages)) {
            array_push($this->openAPINullablesSetToNull, 'asset_stages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_stages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        if (!is_null($asset_stages) && (count($asset_stages) < 1)) {
            throw new \InvalidArgumentException('invalid length for $asset_stages when calling TransactionCreateModel., number of items must be greater than or equal to 1.');
        }
        $this->container['asset_stages'] = $asset_stages;

        return $this;
    }

    /**
     * Gets asset_types
     *
     * @return mixed|null
     */
    public function getAssetTypes()
    {
        return $this->container['asset_types'];
    }

    /**
     * Sets asset_types
     *
     * @param mixed|null $asset_types asset_types
     *
     * @return self
     */
    public function setAssetTypes($asset_types)
    {
        if (is_null($asset_types)) {
            array_push($this->openAPINullablesSetToNull, 'asset_types');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_types', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        if (!is_null($asset_types) && (count($asset_types) < 1)) {
            throw new \InvalidArgumentException('invalid length for $asset_types when calling TransactionCreateModel., number of items must be greater than or equal to 1.');
        }
        $this->container['asset_types'] = $asset_types;

        return $this;
    }

    /**
     * Gets advisors
     *
     * @return mixed|null
     */
    public function getAdvisors()
    {
        return $this->container['advisors'];
    }

    /**
     * Sets advisors
     *
     * @param mixed|null $advisors advisors
     *
     * @return self
     */
    public function setAdvisors($advisors)
    {
        if (is_null($advisors)) {
            array_push($this->openAPINullablesSetToNull, 'advisors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('advisors', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['advisors'] = $advisors;

        return $this;
    }

    /**
     * Gets bfe_numbers
     *
     * @return mixed|null
     */
    public function getBfeNumbers()
    {
        return $this->container['bfe_numbers'];
    }

    /**
     * Sets bfe_numbers
     *
     * @param mixed|null $bfe_numbers bfe_numbers
     *
     * @return self
     */
    public function setBfeNumbers($bfe_numbers)
    {
        if (is_null($bfe_numbers)) {
            array_push($this->openAPINullablesSetToNull, 'bfe_numbers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bfe_numbers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        if (!is_null($bfe_numbers) && (count($bfe_numbers) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bfe_numbers when calling TransactionCreateModel., number of items must be greater than or equal to 1.');
        }
        $this->container['bfe_numbers'] = $bfe_numbers;

        return $this;
    }

    /**
     * Gets sources
     *
     * @return mixed|null
     */
    public function getSources()
    {
        return $this->container['sources'];
    }

    /**
     * Sets sources
     *
     * @param mixed|null $sources sources
     *
     * @return self
     */
    public function setSources($sources)
    {
        if (is_null($sources)) {
            array_push($this->openAPINullablesSetToNull, 'sources');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sources', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sources'] = $sources;

        return $this;
    }

    /**
     * Gets buyers
     *
     * @return mixed|null
     */
    public function getBuyers()
    {
        return $this->container['buyers'];
    }

    /**
     * Sets buyers
     *
     * @param mixed|null $buyers buyers
     *
     * @return self
     */
    public function setBuyers($buyers)
    {
        if (is_null($buyers)) {
            array_push($this->openAPINullablesSetToNull, 'buyers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        if (!is_null($buyers) && (count($buyers) < 1)) {
            throw new \InvalidArgumentException('invalid length for $buyers when calling TransactionCreateModel., number of items must be greater than or equal to 1.');
        }
        $this->container['buyers'] = $buyers;

        return $this;
    }

    /**
     * Gets sellers
     *
     * @return mixed|null
     */
    public function getSellers()
    {
        return $this->container['sellers'];
    }

    /**
     * Sets sellers
     *
     * @param mixed|null $sellers sellers
     *
     * @return self
     */
    public function setSellers($sellers)
    {
        if (is_null($sellers)) {
            array_push($this->openAPINullablesSetToNull, 'sellers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sellers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        if (!is_null($sellers) && (count($sellers) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sellers when calling TransactionCreateModel., number of items must be greater than or equal to 1.');
        }
        $this->container['sellers'] = $sellers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


