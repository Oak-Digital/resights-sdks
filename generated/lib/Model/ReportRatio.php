<?php
/**
 * ReportRatio
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ReportRatio Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReportRatio implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReportRatio';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gross_margin_ratio' => 'mixed',
        'equity_ratio' => 'mixed',
        'profit_ratio' => 'mixed',
        'roe_ratio' => 'mixed',
        'roi_ratio' => 'mixed',
        'gearing' => 'mixed',
        'roce_ratio' => 'mixed',
        'working_capital_ratio' => 'mixed',
        'working_capital' => 'mixed',
        'invested_capital' => 'mixed',
        'revenue_per_employee' => 'mixed',
        'gross_profit_per_employee' => 'mixed',
        'ebit_per_employee' => 'mixed',
        'profit_loss_per_employee' => 'mixed',
        'employee_expenses_per_employee' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gross_margin_ratio' => null,
        'equity_ratio' => null,
        'profit_ratio' => null,
        'roe_ratio' => null,
        'roi_ratio' => null,
        'gearing' => null,
        'roce_ratio' => null,
        'working_capital_ratio' => null,
        'working_capital' => null,
        'invested_capital' => null,
        'revenue_per_employee' => null,
        'gross_profit_per_employee' => null,
        'ebit_per_employee' => null,
        'profit_loss_per_employee' => null,
        'employee_expenses_per_employee' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'gross_margin_ratio' => true,
		'equity_ratio' => true,
		'profit_ratio' => true,
		'roe_ratio' => true,
		'roi_ratio' => true,
		'gearing' => true,
		'roce_ratio' => true,
		'working_capital_ratio' => true,
		'working_capital' => true,
		'invested_capital' => true,
		'revenue_per_employee' => true,
		'gross_profit_per_employee' => true,
		'ebit_per_employee' => true,
		'profit_loss_per_employee' => true,
		'employee_expenses_per_employee' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gross_margin_ratio' => 'gross_margin_ratio',
        'equity_ratio' => 'equity_ratio',
        'profit_ratio' => 'profit_ratio',
        'roe_ratio' => 'roe_ratio',
        'roi_ratio' => 'roi_ratio',
        'gearing' => 'gearing',
        'roce_ratio' => 'roce_ratio',
        'working_capital_ratio' => 'working_capital_ratio',
        'working_capital' => 'working_capital',
        'invested_capital' => 'invested_capital',
        'revenue_per_employee' => 'revenue_per_employee',
        'gross_profit_per_employee' => 'gross_profit_per_employee',
        'ebit_per_employee' => 'ebit_per_employee',
        'profit_loss_per_employee' => 'profit_loss_per_employee',
        'employee_expenses_per_employee' => 'employee_expenses_per_employee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gross_margin_ratio' => 'setGrossMarginRatio',
        'equity_ratio' => 'setEquityRatio',
        'profit_ratio' => 'setProfitRatio',
        'roe_ratio' => 'setRoeRatio',
        'roi_ratio' => 'setRoiRatio',
        'gearing' => 'setGearing',
        'roce_ratio' => 'setRoceRatio',
        'working_capital_ratio' => 'setWorkingCapitalRatio',
        'working_capital' => 'setWorkingCapital',
        'invested_capital' => 'setInvestedCapital',
        'revenue_per_employee' => 'setRevenuePerEmployee',
        'gross_profit_per_employee' => 'setGrossProfitPerEmployee',
        'ebit_per_employee' => 'setEbitPerEmployee',
        'profit_loss_per_employee' => 'setProfitLossPerEmployee',
        'employee_expenses_per_employee' => 'setEmployeeExpensesPerEmployee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gross_margin_ratio' => 'getGrossMarginRatio',
        'equity_ratio' => 'getEquityRatio',
        'profit_ratio' => 'getProfitRatio',
        'roe_ratio' => 'getRoeRatio',
        'roi_ratio' => 'getRoiRatio',
        'gearing' => 'getGearing',
        'roce_ratio' => 'getRoceRatio',
        'working_capital_ratio' => 'getWorkingCapitalRatio',
        'working_capital' => 'getWorkingCapital',
        'invested_capital' => 'getInvestedCapital',
        'revenue_per_employee' => 'getRevenuePerEmployee',
        'gross_profit_per_employee' => 'getGrossProfitPerEmployee',
        'ebit_per_employee' => 'getEbitPerEmployee',
        'profit_loss_per_employee' => 'getProfitLossPerEmployee',
        'employee_expenses_per_employee' => 'getEmployeeExpensesPerEmployee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('gross_margin_ratio', $data ?? [], null);
        $this->setIfExists('equity_ratio', $data ?? [], null);
        $this->setIfExists('profit_ratio', $data ?? [], null);
        $this->setIfExists('roe_ratio', $data ?? [], null);
        $this->setIfExists('roi_ratio', $data ?? [], null);
        $this->setIfExists('gearing', $data ?? [], null);
        $this->setIfExists('roce_ratio', $data ?? [], null);
        $this->setIfExists('working_capital_ratio', $data ?? [], null);
        $this->setIfExists('working_capital', $data ?? [], null);
        $this->setIfExists('invested_capital', $data ?? [], null);
        $this->setIfExists('revenue_per_employee', $data ?? [], null);
        $this->setIfExists('gross_profit_per_employee', $data ?? [], null);
        $this->setIfExists('ebit_per_employee', $data ?? [], null);
        $this->setIfExists('profit_loss_per_employee', $data ?? [], null);
        $this->setIfExists('employee_expenses_per_employee', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gross_margin_ratio
     *
     * @return mixed|null
     */
    public function getGrossMarginRatio()
    {
        return $this->container['gross_margin_ratio'];
    }

    /**
     * Sets gross_margin_ratio
     *
     * @param mixed|null $gross_margin_ratio Bruttoavance
     *
     * @return self
     */
    public function setGrossMarginRatio($gross_margin_ratio)
    {
        if (is_null($gross_margin_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'gross_margin_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gross_margin_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gross_margin_ratio'] = $gross_margin_ratio;

        return $this;
    }

    /**
     * Gets equity_ratio
     *
     * @return mixed|null
     */
    public function getEquityRatio()
    {
        return $this->container['equity_ratio'];
    }

    /**
     * Sets equity_ratio
     *
     * @param mixed|null $equity_ratio Soliditetsgrad
     *
     * @return self
     */
    public function setEquityRatio($equity_ratio)
    {
        if (is_null($equity_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'equity_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('equity_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['equity_ratio'] = $equity_ratio;

        return $this;
    }

    /**
     * Gets profit_ratio
     *
     * @return mixed|null
     */
    public function getProfitRatio()
    {
        return $this->container['profit_ratio'];
    }

    /**
     * Sets profit_ratio
     *
     * @param mixed|null $profit_ratio Overskudsgrad
     *
     * @return self
     */
    public function setProfitRatio($profit_ratio)
    {
        if (is_null($profit_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'profit_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profit_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profit_ratio'] = $profit_ratio;

        return $this;
    }

    /**
     * Gets roe_ratio
     *
     * @return mixed|null
     */
    public function getRoeRatio()
    {
        return $this->container['roe_ratio'];
    }

    /**
     * Sets roe_ratio
     *
     * @param mixed|null $roe_ratio Egenkapitalens forrentning
     *
     * @return self
     */
    public function setRoeRatio($roe_ratio)
    {
        if (is_null($roe_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'roe_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roe_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roe_ratio'] = $roe_ratio;

        return $this;
    }

    /**
     * Gets roi_ratio
     *
     * @return mixed|null
     */
    public function getRoiRatio()
    {
        return $this->container['roi_ratio'];
    }

    /**
     * Sets roi_ratio
     *
     * @param mixed|null $roi_ratio Afkastningsgrad
     *
     * @return self
     */
    public function setRoiRatio($roi_ratio)
    {
        if (is_null($roi_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'roi_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roi_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roi_ratio'] = $roi_ratio;

        return $this;
    }

    /**
     * Gets gearing
     *
     * @return mixed|null
     */
    public function getGearing()
    {
        return $this->container['gearing'];
    }

    /**
     * Sets gearing
     *
     * @param mixed|null $gearing Gearing
     *
     * @return self
     */
    public function setGearing($gearing)
    {
        if (is_null($gearing)) {
            array_push($this->openAPINullablesSetToNull, 'gearing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gearing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gearing'] = $gearing;

        return $this;
    }

    /**
     * Gets roce_ratio
     *
     * @return mixed|null
     */
    public function getRoceRatio()
    {
        return $this->container['roce_ratio'];
    }

    /**
     * Sets roce_ratio
     *
     * @param mixed|null $roce_ratio Afkast af investeret kapital (ROCE)
     *
     * @return self
     */
    public function setRoceRatio($roce_ratio)
    {
        if (is_null($roce_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'roce_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roce_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roce_ratio'] = $roce_ratio;

        return $this;
    }

    /**
     * Gets working_capital_ratio
     *
     * @return mixed|null
     */
    public function getWorkingCapitalRatio()
    {
        return $this->container['working_capital_ratio'];
    }

    /**
     * Sets working_capital_ratio
     *
     * @param mixed|null $working_capital_ratio Arbejdskapitalgrad
     *
     * @return self
     */
    public function setWorkingCapitalRatio($working_capital_ratio)
    {
        if (is_null($working_capital_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'working_capital_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('working_capital_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['working_capital_ratio'] = $working_capital_ratio;

        return $this;
    }

    /**
     * Gets working_capital
     *
     * @return mixed|null
     */
    public function getWorkingCapital()
    {
        return $this->container['working_capital'];
    }

    /**
     * Sets working_capital
     *
     * @param mixed|null $working_capital Arbejdskapital
     *
     * @return self
     */
    public function setWorkingCapital($working_capital)
    {
        if (is_null($working_capital)) {
            array_push($this->openAPINullablesSetToNull, 'working_capital');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('working_capital', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['working_capital'] = $working_capital;

        return $this;
    }

    /**
     * Gets invested_capital
     *
     * @return mixed|null
     */
    public function getInvestedCapital()
    {
        return $this->container['invested_capital'];
    }

    /**
     * Sets invested_capital
     *
     * @param mixed|null $invested_capital Investeret kapital
     *
     * @return self
     */
    public function setInvestedCapital($invested_capital)
    {
        if (is_null($invested_capital)) {
            array_push($this->openAPINullablesSetToNull, 'invested_capital');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invested_capital', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invested_capital'] = $invested_capital;

        return $this;
    }

    /**
     * Gets revenue_per_employee
     *
     * @return mixed|null
     */
    public function getRevenuePerEmployee()
    {
        return $this->container['revenue_per_employee'];
    }

    /**
     * Sets revenue_per_employee
     *
     * @param mixed|null $revenue_per_employee OmsÃ¦tning pr. medarbejder
     *
     * @return self
     */
    public function setRevenuePerEmployee($revenue_per_employee)
    {
        if (is_null($revenue_per_employee)) {
            array_push($this->openAPINullablesSetToNull, 'revenue_per_employee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('revenue_per_employee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['revenue_per_employee'] = $revenue_per_employee;

        return $this;
    }

    /**
     * Gets gross_profit_per_employee
     *
     * @return mixed|null
     */
    public function getGrossProfitPerEmployee()
    {
        return $this->container['gross_profit_per_employee'];
    }

    /**
     * Sets gross_profit_per_employee
     *
     * @param mixed|null $gross_profit_per_employee Bruttofortjeneste pr. medarbejder
     *
     * @return self
     */
    public function setGrossProfitPerEmployee($gross_profit_per_employee)
    {
        if (is_null($gross_profit_per_employee)) {
            array_push($this->openAPINullablesSetToNull, 'gross_profit_per_employee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gross_profit_per_employee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gross_profit_per_employee'] = $gross_profit_per_employee;

        return $this;
    }

    /**
     * Gets ebit_per_employee
     *
     * @return mixed|null
     */
    public function getEbitPerEmployee()
    {
        return $this->container['ebit_per_employee'];
    }

    /**
     * Sets ebit_per_employee
     *
     * @param mixed|null $ebit_per_employee PrimÃ¦rt resultat (EBIT) pr. medarbejder
     *
     * @return self
     */
    public function setEbitPerEmployee($ebit_per_employee)
    {
        if (is_null($ebit_per_employee)) {
            array_push($this->openAPINullablesSetToNull, 'ebit_per_employee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ebit_per_employee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ebit_per_employee'] = $ebit_per_employee;

        return $this;
    }

    /**
     * Gets profit_loss_per_employee
     *
     * @return mixed|null
     */
    public function getProfitLossPerEmployee()
    {
        return $this->container['profit_loss_per_employee'];
    }

    /**
     * Sets profit_loss_per_employee
     *
     * @param mixed|null $profit_loss_per_employee Ã…rets resultat pr. medarbejder
     *
     * @return self
     */
    public function setProfitLossPerEmployee($profit_loss_per_employee)
    {
        if (is_null($profit_loss_per_employee)) {
            array_push($this->openAPINullablesSetToNull, 'profit_loss_per_employee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profit_loss_per_employee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profit_loss_per_employee'] = $profit_loss_per_employee;

        return $this;
    }

    /**
     * Gets employee_expenses_per_employee
     *
     * @return mixed|null
     */
    public function getEmployeeExpensesPerEmployee()
    {
        return $this->container['employee_expenses_per_employee'];
    }

    /**
     * Sets employee_expenses_per_employee
     *
     * @param mixed|null $employee_expenses_per_employee Personaleomkostninger pr. medarbejder
     *
     * @return self
     */
    public function setEmployeeExpensesPerEmployee($employee_expenses_per_employee)
    {
        if (is_null($employee_expenses_per_employee)) {
            array_push($this->openAPINullablesSetToNull, 'employee_expenses_per_employee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_expenses_per_employee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_expenses_per_employee'] = $employee_expenses_per_employee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


