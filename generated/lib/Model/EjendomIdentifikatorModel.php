<?php
/**
 * EjendomIdentifikatorModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EjendomIdentifikatorModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EjendomIdentifikatorModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EjendomIdentifikatorModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bestemt_fast_ejendom_nummer' => 'mixed',
        'matrikel_samling' => 'mixed',
        'umatrikuleret_areal' => '\OpenAPI\Client\Model\UmatrikuleretArealModel',
        'type' => '\OpenAPI\Client\Model\EjendomTypeEnum',
        'ejerlejlighedsnummer' => 'mixed',
        'bygningsnummer' => 'mixed',
        'anpartsnummer' => 'mixed',
        'beliggenhed_tekst' => 'mixed',
        'faelles_ejendom_id' => 'mixed',
        'timesharenummer' => 'mixed',
        'ugenummer_samling' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bestemt_fast_ejendom_nummer' => null,
        'matrikel_samling' => null,
        'umatrikuleret_areal' => null,
        'type' => null,
        'ejerlejlighedsnummer' => null,
        'bygningsnummer' => null,
        'anpartsnummer' => null,
        'beliggenhed_tekst' => null,
        'faelles_ejendom_id' => null,
        'timesharenummer' => null,
        'ugenummer_samling' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bestemt_fast_ejendom_nummer' => true,
		'matrikel_samling' => true,
		'umatrikuleret_areal' => false,
		'type' => false,
		'ejerlejlighedsnummer' => true,
		'bygningsnummer' => true,
		'anpartsnummer' => true,
		'beliggenhed_tekst' => true,
		'faelles_ejendom_id' => true,
		'timesharenummer' => true,
		'ugenummer_samling' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bestemt_fast_ejendom_nummer' => 'BestemtFastEjendomNummer',
        'matrikel_samling' => 'MatrikelSamling',
        'umatrikuleret_areal' => 'UmatrikuleretAreal',
        'type' => 'Type',
        'ejerlejlighedsnummer' => 'Ejerlejlighedsnummer',
        'bygningsnummer' => 'Bygningsnummer',
        'anpartsnummer' => 'Anpartsnummer',
        'beliggenhed_tekst' => 'BeliggenhedTekst',
        'faelles_ejendom_id' => 'FaellesEjendomId',
        'timesharenummer' => 'Timesharenummer',
        'ugenummer_samling' => 'UgenummerSamling'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bestemt_fast_ejendom_nummer' => 'setBestemtFastEjendomNummer',
        'matrikel_samling' => 'setMatrikelSamling',
        'umatrikuleret_areal' => 'setUmatrikuleretAreal',
        'type' => 'setType',
        'ejerlejlighedsnummer' => 'setEjerlejlighedsnummer',
        'bygningsnummer' => 'setBygningsnummer',
        'anpartsnummer' => 'setAnpartsnummer',
        'beliggenhed_tekst' => 'setBeliggenhedTekst',
        'faelles_ejendom_id' => 'setFaellesEjendomId',
        'timesharenummer' => 'setTimesharenummer',
        'ugenummer_samling' => 'setUgenummerSamling'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bestemt_fast_ejendom_nummer' => 'getBestemtFastEjendomNummer',
        'matrikel_samling' => 'getMatrikelSamling',
        'umatrikuleret_areal' => 'getUmatrikuleretAreal',
        'type' => 'getType',
        'ejerlejlighedsnummer' => 'getEjerlejlighedsnummer',
        'bygningsnummer' => 'getBygningsnummer',
        'anpartsnummer' => 'getAnpartsnummer',
        'beliggenhed_tekst' => 'getBeliggenhedTekst',
        'faelles_ejendom_id' => 'getFaellesEjendomId',
        'timesharenummer' => 'getTimesharenummer',
        'ugenummer_samling' => 'getUgenummerSamling'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bestemt_fast_ejendom_nummer', $data ?? [], null);
        $this->setIfExists('matrikel_samling', $data ?? [], null);
        $this->setIfExists('umatrikuleret_areal', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('ejerlejlighedsnummer', $data ?? [], null);
        $this->setIfExists('bygningsnummer', $data ?? [], null);
        $this->setIfExists('anpartsnummer', $data ?? [], null);
        $this->setIfExists('beliggenhed_tekst', $data ?? [], null);
        $this->setIfExists('faelles_ejendom_id', $data ?? [], null);
        $this->setIfExists('timesharenummer', $data ?? [], null);
        $this->setIfExists('ugenummer_samling', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bestemt_fast_ejendom_nummer
     *
     * @return mixed|null
     */
    public function getBestemtFastEjendomNummer()
    {
        return $this->container['bestemt_fast_ejendom_nummer'];
    }

    /**
     * Sets bestemt_fast_ejendom_nummer
     *
     * @param mixed|null $bestemt_fast_ejendom_nummer Bestemt Fast Ejendom nummer er en unik identifikator for en ejendom
     *
     * @return self
     */
    public function setBestemtFastEjendomNummer($bestemt_fast_ejendom_nummer)
    {
        if (is_null($bestemt_fast_ejendom_nummer)) {
            array_push($this->openAPINullablesSetToNull, 'bestemt_fast_ejendom_nummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bestemt_fast_ejendom_nummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bestemt_fast_ejendom_nummer'] = $bestemt_fast_ejendom_nummer;

        return $this;
    }

    /**
     * Gets matrikel_samling
     *
     * @return mixed|null
     */
    public function getMatrikelSamling()
    {
        return $this->container['matrikel_samling'];
    }

    /**
     * Sets matrikel_samling
     *
     * @param mixed|null $matrikel_samling Angiver en matrikel.
     *
     * @return self
     */
    public function setMatrikelSamling($matrikel_samling)
    {
        if (is_null($matrikel_samling)) {
            array_push($this->openAPINullablesSetToNull, 'matrikel_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('matrikel_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['matrikel_samling'] = $matrikel_samling;

        return $this;
    }

    /**
     * Gets umatrikuleret_areal
     *
     * @return \OpenAPI\Client\Model\UmatrikuleretArealModel|null
     */
    public function getUmatrikuleretAreal()
    {
        return $this->container['umatrikuleret_areal'];
    }

    /**
     * Sets umatrikuleret_areal
     *
     * @param \OpenAPI\Client\Model\UmatrikuleretArealModel|null $umatrikuleret_areal umatrikuleret_areal
     *
     * @return self
     */
    public function setUmatrikuleretAreal($umatrikuleret_areal)
    {
        if (is_null($umatrikuleret_areal)) {
            throw new \InvalidArgumentException('non-nullable umatrikuleret_areal cannot be null');
        }
        $this->container['umatrikuleret_areal'] = $umatrikuleret_areal;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\EjendomTypeEnum|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\EjendomTypeEnum|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets ejerlejlighedsnummer
     *
     * @return mixed|null
     */
    public function getEjerlejlighedsnummer()
    {
        return $this->container['ejerlejlighedsnummer'];
    }

    /**
     * Sets ejerlejlighedsnummer
     *
     * @param mixed|null $ejerlejlighedsnummer Entydigt nummer der reprÃ¦senterer en ejerlejlighed. Nummeret fastlÃ¦gges af en landinspektÃ¸r og kan bestÃ¥ af bÃ¥de tal og bogstaver. Der gÃ¦lder fÃ¸lgende regler:
     *
     * @return self
     */
    public function setEjerlejlighedsnummer($ejerlejlighedsnummer)
    {
        if (is_null($ejerlejlighedsnummer)) {
            array_push($this->openAPINullablesSetToNull, 'ejerlejlighedsnummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ejerlejlighedsnummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ejerlejlighedsnummer'] = $ejerlejlighedsnummer;

        return $this;
    }

    /**
     * Gets bygningsnummer
     *
     * @return mixed|null
     */
    public function getBygningsnummer()
    {
        return $this->container['bygningsnummer'];
    }

    /**
     * Sets bygningsnummer
     *
     * @param mixed|null $bygningsnummer Entydigt nummer der reprÃ¦senterer en bygning/bygninger som er en del af en ejendom. Nummeret kan bestÃ¥ af bÃ¥de tal og bogstaver
     *
     * @return self
     */
    public function setBygningsnummer($bygningsnummer)
    {
        if (is_null($bygningsnummer)) {
            array_push($this->openAPINullablesSetToNull, 'bygningsnummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bygningsnummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bygningsnummer'] = $bygningsnummer;

        return $this;
    }

    /**
     * Gets anpartsnummer
     *
     * @return mixed|null
     */
    public function getAnpartsnummer()
    {
        return $this->container['anpartsnummer'];
    }

    /**
     * Sets anpartsnummer
     *
     * @param mixed|null $anpartsnummer Entydigt nummer der reprÃ¦senterer en ejendom af typen anpart. Nummeret kan bestÃ¥ af bÃ¥de tal og bogstaver. Antallet karakterer er 5.
     *
     * @return self
     */
    public function setAnpartsnummer($anpartsnummer)
    {
        if (is_null($anpartsnummer)) {
            array_push($this->openAPINullablesSetToNull, 'anpartsnummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('anpartsnummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['anpartsnummer'] = $anpartsnummer;

        return $this;
    }

    /**
     * Gets beliggenhed_tekst
     *
     * @return mixed|null
     */
    public function getBeliggenhedTekst()
    {
        return $this->container['beliggenhed_tekst'];
    }

    /**
     * Sets beliggenhed_tekst
     *
     * @param mixed|null $beliggenhed_tekst Beliggenhedstekst
     *
     * @return self
     */
    public function setBeliggenhedTekst($beliggenhed_tekst)
    {
        if (is_null($beliggenhed_tekst)) {
            array_push($this->openAPINullablesSetToNull, 'beliggenhed_tekst');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('beliggenhed_tekst', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['beliggenhed_tekst'] = $beliggenhed_tekst;

        return $this;
    }

    /**
     * Gets faelles_ejendom_id
     *
     * @return mixed|null
     */
    public function getFaellesEjendomId()
    {
        return $this->container['faelles_ejendom_id'];
    }

    /**
     * Sets faelles_ejendom_id
     *
     * @param mixed|null $faelles_ejendom_id OgsÃ¥ kaldet e-ref. UUID der identificere en ejendom pÃ¥ tvÃ¦rs af alle ejendomsregistre som fx tinglysning, kms, skat mv.
     *
     * @return self
     */
    public function setFaellesEjendomId($faelles_ejendom_id)
    {
        if (is_null($faelles_ejendom_id)) {
            array_push($this->openAPINullablesSetToNull, 'faelles_ejendom_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('faelles_ejendom_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['faelles_ejendom_id'] = $faelles_ejendom_id;

        return $this;
    }

    /**
     * Gets timesharenummer
     *
     * @return mixed|null
     */
    public function getTimesharenummer()
    {
        return $this->container['timesharenummer'];
    }

    /**
     * Sets timesharenummer
     *
     * @param mixed|null $timesharenummer Identificerer en lejlighed i en ejendom af ejendomstypen HovedejendomTimeshare.
     *
     * @return self
     */
    public function setTimesharenummer($timesharenummer)
    {
        if (is_null($timesharenummer)) {
            array_push($this->openAPINullablesSetToNull, 'timesharenummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timesharenummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timesharenummer'] = $timesharenummer;

        return $this;
    }

    /**
     * Gets ugenummer_samling
     *
     * @return mixed|null
     */
    public function getUgenummerSamling()
    {
        return $this->container['ugenummer_samling'];
    }

    /**
     * Sets ugenummer_samling
     *
     * @param mixed|null $ugenummer_samling Samling af ugenumre, som angives ved timeshare opdelt i uger.
     *
     * @return self
     */
    public function setUgenummerSamling($ugenummer_samling)
    {
        if (is_null($ugenummer_samling)) {
            array_push($this->openAPINullablesSetToNull, 'ugenummer_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ugenummer_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ugenummer_samling'] = $ugenummer_samling;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


