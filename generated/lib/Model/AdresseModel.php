<?php
/**
 * AdresseModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AdresseModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdresseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdresseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'kommunekode' => 'mixed',
        'vejkode' => 'mixed',
        'vejnavn' => 'mixed',
        'husnummer' => 'mixed',
        'etage' => 'mixed',
        'doer' => 'mixed',
        'postnummer' => 'mixed',
        'postnummernavn' => 'mixed',
        'supplerende_bynavn' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'kommunekode' => null,
        'vejkode' => null,
        'vejnavn' => null,
        'husnummer' => null,
        'etage' => null,
        'doer' => null,
        'postnummer' => null,
        'postnummernavn' => null,
        'supplerende_bynavn' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'kommunekode' => true,
		'vejkode' => true,
		'vejnavn' => true,
		'husnummer' => true,
		'etage' => true,
		'doer' => true,
		'postnummer' => true,
		'postnummernavn' => true,
		'supplerende_bynavn' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kommunekode' => 'Kommunekode',
        'vejkode' => 'Vejkode',
        'vejnavn' => 'Vejnavn',
        'husnummer' => 'Husnummer',
        'etage' => 'Etage',
        'doer' => 'Doer',
        'postnummer' => 'Postnummer',
        'postnummernavn' => 'Postnummernavn',
        'supplerende_bynavn' => 'SupplerendeBynavn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kommunekode' => 'setKommunekode',
        'vejkode' => 'setVejkode',
        'vejnavn' => 'setVejnavn',
        'husnummer' => 'setHusnummer',
        'etage' => 'setEtage',
        'doer' => 'setDoer',
        'postnummer' => 'setPostnummer',
        'postnummernavn' => 'setPostnummernavn',
        'supplerende_bynavn' => 'setSupplerendeBynavn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kommunekode' => 'getKommunekode',
        'vejkode' => 'getVejkode',
        'vejnavn' => 'getVejnavn',
        'husnummer' => 'getHusnummer',
        'etage' => 'getEtage',
        'doer' => 'getDoer',
        'postnummer' => 'getPostnummer',
        'postnummernavn' => 'getPostnummernavn',
        'supplerende_bynavn' => 'getSupplerendeBynavn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('kommunekode', $data ?? [], null);
        $this->setIfExists('vejkode', $data ?? [], null);
        $this->setIfExists('vejnavn', $data ?? [], null);
        $this->setIfExists('husnummer', $data ?? [], null);
        $this->setIfExists('etage', $data ?? [], null);
        $this->setIfExists('doer', $data ?? [], null);
        $this->setIfExists('postnummer', $data ?? [], null);
        $this->setIfExists('postnummernavn', $data ?? [], null);
        $this->setIfExists('supplerende_bynavn', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['kommunekode'] === null) {
            $invalidProperties[] = "'kommunekode' can't be null";
        }
        if ($this->container['vejkode'] === null) {
            $invalidProperties[] = "'vejkode' can't be null";
        }
        if ($this->container['vejnavn'] === null) {
            $invalidProperties[] = "'vejnavn' can't be null";
        }
        if ($this->container['husnummer'] === null) {
            $invalidProperties[] = "'husnummer' can't be null";
        }
        if ($this->container['postnummer'] === null) {
            $invalidProperties[] = "'postnummer' can't be null";
        }
        if ($this->container['postnummernavn'] === null) {
            $invalidProperties[] = "'postnummernavn' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kommunekode
     *
     * @return mixed
     */
    public function getKommunekode()
    {
        return $this->container['kommunekode'];
    }

    /**
     * Sets kommunekode
     *
     * @param mixed $kommunekode The code of a municipality. The plain text of a municipality is to be found by reference to the authority-data in the civilregistrationsystem. The code will always be unique.
     *
     * @return self
     */
    public function setKommunekode($kommunekode)
    {
        if (is_null($kommunekode)) {
            array_push($this->openAPINullablesSetToNull, 'kommunekode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('kommunekode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['kommunekode'] = $kommunekode;

        return $this;
    }

    /**
     * Gets vejkode
     *
     * @return mixed
     */
    public function getVejkode()
    {
        return $this->container['vejkode'];
    }

    /**
     * Sets vejkode
     *
     * @param mixed $vejkode Declares a named street, road, square, path or the like in code. Streetcode in combination with municipalitycode constitutes an unique code for a road in Denmark.
     *
     * @return self
     */
    public function setVejkode($vejkode)
    {
        if (is_null($vejkode)) {
            array_push($this->openAPINullablesSetToNull, 'vejkode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vejkode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vejkode'] = $vejkode;

        return $this;
    }

    /**
     * Gets vejnavn
     *
     * @return mixed
     */
    public function getVejnavn()
    {
        return $this->container['vejnavn'];
    }

    /**
     * Sets vejnavn
     *
     * @param mixed $vejnavn The approved name of a road, a street, a square, a path and the like. Further more street names can be connected to other particularly limited areas like garden associations or summer residence areas without road network, large commercial or institutional areas with a large number of buildings, smaller islands without road network, larger sporting facilities and the like.
     *
     * @return self
     */
    public function setVejnavn($vejnavn)
    {
        if (is_null($vejnavn)) {
            array_push($this->openAPINullablesSetToNull, 'vejnavn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vejnavn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vejnavn'] = $vejnavn;

        return $this;
    }

    /**
     * Gets husnummer
     *
     * @return mixed
     */
    public function getHusnummer()
    {
        return $this->container['husnummer'];
    }

    /**
     * Sets husnummer
     *
     * @param mixed $husnummer Numeric identification (da: house number ~ husnummer) including an optional letter, which identifies a certain access to a building, a plot/piece of land or a plant etc. based on the named road or street which gives access hereto. The identifier is determined in increasing numerical and letter order along the road, normally with even numbers on the right side and odd numbers on the left side of the road.
     *
     * @return self
     */
    public function setHusnummer($husnummer)
    {
        if (is_null($husnummer)) {
            array_push($this->openAPINullablesSetToNull, 'husnummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('husnummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['husnummer'] = $husnummer;

        return $this;
    }

    /**
     * Gets etage
     *
     * @return mixed|null
     */
    public function getEtage()
    {
        return $this->container['etage'];
    }

    /**
     * Sets etage
     *
     * @param mixed|null $etage Identification which describes the floor or level on which a specific entrance door, appartment or suite is placed, in the staircase refered to.
     *
     * @return self
     */
    public function setEtage($etage)
    {
        if (is_null($etage)) {
            array_push($this->openAPINullablesSetToNull, 'etage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('etage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['etage'] = $etage;

        return $this;
    }

    /**
     * Gets doer
     *
     * @return mixed|null
     */
    public function getDoer()
    {
        return $this->container['doer'];
    }

    /**
     * Sets doer
     *
     * @param mixed|null $doer Identification which describes the location of a specific entrance door on a floor or level (repos) in the staircase referred to.
     *
     * @return self
     */
    public function setDoer($doer)
    {
        if (is_null($doer)) {
            array_push($this->openAPINullablesSetToNull, 'doer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('doer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['doer'] = $doer;

        return $this;
    }

    /**
     * Gets postnummer
     *
     * @return mixed
     */
    public function getPostnummer()
    {
        return $this->container['postnummer'];
    }

    /**
     * Sets postnummer
     *
     * @param mixed $postnummer The postal departments nationwide postal code.
     *
     * @return self
     */
    public function setPostnummer($postnummer)
    {
        if (is_null($postnummer)) {
            array_push($this->openAPINullablesSetToNull, 'postnummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postnummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postnummer'] = $postnummer;

        return $this;
    }

    /**
     * Gets postnummernavn
     *
     * @return mixed
     */
    public function getPostnummernavn()
    {
        return $this->container['postnummernavn'];
    }

    /**
     * Sets postnummernavn
     *
     * @param mixed $postnummernavn Declares the name of a postal district in plain text.
     *
     * @return self
     */
    public function setPostnummernavn($postnummernavn)
    {
        if (is_null($postnummernavn)) {
            array_push($this->openAPINullablesSetToNull, 'postnummernavn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postnummernavn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postnummernavn'] = $postnummernavn;

        return $this;
    }

    /**
     * Gets supplerende_bynavn
     *
     * @return mixed|null
     */
    public function getSupplerendeBynavn()
    {
        return $this->container['supplerende_bynavn'];
    }

    /**
     * Sets supplerende_bynavn
     *
     * @param mixed|null $supplerende_bynavn Name of a village, city or subdivision of a city or district, which is determined as a part of the official address specification for a certain street or specific parts of a street, defined by intervals of street building identifiers
     *
     * @return self
     */
    public function setSupplerendeBynavn($supplerende_bynavn)
    {
        if (is_null($supplerende_bynavn)) {
            array_push($this->openAPINullablesSetToNull, 'supplerende_bynavn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplerende_bynavn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplerende_bynavn'] = $supplerende_bynavn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


