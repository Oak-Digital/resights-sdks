<?php
/**
 * AnmaerkningModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AnmaerkningModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AnmaerkningModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AnmaerkningModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'alias_id' => 'mixed',
        'akt_historisk_id' => 'mixed',
        'rettighed_type' => '\OpenAPI\Client\Model\RettighedTypeEnum',
        'rettighed_id' => 'mixed',
        'prioritet_nummer' => 'mixed',
        'haeftelse_rettighed_information' => '\OpenAPI\Client\Model\HaeftelseRettighedInformationModel',
        'servitut_type' => '\OpenAPI\Client\Model\ServitutTypeEnum',
        'meddelelse_type_tekst' => '\OpenAPI\Client\Model\MeddelelseTypeTekstEnum'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'alias_id' => null,
        'akt_historisk_id' => null,
        'rettighed_type' => null,
        'rettighed_id' => null,
        'prioritet_nummer' => null,
        'haeftelse_rettighed_information' => null,
        'servitut_type' => null,
        'meddelelse_type_tekst' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'alias_id' => true,
		'akt_historisk_id' => true,
		'rettighed_type' => false,
		'rettighed_id' => true,
		'prioritet_nummer' => true,
		'haeftelse_rettighed_information' => false,
		'servitut_type' => false,
		'meddelelse_type_tekst' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alias_id' => 'AliasId',
        'akt_historisk_id' => 'AktHistoriskId',
        'rettighed_type' => 'RettighedType',
        'rettighed_id' => 'RettighedId',
        'prioritet_nummer' => 'PrioritetNummer',
        'haeftelse_rettighed_information' => 'HaeftelseRettighedInformation',
        'servitut_type' => 'ServitutType',
        'meddelelse_type_tekst' => 'MeddelelseTypeTekst'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alias_id' => 'setAliasId',
        'akt_historisk_id' => 'setAktHistoriskId',
        'rettighed_type' => 'setRettighedType',
        'rettighed_id' => 'setRettighedId',
        'prioritet_nummer' => 'setPrioritetNummer',
        'haeftelse_rettighed_information' => 'setHaeftelseRettighedInformation',
        'servitut_type' => 'setServitutType',
        'meddelelse_type_tekst' => 'setMeddelelseTypeTekst'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alias_id' => 'getAliasId',
        'akt_historisk_id' => 'getAktHistoriskId',
        'rettighed_type' => 'getRettighedType',
        'rettighed_id' => 'getRettighedId',
        'prioritet_nummer' => 'getPrioritetNummer',
        'haeftelse_rettighed_information' => 'getHaeftelseRettighedInformation',
        'servitut_type' => 'getServitutType',
        'meddelelse_type_tekst' => 'getMeddelelseTypeTekst'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('alias_id', $data ?? [], null);
        $this->setIfExists('akt_historisk_id', $data ?? [], null);
        $this->setIfExists('rettighed_type', $data ?? [], null);
        $this->setIfExists('rettighed_id', $data ?? [], null);
        $this->setIfExists('prioritet_nummer', $data ?? [], null);
        $this->setIfExists('haeftelse_rettighed_information', $data ?? [], null);
        $this->setIfExists('servitut_type', $data ?? [], null);
        $this->setIfExists('meddelelse_type_tekst', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alias_id
     *
     * @return mixed|null
     */
    public function getAliasId()
    {
        return $this->container['alias_id'];
    }

    /**
     * Sets alias_id
     *
     * @param mixed|null $alias_id DokumentAliasIdentifikator
     *
     * @return self
     */
    public function setAliasId($alias_id)
    {
        if (is_null($alias_id)) {
            array_push($this->openAPINullablesSetToNull, 'alias_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alias_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alias_id'] = $alias_id;

        return $this;
    }

    /**
     * Gets akt_historisk_id
     *
     * @return mixed|null
     */
    public function getAktHistoriskId()
    {
        return $this->container['akt_historisk_id'];
    }

    /**
     * Sets akt_historisk_id
     *
     * @param mixed|null $akt_historisk_id AktHistoriskIdentifikator
     *
     * @return self
     */
    public function setAktHistoriskId($akt_historisk_id)
    {
        if (is_null($akt_historisk_id)) {
            array_push($this->openAPINullablesSetToNull, 'akt_historisk_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('akt_historisk_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['akt_historisk_id'] = $akt_historisk_id;

        return $this;
    }

    /**
     * Gets rettighed_type
     *
     * @return \OpenAPI\Client\Model\RettighedTypeEnum|null
     */
    public function getRettighedType()
    {
        return $this->container['rettighed_type'];
    }

    /**
     * Sets rettighed_type
     *
     * @param \OpenAPI\Client\Model\RettighedTypeEnum|null $rettighed_type rettighed_type
     *
     * @return self
     */
    public function setRettighedType($rettighed_type)
    {
        if (is_null($rettighed_type)) {
            throw new \InvalidArgumentException('non-nullable rettighed_type cannot be null');
        }
        $this->container['rettighed_type'] = $rettighed_type;

        return $this;
    }

    /**
     * Gets rettighed_id
     *
     * @return mixed|null
     */
    public function getRettighedId()
    {
        return $this->container['rettighed_id'];
    }

    /**
     * Sets rettighed_id
     *
     * @param mixed|null $rettighed_id Identifikation af en rettighed. Betegnelsen rettighed dÃ¦kker alle de former for sammenkoblinger som et rettighedsdokument (DokumentIdentifikator) kan registrere i forhold til et tinglysningsobjekt.
     *
     * @return self
     */
    public function setRettighedId($rettighed_id)
    {
        if (is_null($rettighed_id)) {
            array_push($this->openAPINullablesSetToNull, 'rettighed_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rettighed_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rettighed_id'] = $rettighed_id;

        return $this;
    }

    /**
     * Gets prioritet_nummer
     *
     * @return mixed|null
     */
    public function getPrioritetNummer()
    {
        return $this->container['prioritet_nummer'];
    }

    /**
     * Sets prioritet_nummer
     *
     * @param mixed|null $prioritet_nummer Angiver det faktiske prioritetsnummer for en rettighed.
     *
     * @return self
     */
    public function setPrioritetNummer($prioritet_nummer)
    {
        if (is_null($prioritet_nummer)) {
            array_push($this->openAPINullablesSetToNull, 'prioritet_nummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prioritet_nummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prioritet_nummer'] = $prioritet_nummer;

        return $this;
    }

    /**
     * Gets haeftelse_rettighed_information
     *
     * @return \OpenAPI\Client\Model\HaeftelseRettighedInformationModel|null
     */
    public function getHaeftelseRettighedInformation()
    {
        return $this->container['haeftelse_rettighed_information'];
    }

    /**
     * Sets haeftelse_rettighed_information
     *
     * @param \OpenAPI\Client\Model\HaeftelseRettighedInformationModel|null $haeftelse_rettighed_information haeftelse_rettighed_information
     *
     * @return self
     */
    public function setHaeftelseRettighedInformation($haeftelse_rettighed_information)
    {
        if (is_null($haeftelse_rettighed_information)) {
            throw new \InvalidArgumentException('non-nullable haeftelse_rettighed_information cannot be null');
        }
        $this->container['haeftelse_rettighed_information'] = $haeftelse_rettighed_information;

        return $this;
    }

    /**
     * Gets servitut_type
     *
     * @return \OpenAPI\Client\Model\ServitutTypeEnum|null
     */
    public function getServitutType()
    {
        return $this->container['servitut_type'];
    }

    /**
     * Sets servitut_type
     *
     * @param \OpenAPI\Client\Model\ServitutTypeEnum|null $servitut_type servitut_type
     *
     * @return self
     */
    public function setServitutType($servitut_type)
    {
        if (is_null($servitut_type)) {
            throw new \InvalidArgumentException('non-nullable servitut_type cannot be null');
        }
        $this->container['servitut_type'] = $servitut_type;

        return $this;
    }

    /**
     * Gets meddelelse_type_tekst
     *
     * @return \OpenAPI\Client\Model\MeddelelseTypeTekstEnum|null
     */
    public function getMeddelelseTypeTekst()
    {
        return $this->container['meddelelse_type_tekst'];
    }

    /**
     * Sets meddelelse_type_tekst
     *
     * @param \OpenAPI\Client\Model\MeddelelseTypeTekstEnum|null $meddelelse_type_tekst meddelelse_type_tekst
     *
     * @return self
     */
    public function setMeddelelseTypeTekst($meddelelse_type_tekst)
    {
        if (is_null($meddelelse_type_tekst)) {
            throw new \InvalidArgumentException('non-nullable meddelelse_type_tekst cannot be null');
        }
        $this->container['meddelelse_type_tekst'] = $meddelelse_type_tekst;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


