<?php
/**
 * MatrikelStrukturModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MatrikelStrukturModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MatrikelStrukturModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MatrikelStrukturModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ejerlav_navn' => 'mixed',
        'ejerlav_kode' => 'mixed',
        'matrikelnummer' => 'mixed',
        'faelleslod' => '\OpenAPI\Client\Model\BroekModel',
        'delareal' => '\OpenAPI\Client\Model\DelarealModel',
        'faelles_ejendom_id' => 'mixed',
        'areal' => 'mixed',
        'dato_for_godkendelse' => 'mixed',
        'vejareal' => 'mixed',
        'retskreds' => 'mixed',
        'notering_tekst_samling' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ejerlav_navn' => null,
        'ejerlav_kode' => null,
        'matrikelnummer' => null,
        'faelleslod' => null,
        'delareal' => null,
        'faelles_ejendom_id' => null,
        'areal' => null,
        'dato_for_godkendelse' => 'date',
        'vejareal' => null,
        'retskreds' => null,
        'notering_tekst_samling' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ejerlav_navn' => true,
		'ejerlav_kode' => true,
		'matrikelnummer' => true,
		'faelleslod' => false,
		'delareal' => false,
		'faelles_ejendom_id' => true,
		'areal' => true,
		'dato_for_godkendelse' => true,
		'vejareal' => true,
		'retskreds' => true,
		'notering_tekst_samling' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ejerlav_navn' => 'EjerlavNavn',
        'ejerlav_kode' => 'EjerlavKode',
        'matrikelnummer' => 'Matrikelnummer',
        'faelleslod' => 'Faelleslod',
        'delareal' => 'Delareal',
        'faelles_ejendom_id' => 'FaellesEjendomId',
        'areal' => 'Areal',
        'dato_for_godkendelse' => 'DatoForGodkendelse',
        'vejareal' => 'Vejareal',
        'retskreds' => 'Retskreds',
        'notering_tekst_samling' => 'NoteringTekstSamling'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ejerlav_navn' => 'setEjerlavNavn',
        'ejerlav_kode' => 'setEjerlavKode',
        'matrikelnummer' => 'setMatrikelnummer',
        'faelleslod' => 'setFaelleslod',
        'delareal' => 'setDelareal',
        'faelles_ejendom_id' => 'setFaellesEjendomId',
        'areal' => 'setAreal',
        'dato_for_godkendelse' => 'setDatoForGodkendelse',
        'vejareal' => 'setVejareal',
        'retskreds' => 'setRetskreds',
        'notering_tekst_samling' => 'setNoteringTekstSamling'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ejerlav_navn' => 'getEjerlavNavn',
        'ejerlav_kode' => 'getEjerlavKode',
        'matrikelnummer' => 'getMatrikelnummer',
        'faelleslod' => 'getFaelleslod',
        'delareal' => 'getDelareal',
        'faelles_ejendom_id' => 'getFaellesEjendomId',
        'areal' => 'getAreal',
        'dato_for_godkendelse' => 'getDatoForGodkendelse',
        'vejareal' => 'getVejareal',
        'retskreds' => 'getRetskreds',
        'notering_tekst_samling' => 'getNoteringTekstSamling'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ejerlav_navn', $data ?? [], null);
        $this->setIfExists('ejerlav_kode', $data ?? [], null);
        $this->setIfExists('matrikelnummer', $data ?? [], null);
        $this->setIfExists('faelleslod', $data ?? [], null);
        $this->setIfExists('delareal', $data ?? [], null);
        $this->setIfExists('faelles_ejendom_id', $data ?? [], null);
        $this->setIfExists('areal', $data ?? [], null);
        $this->setIfExists('dato_for_godkendelse', $data ?? [], null);
        $this->setIfExists('vejareal', $data ?? [], null);
        $this->setIfExists('retskreds', $data ?? [], null);
        $this->setIfExists('notering_tekst_samling', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['areal'] === null) {
            $invalidProperties[] = "'areal' can't be null";
        }
        if ($this->container['dato_for_godkendelse'] === null) {
            $invalidProperties[] = "'dato_for_godkendelse' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ejerlav_navn
     *
     * @return mixed|null
     */
    public function getEjerlavNavn()
    {
        return $this->container['ejerlav_navn'];
    }

    /**
     * Sets ejerlav_navn
     *
     * @param mixed|null $ejerlav_navn Den tekstmÃ¦ssige betegnelse af et ejerlav. Ejerlavsbetegnelsen er ikke entydig.
     *
     * @return self
     */
    public function setEjerlavNavn($ejerlav_navn)
    {
        if (is_null($ejerlav_navn)) {
            array_push($this->openAPINullablesSetToNull, 'ejerlav_navn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ejerlav_navn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ejerlav_navn'] = $ejerlav_navn;

        return $this;
    }

    /**
     * Gets ejerlav_kode
     *
     * @return mixed|null
     */
    public function getEjerlavKode()
    {
        return $this->container['ejerlav_kode'];
    }

    /**
     * Sets ejerlav_kode
     *
     * @param mixed|null $ejerlav_kode En pÃ¥ landsbasis entydig identifikation af et ejerlav.
     *
     * @return self
     */
    public function setEjerlavKode($ejerlav_kode)
    {
        if (is_null($ejerlav_kode)) {
            array_push($this->openAPINullablesSetToNull, 'ejerlav_kode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ejerlav_kode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ejerlav_kode'] = $ejerlav_kode;

        return $this;
    }

    /**
     * Gets matrikelnummer
     *
     * @return mixed|null
     */
    public function getMatrikelnummer()
    {
        return $this->container['matrikelnummer'];
    }

    /**
     * Sets matrikelnummer
     *
     * @param mixed|null $matrikelnummer Entydig identifikation af en flade/parcel (matrikel) inden for et ejerlav. Ikke entydig pÃ¥ landsplan uden LandsejerlavsKoden
     *
     * @return self
     */
    public function setMatrikelnummer($matrikelnummer)
    {
        if (is_null($matrikelnummer)) {
            array_push($this->openAPINullablesSetToNull, 'matrikelnummer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('matrikelnummer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['matrikelnummer'] = $matrikelnummer;

        return $this;
    }

    /**
     * Gets faelleslod
     *
     * @return \OpenAPI\Client\Model\BroekModel|null
     */
    public function getFaelleslod()
    {
        return $this->container['faelleslod'];
    }

    /**
     * Sets faelleslod
     *
     * @param \OpenAPI\Client\Model\BroekModel|null $faelleslod faelleslod
     *
     * @return self
     */
    public function setFaelleslod($faelleslod)
    {
        if (is_null($faelleslod)) {
            throw new \InvalidArgumentException('non-nullable faelleslod cannot be null');
        }
        $this->container['faelleslod'] = $faelleslod;

        return $this;
    }

    /**
     * Gets delareal
     *
     * @return \OpenAPI\Client\Model\DelarealModel|null
     */
    public function getDelareal()
    {
        return $this->container['delareal'];
    }

    /**
     * Sets delareal
     *
     * @param \OpenAPI\Client\Model\DelarealModel|null $delareal delareal
     *
     * @return self
     */
    public function setDelareal($delareal)
    {
        if (is_null($delareal)) {
            throw new \InvalidArgumentException('non-nullable delareal cannot be null');
        }
        $this->container['delareal'] = $delareal;

        return $this;
    }

    /**
     * Gets faelles_ejendom_id
     *
     * @return mixed|null
     */
    public function getFaellesEjendomId()
    {
        return $this->container['faelles_ejendom_id'];
    }

    /**
     * Sets faelles_ejendom_id
     *
     * @param mixed|null $faelles_ejendom_id OgsÃ¥ kaldet e-ref. UUID der identificere en ejendom pÃ¥ tvÃ¦rs af alle ejendomsregistre som fx tinglysning, kms, skat mv.
     *
     * @return self
     */
    public function setFaellesEjendomId($faelles_ejendom_id)
    {
        if (is_null($faelles_ejendom_id)) {
            array_push($this->openAPINullablesSetToNull, 'faelles_ejendom_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('faelles_ejendom_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['faelles_ejendom_id'] = $faelles_ejendom_id;

        return $this;
    }

    /**
     * Gets areal
     *
     * @return mixed
     */
    public function getAreal()
    {
        return $this->container['areal'];
    }

    /**
     * Sets areal
     *
     * @param mixed $areal Indeholder grundarealets stÃ¸rrelse angivet for matrikel. Informationen er en berigelse, der sket under prÃ¸velsen. Informationen stammer fra Tinglysningsretten.
     *
     * @return self
     */
    public function setAreal($areal)
    {
        if (is_null($areal)) {
            array_push($this->openAPINullablesSetToNull, 'areal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('areal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['areal'] = $areal;

        return $this;
    }

    /**
     * Gets dato_for_godkendelse
     *
     * @return mixed
     */
    public function getDatoForGodkendelse()
    {
        return $this->container['dato_for_godkendelse'];
    }

    /**
     * Sets dato_for_godkendelse
     *
     * @param mixed $dato_for_godkendelse Indeholder matriklens approbationsdato, dvs. dato for godkendelse.
     *
     * @return self
     */
    public function setDatoForGodkendelse($dato_for_godkendelse)
    {
        if (is_null($dato_for_godkendelse)) {
            array_push($this->openAPINullablesSetToNull, 'dato_for_godkendelse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dato_for_godkendelse', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dato_for_godkendelse'] = $dato_for_godkendelse;

        return $this;
    }

    /**
     * Gets vejareal
     *
     * @return mixed|null
     */
    public function getVejareal()
    {
        return $this->container['vejareal'];
    }

    /**
     * Sets vejareal
     *
     * @param mixed|null $vejareal Det areal af et jordstykke (matrikel), der udgÃ¸res af vej. VÃ¦rdien angives som heltal i kvadratmeter.
     *
     * @return self
     */
    public function setVejareal($vejareal)
    {
        if (is_null($vejareal)) {
            array_push($this->openAPINullablesSetToNull, 'vejareal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vejareal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vejareal'] = $vejareal;

        return $this;
    }

    /**
     * Gets retskreds
     *
     * @return mixed|null
     */
    public function getRetskreds()
    {
        return $this->container['retskreds'];
    }

    /**
     * Sets retskreds
     *
     * @param mixed|null $retskreds Den af de tidligere 82 retskredse, som ejendommen tilhÃ¸rte.
     *
     * @return self
     */
    public function setRetskreds($retskreds)
    {
        if (is_null($retskreds)) {
            array_push($this->openAPINullablesSetToNull, 'retskreds');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('retskreds', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['retskreds'] = $retskreds;

        return $this;
    }

    /**
     * Gets notering_tekst_samling
     *
     * @return mixed|null
     */
    public function getNoteringTekstSamling()
    {
        return $this->container['notering_tekst_samling'];
    }

    /**
     * Sets notering_tekst_samling
     *
     * @param mixed|null $notering_tekst_samling Samling af noteringer pÃ¥ matriklen
     *
     * @return self
     */
    public function setNoteringTekstSamling($notering_tekst_samling)
    {
        if (is_null($notering_tekst_samling)) {
            array_push($this->openAPINullablesSetToNull, 'notering_tekst_samling');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notering_tekst_samling', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notering_tekst_samling'] = $notering_tekst_samling;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


