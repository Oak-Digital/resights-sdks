<?php
/**
 * BBRStaircaseResponseTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Resights API
 *
 * <img src=\"static/resights/resights-logo.png\" alt=\"Resights Logo\" style=\"position: absolute; top: 52px; right: 36px\" align=\"right\" width=\"240\"> <a href=\"/docs\">Swagger</a> | <a href=\"/redoc\">Redoc</a> <br> <br> <div><b>Welcome API ðŸ‘‹</b></div> <br>  <br>
 *
 * The version of the OpenAPI document: 2.0
 * Contact: mikkel@resights.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * BBRStaircaseResponseTest Class Doc Comment
 *
 * @category    Class
 * @description Definition: Opgang indeholder oplysninger omkring en Opgang og har en relationen til Ã©n Bygning.  Beskrivelse: En opgang er et mellemled mellem en Bygning og en Enhed. En Enhed relaterer til Ã©n Opgang og en Opgang relaterer til Ã©n Bygning.  BemÃ¦rkninger: En Bygning kan have en eller flere Opgange, men en Opgang kan kun ligge i Ã©n Bygning. Derfor er relationerne mellem Bygning og Opgang 0..* og en Opgang skal altid have en relation til Ã©n Bygning.  Tilsvarende gÃ¦lder at der kan vÃ¦re en eller flere Enheder i en Opgang, men at en Enhed ikke kan have mere end en Opgang. Derfor er relationen mellem Opgang og Enhed 0..* og en Enhed skal altid have en relation til Ã©n Opgang.
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class BBRStaircaseResponseTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "BBRStaircaseResponse"
     */
    public function testBBRStaircaseResponse()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "id"
     */
    public function testPropertyId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "namespace"
     */
    public function testPropertyNamespace()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "status"
     */
    public function testPropertyStatus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "business_process"
     */
    public function testPropertyBusinessProcess()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "business_area"
     */
    public function testPropertyBusinessArea()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "business_event"
     */
    public function testPropertyBusinessEvent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "registration_from"
     */
    public function testPropertyRegistrationFrom()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "registration_to"
     */
    public function testPropertyRegistrationTo()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "registration_actor"
     */
    public function testPropertyRegistrationActor()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "effect_from"
     */
    public function testPropertyEffectFrom()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "effect_to"
     */
    public function testPropertyEffectTo()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "effect_actor"
     */
    public function testPropertyEffectActor()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "municipality_code"
     */
    public function testPropertyMunicipalityCode()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "opg020_elevator"
     */
    public function testPropertyOpg020Elevator()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "opg021_access_address_function"
     */
    public function testPropertyOpg021AccessAddressFunction()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "opg500_note"
     */
    public function testPropertyOpg500Note()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "building_id"
     */
    public function testPropertyBuildingId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "access_address"
     */
    public function testPropertyAccessAddress()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
